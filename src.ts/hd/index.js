/*!
 * bcoin@2.2.0 - Bitcoin bike-shed
 * Copyright (c) 2023, Fedor Indutny (MIT)
 * https://github.com/bcoin-org/bcoin
 *
 * License for bcoin@2.2.0:
 *
 * This software is licensed under the MIT License.
 *
 * Copyright (c) 2014-2015, Fedor Indutny (https://github.com/indutny)
 *
 * Copyright (c) 2014-2017, Christopher Jeffrey (https://github.com/chjj)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * License for bsert@0.0.10:
 *
 * This software is licensed under the MIT License.
 *
 * Copyright (c) 2018, Christopher Jeffrey (https://github.com/chjj)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * License for blru@0.1.6:
 *
 * This software is licensed under the MIT License.
 *
 * Copyright (c) 2017, Christopher Jeffrey (https://github.com/chjj)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * License for bufio@1.0.7:
 *
 * This software is licensed under the MIT License.
 *
 * Copyright (c) 2017, Christopher Jeffrey (https://github.com/chjj)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * License for bcrypto@5.5.1:
 *
 * This software is licensed under the MIT License.
 *
 * Copyright (c) 2017-2019, Christopher Jeffrey (https://github.com/chjj)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on indutny/elliptic:
 *
 * https://github.com/indutny/elliptic
 *
 * This software is licensed under the MIT License.
 *
 * Copyright Fedor Indutny, 2014.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on indutny/hash.js:
 *
 * https://github.com/indutny/hash.js
 *
 * This software is licensed under the MIT License.
 *
 * Copyright Fedor Indutny, 2014.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on indutny/bn.js:
 *
 * https://github.com/indutny/bn.js
 *
 * This software is licensed under the MIT License.
 *
 * Copyright Fedor Indutny, 2015.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on indutny/hmac-drbg:
 *
 * https://github.com/indutny/hmac-drbg
 *
 * This software is licensed under the MIT License.
 *
 * Copyright Fedor Indutny, 2017.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on indutny/minimalistic-crypto-utils:
 *
 * https://github.com/indutny/minimalistic-crypto-utils
 *
 * This software is licensed under the MIT License.
 *
 * Copyright Fedor Indutny, 2017.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on isaacs/inherits:
 *
 * https://github.com/isaacs/inherits
 *
 * The ISC License
 *
 * Copyright (c) Isaac Z. Schlueter
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on cryptocoinjs/secp256k1-node:
 *
 * https://github.com/cryptocoinjs/secp256k1-node
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2016 secp256k1-node contributors
 *
 * Parts of this software are based on bn.js, elliptic, hash.js Copyright (c)
 * 2014-2016 Fedor Indutny
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on bitcoin-core/secp256k1:
 *
 * https://github.com/bitcoin-core/secp256k1
 *
 * Copyright (c) 2013 Pieter Wuille
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on BLAKE2/BLAKE2:
 *
 * https://github.com/BLAKE2/BLAKE2
 *
 * Creative Commons Legal Code
 *
 * CC0 1.0 Universal
 *
 * CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL
 * SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN ATTORNEY-CLIENT
 * RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN "AS-IS" BASIS.
 * CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE USE OF THIS DOCUMENT OR
 * THE INFORMATION OR WORKS PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR
 * DAMAGES RESULTING FROM THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
 * PROVIDED HEREUNDER.
 *
 * Statement of Purpose
 *
 * The laws of most jurisdictions throughout the world automatically confer
 * exclusive Copyright and Related Rights (defined below) upon the creator and
 * subsequent owner(s) (each and all, an "owner") of an original work of
 * authorship and/or a database (each, a "Work").
 *
 * Certain owners wish to permanently relinquish those rights to a Work for the
 * purpose of contributing to a commons of creative, cultural and scientific
 * works ("Commons") that the public can reliably and without fear of later
 * claims of infringement build upon, modify, incorporate in other works, reuse
 * and redistribute as freely as possible in any form whatsoever and for any
 * purposes, including without limitation commercial purposes. These owners may
 * contribute to the Commons to promote the ideal of a free culture and the
 * further production of creative, cultural and scientific works, or to gain
 * reputation or greater distribution for their Work in part through the use and
 * efforts of others.
 *
 * For these and/or other purposes and motivations, and without any expectation
 * of additional consideration or compensation, the person associating CC0 with
 * a Work (the "Affirmer"), to the extent that he or she is an owner of
 * Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to
 * the Work and publicly distribute the Work under its terms, with knowledge of
 * his or her Copyright and Related Rights in the Work and the meaning and
 * intended legal effect of CC0 on those rights.
 *
 * 1. Copyright and Related Rights. A Work made available under CC0 may be
 * protected by copyright and related or neighboring rights ("Copyright and
 * Related Rights"). Copyright and Related Rights include, but are not limited
 * to, the following:
 *
 * i. the right to reproduce, adapt, distribute, perform, display, communicate,
 * and translate a Work; ii. moral rights retained by the original author(s)
 * and/or performer(s); iii. publicity and privacy rights pertaining to a
 * person's image or likeness depicted in a Work; iv. rights protecting against
 * unfair competition in regards to a Work, subject to the limitations in
 * paragraph 4(a), below; v. rights protecting the extraction, dissemination,
 * use and reuse of data in a Work; vi. database rights (such as those arising
 * under Directive 96/9/EC of the European Parliament and of the Council of 11
 * March 1996 on the legal protection of databases, and under any national
 * implementation thereof, including any amended or successor version of such
 * directive); and vii. other similar, equivalent or corresponding rights
 * throughout the world based on applicable law or treaty, and any national
 * implementations thereof.
 *
 * 2. Waiver. To the greatest extent permitted by, but not in contravention of,
 * applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and
 * unconditionally waives, abandons, and surrenders all of Affirmer's Copyright
 * and Related Rights and associated claims and causes of action, whether now
 * known or unknown (including existing as well as future claims and causes of
 * action), in the Work (i) in all territories worldwide, (ii) for the maximum
 * duration provided by applicable law or treaty (including future time
 * extensions), (iii) in any current or future medium and for any number of
 * copies, and (iv) for any purpose whatsoever, including without limitation
 * commercial, advertising or promotional purposes (the "Waiver"). Affirmer
 * makes the Waiver for the benefit of each member of the public at large and to
 * the detriment of Affirmer's heirs and successors, fully intending that such
 * Waiver shall not be subject to revocation, rescission, cancellation,
 * termination, or any other legal or equitable action to disrupt the quiet
 * enjoyment of the Work by the public as contemplated by Affirmer's express
 * Statement of Purpose.
 *
 * 3. Public License Fallback. Should any part of the Waiver for any reason be
 * judged legally invalid or ineffective under applicable law, then the Waiver
 * shall be preserved to the maximum extent permitted taking into account
 * Affirmer's express Statement of Purpose. In addition, to the extent the
 * Waiver is so judged Affirmer hereby grants to each affected person a
 * royalty-free, non transferable, non sublicensable, non exclusive, irrevocable
 * and unconditional license to exercise Affirmer's Copyright and Related Rights
 * in the Work (i) in all territories worldwide, (ii) for the maximum duration
 * provided by applicable law or treaty (including future time extensions),
 * (iii) in any current or future medium and for any number of copies, and (iv)
 * for any purpose whatsoever, including without limitation commercial,
 * advertising or promotional purposes (the "License"). The License shall be
 * deemed effective as of the date CC0 was applied by Affirmer to the Work.
 * Should any part of the License for any reason be judged legally invalid or
 * ineffective under applicable law, such partial invalidity or ineffectiveness
 * shall not invalidate the remainder of the License, and in such case Affirmer
 * hereby affirms that he or she will not (i) exercise any of his or her
 * remaining Copyright and Related Rights in the Work or (ii) assert any
 * associated claims and causes of action with respect to the Work, in either
 * case contrary to Affirmer's express Statement of Purpose.
 *
 * 4. Limitations and Disclaimers.
 *
 * a. No trademark or patent rights held by Affirmer are waived, abandoned,
 * surrendered, licensed or otherwise affected by this document. b. Affirmer
 * offers the Work as-is and makes no representations or warranties of any kind
 * concerning the Work, express, implied, statutory or otherwise, including
 * without limitation warranties of title, merchantability, fitness for a
 * particular purpose, non infringement, or the absence of latent or other
 * defects, accuracy, or the present or absence of errors, whether or not
 * discoverable, all to the greatest extent permissible under applicable law. c.
 * Affirmer disclaims responsibility for clearing rights of other persons that
 * may apply to the Work or any use thereof, including without limitation any
 * person's Copyright and Related Rights in the Work. Further, Affirmer
 * disclaims responsibility for obtaining any necessary consents, permissions or
 * other rights required for any use of the Work. d. Affirmer understands and
 * acknowledges that Creative Commons is not a party to this document and has no
 * duty or obligation with respect to this CC0 or use of the Work.
 *
 * ---
 *
 * Parts of this software are based on chacha20-simple:
 *
 * http://chacha20.insanecoding.org/
 *
 * Copyright (C) 2014 insane coder
 *
 * Permission to use, copy, modify, and distribute this software for any purpose
 * with or without fee is hereby granted, provided that the above copyright
 * notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on floodyberry/ed25519-donna:
 *
 * https://github.com/floodyberry/ed25519-donna
 *
 * Public domain by Andrew M. <liquidsun@gmail.com>
 *
 * Ed25519 reference implementation using Ed25519-donna
 *
 * ---
 *
 * Parts of this software are based on openssl/openssl:
 *
 * https://github.com/openssl/openssl
 *
 * OpenSSL License
 *
 * Copyright (c) 1998-2018 The OpenSSL Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this software must
 * display the following acknowledgment: "This product includes software
 * developed by the OpenSSL Project for use in the OpenSSL Toolkit.
 * (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 * endorse or promote products derived from this software without prior written
 * permission. For written permission, please contact openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL" nor may
 * "OpenSSL" appear in their names without prior written permission of the
 * OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 * acknowledgment: "This product includes software developed by the OpenSSL
 * Project for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY EXPRESSED
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL THE OpenSSL PROJECT OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com). This product includes software written by Tim Hudson
 * (tjh@cryptsoft.com).
 *
 * Original SSLeay License
 *
 * Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com) All rights reserved.
 *
 * This package is an SSL implementation written by Eric Young
 * (eay@cryptsoft.com). The implementation was written so as to conform with
 * Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as the
 * following conditions are aheared to. The following conditions apply to all
 * code found in this distribution, be it the RC4, RSA, lhash, DES, etc., code;
 * not just the SSL code. The SSL documentation included with this distribution
 * is covered by the same copyright terms except that the holder is Tim Hudson
 * (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in the code
 * are not to be removed. If this package is used in a product, Eric Young
 * should be given attribution as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or in
 * documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the copyright notice, this list
 * of conditions and the following disclaimer. 2. Redistributions in binary form
 * must reproduce the above copyright notice, this list of conditions and the
 * following disclaimer in the documentation and/or other materials provided
 * with the distribution. 3. All advertising materials mentioning features or
 * use of this software must display the following acknowledgement: "This
 * product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com)" The word 'cryptographic' can be left out if the rouines
 * from the library being used are not cryptographic related :-). 4. If you
 * include any Windows specific code (or a derivative thereof) from the apps
 * directory (application code) you must include an acknowledgement: "This
 * product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 * EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed. i.e. this code cannot simply be
 * copied and put under another distribution licence [including the GNU Public
 * Licence.]
 *
 * ---
 *
 * Parts of this software are based on bitcoin/bitcoin:
 *
 * https://github.com/bitcoin/bitcoin
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2009-2018 The Bitcoin Core developers Copyright (c) 2009-2018
 * Bitcoin Developers
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on rhash/RHash:
 *
 * https://github.com/rhash/RHash
 *
 * Copyright (c) 2005-2014 Aleksey Kravchenko <rhash.admin@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so.
 *
 * The Software is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Use this program at your own risk!
 *
 * ---
 *
 * Parts of this software are based on emn178/js-sha3:
 *
 * https://github.com/emn178/js-sha3
 *
 * Copyright 2015-2018 Chen, Yi-Cyuan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on floodyberry/poly1305-donna:
 *
 * https://github.com/floodyberry/poly1305-donna
 *
 * Public domain by Andrew M. <liquidsun@gmail.com>
 *
 * Alternatively MIT (http://www.opensource.org/licenses/mit-license.php)
 *
 * ---
 *
 * Parts of this software are based on Tarsnap/scrypt:
 *
 * https://github.com/Tarsnap/scrypt
 *
 * The included code and documentation ("scrypt") is distributed under the
 * following terms:
 *
 * Copyright 2005-2016 Colin Percival. All rights reserved. Copyright 2005-2016
 * Tarsnap Backup Inc. All rights reserved. Copyright 2014 Sean Kelly. All
 * rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer. 2. Redistributions in
 * binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ---
 *
 * Parts of this software are based on ed448-goldilocks:
 *
 * http://ed448goldilocks.sourceforge.net/
 *
 * The Python bindings are Copyright 2017 John-Mark Gurney, and are provided
 * under a BSD license as described in python/edgold/ed448.py
 *
 * Certain sections of code are public domain or CC0, as marked.
 *
 * Earlier versions of this project used small amounts of code which were
 *
 * Copyright (c) 2011 Stanford University Copyright (c) 2011 Mike Hamburg
 *
 * but I believe that all of this code has now been replaced.
 *
 * The bulk of this library is Copyright (c) 2014-2017 Cryptography Research,
 * Inc. and licensed under the following MIT license.
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2017 Cryptography Research, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on golang/go and golang/crypto:
 *
 * https://github.com/golang/go
 *
 * https://github.com/golang/crypto
 *
 * Copyright (c) 2009 The Go Authors. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. * Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials provided
 * with the distribution. * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * ---
 *
 * Parts of this software are based on ElementsProject/secp256k1-zkp:
 *
 * https://github.com/ElementsProject/secp256k1-zkp
 *
 * Copyright (c) 2013 Pieter Wuille
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on sipa/bip-schnorr:
 *
 * https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr/reference.py
 *
 * Copyright (c) 2018-2019, Pieter Wuille (2-clause BSD License)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * ---
 *
 * Parts of this software are based on sipa/bech32:
 *
 * https://github.com/sipa/bech32
 *
 * Copyright (c) 2017 Pieter Wuille
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on Bitcoin-ABC/bitcoin-abc:
 *
 * https://github.com/Bitcoin-ABC/bitcoin-abc
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2009-2019 The Bitcoin Developers Copyright (c) 2009-2017 The
 * Bitcoin Core developers
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on v8/v8:
 *
 * https://github.com/v8/v8
 *
 * Copyright 2014, the V8 project authors. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * * Neither the name of Google Inc. nor the names of its contributors may be
 * used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * ---
 *
 * Parts of this software are based on RustCrypto/hashes:
 *
 * https://github.com/RustCrypto/hashes
 *
 * Copyright (c) 2016-2018, The RustCrypto Authors (MIT License).
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on aead/camellia:
 *
 * https://github.com/aead/camellia
 *
 * Copyright (c) 2016, Andreas Auernhammer (MIT License).
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Andreas Auernhammer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on indutny/des.js:
 *
 * https://github.com/indutny/des.js
 *
 * This software is licensed under the MIT License.
 *
 * Copyright Fedor Indutny, 2015.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on crypto-browserify/EVP_BytesToKey:
 *
 * https://github.com/crypto-browserify/EVP_BytesToKey
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 crypto-browserify contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on joyent/node-bcrypt-pbkdf:
 *
 * https://github.com/joyent/node-bcrypt-pbkdf
 *
 * Credit for the actual porting work goes to: Devi Mandiri <me@devi.web.id>
 *
 * The Blowfish portions are under the following license:
 *
 * Blowfish block cipher for OpenBSD Copyright 1997 Niels Provos
 * <provos@physnet.uni-hamburg.de> All rights reserved.
 *
 * Implementation advice by David Mazieres <dm@lcs.mit.edu>.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The bcrypt_pbkdf portions are under the following license:
 *
 * Copyright (c) 2013 Ted Unangst <tedu@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any purpose
 * with or without fee is hereby granted, provided that the above copyright
 * notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 * Performance improvements (Javascript-specific):
 *
 * Copyright 2016, Joyent Inc Author: Alex Wilson <alex.wilson@joyent.com>
 *
 * Permission to use, copy, modify, and distribute this software for any purpose
 * with or without fee is hereby granted, provided that the above copyright
 * notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 * ---
 *
 * Parts of this software are based on gnutls/nettle:
 *
 * https://github.com/gnutls/nettle
 *
 * Copyright (c) 1998-2019, Niels Möller and Contributors
 *
 * GNU GENERAL PUBLIC LICENSE Version 2, June 1991
 *
 * Copyright (C) 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and
 * distribute verbatim copies of this license document, but changing it is not
 * allowed.
 *
 * Preamble
 *
 * The licenses for most software are designed to take away your freedom to
 * share and change it.  By contrast, the GNU General Public License is intended
 * to guarantee your freedom to share and change free software--to make sure the
 * software is free for all its users.  This General Public License applies to
 * most of the Free Software Foundation's software and to any other program
 * whose authors commit to using it.  (Some other Free Software Foundation
 * software is covered by the GNU Lesser General Public License instead.)  You
 * can apply it to your programs, too.
 *
 * When we speak of free software, we are referring to freedom, not price.  Our
 * General Public Licenses are designed to make sure that you have the freedom
 * to distribute copies of free software (and charge for this service if you
 * wish), that you receive source code or can get it if you want it, that you
 * can change the software or use pieces of it in new free programs; and that
 * you know you can do these things.
 *
 * To protect your rights, we need to make restrictions that forbid anyone to
 * deny you these rights or to ask you to surrender the rights.  These
 * restrictions translate to certain responsibilities for you if you distribute
 * copies of the software, or if you modify it.
 *
 * For example, if you distribute copies of such a program, whether gratis or
 * for a fee, you must give the recipients all the rights that you have.  You
 * must make sure that they, too, receive or can get the source code.  And you
 * must show them these terms so they know their rights.
 *
 * We protect your rights with two steps: (1) copyright the software, and (2)
 * offer you this license which gives you legal permission to copy, distribute
 * and/or modify the software.
 *
 * Also, for each author's protection and ours, we want to make certain that
 * everyone understands that there is no warranty for this free software.  If
 * the software is modified by someone else and passed on, we want its
 * recipients to know that what they have is not the original, so that any
 * problems introduced by others will not reflect on the original authors'
 * reputations.
 *
 * Finally, any free program is threatened constantly by software patents.  We
 * wish to avoid the danger that redistributors of a free program will
 * individually obtain patent licenses, in effect making the program
 * proprietary. To prevent this, we have made it clear that any patent must be
 * licensed for everyone's free use or not licensed at all.
 *
 * The precise terms and conditions for copying, distribution and modification
 * follow.
 *
 * GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND
 * MODIFICATION
 *
 * 0. This License applies to any program or other work which contains a notice
 * placed by the copyright holder saying it may be distributed under the terms
 * of this General Public License.  The "Program", below, refers to any such
 * program or work, and a "work based on the Program" means either the Program
 * or any derivative work under copyright law: that is to say, a work containing
 * the Program or a portion of it, either verbatim or with modifications and/or
 * translated into another language.  (Hereinafter, translation is included
 * without limitation in the term "modification".)  Each licensee is addressed
 * as "you".
 *
 * Activities other than copying, distribution and modification are not covered
 * by this License; they are outside its scope.  The act of running the Program
 * is not restricted, and the output from the Program is covered only if its
 * contents constitute a work based on the Program (independent of having been
 * made by running the Program).  Whether that is true depends on what the
 * Program does.
 *
 * 1. You may copy and distribute verbatim copies of the Program's source code
 * as you receive it, in any medium, provided that you conspicuously and
 * appropriately publish on each copy an appropriate copyright notice and
 * disclaimer of warranty; keep intact all the notices that refer to this
 * License and to the absence of any warranty; and give any other recipients of
 * the Program a copy of this License along with the Program.
 *
 * You may charge a fee for the physical act of transferring a copy, and you may
 * at your option offer warranty protection in exchange for a fee.
 *
 * 2. You may modify your copy or copies of the Program or any portion of it,
 * thus forming a work based on the Program, and copy and distribute such
 * modifications or work under the terms of Section 1 above, provided that you
 * also meet all of these conditions:
 *
 * a) You must cause the modified files to carry prominent notices stating that
 * you changed the files and the date of any change.
 *
 * b) You must cause any work that you distribute or publish, that in whole or
 * in part contains or is derived from the Program or any part thereof, to be
 * licensed as a whole at no charge to all third parties under the terms of this
 * License.
 *
 * c) If the modified program normally reads commands interactively when run,
 * you must cause it, when started running for such interactive use in the most
 * ordinary way, to print or display an announcement including an appropriate
 * copyright notice and a notice that there is no warranty (or else, saying that
 * you provide a warranty) and that users may redistribute the program under
 * these conditions, and telling the user how to view a copy of this License. 
 * (Exception: if the Program itself is interactive but does not normally print
 * such an announcement, your work based on the Program is not required to print
 * an announcement.)
 *
 * These requirements apply to the modified work as a whole.  If identifiable
 * sections of that work are not derived from the Program, and can be reasonably
 * considered independent and separate works in themselves, then this License,
 * and its terms, do not apply to those sections when you distribute them as
 * separate works.  But when you distribute the same sections as part of a whole
 * which is a work based on the Program, the distribution of the whole must be
 * on the terms of this License, whose permissions for other licensees extend to
 * the entire whole, and thus to each and every part regardless of who wrote it.
 *
 * Thus, it is not the intent of this section to claim rights or contest your
 * rights to work written entirely by you; rather, the intent is to exercise the
 * right to control the distribution of derivative or collective works based on
 * the Program.
 *
 * In addition, mere aggregation of another work not based on the Program with
 * the Program (or with a work based on the Program) on a volume of a storage or
 * distribution medium does not bring the other work under the scope of this
 * License.
 *
 * 3. You may copy and distribute the Program (or a work based on it, under
 * Section 2) in object code or executable form under the terms of Sections 1
 * and 2 above provided that you also do one of the following:
 *
 * a) Accompany it with the complete corresponding machine-readable source code,
 * which must be distributed under the terms of Sections 1 and 2 above on a
 * medium customarily used for software interchange; or,
 *
 * b) Accompany it with a written offer, valid for at least three years, to give
 * any third party, for a charge no more than your cost of physically performing
 * source distribution, a complete machine-readable copy of the corresponding
 * source code, to be distributed under the terms of Sections 1 and 2 above on a
 * medium customarily used for software interchange; or,
 *
 * c) Accompany it with the information you received as to the offer to
 * distribute corresponding source code.  (This alternative is allowed only for
 * noncommercial distribution and only if you received the program in object
 * code or executable form with such an offer, in accord with Subsection b
 * above.)
 *
 * The source code for a work means the preferred form of the work for making
 * modifications to it.  For an executable work, complete source code means all
 * the source code for all modules it contains, plus any associated interface
 * definition files, plus the scripts used to control compilation and
 * installation of the executable.  However, as a special exception, the source
 * code distributed need not include anything that is normally distributed (in
 * either source or binary form) with the major components (compiler, kernel,
 * and so on) of the operating system on which the executable runs, unless that
 * component itself accompanies the executable.
 *
 * If distribution of executable or object code is made by offering access to
 * copy from a designated place, then offering equivalent access to copy the
 * source code from the same place counts as distribution of the source code,
 * even though third parties are not compelled to copy the source along with the
 * object code.
 *
 * 4. You may not copy, modify, sublicense, or distribute the Program except as
 * expressly provided under this License.  Any attempt otherwise to copy,
 * modify, sublicense or distribute the Program is void, and will automatically
 * terminate your rights under this License.  However, parties who have received
 * copies, or rights, from you under this License will not have their licenses
 * terminated so long as such parties remain in full compliance.
 *
 * 5. You are not required to accept this License, since you have not signed it.
 * However, nothing else grants you permission to modify or distribute the
 * Program or its derivative works.  These actions are prohibited by law if you
 * do not accept this License.  Therefore, by modifying or distributing the
 * Program (or any work based on the Program), you indicate your acceptance of
 * this License to do so, and all its terms and conditions for copying,
 * distributing or modifying the Program or works based on it.
 *
 * 6. Each time you redistribute the Program (or any work based on the Program),
 * the recipient automatically receives a license from the original licensor to
 * copy, distribute or modify the Program subject to these terms and conditions.
 * You may not impose any further restrictions on the recipients' exercise of
 * the rights granted herein.  You are not responsible for enforcing compliance
 * by third parties to this License.
 *
 * 7. If, as a consequence of a court judgment or allegation of patent
 * infringement or for any other reason (not limited to patent issues),
 * conditions are imposed on you (whether by court order, agreement or
 * otherwise) that contradict the conditions of this License, they do not excuse
 * you from the conditions of this License.  If you cannot distribute so as to
 * satisfy simultaneously your obligations under this License and any other
 * pertinent obligations, then as a consequence you may not distribute the
 * Program at all. For example, if a patent license would not permit
 * royalty-free redistribution of the Program by all those who receive copies
 * directly or indirectly through you, then the only way you could satisfy both
 * it and this License would be to refrain entirely from distribution of the
 * Program.
 *
 * If any portion of this section is held invalid or unenforceable under any
 * particular circumstance, the balance of the section is intended to apply and
 * the section as a whole is intended to apply in other circumstances.
 *
 * It is not the purpose of this section to induce you to infringe any patents
 * or other property right claims or to contest validity of any such claims;
 * this section has the sole purpose of protecting the integrity of the free
 * software distribution system, which is implemented by public license
 * practices.  Many people have made generous contributions to the wide range of
 * software distributed through that system in reliance on consistent
 * application of that system; it is up to the author/donor to decide if he or
 * she is willing to distribute software through any other system and a licensee
 * cannot impose that choice.
 *
 * This section is intended to make thoroughly clear what is believed to be a
 * consequence of the rest of this License.
 *
 * 8. If the distribution and/or use of the Program is restricted in certain
 * countries either by patents or by copyrighted interfaces, the original
 * copyright holder who places the Program under this License may add an
 * explicit geographical distribution limitation excluding those countries, so
 * that distribution is permitted only in or among countries not thus excluded. 
 * In such case, this License incorporates the limitation as if written in the
 * body of this License.
 *
 * 9. The Free Software Foundation may publish revised and/or new versions of
 * the General Public License from time to time.  Such new versions will be
 * similar in spirit to the present version, but may differ in detail to address
 * new problems or concerns.
 *
 * Each version is given a distinguishing version number.  If the Program
 * specifies a version number of this License which applies to it and "any later
 * version", you have the option of following the terms and conditions either of
 * that version or of any later version published by the Free Software
 * Foundation. If the Program does not specify a version number of this License,
 * you may choose any version ever published by the Free Software Foundation.
 *
 * 10. If you wish to incorporate parts of the Program into other free programs
 * whose distribution conditions are different, write to the author to ask for
 * permission.  For software which is copyrighted by the Free Software
 * Foundation, write to the Free Software Foundation; we sometimes make
 * exceptions for this. Our decision will be guided by the two goals of
 * preserving the free status of all derivatives of our free software and of
 * promoting the sharing and reuse of software generally.
 *
 * NO WARRANTY
 *
 * 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR
 * THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
 * OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
 * PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR
 * IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
 * THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM
 * PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 *
 * 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
 * WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
 * REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
 * INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
 * OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO
 * LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
 * THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
 * PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES.
 *
 * END OF TERMS AND CONDITIONS
 *
 * How to Apply These Terms to Your New Programs
 *
 * If you develop a new program, and you want it to be of the greatest possible
 * use to the public, the best way to achieve this is to make it free software
 * which everyone can redistribute and change under these terms.
 *
 * To do so, attach the following notices to the program.  It is safest to
 * attach them to the start of each source file to most effectively convey the
 * exclusion of warranty; and each file should have at least the "copyright"
 * line and a pointer to where the full notice is found.
 *
 * <one line to give the program's name and a brief idea of what it does.>
 * Copyright (C) <year>  <name of author>
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Also add information on how to contact you by electronic and paper mail.
 *
 * If the program is interactive, make it output a short notice like this when
 * it starts in an interactive mode:
 *
 * Gnomovision version 69, Copyright (C) year name of author Gnomovision comes
 * with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free
 * software, and you are welcome to redistribute it under certain conditions;
 * type `show c' for details.
 *
 * The hypothetical commands `show w' and `show c' should show the appropriate
 * parts of the General Public License.  Of course, the commands you use may be
 * called something other than `show w' and `show c'; they could even be
 * mouse-clicks or menu items--whatever suits your program.
 *
 * You should also get your employer (if you work as a programmer) or your
 * school, if any, to sign a "copyright disclaimer" for the program, if
 * necessary.  Here is a sample; alter the names:
 *
 * Yoyodyne, Inc., hereby disclaims all copyright interest in the program
 * `Gnomovision' (which makes passes at compilers) written by James Hacker.
 *
 * <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice
 *
 * This General Public License does not permit incorporating your program into
 * proprietary programs.  If your program is a subroutine library, you may
 * consider it more useful to permit linking proprietary applications with the
 * library.  If this is what you want to do, use the GNU Lesser General Public
 * License instead of this License.
 *
 * ---
 *
 * Parts of this software are based on jedisct1/libsodium:
 *
 * https://github.com/jedisct1/libsodium
 *
 * ISC License
 *
 * Copyright (c) 2013-2019 Frank Denis <j at pureftpd dot org>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

;(function(global) {
var globalThis = global;
var undefined;

var process;

var Buffer;

var console = global.console;

var __browser_modules__ = [
[/* 0 */ 'bcoin', '/lib/hd/index.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * hd/index.js - hd keys for bcoin
 * Copyright (c) 2014-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

module.exports = __browser_require__(1 /* './hd' */, module);
}],
[/* 1 */ 'bcoin', '/lib/hd/hd.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * hd.js - hd keys for bcoin
 * Copyright (c) 2015-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const assert = __browser_require__(2 /* 'bsert' */, module);
const common = __browser_require__(3 /* './common' */, module);
const Mnemonic = __browser_require__(6 /* './mnemonic' */, module);
const HDPrivateKey = __browser_require__(66 /* './private' */, module);
const HDPublicKey = __browser_require__(77 /* './public' */, module);
const wordlist = __browser_require__(28 /* './wordlist' */, module);

/**
 * @exports hd
 */

const HD = exports;

/**
 * Instantiate an HD key (public or private) from an base58 string.
 * @param {Base58String} xkey
 * @param {Network?} network
 * @returns {HDPrivateKey|HDPublicKey}
 */

HD.fromBase58 = function fromBase58(xkey, network) {
  if (HDPrivateKey.isBase58(xkey))
    return HDPrivateKey.fromBase58(xkey, network);
  return HDPublicKey.fromBase58(xkey, network);
};

/**
 * Generate an {@link HDPrivateKey}.
 * @param {Object} options
 * @param {Buffer?} options.privateKey
 * @param {Buffer?} options.entropy
 * @returns {HDPrivateKey}
 */

HD.generate = function generate() {
  return HDPrivateKey.generate();
};

/**
 * Generate an {@link HDPrivateKey} from a seed.
 * @param {Object|Mnemonic|Buffer} options - seed,
 * mnemonic, mnemonic options.
 * @returns {HDPrivateKey}
 */

HD.fromSeed = function fromSeed(options) {
  return HDPrivateKey.fromSeed(options);
};

/**
 * Instantiate an hd private key from a mnemonic.
 * @param {Mnemonic|Object} mnemonic
 * @returns {HDPrivateKey}
 */

HD.fromMnemonic = function fromMnemonic(options) {
  return HDPrivateKey.fromMnemonic(options);
};

/**
 * Instantiate an HD key from a jsonified key object.
 * @param {Object} json - The jsonified transaction object.
 * @param {Network?} network
 * @returns {HDPrivateKey|HDPublicKey}
 */

HD.fromJSON = function fromJSON(json, network) {
  if (json.xprivkey)
    return HDPrivateKey.fromJSON(json, network);
  return HDPublicKey.fromJSON(json, network);
};

/**
 * Instantiate an HD key from serialized data.
 * @param {Buffer} data
 * @param {Network?} network
 * @returns {HDPrivateKey|HDPublicKey}
 */

HD.fromRaw = function fromRaw(data, network) {
  if (HDPrivateKey.isRaw(data, network))
    return HDPrivateKey.fromRaw(data, network);
  return HDPublicKey.fromRaw(data, network);
};

/**
 * Generate an hdkey from any number of options.
 * @param {Object|Mnemonic|Buffer} options - mnemonic, mnemonic
 * options, seed, or base58 key.
 * @param {(Network|NetworkType)?} network
 * @returns {HDPrivateKey|HDPublicKey}
 */

HD.from = function from(options, network) {
  assert(options, 'Options required.');

  if (HD.isHD(options))
    return options;

  if (HD.isBase58(options, network))
    return HD.fromBase58(options, network);

  if (HD.isRaw(options, network))
    return HD.fromRaw(options, network);

  if (options && typeof options === 'object')
    return HD.fromMnemonic(options);

  throw new Error('Cannot create HD key from bad options.');
};

/**
 * Test whether an object is in the form of a base58 hd key.
 * @param {String} data
 * @param {Network?} network
 * @returns {Boolean}
 */

HD.isBase58 = function isBase58(data, network) {
  return HDPrivateKey.isBase58(data, network)
    || HDPublicKey.isBase58(data, network);
};

/**
 * Test whether an object is in the form of a serialized hd key.
 * @param {Buffer} data
 * @param {Network?} network
 * @returns {NetworkType}
 */

HD.isRaw = function isRaw(data, network) {
  return HDPrivateKey.isRaw(data, network)
    || HDPublicKey.isRaw(data, network);
};

/**
 * Test whether an object is an HD key.
 * @param {Object} obj
 * @returns {Boolean}
 */

HD.isHD = function isHD(obj) {
  return HDPrivateKey.isHDPrivateKey(obj)
    || HDPublicKey.isHDPublicKey(obj);
};

/**
 * Test whether an object is an HD private key.
 * @param {Object} obj
 * @returns {Boolean}
 */

HD.isPrivate = function isPrivate(obj) {
  return HDPrivateKey.isHDPrivateKey(obj);
};

/**
 * Test whether an object is an HD public key.
 * @param {Object} obj
 * @returns {Boolean}
 */

HD.isPublic = function isPublic(obj) {
  return HDPublicKey.isHDPublicKey(obj);
};

/*
 * Expose
 */

HD.common = common;
HD.HD = HD;
HD.Mnemonic = Mnemonic;
HD.PrivateKey = HDPrivateKey;
HD.PublicKey = HDPublicKey;
HD.HDPrivateKey = HDPrivateKey;
HD.HDPublicKey = HDPublicKey;
HD.wordlist = wordlist;
}],
[/* 2 */ 'bsert', '/lib/assert.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * assert.js - assertions for javascript
 * Copyright (c) 2018, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/bsert
 */

'use strict';

/**
 * AssertionError
 */

class AssertionError extends Error {
  constructor(options) {
    if (typeof options === 'string')
      options = { message: options };

    if (options === null || typeof options !== 'object')
      options = {};

    let message = null;
    let operator = 'fail';
    let generatedMessage = Boolean(options.generatedMessage);

    if (options.message != null)
      message = toString(options.message);

    if (typeof options.operator === 'string')
      operator = options.operator;

    if (message == null) {
      if (operator === 'fail') {
        message = 'Assertion failed.';
      } else {
        const a = stringify(options.actual);
        const b = stringify(options.expected);

        message = `${a} ${operator} ${b}`;
      }

      generatedMessage = true;
    }

    super(message);

    let start = this.constructor;

    if (typeof options.stackStartFunction === 'function')
      start = options.stackStartFunction;
    else if (typeof options.stackStartFn === 'function')
      start = options.stackStartFn;

    this.type = 'AssertionError';
    this.name = 'AssertionError [ERR_ASSERTION]';
    this.code = 'ERR_ASSERTION';
    this.generatedMessage = generatedMessage;
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = operator;

    if (Error.captureStackTrace)
      Error.captureStackTrace(this, start);
  }
}

/*
 * Assert
 */

function assert(value, message) {
  if (!value) {
    let generatedMessage = false;

    if (arguments.length === 0) {
      message = 'No value argument passed to `assert()`.';
      generatedMessage = true;
    } else if (message == null) {
      message = 'Assertion failed.';
      generatedMessage = true;
    } else if (isError(message)) {
      throw message;
    }

    throw new AssertionError({
      message,
      actual: value,
      expected: true,
      operator: '==',
      generatedMessage,
      stackStartFn: assert
    });
  }
}

function equal(actual, expected, message) {
  if (!Object.is(actual, expected)) {
    if (isError(message))
      throw message;

    throw new AssertionError({
      message,
      actual,
      expected,
      operator: 'strictEqual',
      stackStartFn: equal
    });
  }
}

function notEqual(actual, expected, message) {
  if (Object.is(actual, expected)) {
    if (isError(message))
      throw message;

    throw new AssertionError({
      message,
      actual,
      expected,
      operator: 'notStrictEqual',
      stackStartFn: notEqual
    });
  }
}

function fail(message) {
  let generatedMessage = false;

  if (isError(message))
    throw message;

  if (message == null) {
    message = 'Assertion failed.';
    generatedMessage = true;
  }

  throw new AssertionError({
    message,
    actual: false,
    expected: true,
    operator: 'fail',
    generatedMessage,
    stackStartFn: fail
  });
}

function throws(func, expected, message) {
  if (typeof expected === 'string') {
    message = expected;
    expected = undefined;
  }

  let thrown = false;
  let err = null;

  enforce(typeof func === 'function', 'func', 'function');

  try {
    func();
  } catch (e) {
    thrown = true;
    err = e;
  }

  if (!thrown) {
    let generatedMessage = false;

    if (message == null) {
      message = 'Missing expected exception.';
      generatedMessage = true;
    }

    throw new AssertionError({
      message,
      actual: undefined,
      expected,
      operator: 'throws',
      generatedMessage,
      stackStartFn: throws
    });
  }

  if (!testError(err, expected, message, throws))
    throw err;
}

function doesNotThrow(func, expected, message) {
  if (typeof expected === 'string') {
    message = expected;
    expected = undefined;
  }

  let thrown = false;
  let err = null;

  enforce(typeof func === 'function', 'func', 'function');

  try {
    func();
  } catch (e) {
    thrown = true;
    err = e;
  }

  if (!thrown)
    return;

  if (testError(err, expected, message, doesNotThrow)) {
    let generatedMessage = false;

    if (message == null) {
      message = 'Got unwanted exception.';
      generatedMessage = true;
    }

    throw new AssertionError({
      message,
      actual: err,
      expected,
      operator: 'doesNotThrow',
      generatedMessage,
      stackStartFn: doesNotThrow
    });
  }

  throw err;
}

async function rejects(func, expected, message) {
  if (typeof expected === 'string') {
    message = expected;
    expected = undefined;
  }

  let thrown = false;
  let err = null;

  if (typeof func !== 'function')
    enforce(isPromise(func), 'func', 'promise');

  try {
    if (isPromise(func))
      await func;
    else
      await func();
  } catch (e) {
    thrown = true;
    err = e;
  }

  if (!thrown) {
    let generatedMessage = false;

    if (message == null) {
      message = 'Missing expected rejection.';
      generatedMessage = true;
    }

    throw new AssertionError({
      message,
      actual: undefined,
      expected,
      operator: 'rejects',
      generatedMessage,
      stackStartFn: rejects
    });
  }

  if (!testError(err, expected, message, rejects))
    throw err;
}

async function doesNotReject(func, expected, message) {
  if (typeof expected === 'string') {
    message = expected;
    expected = undefined;
  }

  let thrown = false;
  let err = null;

  if (typeof func !== 'function')
    enforce(isPromise(func), 'func', 'promise');

  try {
    if (isPromise(func))
      await func;
    else
      await func();
  } catch (e) {
    thrown = true;
    err = e;
  }

  if (!thrown)
    return;

  if (testError(err, expected, message, doesNotReject)) {
    let generatedMessage = false;

    if (message == null) {
      message = 'Got unwanted rejection.';
      generatedMessage = true;
    }

    throw new AssertionError({
      message,
      actual: undefined,
      expected,
      operator: 'doesNotReject',
      generatedMessage,
      stackStartFn: doesNotReject
    });
  }

  throw err;
}

function ifError(err) {
  if (err != null) {
    let message = 'ifError got unwanted exception: ';

    if (typeof err === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor)
        message += err.constructor.name;
      else
        message += err.message;
    } else {
      message += stringify(err);
    }

    throw new AssertionError({
      message,
      actual: err,
      expected: null,
      operator: 'ifError',
      generatedMessage: true,
      stackStartFn: ifError
    });
  }
}

function deepEqual(actual, expected, message) {
  if (!isDeepEqual(actual, expected, false)) {
    if (isError(message))
      throw message;

    throw new AssertionError({
      message,
      actual,
      expected,
      operator: 'deepStrictEqual',
      stackStartFn: deepEqual
    });
  }
}

function notDeepEqual(actual, expected, message) {
  if (isDeepEqual(actual, expected, true)) {
    if (isError(message))
      throw message;

    throw new AssertionError({
      message,
      actual,
      expected,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepEqual
    });
  }
}

function bufferEqual(actual, expected, enc, message) {
  if (!isEncoding(enc)) {
    message = enc;
    enc = null;
  }

  if (enc == null)
    enc = 'hex';

  expected = bufferize(actual, expected, enc);

  enforce(isBuffer(actual), 'actual', 'buffer');
  enforce(isBuffer(expected), 'expected', 'buffer');

  if (actual !== expected && !actual.equals(expected)) {
    if (isError(message))
      throw message;

    throw new AssertionError({
      message,
      actual: actual.toString(enc),
      expected: expected.toString(enc),
      operator: 'bufferEqual',
      stackStartFn: bufferEqual
    });
  }
}

function notBufferEqual(actual, expected, enc, message) {
  if (!isEncoding(enc)) {
    message = enc;
    enc = null;
  }

  if (enc == null)
    enc = 'hex';

  expected = bufferize(actual, expected, enc);

  enforce(isBuffer(actual), 'actual', 'buffer');
  enforce(isBuffer(expected), 'expected', 'buffer');

  if (actual === expected || actual.equals(expected)) {
    if (isError(message))
      throw message;

    throw new AssertionError({
      message,
      actual: actual.toString(enc),
      expected: expected.toString(enc),
      operator: 'notBufferEqual',
      stackStartFn: notBufferEqual
    });
  }
}

function enforce(value, name, type) {
  if (!value) {
    let msg;

    if (name == null) {
      msg = 'Invalid type for parameter.';
    } else {
      if (type == null)
        msg = `Invalid type for "${name}".`;
      else
        msg = `"${name}" must be a(n) ${type}.`;
    }

    const err = new TypeError(msg);

    if (Error.captureStackTrace)
      Error.captureStackTrace(err, enforce);

    throw err;
  }
}

function range(value, name) {
  if (!value) {
    const msg = name != null
      ? `"${name}" is out of range.`
      : 'Parameter is out of range.';

    const err = new RangeError(msg);

    if (Error.captureStackTrace)
      Error.captureStackTrace(err, range);

    throw err;
  }
}

/*
 * Stringification
 */

function stringify(value) {
  switch (typeof value) {
    case 'undefined':
      return 'undefined';
    case 'object':
      if (value === null)
        return 'null';
      return `[${objectName(value)}]`;
    case 'boolean':
      return `${value}`;
    case 'number':
      return `${value}`;
    case 'string':
      if (value.length > 80)
        value = `${value.substring(0, 77)}...`;
      return JSON.stringify(value);
    case 'symbol':
      return tryString(value);
    case 'function':
      return `[${funcName(value)}]`;
    case 'bigint':
      return `${value}n`;
    default:
      return `[${typeof value}]`;
  }
}

function toString(value) {
  if (typeof value === 'string')
    return value;

  if (isError(value))
    return tryString(value);

  return stringify(value);
}

function tryString(value) {
  try {
    return String(value);
  } catch (e) {
    return 'Object';
  }
}

/*
 * Error Testing
 */

function testError(err, expected, message, func) {
  if (expected == null)
    return true;

  if (isRegExp(expected))
    return expected.test(err);

  if (typeof expected !== 'function') {
    if (func === doesNotThrow || func === doesNotReject)
      throw new TypeError('"expected" must not be an object.');

    if (typeof expected !== 'object')
      throw new TypeError('"expected" must be an object.');

    let generatedMessage = false;

    if (message == null) {
      const name = func === rejects ? 'rejection' : 'exception';
      message = `Missing expected ${name}.`;
      generatedMessage = true;
    }

    if (err == null || typeof err !== 'object') {
      throw new AssertionError({
        actual: err,
        expected,
        message,
        operator: func.name,
        generatedMessage,
        stackStartFn: func
      });
    }

    const keys = Object.keys(expected);

    if (isError(expected))
      keys.push('name', 'message');

    if (keys.length === 0)
      throw new TypeError('"expected" may not be an empty object.');

    for (const key of keys) {
      const expect = expected[key];
      const value = err[key];

      if (typeof value === 'string'
          && isRegExp(expect)
          && expect.test(value)) {
        continue;
      }

      if ((key in err) && isDeepEqual(value, expect, false))
        continue;

      throw new AssertionError({
        actual: err,
        expected: expected,
        message,
        operator: func.name,
        generatedMessage,
        stackStartFn: func
      });
    }

    return true;
  }

  if (expected.prototype !== undefined && (err instanceof expected))
    return true;

  if (Error.isPrototypeOf(expected))
    return false;

  return expected.call({}, err) === true;
}

/*
 * Comparisons
 */

function isDeepEqual(x, y, fail) {
  try {
    return compare(x, y, null);
  } catch (e) {
    return fail;
  }
}

function compare(a, b, cache) {
  // Primitives.
  if (Object.is(a, b))
    return true;

  if (!isObject(a) || !isObject(b))
    return false;

  // Semi-primitives.
  if (objectString(a) !== objectString(b))
    return false;

  if (Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;

  if (isBuffer(a) && isBuffer(b))
    return a.equals(b);

  if (isDate(a))
    return Object.is(a.getTime(), b.getTime());

  if (isRegExp(a)) {
    return a.source === b.source
        && a.global === b.global
        && a.multiline === b.multiline
        && a.lastIndex === b.lastIndex
        && a.ignoreCase === b.ignoreCase;
  }

  if (isError(a)) {
    if (a.message !== b.message)
      return false;
  }

  if (isArrayBuffer(a)) {
    a = new Uint8Array(a);
    b = new Uint8Array(b);
  }

  if (isView(a) && !isBuffer(a)) {
    if (isBuffer(b))
      return false;

    const x = new Uint8Array(a.buffer);
    const y = new Uint8Array(b.buffer);

    if (x.length !== y.length)
      return false;

    for (let i = 0; i < x.length; i++) {
      if (x[i] !== y[i])
        return false;
    }

    return true;
  }

  if (isSet(a)) {
    if (a.size !== b.size)
      return false;

    const keys = new Set([...a, ...b]);

    return keys.size === a.size;
  }

  // Recursive.
  if (!cache) {
    cache = {
      a: new Map(),
      b: new Map(),
      p: 0
    };
  } else {
    const aa = cache.a.get(a);

    if (aa != null) {
      const bb = cache.b.get(b);
      if (bb != null)
        return aa === bb;
    }

    cache.p += 1;
  }

  cache.a.set(a, cache.p);
  cache.b.set(b, cache.p);

  const ret = recurse(a, b, cache);

  cache.a.delete(a);
  cache.b.delete(b);

  return ret;
}

function recurse(a, b, cache) {
  if (isMap(a)) {
    if (a.size !== b.size)
      return false;

    const keys = new Set([...a.keys(), ...b.keys()]);

    if (keys.size !== a.size)
      return false;

    for (const key of keys) {
      if (!compare(a.get(key), b.get(key), cache))
        return false;
    }

    return true;
  }

  if (isArray(a)) {
    if (a.length !== b.length)
      return false;

    for (let i = 0; i < a.length; i++) {
      if (!compare(a[i], b[i], cache))
        return false;
    }

    return true;
  }

  const ak = ownKeys(a);
  const bk = ownKeys(b);

  if (ak.length !== bk.length)
    return false;

  const keys = new Set([...ak, ...bk]);

  if (keys.size !== ak.length)
    return false;

  for (const key of keys) {
    if (!compare(a[key], b[key], cache))
      return false;
  }

  return true;
}

function ownKeys(obj) {
  const keys = Object.keys(obj);

  if (!Object.getOwnPropertySymbols)
    return keys;

  if (!Object.getOwnPropertyDescriptor)
    return keys;

  const symbols = Object.getOwnPropertySymbols(obj);

  for (const symbol of symbols) {
    const desc = Object.getOwnPropertyDescriptor(obj, symbol);

    if (desc && desc.enumerable)
      keys.push(symbol);
  }

  return keys;
}

/*
 * Helpers
 */

function objectString(obj) {
  if (obj === undefined)
    return '[object Undefined]';

  if (obj === null)
    return '[object Null]';

  try {
    return Object.prototype.toString.call(obj);
  } catch (e) {
    return '[object Object]';
  }
}

function objectType(obj) {
  return objectString(obj).slice(8, -1);
}

function objectName(obj) {
  const type = objectType(obj);

  if (obj == null)
    return type;

  if (type !== 'Object' && type !== 'Error')
    return type;

  let ctor, name;

  try {
    ctor = obj.constructor;
  } catch (e) {
    ;
  }

  if (ctor == null)
    return type;

  try {
    name = ctor.name;
  } catch (e) {
    return type;
  }

  if (typeof name !== 'string' || name.length === 0)
    return type;

  return name;
}

function funcName(func) {
  let name;

  try {
    name = func.name;
  } catch (e) {
    ;
  }

  if (typeof name !== 'string' || name.length === 0)
    return 'Function';

  return `Function: ${name}`;
}

function isArray(obj) {
  return Array.isArray(obj);
}

function isArrayBuffer(obj) {
  return obj instanceof ArrayBuffer;
}

function isBuffer(obj) {
  return isObject(obj)
      && typeof obj.writeUInt32LE === 'function'
      && typeof obj.equals === 'function';
}

function isDate(obj) {
  return obj instanceof Date;
}

function isError(obj) {
  return obj instanceof Error;
}

function isMap(obj) {
  return obj instanceof Map;
}

function isObject(obj) {
  return obj && typeof obj === 'object';
}

function isPromise(obj) {
  return obj instanceof Promise;
}

function isRegExp(obj) {
  return obj instanceof RegExp;
}

function isSet(obj) {
  return obj instanceof Set;
}

function isView(obj) {
  return ArrayBuffer.isView(obj);
}

function isEncoding(enc) {
  if (typeof enc !== 'string')
    return false;

  switch (enc) {
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'hex':
    case 'latin1':
    case 'ucs2':
    case 'utf8':
    case 'utf16le':
      return true;
  }

  return false;
}

function bufferize(actual, expected, enc) {
  if (typeof expected === 'string') {
    if (!isBuffer(actual))
      return null;

    const {constructor} = actual;

    if (!constructor || typeof constructor.from !== 'function')
      return null;

    if (!isEncoding(enc))
      return null;

    if (enc === 'hex' && (expected.length & 1))
      return null;

    const raw = constructor.from(expected, enc);

    if (enc === 'hex' && raw.length !== (expected.length >>> 1))
      return null;

    return raw;
  }

  return expected;
}

/*
 * API
 */

assert.AssertionError = AssertionError;
assert.assert = assert;
assert.strict = assert;
assert.ok = assert;
assert.equal = equal;
assert.notEqual = notEqual;
assert.strictEqual = equal;
assert.notStrictEqual = notEqual;
assert.fail = fail;
assert.throws = throws;
assert.doesNotThrow = doesNotThrow;
assert.rejects = rejects;
assert.doesNotReject = doesNotReject;
assert.ifError = ifError;
assert.deepEqual = deepEqual;
assert.notDeepEqual = notDeepEqual;
assert.deepStrictEqual = deepEqual;
assert.notDeepStrictEqual = notDeepEqual;
assert.bufferEqual = bufferEqual;
assert.notBufferEqual = notBufferEqual;
assert.enforce = enforce;
assert.range = range;

/*
 * Expose
 */

module.exports = assert;
}],
[/* 3 */ 'bcoin', '/lib/hd/common.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * common.js - common functions for hd
 * Copyright (c) 2015-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const assert = __browser_require__(2 /* 'bsert' */, module);
const LRU = __browser_require__(4 /* 'blru' */, module);
const common = exports;

/**
 * Index at which hardening begins.
 * @const {Number}
 * @default
 */

common.HARDENED = 0x80000000;

/**
 * Min entropy bits.
 * @const {Number}
 * @default
 */

common.MIN_ENTROPY = 128;

/**
 * Max entropy bits.
 * @const {Number}
 * @default
 */

common.MAX_ENTROPY = 512;

/**
 * LRU cache to avoid deriving keys twice.
 * @type {LRU}
 */

common.cache = new LRU(500);

/**
 * Parse a derivation path and return an array of indexes.
 * @see https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki
 * @param {String} path
 * @param {Boolean} hard
 * @returns {Number[]}
 */

common.parsePath = function parsePath(path, hard) {
  assert(typeof path === 'string');
  assert(typeof hard === 'boolean');
  assert(path.length >= 1);
  assert(path.length <= 3062);

  const parts = path.split('/');
  const root = parts[0];

  if (root !== 'm'
      && root !== 'M'
      && root !== 'm\''
      && root !== 'M\'') {
    throw new Error('Invalid path root.');
  }

  const result = [];

  for (let i = 1; i < parts.length; i++) {
    let part = parts[i];

    const hardened = part[part.length - 1] === '\'';

    if (hardened)
      part = part.slice(0, -1);

    if (part.length > 10)
      throw new Error('Path index too large.');

    if (!/^\d+$/.test(part))
      throw new Error('Path index is non-numeric.');

    let index = parseInt(part, 10);

    if ((index >>> 0) !== index)
      throw new Error('Path index out of range.');

    if (hardened) {
      index |= common.HARDENED;
      index >>>= 0;
    }

    if (!hard && (index & common.HARDENED))
      throw new Error('Path index cannot be hardened.');

    result.push(index);
  }

  return result;
};

/**
 * Test whether the key is a master key.
 * @param {HDPrivateKey|HDPublicKey} key
 * @returns {Boolean}
 */

common.isMaster = function isMaster(key) {
  return key.depth === 0
    && key.childIndex === 0
    && key.parentFingerPrint === 0;
};

/**
 * Test whether the key is (most likely) a BIP44 account key.
 * @param {HDPrivateKey|HDPublicKey} key
 * @param {Number?} account
 * @returns {Boolean}
 */

common.isAccount = function isAccount(key, account) {
  if (account != null) {
    const index = (common.HARDENED | account) >>> 0;
    if (key.childIndex !== index)
      return false;
  }
  return key.depth === 3 && (key.childIndex & common.HARDENED) !== 0;
};

/**
 * A compressed pubkey of all zeroes.
 * @const {Buffer}
 * @default
 */

common.ZERO_KEY = Buffer.alloc(33, 0x00);
}],
[/* 4 */ 'blru', '/lib/blru.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

module.exports = __browser_require__(5 /* './lru' */, module);
}],
[/* 5 */ 'blru', '/lib/lru.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * lru.js - LRU cache for bcoin
 * Copyright (c) 2014-2018, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const assert = __browser_require__(2 /* 'bsert' */, module);

/**
 * LRU Cache
 */

class LRU {
  /**
   * Create an LRU cache.
   * @constructor
   * @param {Number} capacity
   * @param {Function?} getSize
   * @param {Function?} CustomMap
   */

  constructor(capacity, getSize, CustomMap) {
    assert(typeof capacity === 'number', 'Capacity must be a number.');
    assert(capacity >= 0, 'Capacity cannot be negative.');
    assert(!getSize || typeof getSize === 'function', 'Bad size callback.');
    assert(!CustomMap || typeof CustomMap === 'function');

    this.map = CustomMap ? new CustomMap() : new Map();
    this.size = 0;
    this.items = 0;
    this.head = null;
    this.tail = null;
    this.pending = null;

    this.capacity = capacity;
    this.getSize = getSize;
  }

  /**
   * Calculate size of an item.
   * @private
   * @param {LRUItem} item
   * @returns {Number} Size.
   */

  _getSize(item) {
    if (this.getSize)
      return 120 + this.getSize(item.value, item.key);

    return 1;
  }

  /**
   * Compact the LRU linked list.
   * @private
   */

  _compact() {
    if (this.size <= this.capacity)
      return;

    let item = null;
    let next = null;

    for (item = this.head; item; item = next) {
      if (this.size <= this.capacity)
        break;

      this.size -= this._getSize(item);
      this.items -= 1;
      this.map.delete(item.key);

      next = item.next;

      item.prev = null;
      item.next = null;
    }

    if (!item) {
      this.head = null;
      this.tail = null;
      return;
    }

    this.head = item;
    item.prev = null;
  }

  /**
   * Reset the cache. Clear all items.
   */

  reset() {
    let item, next;

    for (item = this.head; item; item = next) {
      this.map.delete(item.key);
      this.items -= 1;
      next = item.next;
      item.prev = null;
      item.next = null;
    }

    assert(!item);

    this.size = 0;
    this.head = null;
    this.tail = null;
  }

  /**
   * Add an item to the cache.
   * @param {String|Number} key
   * @param {Object} value
   */

  set(key, value) {
    if (this.capacity === 0)
      return;

    let item = this.map.get(key);

    if (item) {
      this.size -= this._getSize(item);
      item.value = value;
      this.size += this._getSize(item);
      this._removeList(item);
      this._appendList(item);
      this._compact();
      return;
    }

    item = new LRUItem(key, value);

    this.map.set(key, item);

    this._appendList(item);

    this.size += this._getSize(item);
    this.items += 1;

    this._compact();
  }

  /**
   * Retrieve an item from the cache.
   * @param {String|Number} key
   * @returns {Object} Item.
   */

  get(key) {
    if (this.capacity === 0)
      return null;

    const item = this.map.get(key);

    if (!item)
      return null;

    this._removeList(item);
    this._appendList(item);

    return item.value;
  }

  /**
   * Test whether the cache contains a key.
   * @param {String|Number} key
   * @returns {Boolean}
   */

  has(key) {
    if (this.capacity === 0)
      return false;
    return this.map.has(key);
  }

  /**
   * Remove an item from the cache.
   * @param {String|Number} key
   * @returns {Boolean} Whether an item was removed.
   */

  remove(key) {
    if (this.capacity === 0)
      return false;

    const item = this.map.get(key);

    if (!item)
      return false;

    this.size -= this._getSize(item);
    this.items -= 1;

    this.map.delete(key);

    this._removeList(item);

    return true;
  }

  /**
   * Prepend an item to the linked list (sets new head).
   * @private
   * @param {LRUItem}
   */

  _prependList(item) {
    this._insertList(null, item);
  }

  /**
   * Append an item to the linked list (sets new tail).
   * @private
   * @param {LRUItem}
   */

  _appendList(item) {
    this._insertList(this.tail, item);
  }

  /**
   * Insert item into the linked list.
   * @private
   * @param {LRUItem|null} ref
   * @param {LRUItem} item
   */

  _insertList(ref, item) {
    assert(!item.next);
    assert(!item.prev);

    if (ref == null) {
      if (!this.head) {
        this.head = item;
        this.tail = item;
      } else {
        this.head.prev = item;
        item.next = this.head;
        this.head = item;
      }
      return;
    }

    item.next = ref.next;
    item.prev = ref;
    ref.next = item;

    if (item.next)
      item.next.prev = item;

    if (ref === this.tail)
      this.tail = item;
  }

  /**
   * Remove item from the linked list.
   * @private
   * @param {LRUItem}
   */

  _removeList(item) {
    if (item.prev)
      item.prev.next = item.next;

    if (item.next)
      item.next.prev = item.prev;

    if (item === this.head)
      this.head = item.next;

    if (item === this.tail)
      this.tail = item.prev || this.head;

    if (!this.head)
      assert(!this.tail);

    if (!this.tail)
      assert(!this.head);

    item.prev = null;
    item.next = null;
  }

  /**
   * Collect all keys in the cache, sorted by LRU.
   * @returns {String[]}
   */

  keys() {
    const items = [];

    for (let item = this.head; item; item = item.next) {
      if (item === this.head)
        assert(!item.prev);
      if (!item.prev)
        assert(item === this.head);
      if (!item.next)
        assert(item === this.tail);
      items.push(item.key);
    }

    return items;
  }

  /**
   * Collect all values in the cache, sorted by LRU.
   * @returns {String[]}
   */

  values() {
    const items = [];

    for (let item = this.head; item; item = item.next)
      items.push(item.value);

    return items;
  }

  /**
   * Convert the LRU cache to an array of items.
   * @returns {Object[]}
   */

  toArray() {
    const items = [];

    for (let item = this.head; item; item = item.next)
      items.push(item);

    return items;
  }

  /**
   * Create an atomic batch for the lru
   * (used for caching database writes).
   * @returns {LRUBatch}
   */

  batch() {
    return new LRUBatch(this);
  }

  /**
   * Start the pending batch.
   */

  start() {
    assert(!this.pending);
    this.pending = this.batch();
  }

  /**
   * Clear the pending batch.
   */

  clear() {
    assert(this.pending);
    this.pending.clear();
  }

  /**
   * Drop the pending batch.
   */

  drop() {
    assert(this.pending);
    this.pending = null;
  }

  /**
   * Commit the pending batch.
   */

  commit() {
    assert(this.pending);
    this.pending.commit();
    this.pending = null;
  }

  /**
   * Push an item onto the pending batch.
   * @param {String} key
   * @param {Object} value
   */

  push(key, value) {
    assert(this.pending);

    if (this.capacity === 0)
      return;

    this.pending.set(key, value);
  }

  /**
   * Push a removal onto the pending batch.
   * @param {String} key
   */

  unpush(key) {
    assert(this.pending);

    if (this.capacity === 0)
      return;

    this.pending.remove(key);
  }
}

/**
 * LRU Item
 * @alias module:utils.LRUItem
 */

class LRUItem {
  /**
   * Create an LRU item.
   * @constructor
   * @private
   * @param {String} key
   * @param {Object} value
   */

  constructor(key, value) {
    this.key = key;
    this.value = value;
    this.next = null;
    this.prev = null;
  }
}

/**
 * LRU Batch
 * @alias module:utils.LRUBatch
 */

class LRUBatch {
  /**
   * Create an LRU batch.
   * @constructor
   * @param {LRU} lru
   */

  constructor(lru) {
    this.lru = lru;
    this.ops = [];
  }

  /**
   * Push an item onto the batch.
   * @param {String} key
   * @param {Object} value
   */

  set(key, value) {
    this.ops.push(new LRUOp(false, key, value));
  }

  /**
   * Push a removal onto the batch.
   * @param {String} key
   */

  remove(key) {
    this.ops.push(new LRUOp(true, key, null));
  }

  /**
   * Clear the batch.
   */

  clear() {
    this.ops.length = 0;
  }

  /**
   * Commit the batch.
   */

  commit() {
    for (const op of this.ops) {
      if (op.remove) {
        this.lru.remove(op.key);
        continue;
      }
      this.lru.set(op.key, op.value);
    }

    this.ops.length = 0;
  }
}

/**
 * LRU Op
 * @alias module:utils.LRUOp
 * @private
 */

class LRUOp {
  /**
   * Create an LRU op.
   * @constructor
   * @param {Boolean} remove
   * @param {String} key
   * @param {Object} value
   */

  constructor(remove, key, value) {
    this.remove = remove;
    this.key = key;
    this.value = value;
  }
}

/*
 * Expose
 */

module.exports = LRU;
}],
[/* 6 */ 'bcoin', '/lib/hd/mnemonic.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * mnemonic.js - hd mnemonics for bcoin
 * Copyright (c) 2015-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const assert = __browser_require__(2 /* 'bsert' */, module);
const bio = __browser_require__(7 /* 'bufio' */, module);
const sha256 = __browser_require__(16 /* 'bcrypto/lib/sha256' */, module);
const cleanse = __browser_require__(20 /* 'bcrypto/lib/cleanse' */, module);
const random = __browser_require__(22 /* 'bcrypto/lib/random' */, module);
const pbkdf2 = __browser_require__(24 /* 'bcrypto/lib/pbkdf2' */, module);
const sha512 = __browser_require__(26 /* 'bcrypto/lib/sha512' */, module);
const wordlist = __browser_require__(28 /* './wordlist' */, module);
const common = __browser_require__(3 /* './common' */, module);
const nfkd = __browser_require__(37 /* './nfkd' */, module);
const {inspectSymbol} = __browser_require__(40 /* '../utils' */, module);

/*
 * Constants
 */

const wordlistCache = Object.create(null);

/**
 * HD Mnemonic
 * @alias module:hd.Mnemonic
 */

class Mnemonic {
  /**
   * Create a mnemonic.
   * @constructor
   * @param {Object} options
   * @param {Number?} options.bit - Bits of entropy (Must
   * be a multiple of 8) (default=128).
   * @param {Buffer?} options.entropy - Entropy bytes. Will
   * be generated with `options.bits` bits of entropy
   * if not present.
   * @param {String?} options.phrase - Mnemonic phrase (will
   * be generated if not present).
   * @param {String?} options.language - Language.
   */

  constructor(options) {
    this.bits = 256; // previously using 128
    this.language = 'english';
    this.entropy = null;
    this.phrase = null;

    if (options)
      this.fromOptions(options);
  }

  /**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */

  fromOptions(options) {
    if (typeof options === 'string')
      options = { phrase: options };

    if (options.bits != null) {
      assert((options.bits & 0xffff) === options.bits);
      assert(options.bits >= common.MIN_ENTROPY);
      assert(options.bits <= common.MAX_ENTROPY);
      assert(options.bits % 32 === 0);
      this.bits = options.bits;
    }

    if (options.language) {
      assert(typeof options.language === 'string');
      assert(Mnemonic.languages.indexOf(options.language) !== -1);
      this.language = options.language;
    }

    if (options.phrase) {
      this.fromPhrase(options.phrase);
      return this;
    }

    if (options.entropy) {
      this.fromEntropy(options.entropy);
      return this;
    }

    return this;
  }

  /**
   * Instantiate mnemonic from options.
   * @param {Object} options
   * @returns {Mnemonic}
   */

  static fromOptions(options) {
    return new this().fromOptions(options);
  }

  /**
   * Destroy the mnemonic (zeroes entropy).
   */

  destroy() {
    this.bits = common.MIN_ENTROPY;
    this.language = 'english';
    if (this.entropy) {
      cleanse(this.entropy);
      this.entropy = null;
    }
    this.phrase = null;
  }

  /**
   * Generate the seed.
   * @param {String?} passphrase
   * @returns {Buffer} pbkdf2 seed.
   */

  toSeed(passphrase) {
    if (!passphrase)
      passphrase = '';

    const phrase = nfkd(this.getPhrase());
    const passwd = nfkd(`mnemonic${passphrase}`);

    return pbkdf2.derive(sha512,
      Buffer.from(phrase, 'utf8'),
      Buffer.from(passwd, 'utf8'),
      2048, 64);
  }

  /**
   * Get or generate entropy.
   * @returns {Buffer}
   */

  getEntropy() {
    if (!this.entropy)
      this.entropy = random.randomBytes(this.bits / 8);

    assert(this.bits / 8 === this.entropy.length);

    return this.entropy;
  }

  /**
   * Generate a mnemonic phrase from chosen language.
   * @returns {String}
   */

  getPhrase() {
    if (this.phrase)
      return this.phrase;

    // Include the first `ENT / 32` bits
    // of the hash (the checksum).
    const wbits = this.bits + (this.bits / 32);

    // Get entropy and checksum.
    const entropy = this.getEntropy();
    const chk = sha256.digest(entropy);

    // Append the hash to the entropy to
    // make things easy when grabbing
    // the checksum bits.
    const size = Math.ceil(wbits / 8);
    const data = Buffer.allocUnsafe(size);
    entropy.copy(data, 0);
    chk.copy(data, entropy.length);

    // Build the mnemonic by reading
    // 11 bit indexes from the entropy.
    const list = Mnemonic.getWordlist(this.language);

    let phrase = [];
    for (let i = 0; i < wbits / 11; i++) {
      let index = 0;
      for (let j = 0; j < 11; j++) {
        const pos = i * 11 + j;
        const bit = pos % 8;
        const oct = (pos - bit) / 8;
        index <<= 1;
        index |= (data[oct] >>> (7 - bit)) & 1;
      }
      phrase.push(list.words[index]);
    }

    // Japanese likes double-width spaces.
    if (this.language === 'japanese')
      phrase = phrase.join('\u3000');
    else
      phrase = phrase.join(' ');

    this.phrase = phrase;

    return phrase;
  }

  /**
   * Inject properties from phrase.
   * @private
   * @param {String} phrase
   */

  fromPhrase(phrase) {
    assert(typeof phrase === 'string');
    assert(phrase.length <= 1000);

    const words = phrase.trim().split(/[\s\u3000]+/);
    const wbits = words.length * 11;
    const cbits = wbits % 32;

    assert(cbits !== 0, 'Invalid checksum.');

    const bits = wbits - cbits;

    assert(bits >= common.MIN_ENTROPY);
    assert(bits <= common.MAX_ENTROPY);
    assert(bits % 32 === 0);

    const size = Math.ceil(wbits / 8);
    const data = Buffer.allocUnsafe(size);
    data.fill(0);

    const lang = Mnemonic.getLanguage(words[0]);
    const list = Mnemonic.getWordlist(lang);

    // Rebuild entropy bytes.
    for (let i = 0; i < words.length; i++) {
      const word = words[i];
      const index = list.map[word];

      if (index == null)
        throw new Error('Could not find word.');

      for (let j = 0; j < 11; j++) {
        const pos = i * 11 + j;
        const bit = pos % 8;
        const oct = (pos - bit) / 8;
        const val = (index >>> (10 - j)) & 1;
        data[oct] |= val << (7 - bit);
      }
    }

    const cbytes = Math.ceil(cbits / 8);
    const entropy = data.slice(0, data.length - cbytes);
    const chk1 = data.slice(data.length - cbytes);
    const chk2 = sha256.digest(entropy);

    // Verify checksum.
    for (let i = 0; i < cbits; i++) {
      const bit = i % 8;
      const oct = (i - bit) / 8;
      const b1 = (chk1[oct] >>> (7 - bit)) & 1;
      const b2 = (chk2[oct] >>> (7 - bit)) & 1;
      if (b1 !== b2)
        throw new Error('Invalid checksum.');
    }

    assert(bits / 8 === entropy.length);

    this.bits = bits;
    this.language = lang;
    this.entropy = entropy;
    this.phrase = phrase;

    return this;
  }

  /**
   * Instantiate mnemonic from a phrase (validates checksum).
   * @param {String} phrase
   * @returns {Mnemonic}
   * @throws on bad checksum
   */

  static fromPhrase(phrase) {
    return new this().fromPhrase(phrase);
  }

  /**
   * Inject properties from entropy.
   * @private
   * @param {Buffer} entropy
   * @param {String?} lang
   */

  fromEntropy(entropy, lang) {
    assert((entropy != null && entropy._isBuffer === true));
    assert(entropy.length * 8 >= common.MIN_ENTROPY);
    assert(entropy.length * 8 <= common.MAX_ENTROPY);
    assert((entropy.length * 8) % 32 === 0);
    assert(!lang || Mnemonic.languages.indexOf(lang) !== -1);

    this.entropy = entropy;
    this.bits = entropy.length * 8;

    if (lang)
      this.language = lang;

    return this;
  }

  /**
   * Instantiate mnemonic from entropy.
   * @param {Buffer} entropy
   * @param {String?} lang
   * @returns {Mnemonic}
   */

  static fromEntropy(entropy, lang) {
    return new this().fromEntropy(entropy, lang);
  }

  /**
   * Determine a single word's language.
   * @param {String} word
   * @returns {String} Language.
   * @throws on not found.
   */

  static getLanguage(word) {
    for (const lang of Mnemonic.languages) {
      const list = Mnemonic.getWordlist(lang);
      if (list.map[word] != null)
        return lang;
    }

    throw new Error('Could not determine language.');
  }

  /**
   * Retrieve the wordlist for a language.
   * @param {String} lang
   * @returns {Object}
   */

  static getWordlist(lang) {
    const cache = wordlistCache[lang];

    if (cache)
      return cache;

    const words = wordlist.get(lang);
    const list = new WordList(words);

    wordlistCache[lang] = list;

    return list;
  }

  /**
   * Convert mnemonic to a json-friendly object.
   * @returns {Object}
   */

  toJSON() {
    return {
      bits: this.bits,
      language: this.language,
      entropy: this.getEntropy().toString('hex'),
      phrase: this.getPhrase()
    };
  }

  /**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   */

  fromJSON(json) {
    assert(json);
    assert((json.bits & 0xffff) === json.bits);
    assert(typeof json.language === 'string');
    assert(typeof json.entropy === 'string');
    assert(typeof json.phrase === 'string');
    assert(json.bits >= common.MIN_ENTROPY);
    assert(json.bits <= common.MAX_ENTROPY);
    assert(json.bits % 32 === 0);
    assert(json.bits / 8 === json.entropy.length / 2);

    this.bits = json.bits;
    this.language = json.language;
    this.entropy = Buffer.from(json.entropy, 'hex');
    this.phrase = json.phrase;

    return this;
  }

  /**
   * Instantiate mnemonic from json object.
   * @param {Object} json
   * @returns {Mnemonic}
   */

  static fromJSON(json) {
    return new this().fromJSON(json);
  }

  /**
   * Calculate serialization size.
   * @returns {Number}
   */

  getSize() {
    let size = 0;
    size += 3;
    size += this.getEntropy().length;
    return size;
  }

  /**
   * Write the mnemonic to a buffer writer.
   * @params {BufferWriter} bw
   */

  toWriter(bw) {
    const lang = Mnemonic.languages.indexOf(this.language);

    assert(lang !== -1);

    bw.writeU16(this.bits);
    bw.writeU8(lang);
    bw.writeBytes(this.getEntropy());

    return bw;
  }

  /**
   * Serialize mnemonic.
   * @returns {Buffer}
   */

  toRaw(writer) {
    const size = this.getSize();
    return this.toWriter(bio.write(size)).render();
  }

  /**
   * Inject properties from buffer reader.
   * @private
   * @param {BufferReader} br
   */

  fromReader(br) {
    const bits = br.readU16();

    assert(bits >= common.MIN_ENTROPY);
    assert(bits <= common.MAX_ENTROPY);
    assert(bits % 32 === 0);

    const language = Mnemonic.languages[br.readU8()];
    assert(language);

    this.bits = bits;
    this.language = language;
    this.entropy = br.readBytes(bits / 8);

    return this;
  }

  /**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   */

  fromRaw(data) {
    return this.fromReader(bio.read(data));
  }

  /**
   * Instantiate mnemonic from buffer reader.
   * @param {BufferReader} br
   * @returns {Mnemonic}
   */

  static fromReader(br) {
    return new this().fromReader(br);
  }

  /**
   * Instantiate mnemonic from serialized data.
   * @param {Buffer} data
   * @returns {Mnemonic}
   */

  static fromRaw(data) {
    return new this().fromRaw(data);
  }

  /**
   * Convert the mnemonic to a string.
   * @returns {String}
   */

  toString() {
    return this.getPhrase();
  }

  /**
   * Inspect the mnemonic.
   * @returns {String}
   */

  [inspectSymbol]() {
    return `<Mnemonic: ${this.getPhrase()}>`;
  }

  /**
   * Test whether an object is a Mnemonic.
   * @param {Object} obj
   * @returns {Boolean}
   */

  static isMnemonic(obj) {
    return obj instanceof Mnemonic;
  }
}

/**
 * List of languages.
 * @const {String[]}
 * @default
 */

Mnemonic.languages = [
  'simplified chinese',
  'traditional chinese',
  'english',
  'french',
  'italian',
  'japanese',
  'spanish'
];

/**
 * Word List
 * @ignore
 */

class WordList {
  /**
   * Create word list.
   * @constructor
   * @ignore
   * @param {Array} words
   */

  constructor(words) {
    this.words = words;
    this.map = Object.create(null);

    for (let i = 0; i < words.length; i++) {
      const word = words[i];
      this.map[word] = i;
    }
  }
}

/*
 * Expose
 */

module.exports = Mnemonic;
}],
[/* 7 */ 'bufio', '/lib/bufio.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * bufio.js - buffer utilities for javascript
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const custom = __browser_require__(8 /* './custom' */, module);
const encoding = __browser_require__(9 /* './encoding' */, module);
const enforce = __browser_require__(10 /* './enforce' */, module);
const EncodingError = __browser_require__(11 /* './error' */, module);
const BufferReader = __browser_require__(12 /* './reader' */, module);
const BufferWriter = __browser_require__(13 /* './writer' */, module);
const StaticWriter = __browser_require__(14 /* './staticwriter' */, module);
const Struct = __browser_require__(15 /* './struct' */, module);

exports.custom = custom;
exports.encoding = encoding;
exports.EncodingError = EncodingError;
exports.BufferReader = BufferReader;
exports.BufferWriter = BufferWriter;
exports.StaticWriter = StaticWriter;
exports.Struct = Struct;

exports.read = function read(data, zeroCopy) {
  return new BufferReader(data, zeroCopy);
};

exports.write = function write(size) {
  return size != null
    ? new StaticWriter(size)
    : new BufferWriter();
};

exports.pool = function pool(size) {
  return StaticWriter.pool(size);
};

function _read(func, size) {
  return function(data, off) {
    enforce((data != null && data._isBuffer === true), 'data', 'buffer');
    enforce((off >>> 0) === off, 'off', 'integer');

    if (off + size > data.length)
      throw new EncodingError(off, 'Out of bounds read');

    return func(data, off);
  };
}

function _readn(func) {
  return function(data, off, len) {
    enforce((data != null && data._isBuffer === true), 'data', 'buffer');
    enforce((off >>> 0) === off, 'off', 'integer');
    enforce((len >>> 0) === len, 'len', 'integer');

    if (off + len > data.length)
      throw new EncodingError(off, 'Out of bounds read');

    return func(data, off, len);
  };
}

function _readvar(func) {
  return function(data, off) {
    enforce((data != null && data._isBuffer === true), 'data', 'buffer');
    enforce((off >>> 0) === off, 'off', 'integer');
    return func(data, off);
  };
}

function _write(func, size) {
  return function(data, num, off) {
    enforce((data != null && data._isBuffer === true), 'data', 'buffer');
    enforce((off >>> 0) === off, 'off', 'integer');

    if (off + size > data.length)
      throw new EncodingError(off, 'Out of bounds write');

    return func(data, num, off);
  };
}

function _writen(func) {
  return function(data, num, off, len) {
    enforce((data != null && data._isBuffer === true), 'data', 'buffer');
    enforce((off >>> 0) === off, 'off', 'integer');
    enforce((len >>> 0) === len, 'len', 'integer');

    if (off + len > data.length)
      throw new EncodingError(off, 'Out of bounds write');

    return func(data, num, off, len);
  };
}

function _writecb(func, size) {
  return function(data, num, off) {
    enforce((data != null && data._isBuffer === true), 'data', 'buffer');
    enforce((off >>> 0) === off, 'off', 'integer');

    if (off + size(num) > data.length)
      throw new EncodingError(off, 'Out of bounds write');

    return func(data, num, off);
  };
}

exports.readU = _readn(encoding.readU);
exports.readU64 = _read(encoding.readU64, 8);
exports.readU56 = _read(encoding.readU56, 7);
exports.readU48 = _read(encoding.readU48, 6);
exports.readU40 = _read(encoding.readU40, 5);
exports.readU32 = _read(encoding.readU32, 4);
exports.readU24 = _read(encoding.readU24, 3);
exports.readU16 = _read(encoding.readU16, 2);
exports.readU8 = _read(encoding.readU8, 1);

exports.readUBE = _readn(encoding.readUBE);
exports.readU64BE = _read(encoding.readU64BE, 8);
exports.readU56BE = _read(encoding.readU56BE, 7);
exports.readU48BE = _read(encoding.readU48BE, 6);
exports.readU40BE = _read(encoding.readU40BE, 5);
exports.readU32BE = _read(encoding.readU32BE, 4);
exports.readU24BE = _read(encoding.readU24BE, 3);
exports.readU16BE = _read(encoding.readU16BE, 2);

exports.readI = _readn(encoding.readI);
exports.readI64 = _read(encoding.readI64, 8);
exports.readI56 = _read(encoding.readI56, 7);
exports.readI48 = _read(encoding.readI48, 6);
exports.readI40 = _read(encoding.readI40, 5);
exports.readI32 = _read(encoding.readI32, 4);
exports.readI24 = _read(encoding.readI24, 3);
exports.readI16 = _read(encoding.readI16, 2);
exports.readI8 = _read(encoding.readI8, 1);

exports.readIBE = _readn(encoding.readIBE);
exports.readI64BE = _read(encoding.readI64BE, 8);
exports.readI56BE = _read(encoding.readI56BE, 7);
exports.readI48BE = _read(encoding.readI48BE, 6);
exports.readI40BE = _read(encoding.readI40BE, 5);
exports.readI32BE = _read(encoding.readI32BE, 4);
exports.readI24BE = _read(encoding.readI24BE, 3);
exports.readI16BE = _read(encoding.readI16BE, 2);

exports.readFloat = _read(encoding.readFloat, 4);
exports.readFloatBE = _read(encoding.readFloatBE, 4);
exports.readDouble = _read(encoding.readDouble, 8);
exports.readDoubleBE = _read(encoding.readDoubleBE, 8);

exports.writeU = _writen(encoding.writeU);
exports.writeU64 = _write(encoding.writeU64, 8);
exports.writeU56 = _write(encoding.writeU56, 7);
exports.writeU48 = _write(encoding.writeU48, 6);
exports.writeU40 = _write(encoding.writeU40, 5);
exports.writeU32 = _write(encoding.writeU32, 4);
exports.writeU24 = _write(encoding.writeU24, 3);
exports.writeU16 = _write(encoding.writeU16, 2);
exports.writeU8 = _write(encoding.writeU8, 1);

exports.writeUBE = _writen(encoding.writeUBE);
exports.writeU64BE = _write(encoding.writeU64BE, 8);
exports.writeU56BE = _write(encoding.writeU56BE, 7);
exports.writeU48BE = _write(encoding.writeU48BE, 6);
exports.writeU40BE = _write(encoding.writeU40BE, 5);
exports.writeU32BE = _write(encoding.writeU32BE, 4);
exports.writeU24BE = _write(encoding.writeU24BE, 3);
exports.writeU16BE = _write(encoding.writeU16BE, 2);

exports.writeI = _writen(encoding.writeI);
exports.writeI64 = _write(encoding.writeI64, 8);
exports.writeI56 = _write(encoding.writeI56, 7);
exports.writeI48 = _write(encoding.writeI48, 6);
exports.writeI40 = _write(encoding.writeI40, 5);
exports.writeI32 = _write(encoding.writeI32, 4);
exports.writeI24 = _write(encoding.writeI24, 3);
exports.writeI16 = _write(encoding.writeI16, 2);
exports.writeI8 = _write(encoding.writeI8, 1);

exports.writeIBE = _writen(encoding.writeIBE);
exports.writeI64BE = _write(encoding.writeI64BE, 8);
exports.writeI56BE = _write(encoding.writeI56BE, 7);
exports.writeI48BE = _write(encoding.writeI48BE, 6);
exports.writeI40BE = _write(encoding.writeI40BE, 5);
exports.writeI32BE = _write(encoding.writeI32BE, 4);
exports.writeI24BE = _write(encoding.writeI24BE, 3);
exports.writeI16BE = _write(encoding.writeI16BE, 2);

exports.writeFloat = _write(encoding.writeFloat, 4);
exports.writeFloatBE = _write(encoding.writeFloatBE, 4);
exports.writeDouble = _write(encoding.writeDouble, 8);
exports.writeDoubleBE = _write(encoding.writeDoubleBE, 8);

exports.readVarint = _readvar(encoding.readVarint);
exports.writeVarint = _writecb(encoding.writeVarint, encoding.sizeVarint);
exports.sizeVarint = encoding.sizeVarint;
exports.readVarint2 = _readvar(encoding.readVarint2);
exports.writeVarint2 = _writecb(encoding.writeVarint2, encoding.sizeVarint2);
exports.sizeVarint2 = encoding.sizeVarint2;

exports.sliceBytes = encoding.sliceBytes;
exports.readBytes = encoding.readBytes;
exports.writeBytes = encoding.writeBytes;
exports.readString = encoding.readString;
exports.writeString = encoding.writeString;

exports.realloc = encoding.realloc;
exports.copy = encoding.copy;
exports.concat = encoding.concat;

exports.sizeVarBytes = encoding.sizeVarBytes;
exports.sizeVarlen = encoding.sizeVarlen;
exports.sizeVarString = encoding.sizeVarString;
}],
[/* 8 */ 'bufio', '/lib/custom-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

exports.custom = 'inspect';
}],
[/* 9 */ 'bufio', '/lib/encoding.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * encoding.js - encoding utils for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

/* eslint no-implicit-coercion: "off" */

'use strict';

const enforce = __browser_require__(10 /* './enforce' */, module);
const EncodingError = __browser_require__(11 /* './error' */, module);

/*
 * Constants
 */

const HI = 1 / 0x100000000;
const {MAX_SAFE_INTEGER} = Number;
const F32_ARRAY = new Float32Array(1);
const F328_ARRAY = new Uint8Array(F32_ARRAY.buffer);
const F64_ARRAY = new Float64Array(1);
const F648_ARRAY = new Uint8Array(F64_ARRAY.buffer);

F32_ARRAY[0] = -1;

const BIG_ENDIAN = F328_ARRAY[3] === 0;

/*
 * Read Unsigned LE
 */

function readU(data, off, len) {
  switch (len) {
    case 8:
      return readU64(data, off);
    case 7:
      return readU56(data, off);
    case 6:
      return readU48(data, off);
    case 5:
      return readU40(data, off);
    case 4:
      return readU32(data, off);
    case 3:
      return readU24(data, off);
    case 2:
      return readU16(data, off);
    case 1:
      return readU8(data, off);
    default:
      throw new EncodingError(off, 'Invalid read length');
  }
}

function readU64(data, off) {
  const hi = readU32(data, off + 4);
  const lo = readU32(data, off);

  check((hi & 0xffe00000) === 0, off, 'Number exceeds 2^53-1');

  return hi * 0x100000000 + lo;
}

function readU56(data, off) {
  const hi = readU24(data, off + 4);
  const lo = readU32(data, off);

  check((hi & 0xffe00000) === 0, off, 'Number exceeds 2^53-1');

  return hi * 0x100000000 + lo;
}

function readU48(data, off) {
  return (data[off++]
        + data[off++] * 0x100
        + data[off++] * 0x10000
        + data[off++] * 0x1000000
        + data[off++] * 0x100000000
        + data[off] * 0x10000000000);
}

function readU40(data, off) {
  return (data[off++]
        + data[off++] * 0x100
        + data[off++] * 0x10000
        + data[off++] * 0x1000000
        + data[off] * 0x100000000);
}

function readU32(data, off) {
  return (data[off++]
        + data[off++] * 0x100
        + data[off++] * 0x10000
        + data[off] * 0x1000000);
}

function readU24(data, off) {
  return (data[off++]
        + data[off++] * 0x100
        + data[off] * 0x10000);
}

function readU16(data, off) {
  return data[off++] + data[off] * 0x100;
}

function readU8(data, off) {
  return data[off];
}

/*
 * Read Unsigned BE
 */

function readUBE(data, off, len) {
  switch (len) {
    case 8:
      return readU64BE(data, off);
    case 7:
      return readU56BE(data, off);
    case 6:
      return readU48BE(data, off);
    case 5:
      return readU40BE(data, off);
    case 4:
      return readU32BE(data, off);
    case 3:
      return readU24BE(data, off);
    case 2:
      return readU16BE(data, off);
    case 1:
      return readU8(data, off);
    default:
      throw new EncodingError(off, 'Invalid read length');
  }
}

function readU64BE(data, off) {
  const hi = readU32BE(data, off);
  const lo = readU32BE(data, off + 4);

  check((hi & 0xffe00000) === 0, off, 'Number exceeds 2^53-1');

  return hi * 0x100000000 + lo;
}

function readU56BE(data, off) {
  const hi = readU24BE(data, off);
  const lo = readU32BE(data, off + 3);

  check((hi & 0xffe00000) === 0, off, 'Number exceeds 2^53-1');

  return hi * 0x100000000 + lo;
}

function readU48BE(data, off) {
  return (data[off++] * 0x10000000000
        + data[off++] * 0x100000000
        + data[off++] * 0x1000000
        + data[off++] * 0x10000
        + data[off++] * 0x100
        + data[off]);
}

function readU40BE(data, off) {
  return (data[off++] * 0x100000000
        + data[off++] * 0x1000000
        + data[off++] * 0x10000
        + data[off++] * 0x100
        + data[off]);
}

function readU32BE(data, off) {
  return (data[off++] * 0x1000000
        + data[off++] * 0x10000
        + data[off++] * 0x100
        + data[off]);
}

function readU24BE(data, off) {
  return (data[off++] * 0x10000
        + data[off++] * 0x100
        + data[off]);
}

function readU16BE(data, off) {
  return data[off++] * 0x100 + data[off];
}

/*
 * Read Signed LE
 */

function readI(data, off, len) {
  switch (len) {
    case 8:
      return readI64(data, off);
    case 7:
      return readI56(data, off);
    case 6:
      return readI48(data, off);
    case 5:
      return readI40(data, off);
    case 4:
      return readI32(data, off);
    case 3:
      return readI24(data, off);
    case 2:
      return readI16(data, off);
    case 1:
      return readI8(data, off);
    default:
      throw new EncodingError(off, 'Invalid read length');
  }
}

function readI64(data, off) {
  const hi = readI32(data, off + 4);
  const lo = readU32(data, off);

  check(isSafe(hi, lo), 'Number exceeds 2^53-1');

  return hi * 0x100000000 + lo;
}

function readI56(data, off) {
  const hi = readI24(data, off + 4);
  const lo = readU32(data, off);

  check(isSafe(hi, lo), 'Number exceeds 2^53-1');

  return hi * 0x100000000 + lo;
}

function readI48(data, off) {
  const val = data[off + 4] + data[off + 5] * 0x100;

  return (data[off++]
        + data[off++] * 0x100
        + data[off++] * 0x10000
        + data[off] * 0x1000000
        + (val | (val & 0x8000) * 0x1fffe) * 0x100000000);
}

function readI40(data, off) {
  return (data[off++]
        + data[off++] * 0x100
        + data[off++] * 0x10000
        + data[off++] * 0x1000000
        + (data[off] | (data[off] & 0x80) * 0x1fffffe) * 0x100000000);
}

function readI32(data, off) {
  return (data[off++]
        + data[off++] * 0x100
        + data[off++] * 0x10000
        + (data[off] << 24));
}

function readI24(data, off) {
  const val = (data[off++]
             + data[off++] * 0x100
             + data[off] * 0x10000);

  return val | (val & 0x800000) * 0x1fe;
}

function readI16(data, off) {
  const val = data[off++] + data[off] * 0x100;
  return val | (val & 0x8000) * 0x1fffe;
}

function readI8(data, off) {
  const val = data[off];
  return val | (val & 0x80) * 0x1fffffe;
}

/*
 * Read Signed BE
 */

function readIBE(data, off, len) {
  switch (len) {
    case 8:
      return readI64BE(data, off);
    case 7:
      return readI56BE(data, off);
    case 6:
      return readI48BE(data, off);
    case 5:
      return readI40BE(data, off);
    case 4:
      return readI32BE(data, off);
    case 3:
      return readI24BE(data, off);
    case 2:
      return readI16BE(data, off);
    case 1:
      return readI8(data, off);
    default:
      throw new EncodingError(off, 'Invalid read length');
  }
}

function readI64BE(data, off) {
  const hi = readI32BE(data, off);
  const lo = readU32BE(data, off + 4);

  check(isSafe(hi, lo), 'Number exceeds 2^53-1');

  return hi * 0x100000000 + lo;
}

function readI56BE(data, off) {
  const hi = readI24BE(data, off);
  const lo = readU32BE(data, off + 3);

  check(isSafe(hi, lo), 'Number exceeds 2^53-1');

  return hi * 0x100000000 + lo;
}

function readI48BE(data, off) {
  const val = data[off++] * 0x100 + data[off++];

  return ((val | (val & 0x8000) * 0x1fffe) * 0x100000000
        + data[off++] * 0x1000000
        + data[off++] * 0x10000
        + data[off++] * 0x100
        + data[off]);
}

function readI40BE(data, off) {
  const val = data[off++];

  return ((val | (val & 0x80) * 0x1fffffe) * 0x100000000
        + data[off++] * 0x1000000
        + data[off++] * 0x10000
        + data[off++] * 0x100
        + data[off]);
}

function readI32BE(data, off) {
  return ((data[off++] << 24)
        + data[off++] * 0x10000
        + data[off++] * 0x100
        + data[off]);
}

function readI24BE(data, off) {
  const val = (data[off++] * 0x10000
             + data[off++] * 0x100
             + data[off]);

  return val | (val & 0x800000) * 0x1fe;
}

function readI16BE(data, off) {
  const val = data[off++] * 0x100 + data[off];
  return val | (val & 0x8000) * 0x1fffe;
}

/*
 * Read Float
 */

function _readFloatBackwards(data, off) {
  F328_ARRAY[3] = data[off++];
  F328_ARRAY[2] = data[off++];
  F328_ARRAY[1] = data[off++];
  F328_ARRAY[0] = data[off];
  return F32_ARRAY[0];
}

function _readFloatForwards(data, off) {
  F328_ARRAY[0] = data[off++];
  F328_ARRAY[1] = data[off++];
  F328_ARRAY[2] = data[off++];
  F328_ARRAY[3] = data[off];
  return F32_ARRAY[0];
}

function _readDoubleBackwards(data, off) {
  F648_ARRAY[7] = data[off++];
  F648_ARRAY[6] = data[off++];
  F648_ARRAY[5] = data[off++];
  F648_ARRAY[4] = data[off++];
  F648_ARRAY[3] = data[off++];
  F648_ARRAY[2] = data[off++];
  F648_ARRAY[1] = data[off++];
  F648_ARRAY[0] = data[off];
  return F64_ARRAY[0];
}

function _readDoubleForwards(data, off) {
  F648_ARRAY[0] = data[off++];
  F648_ARRAY[1] = data[off++];
  F648_ARRAY[2] = data[off++];
  F648_ARRAY[3] = data[off++];
  F648_ARRAY[4] = data[off++];
  F648_ARRAY[5] = data[off++];
  F648_ARRAY[6] = data[off++];
  F648_ARRAY[7] = data[off];
  return F64_ARRAY[0];
}

const readFloat = BIG_ENDIAN ? _readFloatBackwards : _readFloatForwards;
const readFloatBE = BIG_ENDIAN ? _readFloatForwards : _readFloatBackwards;
const readDouble = BIG_ENDIAN ? _readDoubleBackwards : _readDoubleForwards;
const readDoubleBE = BIG_ENDIAN ? _readDoubleForwards : _readDoubleBackwards;

/*
 * Write Unsigned LE
 */

function writeU(dst, num, off, len) {
  switch (len) {
    case 8:
      return writeU64(dst, num, off);
    case 7:
      return writeU56(dst, num, off);
    case 6:
      return writeU48(dst, num, off);
    case 5:
      return writeU40(dst, num, off);
    case 4:
      return writeU32(dst, num, off);
    case 3:
      return writeU24(dst, num, off);
    case 2:
      return writeU16(dst, num, off);
    case 1:
      return writeU8(dst, num, off);
    default:
      throw new EncodingError(off, 'Invalid write length');
  }
}

function writeU64(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');
  return write64(dst, num, off, false);
}

function writeU56(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');
  return write56(dst, num, off, false);
}

function writeU48(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  const hi = (num * HI) | 0;

  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  dst[off++] = hi;
  dst[off++] = hi >>> 8;

  return off;
}

function writeU40(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  const hi = (num * HI) | 0;

  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  dst[off++] = hi;

  return off;
}

function writeU32(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;

  return off;
}

function writeU24(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;

  return off;
}

function writeU16(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  dst[off++] = num;
  dst[off++] = num >>> 8;

  return off;
}

function writeU8(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  dst[off] = num;

  return off + 1;
}

/*
 * Write Unsigned BE
 */

function writeUBE(dst, num, off, len) {
  switch (len) {
    case 8:
      return writeU64BE(dst, num, off);
    case 7:
      return writeU56BE(dst, num, off);
    case 6:
      return writeU48BE(dst, num, off);
    case 5:
      return writeU40BE(dst, num, off);
    case 4:
      return writeU32BE(dst, num, off);
    case 3:
      return writeU24BE(dst, num, off);
    case 2:
      return writeU16BE(dst, num, off);
    case 1:
      return writeU8(dst, num, off);
    default:
      throw new EncodingError(off, 'Invalid write length');
  }
}

function writeU64BE(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');
  return write64(dst, num, off, true);
}

function writeU56BE(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');
  return write56(dst, num, off, true);
}

function writeU48BE(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  const hi = (num * HI) | 0;

  dst[off++] = hi >>> 8;
  dst[off++] = hi;
  dst[off + 3] = num;
  num >>>= 8;
  dst[off + 2] = num;
  num >>>= 8;
  dst[off + 1] = num;
  num >>>= 8;
  dst[off] = num;

  return off + 4;
}

function writeU40BE(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  const hi = (num * HI) | 0;

  dst[off++] = hi;
  dst[off + 3] = num;
  num >>>= 8;
  dst[off + 2] = num;
  num >>>= 8;
  dst[off + 1] = num;
  num >>>= 8;
  dst[off] = num;

  return off + 4;
}

function writeU32BE(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  dst[off + 3] = num;
  num >>>= 8;
  dst[off + 2] = num;
  num >>>= 8;
  dst[off + 1] = num;
  num >>>= 8;
  dst[off] = num;

  return off + 4;
}

function writeU24BE(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  dst[off + 2] = num;
  num >>>= 8;
  dst[off + 1] = num;
  num >>>= 8;
  dst[off] = num;

  return off + 3;
}

function writeU16BE(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  dst[off++] = num >>> 8;
  dst[off++] = num;

  return off;
}

/*
 * Write Signed LE
 */

function writeI(dst, num, off, len) {
  switch (len) {
    case 8:
      return writeU64(dst, num, off);
    case 7:
      return writeU56(dst, num, off);
    case 6:
      return writeU48(dst, num, off);
    case 5:
      return writeU40(dst, num, off);
    case 4:
      return writeU24(dst, num, off);
    case 3:
      return writeU32(dst, num, off);
    case 2:
      return writeU16(dst, num, off);
    case 1:
      return writeU8(dst, num, off);
    default:
      throw new EncodingError(off, 'Invalid write length');
  }
}

function writeI64(dst, num, off) {
  return writeU64(dst, num, off);
}

function writeI56(dst, num, off) {
  return writeU56(dst, num, off);
}

function writeI48(dst, num, off) {
  return writeU48(dst, num, off);
}

function writeI40(dst, num, off) {
  return writeU40(dst, num, off);
}

function writeI32(dst, num, off) {
  return writeU32(dst, num, off);
}

function writeI24(dst, num, off) {
  return writeU24(dst, num, off);
}

function writeI16(dst, num, off) {
  return writeU16(dst, num, off);
}

function writeI8(dst, num, off) {
  return writeU8(dst, num, off);
}

/*
 * Write Signed BE
 */

function writeIBE(dst, num, off, len) {
  switch (len) {
    case 8:
      return writeU64BE(dst, num, off);
    case 7:
      return writeU56BE(dst, num, off);
    case 6:
      return writeU48BE(dst, num, off);
    case 5:
      return writeU40BE(dst, num, off);
    case 4:
      return writeU32BE(dst, num, off);
    case 3:
      return writeU24BE(dst, num, off);
    case 2:
      return writeU16BE(dst, num, off);
    case 1:
      return writeU8(dst, num, off);
    default:
      throw new EncodingError(off, 'Invalid write length');
  }
}

function writeI64BE(dst, num, off) {
  return writeU64BE(dst, num, off);
}

function writeI56BE(dst, num, off) {
  return writeU56BE(dst, num, off);
}

function writeI48BE(dst, num, off) {
  return writeU48BE(dst, num, off);
}

function writeI40BE(dst, num, off) {
  return writeU40BE(dst, num, off);
}

function writeI32BE(dst, num, off) {
  return writeU32BE(dst, num, off);
}

function writeI24BE(dst, num, off) {
  return writeU24BE(dst, num, off);
}

function writeI16BE(dst, num, off) {
  return writeU16BE(dst, num, off);
}

function _writeDoubleForwards(dst, num, off) {
  enforce(isNumber(num), 'num', 'number');

  F64_ARRAY[0] = num;

  dst[off++] = F648_ARRAY[0];
  dst[off++] = F648_ARRAY[1];
  dst[off++] = F648_ARRAY[2];
  dst[off++] = F648_ARRAY[3];
  dst[off++] = F648_ARRAY[4];
  dst[off++] = F648_ARRAY[5];
  dst[off++] = F648_ARRAY[6];
  dst[off++] = F648_ARRAY[7];

  return off;
}

function _writeDoubleBackwards(dst, num, off) {
  enforce(isNumber(num), 'num', 'number');

  F64_ARRAY[0] = num;

  dst[off++] = F648_ARRAY[7];
  dst[off++] = F648_ARRAY[6];
  dst[off++] = F648_ARRAY[5];
  dst[off++] = F648_ARRAY[4];
  dst[off++] = F648_ARRAY[3];
  dst[off++] = F648_ARRAY[2];
  dst[off++] = F648_ARRAY[1];
  dst[off++] = F648_ARRAY[0];

  return off;
}

function _writeFloatForwards(dst, num, off) {
  enforce(isNumber(num), 'num', 'number');

  F32_ARRAY[0] = num;

  dst[off++] = F328_ARRAY[0];
  dst[off++] = F328_ARRAY[1];
  dst[off++] = F328_ARRAY[2];
  dst[off++] = F328_ARRAY[3];

  return off;
}

function _writeFloatBackwards(dst, num, off) {
  enforce(isNumber(num), 'num', 'number');

  F32_ARRAY[0] = num;

  dst[off++] = F328_ARRAY[3];
  dst[off++] = F328_ARRAY[2];
  dst[off++] = F328_ARRAY[1];
  dst[off++] = F328_ARRAY[0];

  return off;
}

const writeFloat = BIG_ENDIAN ? _writeFloatBackwards : _writeFloatForwards;
const writeFloatBE = BIG_ENDIAN ? _writeFloatForwards : _writeFloatBackwards;
const writeDouble = BIG_ENDIAN ? _writeDoubleBackwards : _writeDoubleForwards;
const writeDoubleBE = BIG_ENDIAN ? _writeDoubleForwards : _writeDoubleBackwards;

/*
 * Varints
 */

function readVarint(data, off) {
  let value, size;

  checkRead(off < data.length, off);

  switch (data[off]) {
    case 0xff:
      size = 9;
      checkRead(off + size <= data.length, off);
      value = readU64(data, off + 1);
      check(value > 0xffffffff, off, 'Non-canonical varint');
      break;
    case 0xfe:
      size = 5;
      checkRead(off + size <= data.length, off);
      value = readU32(data, off + 1);
      check(value > 0xffff, off, 'Non-canonical varint');
      break;
    case 0xfd:
      size = 3;
      checkRead(off + size <= data.length, off);
      value = readU16(data, off + 1);
      check(value >= 0xfd, off, 'Non-canonical varint');
      break;
    default:
      size = 1;
      value = data[off];
      break;
  }

  return new Varint(size, value);
}

function writeVarint(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  if (num < 0xfd) {
    dst[off++] = num;
    return off;
  }

  if (num <= 0xffff) {
    dst[off++] = 0xfd;
    return writeU16(dst, num, off);
  }

  if (num <= 0xffffffff) {
    dst[off++] = 0xfe;
    return writeU32(dst, num, off);
  }

  dst[off++] = 0xff;

  return writeU64(dst, num, off);
}

function sizeVarint(num) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  if (num < 0xfd)
    return 1;

  if (num <= 0xffff)
    return 3;

  if (num <= 0xffffffff)
    return 5;

  return 9;
}

function readVarint2(data, off) {
  let num = 0;
  let size = 0;

  for (;;) {
    checkRead(off < data.length, off);

    const ch = data[off++];

    size += 1;

    // Number.MAX_SAFE_INTEGER >>> 7
    check(num <= 0x3fffffffffff - (ch & 0x7f), off, 'Number exceeds 2^53-1');

    // num = (num << 7) | (ch & 0x7f);
    num = (num * 0x80) + (ch & 0x7f);

    if ((ch & 0x80) === 0)
      break;

    check(num !== MAX_SAFE_INTEGER, off, 'Number exceeds 2^53-1');
    num += 1;
  }

  return new Varint(size, num);
}

function writeVarint2(dst, num, off) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  const tmp = [];

  let len = 0;

  for (;;) {
    tmp[len] = (num & 0x7f) | (len ? 0x80 : 0x00);

    if (num <= 0x7f)
      break;

    // num = (num >>> 7) - 1;
    num = ((num - (num % 0x80)) / 0x80) - 1;
    len += 1;
  }

  checkRead(off + len + 1 <= dst.length, off);

  do {
    dst[off++] = tmp[len];
  } while (len--);

  return off;
}

function sizeVarint2(num) {
  enforce(Number.isSafeInteger(num), 'num', 'integer');

  let size = 0;

  for (;;) {
    size += 1;

    if (num <= 0x7f)
      break;

    // num = (num >>> 7) - 1;
    num = ((num - (num % 0x80)) / 0x80) - 1;
  }

  return size;
}

/*
 * Bytes
 */

function sliceBytes(data, off, size) {
  enforce((data != null && data._isBuffer === true), 'data', 'buffer');
  enforce((off >>> 0) === off, 'off', 'integer');
  enforce((size >>> 0) === size, 'size', 'integer');

  if (off + size > data.length)
    throw new EncodingError(off, 'Out of bounds read');

  return data.slice(off, off + size);
}

function readBytes(data, off, size) {
  enforce((data != null && data._isBuffer === true), 'data', 'buffer');
  enforce((off >>> 0) === off, 'off', 'integer');
  enforce((size >>> 0) === size, 'size', 'integer');

  if (off + size > data.length)
    throw new EncodingError(off, 'Out of bounds read');

  const buf = Buffer.allocUnsafeSlow(size);

  data.copy(buf, 0, off, off + size);

  return buf;
}

function writeBytes(data, value, off) {
  enforce((data != null && data._isBuffer === true), 'data', 'buffer');
  enforce((value != null && value._isBuffer === true), 'value', 'buffer');
  enforce((off >>> 0) === off, 'off', 'integer');

  if (off + value.length > data.length)
    throw new EncodingError(off, 'Out of bounds write');

  return value.copy(data, off, 0, value.length);
}

function readString(data, off, size, enc) {
  if (enc == null)
    enc = 'binary';

  enforce((data != null && data._isBuffer === true), 'data', 'buffer');
  enforce((off >>> 0) === off, 'off', 'integer');
  enforce((size >>> 0) === size, 'size', 'integer');
  enforce(typeof enc === 'string', 'enc', 'string');

  if (off + size > data.length)
    throw new EncodingError(off, 'Out of bounds read');

  return data.toString(enc, off, off + size);
}

function writeString(data, str, off, enc) {
  if (enc == null)
    enc = 'binary';

  enforce((data != null && data._isBuffer === true), 'data', 'buffer');
  enforce(typeof str === 'string', 'str', 'string');
  enforce((off >>> 0) === off, 'off', 'integer');
  enforce(typeof enc === 'string', 'enc', 'string');

  if (str.length === 0)
    return 0;

  const size = Buffer.byteLength(str, enc);

  if (off + size > data.length)
    throw new EncodingError(off, 'Out of bounds write');

  return data.write(str, off, enc);
}

function realloc(data, size) {
  enforce((data != null && data._isBuffer === true), 'data', 'buffer');

  const buf = Buffer.allocUnsafeSlow(size);

  data.copy(buf, 0);

  return buf;
}

function copy(data) {
  enforce((data != null && data._isBuffer === true), 'data', 'buffer');
  return realloc(data, data.length);
}

function concat(a, b) {
  enforce((a != null && a._isBuffer === true), 'a', 'buffer');
  enforce((b != null && b._isBuffer === true), 'b', 'buffer');

  const size = a.length + b.length;
  const buf = Buffer.allocUnsafeSlow(size);

  a.copy(buf, 0);
  b.copy(buf, a.length);

  return buf;
}

/*
 * Size Helpers
 */

function sizeVarBytes(data) {
  enforce((data != null && data._isBuffer === true), 'data', 'buffer');
  return sizeVarint(data.length) + data.length;
}

function sizeVarlen(len) {
  return sizeVarint(len) + len;
}

function sizeVarString(str, enc) {
  if (enc == null)
    enc = 'binary';

  enforce(typeof str === 'string', 'str', 'string');
  enforce(typeof enc === 'string', 'enc', 'string');

  if (str.length === 0)
    return 1;

  const len = Buffer.byteLength(str, enc);

  return sizeVarint(len) + len;
}

/*
 * Helpers
 */

function isSafe(hi, lo) {
  if (hi < 0) {
    hi = ~hi;
    if (lo === 0)
      hi += 1;
  }

  return (hi & 0xffe00000) === 0;
}

function write64(dst, num, off, be) {
  let neg = false;

  if (num < 0) {
    num = -num;
    neg = true;
  }

  let hi = (num * HI) | 0;
  let lo = num | 0;

  if (neg) {
    if (lo === 0) {
      hi = (~hi + 1) | 0;
    } else {
      hi = ~hi;
      lo = ~lo + 1;
    }
  }

  if (be) {
    off = writeI32BE(dst, hi, off);
    off = writeI32BE(dst, lo, off);
  } else {
    off = writeI32(dst, lo, off);
    off = writeI32(dst, hi, off);
  }

  return off;
}

function write56(dst, num, off, be) {
  let neg = false;

  if (num < 0) {
    num = -num;
    neg = true;
  }

  let hi = (num * HI) | 0;
  let lo = num | 0;

  if (neg) {
    if (lo === 0) {
      hi = (~hi + 1) | 0;
    } else {
      hi = ~hi;
      lo = ~lo + 1;
    }
  }

  if (be) {
    off = writeI24BE(dst, hi, off);
    off = writeI32BE(dst, lo, off);
  } else {
    off = writeI32(dst, lo, off);
    off = writeI24(dst, hi, off);
  }

  return off;
}

class Varint {
  constructor(size, value) {
    this.size = size;
    this.value = value;
  }
}

function isNumber(num) {
  return typeof num === 'number' && isFinite(num);
}

function checkRead(value, offset) {
  if (!value)
    throw new EncodingError(offset, 'Out of bounds read', checkRead);
}

function check(value, offset, reason) {
  if (!value)
    throw new EncodingError(offset, reason, check);
}

/*
 * Expose
 */

exports.readU = readU;
exports.readU64 = readU64;
exports.readU56 = readU56;
exports.readU48 = readU48;
exports.readU40 = readU40;
exports.readU32 = readU32;
exports.readU24 = readU24;
exports.readU16 = readU16;
exports.readU8 = readU8;

exports.readUBE = readUBE;
exports.readU64BE = readU64BE;
exports.readU56BE = readU56BE;
exports.readU48BE = readU48BE;
exports.readU40BE = readU40BE;
exports.readU32BE = readU32BE;
exports.readU24BE = readU24BE;
exports.readU16BE = readU16BE;

exports.readI = readI;
exports.readI64 = readI64;
exports.readI56 = readI56;
exports.readI48 = readI48;
exports.readI40 = readI40;
exports.readI32 = readI32;
exports.readI24 = readI24;
exports.readI16 = readI16;
exports.readI8 = readI8;

exports.readIBE = readIBE;
exports.readI64BE = readI64BE;
exports.readI56BE = readI56BE;
exports.readI48BE = readI48BE;
exports.readI40BE = readI40BE;
exports.readI32BE = readI32BE;
exports.readI24BE = readI24BE;
exports.readI16BE = readI16BE;

exports.readFloat = readFloat;
exports.readFloatBE = readFloatBE;
exports.readDouble = readDouble;
exports.readDoubleBE = readDoubleBE;

exports.writeU = writeU;
exports.writeU64 = writeU64;
exports.writeU56 = writeU56;
exports.writeU48 = writeU48;
exports.writeU40 = writeU40;
exports.writeU32 = writeU32;
exports.writeU24 = writeU24;
exports.writeU16 = writeU16;
exports.writeU8 = writeU8;

exports.writeUBE = writeUBE;
exports.writeU64BE = writeU64BE;
exports.writeU56BE = writeU56BE;
exports.writeU48BE = writeU48BE;
exports.writeU40BE = writeU40BE;
exports.writeU32BE = writeU32BE;
exports.writeU24BE = writeU24BE;
exports.writeU16BE = writeU16BE;

exports.writeI = writeI;
exports.writeI64 = writeI64;
exports.writeI56 = writeI56;
exports.writeI48 = writeI48;
exports.writeI40 = writeI40;
exports.writeI32 = writeI32;
exports.writeI24 = writeI24;
exports.writeI16 = writeI16;
exports.writeI8 = writeI8;

exports.writeIBE = writeIBE;
exports.writeI64BE = writeI64BE;
exports.writeI56BE = writeI56BE;
exports.writeI48BE = writeI48BE;
exports.writeI40BE = writeI40BE;
exports.writeI32BE = writeI32BE;
exports.writeI24BE = writeI24BE;
exports.writeI16BE = writeI16BE;

exports.writeFloat = writeFloat;
exports.writeFloatBE = writeFloatBE;
exports.writeDouble = writeDouble;
exports.writeDoubleBE = writeDoubleBE;

exports.readVarint = readVarint;
exports.writeVarint = writeVarint;
exports.sizeVarint = sizeVarint;
exports.readVarint2 = readVarint2;
exports.writeVarint2 = writeVarint2;
exports.sizeVarint2 = sizeVarint2;

exports.sliceBytes = sliceBytes;
exports.readBytes = readBytes;
exports.writeBytes = writeBytes;
exports.readString = readString;
exports.writeString = writeString;

exports.realloc = realloc;
exports.copy = copy;
exports.concat = concat;

exports.sizeVarBytes = sizeVarBytes;
exports.sizeVarlen = sizeVarlen;
exports.sizeVarString = sizeVarString;
}],
[/* 10 */ 'bufio', '/lib/enforce.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * enforce.js - type enforcement for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

/*
 * Enforce
 */

function enforce(value, name, type) {
  if (!value) {
    const err = new TypeError(`'${name}' must be a(n) ${type}.`);

    if (Error.captureStackTrace)
      Error.captureStackTrace(err, enforce);

    throw err;
  }
}

/*
 * Expose
 */

module.exports = enforce;
}],
[/* 11 */ 'bufio', '/lib/error.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * error.js - encoding error for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

/**
 * Encoding Error
 * @extends {Error}
 */

class EncodingError extends Error {
  /**
   * Create an encoding error.
   * @constructor
   * @param {Number} offset
   * @param {String} reason
   */

  constructor(offset, reason, start) {
    super();

    this.type = 'EncodingError';
    this.name = 'EncodingError';
    this.code = 'ERR_ENCODING';
    this.message = `${reason} (offset=${offset}).`;

    if (Error.captureStackTrace)
      Error.captureStackTrace(this, start || EncodingError);
  }
}

/*
 * Expose
 */

module.exports = EncodingError;
}],
[/* 12 */ 'bufio', '/lib/reader.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * reader.js - buffer reader for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const enforce = __browser_require__(10 /* './enforce' */, module);
const encoding = __browser_require__(9 /* './encoding' */, module);
const EncodingError = __browser_require__(11 /* './error' */, module);

/*
 * Constants
 */

const EMPTY = Buffer.alloc(0);

/**
 * Buffer Reader
 */

class BufferReader {
  /**
   * Create a buffer reader.
   * @constructor
   * @param {Buffer} data
   * @param {Boolean?} zeroCopy - Do not reallocate buffers when
   * slicing. Note that this can lead to memory leaks if not used
   * carefully.
   */

  constructor(data, zeroCopy = false) {
    enforce((data != null && data._isBuffer === true), 'data', 'buffer');
    enforce(typeof zeroCopy === 'boolean', 'zeroCopy', 'boolean');

    this.data = data;
    this.offset = 0;
    this.zeroCopy = zeroCopy;
    this.stack = [];
  }

  /**
   * Assertion.
   * @param {Number} size
   */

  check(size) {
    if (this.offset + size > this.data.length)
      throw new EncodingError(this.offset, 'Out of bounds read', this.check);
  }

  /**
   * Get total size of passed-in Buffer.
   * @returns {Buffer}
   */

  getSize() {
    return this.data.length;
  }

  /**
   * Calculate number of bytes left to read.
   * @returns {Number}
   */

  left() {
    this.check(0);
    return this.data.length - this.offset;
  }

  /**
   * Seek to a position to read from by offset.
   * @param {Number} off - Offset (positive or negative).
   */

  seek(off) {
    enforce(Number.isSafeInteger(off), 'off', 'integer');

    if (this.offset + off < 0)
      throw new EncodingError(this.offset, 'Out of bounds read');

    this.check(off);
    this.offset += off;

    return this;
  }

  /**
   * Mark the current starting position.
   */

  start() {
    this.stack.push(this.offset);
    return this.offset;
  }

  /**
   * Stop reading. Pop the start position off the stack
   * and calculate the size of the data read.
   * @returns {Number} Size.
   * @throws on empty stack.
   */

  end() {
    if (this.stack.length === 0)
      throw new Error('Cannot end without a stack item.');

    const start = this.stack.pop();

    return this.offset - start;
  }

  /**
   * Stop reading. Pop the start position off the stack
   * and return the data read.
   * @param {Bolean?} zeroCopy - Do a fast buffer
   * slice instead of allocating a new buffer (warning:
   * may cause memory leaks if not used with care).
   * @returns {Buffer} Data read.
   * @throws on empty stack.
   */

  endData(zeroCopy = false) {
    enforce(typeof zeroCopy === 'boolean', 'zeroCopy', 'boolean');

    if (this.stack.length === 0)
      throw new Error('Cannot end without a stack item.');

    const start = this.stack.pop();
    const end = this.offset;
    const size = end - start;
    const data = this.data;

    if (size === data.length)
      return data;

    if (this.zeroCopy || zeroCopy)
      return data.slice(start, end);

    const ret = Buffer.allocUnsafeSlow(size);

    data.copy(ret, 0, start, end);

    return ret;
  }

  /**
   * Destroy the reader. Remove references to the data.
   */

  destroy() {
    this.data = EMPTY;
    this.offset = 0;
    this.stack.length = 0;
    return this;
  }

  /**
   * Read uint8.
   * @returns {Number}
   */

  readU8() {
    this.check(1);

    const ret = this.data[this.offset];

    this.offset += 1;

    return ret;
  }

  /**
   * Read uint16le.
   * @returns {Number}
   */

  readU16() {
    this.check(2);

    const ret = encoding.readU16(this.data, this.offset);

    this.offset += 2;

    return ret;
  }

  /**
   * Read uint16be.
   * @returns {Number}
   */

  readU16BE() {
    this.check(2);

    const ret = encoding.readU16BE(this.data, this.offset);

    this.offset += 2;

    return ret;
  }

  /**
   * Read uint24le.
   * @returns {Number}
   */

  readU24() {
    this.check(3);

    const ret = encoding.readU24(this.data, this.offset);

    this.offset += 3;

    return ret;
  }

  /**
   * Read uint24be.
   * @returns {Number}
   */

  readU24BE() {
    this.check(3);

    const ret = encoding.readU24BE(this.data, this.offset);

    this.offset += 3;

    return ret;
  }

  /**
   * Read uint32le.
   * @returns {Number}
   */

  readU32() {
    this.check(4);

    const ret = encoding.readU32(this.data, this.offset);

    this.offset += 4;

    return ret;
  }

  /**
   * Read uint32be.
   * @returns {Number}
   */

  readU32BE() {
    this.check(4);

    const ret = encoding.readU32BE(this.data, this.offset);

    this.offset += 4;

    return ret;
  }

  /**
   * Read uint40le.
   * @returns {Number}
   */

  readU40() {
    this.check(5);

    const ret = encoding.readU40(this.data, this.offset);

    this.offset += 5;

    return ret;
  }

  /**
   * Read uint40be.
   * @returns {Number}
   */

  readU40BE() {
    this.check(5);

    const ret = encoding.readU40BE(this.data, this.offset);

    this.offset += 5;

    return ret;
  }

  /**
   * Read uint48le.
   * @returns {Number}
   */

  readU48() {
    this.check(6);

    const ret = encoding.readU48(this.data, this.offset);

    this.offset += 6;

    return ret;
  }

  /**
   * Read uint48be.
   * @returns {Number}
   */

  readU48BE() {
    this.check(6);

    const ret = encoding.readU48BE(this.data, this.offset);

    this.offset += 6;

    return ret;
  }

  /**
   * Read uint56le.
   * @returns {Number}
   */

  readU56() {
    this.check(7);

    const ret = encoding.readU56(this.data, this.offset);

    this.offset += 7;

    return ret;
  }

  /**
   * Read uint56be.
   * @returns {Number}
   */

  readU56BE() {
    this.check(7);

    const ret = encoding.readU56BE(this.data, this.offset);

    this.offset += 7;

    return ret;
  }

  /**
   * Read uint64le as a js number.
   * @returns {Number}
   * @throws on num > MAX_SAFE_INTEGER
   */

  readU64() {
    this.check(8);

    const ret = encoding.readU64(this.data, this.offset);

    this.offset += 8;

    return ret;
  }

  /**
   * Read uint64be as a js number.
   * @returns {Number}
   * @throws on num > MAX_SAFE_INTEGER
   */

  readU64BE() {
    this.check(8);

    const ret = encoding.readU64BE(this.data, this.offset);

    this.offset += 8;

    return ret;
  }

  /**
   * Read int8.
   * @returns {Number}
   */

  readI8() {
    this.check(1);

    const ret = encoding.readI8(this.data, this.offset);

    this.offset += 1;

    return ret;
  }

  /**
   * Read int16le.
   * @returns {Number}
   */

  readI16() {
    this.check(2);

    const ret = encoding.readI16(this.data, this.offset);

    this.offset += 2;

    return ret;
  }

  /**
   * Read int16be.
   * @returns {Number}
   */

  readI16BE() {
    this.check(2);

    const ret = encoding.readI16BE(this.data, this.offset);

    this.offset += 2;

    return ret;
  }

  /**
   * Read int24le.
   * @returns {Number}
   */

  readI24() {
    this.check(3);

    const ret = encoding.readI24(this.data, this.offset);

    this.offset += 3;

    return ret;
  }

  /**
   * Read int24be.
   * @returns {Number}
   */

  readI24BE() {
    this.check(3);

    const ret = encoding.readI24BE(this.data, this.offset);

    this.offset += 3;

    return ret;
  }

  /**
   * Read int32le.
   * @returns {Number}
   */

  readI32() {
    this.check(4);

    const ret = encoding.readI32(this.data, this.offset);

    this.offset += 4;

    return ret;
  }

  /**
   * Read int32be.
   * @returns {Number}
   */

  readI32BE() {
    this.check(4);

    const ret = encoding.readI32BE(this.data, this.offset);

    this.offset += 4;

    return ret;
  }

  /**
   * Read int40le.
   * @returns {Number}
   */

  readI40() {
    this.check(5);

    const ret = encoding.readI40(this.data, this.offset);

    this.offset += 5;

    return ret;
  }

  /**
   * Read int40be.
   * @returns {Number}
   */

  readI40BE() {
    this.check(5);

    const ret = encoding.readI40BE(this.data, this.offset);

    this.offset += 5;

    return ret;
  }

  /**
   * Read int48le.
   * @returns {Number}
   */

  readI48() {
    this.check(6);

    const ret = encoding.readI48(this.data, this.offset);

    this.offset += 6;

    return ret;
  }

  /**
   * Read int48be.
   * @returns {Number}
   */

  readI48BE() {
    this.check(6);

    const ret = encoding.readI48BE(this.data, this.offset);

    this.offset += 6;

    return ret;
  }

  /**
   * Read int56le.
   * @returns {Number}
   */

  readI56() {
    this.check(7);

    const ret = encoding.readI56(this.data, this.offset);

    this.offset += 7;

    return ret;
  }

  /**
   * Read int56be.
   * @returns {Number}
   */

  readI56BE() {
    this.check(7);

    const ret = encoding.readI56BE(this.data, this.offset);

    this.offset += 7;

    return ret;
  }

  /**
   * Read int64le as a js number.
   * @returns {Number}
   * @throws on num > MAX_SAFE_INTEGER
   */

  readI64() {
    this.check(8);

    const ret = encoding.readI64(this.data, this.offset);

    this.offset += 8;

    return ret;
  }

  /**
   * Read int64be as a js number.
   * @returns {Number}
   * @throws on num > MAX_SAFE_INTEGER
   */

  readI64BE() {
    this.check(8);

    const ret = encoding.readI64BE(this.data, this.offset);

    this.offset += 8;

    return ret;
  }

  /**
   * Read float le.
   * @returns {Number}
   */

  readFloat() {
    this.check(4);

    const ret = encoding.readFloat(this.data, this.offset);

    this.offset += 4;

    return ret;
  }

  /**
   * Read float be.
   * @returns {Number}
   */

  readFloatBE() {
    this.check(4);

    const ret = encoding.readFloatBE(this.data, this.offset);

    this.offset += 4;

    return ret;
  }

  /**
   * Read double float le.
   * @returns {Number}
   */

  readDouble() {
    this.check(8);

    const ret = encoding.readDouble(this.data, this.offset);

    this.offset += 8;

    return ret;
  }

  /**
   * Read double float be.
   * @returns {Number}
   */

  readDoubleBE() {
    this.check(8);

    const ret = encoding.readDoubleBE(this.data, this.offset);

    this.offset += 8;

    return ret;
  }

  /**
   * Read a varint.
   * @returns {Number}
   */

  readVarint() {
    const {size, value} = encoding.readVarint(this.data, this.offset);

    this.offset += size;

    return value;
  }

  /**
   * Read a varint (type 2).
   * @returns {Number}
   */

  readVarint2() {
    const {size, value} = encoding.readVarint2(this.data, this.offset);

    this.offset += size;

    return value;
  }

  /**
   * Read N bytes (will do a fast slice if zero copy).
   * @param {Number} size
   * @param {Bolean?} zeroCopy - Do a fast buffer
   * slice instead of allocating a new buffer (warning:
   * may cause memory leaks if not used with care).
   * @returns {Buffer}
   */

  readBytes(size, zeroCopy = false) {
    enforce((size >>> 0) === size, 'size', 'integer');
    enforce(typeof zeroCopy === 'boolean', 'zeroCopy', 'boolean');

    this.check(size);

    let ret;

    if (this.zeroCopy || zeroCopy) {
      ret = this.data.slice(this.offset, this.offset + size);
    } else {
      ret = Buffer.allocUnsafeSlow(size);
      this.data.copy(ret, 0, this.offset, this.offset + size);
    }

    this.offset += size;

    return ret;
  }

  /**
   * Read a varint number of bytes (will do a fast slice if zero copy).
   * @param {Bolean?} zeroCopy - Do a fast buffer
   * slice instead of allocating a new buffer (warning:
   * may cause memory leaks if not used with care).
   * @returns {Buffer}
   */

  readVarBytes(zeroCopy = false) {
    return this.readBytes(this.readVarint(), zeroCopy);
  }

  /**
   * Slice N bytes and create a child reader.
   * @param {Number} size
   * @returns {BufferReader}
   */

  readChild(size) {
    enforce((size >>> 0) === size, 'size', 'integer');

    this.check(size);

    const data = this.data.slice(0, this.offset + size);
    const br = new this.constructor(data);

    br.offset = this.offset;

    this.offset += size;

    return br;
  }

  /**
   * Read a string.
   * @param {Number} size
   * @param {String} enc - Any buffer-supported encoding.
   * @returns {String}
   */

  readString(size, enc) {
    if (enc == null)
      enc = 'binary';

    enforce((size >>> 0) === size, 'size', 'integer');
    enforce(typeof enc === 'string', 'enc', 'string');

    this.check(size);

    const ret = this.data.toString(enc, this.offset, this.offset + size);

    this.offset += size;

    return ret;
  }

  /**
   * Read a 32-byte hash.
   * @param {String} enc - `"hex"` or `null`.
   * @returns {Hash|Buffer}
   */

  readHash(enc) {
    if (enc)
      return this.readString(32, enc);
    return this.readBytes(32);
  }

  /**
   * Read string of a varint length.
   * @param {String} enc - Any buffer-supported encoding.
   * @param {Number?} limit - Size limit.
   * @returns {String}
   */

  readVarString(enc, limit = 0) {
    if (enc == null)
      enc = 'binary';

    enforce(typeof enc === 'string', 'enc', 'string');
    enforce((limit >>> 0) === limit, 'limit', 'integer');

    const size = this.readVarint();

    if (limit !== 0 && size > limit)
      throw new EncodingError(this.offset, 'String exceeds limit');

    return this.readString(size, enc);
  }

  /**
   * Read a null-terminated string.
   * @param {String} enc - Any buffer-supported encoding.
   * @returns {String}
   */

  readNullString(enc) {
    if (enc == null)
      enc = 'binary';

    enforce(typeof enc === 'string', 'enc', 'string');

    let i = this.offset;

    for (; i < this.data.length; i++) {
      if (this.data[i] === 0)
        break;
    }

    if (i === this.data.length)
      throw new EncodingError(this.offset, 'No NUL terminator');

    const ret = this.readString(i - this.offset, enc);

    this.offset = i + 1;

    return ret;
  }

  /**
   * Create a checksum from the last start position.
   * @param {Function} hash
   * @returns {Number} Checksum.
   */

  createChecksum(hash) {
    if (!hash || typeof hash.digest !== 'function')
      enforce(typeof hash === 'function', 'hash', 'function');

    let start = 0;

    if (this.stack.length > 0)
      start = this.stack[this.stack.length - 1];

    const data = this.data.slice(start, this.offset);
    const raw = hash.digest ? hash.digest(data) : hash(data);

    return encoding.readU32(raw, 0);
  }

  /**
   * Verify a 4-byte checksum against a calculated checksum.
   * @param {Function} hash
   * @returns {Number} checksum
   * @throws on bad checksum
   */

  verifyChecksum(hash) {
    const checksum = this.createChecksum(hash);
    const expect = this.readU32();

    if (checksum !== expect)
      throw new EncodingError(this.offset, 'Checksum mismatch');

    return checksum;
  }
}

/*
 * Expose
 */

module.exports = BufferReader;
}],
[/* 13 */ 'bufio', '/lib/writer.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * writer.js - buffer writer for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const enforce = __browser_require__(10 /* './enforce' */, module);
const encoding = __browser_require__(9 /* './encoding' */, module);
const EncodingError = __browser_require__(11 /* './error' */, module);

/*
 * Constants
 */

const SEEK = 0;
const U8 = 1;
const U16 = 2;
const U16BE = 3;
const U24 = 4;
const U24BE = 5;
const U32 = 6;
const U32BE = 7;
const U40 = 8;
const U40BE = 9;
const U48 = 10;
const U48BE = 11;
const U56 = 12;
const U56BE = 13;
const U64 = 14;
const U64BE = 15;
const I8 = 16;
const I16 = 17;
const I16BE = 18;
const I24 = 19;
const I24BE = 20;
const I32 = 21;
const I32BE = 22;
const I40 = 23;
const I40BE = 24;
const I48 = 25;
const I48BE = 26;
const I56 = 27;
const I56BE = 28;
const I64 = 29;
const I64BE = 30;
const FL = 31;
const FLBE = 32;
const DBL = 33;
const DBLBE = 34;
const VARINT = 35;
const VARINT2 = 36;
const BYTES = 37;
const STR = 38;
const CHECKSUM = 39;
const FILL = 40;

/**
 * Buffer Writer
 */

class BufferWriter {
  /**
   * Create a buffer writer.
   * @constructor
   */

  constructor() {
    this.ops = [];
    this.offset = 0;
  }

  /**
   * Allocate and render the final buffer.
   * @returns {Buffer} Rendered buffer.
   */

  render() {
    const data = Buffer.allocUnsafeSlow(this.offset);

    let off = 0;

    for (const op of this.ops) {
      switch (op.type) {
        case SEEK:
          off += op.value;
          break;
        case U8:
          off = encoding.writeU8(data, op.value, off);
          break;
        case U16:
          off = encoding.writeU16(data, op.value, off);
          break;
        case U16BE:
          off = encoding.writeU16BE(data, op.value, off);
          break;
        case U24:
          off = encoding.writeU24(data, op.value, off);
          break;
        case U24BE:
          off = encoding.writeU24BE(data, op.value, off);
          break;
        case U32:
          off = encoding.writeU32(data, op.value, off);
          break;
        case U32BE:
          off = encoding.writeU32BE(data, op.value, off);
          break;
        case U40:
          off = encoding.writeU40(data, op.value, off);
          break;
        case U40BE:
          off = encoding.writeU40BE(data, op.value, off);
          break;
        case U48:
          off = encoding.writeU48(data, op.value, off);
          break;
        case U48BE:
          off = encoding.writeU48BE(data, op.value, off);
          break;
        case U56:
          off = encoding.writeU56(data, op.value, off);
          break;
        case U56BE:
          off = encoding.writeU56BE(data, op.value, off);
          break;
        case U64:
          off = encoding.writeU64(data, op.value, off);
          break;
        case U64BE:
          off = encoding.writeU64BE(data, op.value, off);
          break;
        case I8:
          off = encoding.writeI8(data, op.value, off);
          break;
        case I16:
          off = encoding.writeI16(data, op.value, off);
          break;
        case I16BE:
          off = encoding.writeI16BE(data, op.value, off);
          break;
        case I24:
          off = encoding.writeI24(data, op.value, off);
          break;
        case I24BE:
          off = encoding.writeI24BE(data, op.value, off);
          break;
        case I32:
          off = encoding.writeI32(data, op.value, off);
          break;
        case I32BE:
          off = encoding.writeI32BE(data, op.value, off);
          break;
        case I40:
          off = encoding.writeI40(data, op.value, off);
          break;
        case I40BE:
          off = encoding.writeI40BE(data, op.value, off);
          break;
        case I48:
          off = encoding.writeI48(data, op.value, off);
          break;
        case I48BE:
          off = encoding.writeI48BE(data, op.value, off);
          break;
        case I56:
          off = encoding.writeI56(data, op.value, off);
          break;
        case I56BE:
          off = encoding.writeI56BE(data, op.value, off);
          break;
        case I64:
          off = encoding.writeI64(data, op.value, off);
          break;
        case I64BE:
          off = encoding.writeI64BE(data, op.value, off);
          break;
        case FL:
          off = encoding.writeFloat(data, op.value, off);
          break;
        case FLBE:
          off = encoding.writeFloatBE(data, op.value, off);
          break;
        case DBL:
          off = encoding.writeDouble(data, op.value, off);
          break;
        case DBLBE:
          off = encoding.writeDoubleBE(data, op.value, off);
          break;
        case VARINT:
          off = encoding.writeVarint(data, op.value, off);
          break;
        case VARINT2:
          off = encoding.writeVarint2(data, op.value, off);
          break;
        case BYTES:
          off += op.data.copy(data, off);
          break;
        case STR:
          off += data.write(op.value, off, op.enc);
          break;
        case CHECKSUM:
          off += op.func(data.slice(0, off)).copy(data, off, 0, 4);
          break;
        case FILL:
          data.fill(op.value, off, off + op.size);
          off += op.size;
          break;
        default:
          throw new Error('Invalid type.');
      }
    }

    if (off !== data.length)
      throw new EncodingError(off, 'Out of bounds write');

    this.destroy();

    return data;
  }

  /**
   * Get size of data written so far.
   * @returns {Number}
   */

  getSize() {
    return this.offset;
  }

  /**
   * Seek to relative offset.
   * @param {Number} offset
   */

  seek(off) {
    enforce(Number.isSafeInteger(off), 'off', 'integer');

    if (this.offset + off < 0)
      throw new EncodingError(this.offset, 'Out of bounds write');

    this.offset += off;
    this.ops.push(new NumberOp(SEEK, off));

    return this;
  }

  /**
   * Destroy the buffer writer. Remove references to `ops`.
   */

  destroy() {
    this.ops.length = 0;
    this.offset = 0;
    return this;
  }

  /**
   * Write uint8.
   * @param {Number} value
   */

  writeU8(value) {
    this.offset += 1;
    this.ops.push(new NumberOp(U8, value));
    return this;
  }

  /**
   * Write uint16le.
   * @param {Number} value
   */

  writeU16(value) {
    this.offset += 2;
    this.ops.push(new NumberOp(U16, value));
    return this;
  }

  /**
   * Write uint16be.
   * @param {Number} value
   */

  writeU16BE(value) {
    this.offset += 2;
    this.ops.push(new NumberOp(U16BE, value));
    return this;
  }

  /**
   * Write uint24le.
   * @param {Number} value
   */

  writeU24(value) {
    this.offset += 3;
    this.ops.push(new NumberOp(U24, value));
    return this;
  }

  /**
   * Write uint24be.
   * @param {Number} value
   */

  writeU24BE(value) {
    this.offset += 3;
    this.ops.push(new NumberOp(U24BE, value));
    return this;
  }

  /**
   * Write uint32le.
   * @param {Number} value
   */

  writeU32(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(U32, value));
    return this;
  }

  /**
   * Write uint32be.
   * @param {Number} value
   */

  writeU32BE(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(U32BE, value));
    return this;
  }

  /**
   * Write uint40le.
   * @param {Number} value
   */

  writeU40(value) {
    this.offset += 5;
    this.ops.push(new NumberOp(U40, value));
    return this;
  }

  /**
   * Write uint40be.
   * @param {Number} value
   */

  writeU40BE(value) {
    this.offset += 5;
    this.ops.push(new NumberOp(U40BE, value));
    return this;
  }

  /**
   * Write uint48le.
   * @param {Number} value
   */

  writeU48(value) {
    this.offset += 6;
    this.ops.push(new NumberOp(U48, value));
    return this;
  }

  /**
   * Write uint48be.
   * @param {Number} value
   */

  writeU48BE(value) {
    this.offset += 6;
    this.ops.push(new NumberOp(U48BE, value));
    return this;
  }

  /**
   * Write uint56le.
   * @param {Number} value
   */

  writeU56(value) {
    this.offset += 7;
    this.ops.push(new NumberOp(U56, value));
    return this;
  }

  /**
   * Write uint56be.
   * @param {Number} value
   */

  writeU56BE(value) {
    this.offset += 7;
    this.ops.push(new NumberOp(U56BE, value));
    return this;
  }

  /**
   * Write uint64le.
   * @param {Number} value
   */

  writeU64(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(U64, value));
    return this;
  }

  /**
   * Write uint64be.
   * @param {Number} value
   */

  writeU64BE(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(U64BE, value));
    return this;
  }

  /**
   * Write int8.
   * @param {Number} value
   */

  writeI8(value) {
    this.offset += 1;
    this.ops.push(new NumberOp(I8, value));
    return this;
  }

  /**
   * Write int16le.
   * @param {Number} value
   */

  writeI16(value) {
    this.offset += 2;
    this.ops.push(new NumberOp(I16, value));
    return this;
  }

  /**
   * Write int16be.
   * @param {Number} value
   */

  writeI16BE(value) {
    this.offset += 2;
    this.ops.push(new NumberOp(I16BE, value));
    return this;
  }

  /**
   * Write int24le.
   * @param {Number} value
   */

  writeI24(value) {
    this.offset += 3;
    this.ops.push(new NumberOp(I24, value));
    return this;
  }

  /**
   * Write int24be.
   * @param {Number} value
   */

  writeI24BE(value) {
    this.offset += 3;
    this.ops.push(new NumberOp(I24BE, value));
    return this;
  }

  /**
   * Write int32le.
   * @param {Number} value
   */

  writeI32(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(I32, value));
    return this;
  }

  /**
   * Write int32be.
   * @param {Number} value
   */

  writeI32BE(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(I32BE, value));
    return this;
  }

  /**
   * Write int40le.
   * @param {Number} value
   */

  writeI40(value) {
    this.offset += 5;
    this.ops.push(new NumberOp(I40, value));
    return this;
  }

  /**
   * Write int40be.
   * @param {Number} value
   */

  writeI40BE(value) {
    this.offset += 5;
    this.ops.push(new NumberOp(I40BE, value));
    return this;
  }

  /**
   * Write int48le.
   * @param {Number} value
   */

  writeI48(value) {
    this.offset += 6;
    this.ops.push(new NumberOp(I48, value));
    return this;
  }

  /**
   * Write int48be.
   * @param {Number} value
   */

  writeI48BE(value) {
    this.offset += 6;
    this.ops.push(new NumberOp(I48BE, value));
    return this;
  }

  /**
   * Write int56le.
   * @param {Number} value
   */

  writeI56(value) {
    this.offset += 7;
    this.ops.push(new NumberOp(I56, value));
    return this;
  }

  /**
   * Write int56be.
   * @param {Number} value
   */

  writeI56BE(value) {
    this.offset += 7;
    this.ops.push(new NumberOp(I56BE, value));
    return this;
  }

  /**
   * Write int64le.
   * @param {Number} value
   */

  writeI64(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(I64, value));
    return this;
  }

  /**
   * Write int64be.
   * @param {Number} value
   */

  writeI64BE(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(I64BE, value));
    return this;
  }

  /**
   * Write float le.
   * @param {Number} value
   */

  writeFloat(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(FL, value));
    return this;
  }

  /**
   * Write float be.
   * @param {Number} value
   */

  writeFloatBE(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(FLBE, value));
    return this;
  }

  /**
   * Write double le.
   * @param {Number} value
   */

  writeDouble(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(DBL, value));
    return this;
  }

  /**
   * Write double be.
   * @param {Number} value
   */

  writeDoubleBE(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(DBLBE, value));
    return this;
  }

  /**
   * Write a varint.
   * @param {Number} value
   */

  writeVarint(value) {
    this.offset += encoding.sizeVarint(value);
    this.ops.push(new NumberOp(VARINT, value));
    return this;
  }

  /**
   * Write a varint (type 2).
   * @param {Number} value
   */

  writeVarint2(value) {
    this.offset += encoding.sizeVarint2(value);
    this.ops.push(new NumberOp(VARINT2, value));
    return this;
  }

  /**
   * Write bytes.
   * @param {Buffer} value
   */

  writeBytes(value) {
    enforce((value != null && value._isBuffer === true), 'value', 'buffer');

    if (value.length === 0)
      return this;

    this.offset += value.length;
    this.ops.push(new BufferOp(BYTES, value));

    return this;
  }

  /**
   * Write bytes with a varint length before them.
   * @param {Buffer} value
   */

  writeVarBytes(value) {
    enforce((value != null && value._isBuffer === true), 'value', 'buffer');

    this.offset += encoding.sizeVarint(value.length);
    this.ops.push(new NumberOp(VARINT, value.length));

    if (value.length === 0)
      return this;

    this.offset += value.length;
    this.ops.push(new BufferOp(BYTES, value));

    return this;
  }

  /**
   * Copy bytes.
   * @param {Buffer} value
   * @param {Number} start
   * @param {Number} end
   */

  copy(value, start, end) {
    enforce((value != null && value._isBuffer === true), 'value', 'buffer');
    enforce((start >>> 0) === start, 'start', 'integer');
    enforce((end >>> 0) === end, 'end', 'integer');
    enforce(end >= start, 'start', 'integer');

    const buf = value.slice(start, end);

    this.writeBytes(buf);

    return this;
  }

  /**
   * Write string to buffer.
   * @param {String} value
   * @param {String?} enc - Any buffer-supported encoding.
   */

  writeString(value, enc) {
    if (enc == null)
      enc = 'binary';

    enforce(typeof value === 'string', 'value', 'string');
    enforce(typeof enc === 'string', 'enc', 'string');

    if (value.length === 0)
      return this;

    this.offset += Buffer.byteLength(value, enc);
    this.ops.push(new StringOp(STR, value, enc));

    return this;
  }

  /**
   * Write a 32 byte hash.
   * @param {Hash} value
   */

  writeHash(value) {
    if (typeof value !== 'string') {
      enforce((value != null && value._isBuffer === true), 'value', 'buffer');
      enforce(value.length === 32, 'value', '32-byte hash');
      this.writeBytes(value);
      return this;
    }

    enforce(value.length === 64, 'value', '32-byte hash');

    this.writeString(value, 'hex');

    return this;
  }

  /**
   * Write a string with a varint length before it.
   * @param {String}
   * @param {String?} enc - Any buffer-supported encoding.
   */

  writeVarString(value, enc) {
    if (enc == null)
      enc = 'binary';

    enforce(typeof value === 'string', 'value', 'string');
    enforce(typeof enc === 'string', 'enc', 'string');

    if (value.length === 0) {
      this.ops.push(new NumberOp(VARINT, 0));
      return this;
    }

    const size = Buffer.byteLength(value, enc);

    this.offset += encoding.sizeVarint(size);
    this.offset += size;

    this.ops.push(new NumberOp(VARINT, size));
    this.ops.push(new StringOp(STR, value, enc));

    return this;
  }

  /**
   * Write a null-terminated string.
   * @param {String|Buffer}
   * @param {String?} enc - Any buffer-supported encoding.
   */

  writeNullString(value, enc) {
    this.writeString(value, enc);
    this.writeU8(0);
    return this;
  }

  /**
   * Calculate and write a checksum for the data written so far.
   * @param {Function} hash
   */

  writeChecksum(hash) {
    if (hash && typeof hash.digest === 'function')
      hash = hash.digest.bind(hash);

    enforce(typeof hash === 'function', 'hash', 'function');

    this.offset += 4;
    this.ops.push(new FunctionOp(CHECKSUM, hash));

    return this;
  }

  /**
   * Fill N bytes with value.
   * @param {Number} value
   * @param {Number} size
   */

  fill(value, size) {
    enforce((value & 0xff) === value, 'value', 'byte');
    enforce((size >>> 0) === size, 'size', 'integer');

    if (size === 0)
      return this;

    this.offset += size;
    this.ops.push(new FillOp(FILL, value, size));

    return this;
  }
}

/*
 * Helpers
 */

class WriteOp {
  constructor(type) {
    this.type = type;
  }
}

class NumberOp extends WriteOp {
  constructor(type, value) {
    super(type);
    this.value = value;
  }
}

class BufferOp extends WriteOp {
  constructor(type, data) {
    super(type);
    this.data = data;
  }
}

class StringOp extends WriteOp {
  constructor(type, value, enc) {
    super(type);
    this.value = value;
    this.enc = enc;
  }
}

class FunctionOp extends WriteOp {
  constructor(type, func) {
    super(type);
    this.func = func;
  }
}

class FillOp extends WriteOp {
  constructor(type, value, size) {
    super(type);
    this.value = value;
    this.size = size;
  }
}

/*
 * Expose
 */

module.exports = BufferWriter;
}],
[/* 14 */ 'bufio', '/lib/staticwriter.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * staticwriter.js - buffer writer for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const enforce = __browser_require__(10 /* './enforce' */, module);
const encoding = __browser_require__(9 /* './encoding' */, module);
const EncodingError = __browser_require__(11 /* './error' */, module);

/*
 * Constants
 */

const EMPTY = Buffer.alloc(0);
const POOL_SIZE = 100 << 10;

let POOL = null;

/**
 * Statically Allocated Writer
 */

class StaticWriter {
  /**
   * Statically allocated buffer writer.
   * @constructor
   * @param {Number|Buffer} options
   */

  constructor(options) {
    this.data = EMPTY;
    this.offset = 0;

    if (options != null)
      this.init(options);
  }

  /**
   * Assertion.
   * @param {Number} size
   */

  check(size) {
    if (this.offset + size > this.data.length)
      throw new EncodingError(this.offset, 'Out of bounds write', this.check);
  }

  /**
   * Initialize options.
   * @param {Object} options
   */

  init(options) {
    if ((options != null && options._isBuffer === true)) {
      this.data = options;
      this.offset = 0;
      return this;
    }

    enforce((options >>> 0) === options, 'size', 'integer');

    this.data = Buffer.allocUnsafeSlow(options);
    this.offset = 0;

    return this;
  }

  /**
   * Allocate writer from preallocated 100kb pool.
   * @param {Number} size
   * @returns {StaticWriter}
   */

  static pool(size) {
    enforce((size >>> 0) === size, 'size', 'integer');

    if (size <= POOL_SIZE) {
      if (!POOL)
        POOL = Buffer.allocUnsafeSlow(POOL_SIZE);

      const bw = new StaticWriter();

      bw.data = POOL.slice(0, size);

      return bw;
    }

    return new StaticWriter(size);
  }

  /**
   * Allocate and render the final buffer.
   * @returns {Buffer} Rendered buffer.
   */

  render() {
    const {data, offset} = this;

    if (offset !== data.length)
      throw new EncodingError(offset, 'Out of bounds write');

    this.destroy();

    return data;
  }

  /**
   * Slice the final buffer at written offset.
   * @returns {Buffer} Rendered buffer.
   */

  slice() {
    const {data, offset} = this;

    if (offset > data.length)
      throw new EncodingError(offset, 'Out of bounds write');

    this.destroy();

    return data.slice(0, offset);
  }

  /**
   * Get size of data written so far.
   * @returns {Number}
   */

  getSize() {
    return this.offset;
  }

  /**
   * Seek to relative offset.
   * @param {Number} off
   */

  seek(off) {
    enforce(Number.isSafeInteger(off), 'off', 'integer');

    if (this.offset + off < 0)
      throw new EncodingError(this.offset, 'Out of bounds write');

    this.check(off);
    this.offset += off;

    return this;
  }

  /**
   * Destroy the buffer writer.
   */

  destroy() {
    this.data = EMPTY;
    this.offset = 0;
    return this;
  }

  /**
   * Write uint8.
   * @param {Number} value
   */

  writeU8(value) {
    this.check(1);
    this.offset = encoding.writeU8(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint16le.
   * @param {Number} value
   */

  writeU16(value) {
    this.check(2);
    this.offset = encoding.writeU16(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint16be.
   * @param {Number} value
   */

  writeU16BE(value) {
    this.check(2);
    this.offset = encoding.writeU16BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint24le.
   * @param {Number} value
   */

  writeU24(value) {
    this.check(3);
    this.offset = encoding.writeU24(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint24be.
   * @param {Number} value
   */

  writeU24BE(value) {
    this.check(3);
    this.offset = encoding.writeU24BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint32le.
   * @param {Number} value
   */

  writeU32(value) {
    this.check(4);
    this.offset = encoding.writeU32(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint32be.
   * @param {Number} value
   */

  writeU32BE(value) {
    this.check(4);
    this.offset = encoding.writeU32BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint40le.
   * @param {Number} value
   */

  writeU40(value) {
    this.check(5);
    this.offset = encoding.writeU40(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint40be.
   * @param {Number} value
   */

  writeU40BE(value) {
    this.check(5);
    this.offset = encoding.writeU40BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint48le.
   * @param {Number} value
   */

  writeU48(value) {
    this.check(6);
    this.offset = encoding.writeU48(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint48be.
   * @param {Number} value
   */

  writeU48BE(value) {
    this.check(6);
    this.offset = encoding.writeU48BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint56le.
   * @param {Number} value
   */

  writeU56(value) {
    this.check(7);
    this.offset = encoding.writeU56(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint56be.
   * @param {Number} value
   */

  writeU56BE(value) {
    this.check(7);
    this.offset = encoding.writeU56BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint64le.
   * @param {Number} value
   */

  writeU64(value) {
    this.check(8);
    this.offset = encoding.writeU64(this.data, value, this.offset);
    return this;
  }

  /**
   * Write uint64be.
   * @param {Number} value
   */

  writeU64BE(value) {
    this.check(8);
    this.offset = encoding.writeU64BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int8.
   * @param {Number} value
   */

  writeI8(value) {
    this.check(1);
    this.offset = encoding.writeI8(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int16le.
   * @param {Number} value
   */

  writeI16(value) {
    this.check(2);
    this.offset = encoding.writeI16(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int16be.
   * @param {Number} value
   */

  writeI16BE(value) {
    this.check(2);
    this.offset = encoding.writeI16BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int24le.
   * @param {Number} value
   */

  writeI24(value) {
    this.check(3);
    this.offset = encoding.writeI24(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int24be.
   * @param {Number} value
   */

  writeI24BE(value) {
    this.check(3);
    this.offset = encoding.writeI24BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int32le.
   * @param {Number} value
   */

  writeI32(value) {
    this.check(4);
    this.offset = encoding.writeI32(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int32be.
   * @param {Number} value
   */

  writeI32BE(value) {
    this.check(4);
    this.offset = encoding.writeI32BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int40le.
   * @param {Number} value
   */

  writeI40(value) {
    this.check(5);
    this.offset = encoding.writeI40(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int40be.
   * @param {Number} value
   */

  writeI40BE(value) {
    this.check(5);
    this.offset = encoding.writeI40BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int48le.
   * @param {Number} value
   */

  writeI48(value) {
    this.check(6);
    this.offset = encoding.writeI48(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int48be.
   * @param {Number} value
   */

  writeI48BE(value) {
    this.check(6);
    this.offset = encoding.writeI48BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int56le.
   * @param {Number} value
   */

  writeI56(value) {
    this.check(7);
    this.offset = encoding.writeI56(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int56be.
   * @param {Number} value
   */

  writeI56BE(value) {
    this.check(7);
    this.offset = encoding.writeI56BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int64le.
   * @param {Number} value
   */

  writeI64(value) {
    this.check(8);
    this.offset = encoding.writeI64(this.data, value, this.offset);
    return this;
  }

  /**
   * Write int64be.
   * @param {Number} value
   */

  writeI64BE(value) {
    this.check(8);
    this.offset = encoding.writeI64BE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write float le.
   * @param {Number} value
   */

  writeFloat(value) {
    this.check(4);
    this.offset = encoding.writeFloat(this.data, value, this.offset);
    return this;
  }

  /**
   * Write float be.
   * @param {Number} value
   */

  writeFloatBE(value) {
    this.check(4);
    this.offset = encoding.writeFloatBE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write double le.
   * @param {Number} value
   */

  writeDouble(value) {
    this.check(8);
    this.offset = encoding.writeDouble(this.data, value, this.offset);
    return this;
  }

  /**
   * Write double be.
   * @param {Number} value
   */

  writeDoubleBE(value) {
    this.check(8);
    this.offset = encoding.writeDoubleBE(this.data, value, this.offset);
    return this;
  }

  /**
   * Write a varint.
   * @param {Number} value
   */

  writeVarint(value) {
    this.offset = encoding.writeVarint(this.data, value, this.offset);
    return this;
  }

  /**
   * Write a varint (type 2).
   * @param {Number} value
   */

  writeVarint2(value) {
    this.offset = encoding.writeVarint2(this.data, value, this.offset);
    return this;
  }

  /**
   * Write bytes.
   * @param {Buffer} value
   */

  writeBytes(value) {
    enforce((value != null && value._isBuffer === true), 'value', 'buffer');

    this.check(value.length);
    this.offset += value.copy(this.data, this.offset);

    return this;
  }

  /**
   * Write bytes with a varint length before them.
   * @param {Buffer} value
   */

  writeVarBytes(value) {
    enforce((value != null && value._isBuffer === true), 'value', 'buffer');

    this.writeVarint(value.length);
    this.writeBytes(value);

    return this;
  }

  /**
   * Copy bytes.
   * @param {Buffer} value
   * @param {Number} start
   * @param {Number} end
   */

  copy(value, start, end) {
    enforce((value != null && value._isBuffer === true), 'value', 'buffer');
    enforce((start >>> 0) === start, 'start', 'integer');
    enforce((end >>> 0) === end, 'end', 'integer');
    enforce(end >= start, 'start', 'integer');

    this.check(end - start);
    this.offset += value.copy(this.data, this.offset, start, end);

    return this;
  }

  /**
   * Write string to buffer.
   * @param {String} value
   * @param {String?} enc - Any buffer-supported encoding.
   */

  writeString(value, enc) {
    if (enc == null)
      enc = 'binary';

    enforce(typeof value === 'string', 'value', 'string');
    enforce(typeof enc === 'string', 'enc', 'string');

    if (value.length === 0)
      return this;

    const size = Buffer.byteLength(value, enc);

    this.check(size);

    this.offset += this.data.write(value, this.offset, enc);

    return this;
  }

  /**
   * Write a 32 byte hash.
   * @param {Hash} value
   */

  writeHash(value) {
    if (typeof value !== 'string') {
      enforce((value != null && value._isBuffer === true), 'value', 'buffer');
      enforce(value.length === 32, 'value', '32-byte hash');
      this.writeBytes(value);
      return this;
    }

    enforce(value.length === 64, 'value', '32-byte hash');

    this.check(32);
    this.offset += this.data.write(value, this.offset, 'hex');

    return this;
  }

  /**
   * Write a string with a varint length before it.
   * @param {String}
   * @param {String?} enc - Any buffer-supported encoding.
   */

  writeVarString(value, enc) {
    if (enc == null)
      enc = 'binary';

    enforce(typeof value === 'string', 'value', 'string');
    enforce(typeof enc === 'string', 'enc', 'string');

    if (value.length === 0) {
      this.writeVarint(0);
      return this;
    }

    const size = Buffer.byteLength(value, enc);

    this.writeVarint(size);
    this.check(size);
    this.offset += this.data.write(value, this.offset, enc);

    return this;
  }

  /**
   * Write a null-terminated string.
   * @param {String|Buffer}
   * @param {String?} enc - Any buffer-supported encoding.
   */

  writeNullString(value, enc) {
    this.writeString(value, enc);
    this.writeU8(0);
    return this;
  }

  /**
   * Calculate and write a checksum for the data written so far.
   * @param {Function} hash
   */

  writeChecksum(hash) {
    if (!hash || typeof hash.digest !== 'function')
      enforce(typeof hash === 'function', 'hash', 'function');

    this.check(4);

    const data = this.data.slice(0, this.offset);
    const raw = hash.digest ? hash.digest(data) : hash(data);

    raw.copy(this.data, this.offset, 0, 4);

    this.offset += 4;

    return this;
  }

  /**
   * Fill N bytes with value.
   * @param {Number} value
   * @param {Number} size
   */

  fill(value, size) {
    enforce((value & 0xff) === value, 'value', 'byte');
    enforce((size >>> 0) === size, 'size', 'integer');

    this.check(size);

    this.data.fill(value, this.offset, this.offset + size);
    this.offset += size;

    return this;
  }
}

/*
 * Expose
 */

module.exports = StaticWriter;
}],
[/* 15 */ 'bufio', '/lib/struct.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * struct.js - struct object for bcoin
 * Copyright (c) 2018, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const enforce = __browser_require__(10 /* './enforce' */, module);
const BufferReader = __browser_require__(12 /* './reader' */, module);
const BufferWriter = __browser_require__(13 /* './writer' */, module);
const StaticWriter = __browser_require__(14 /* './staticwriter' */, module);
const {custom} = __browser_require__(8 /* './custom' */, module);

/**
 * Struct
 */

class Struct {
  constructor() {}

  inject(obj) {
    enforce(obj instanceof this.constructor, 'obj', 'struct');
    return this.decode(obj.encode());
  }

  clone() {
    const copy = new this.constructor();
    return copy.inject(this);
  }

  /*
   * Bindable
   */

  getSize(extra) {
    return -1;
  }

  write(bw, extra) {
    return bw;
  }

  read(br, extra) {
    return this;
  }

  toString() {
    return Object.prototype.toString.call(this);
  }

  fromString(str, extra) {
    return this;
  }

  getJSON() {
    return this;
  }

  fromJSON(json, extra) {
    return this;
  }

  fromOptions(options, extra) {
    return this;
  }

  from(options, extra) {
    return this.fromOptions(options, extra);
  }

  format() {
    return this.getJSON();
  }

  /*
   * API
   */

  encode(extra) {
    const size = this.getSize(extra);
    const bw = size === -1
      ? new BufferWriter()
      : new StaticWriter(size);

    this.write(bw, extra);

    return bw.render();
  }

  decode(data, extra) {
    const br = new BufferReader(data);

    this.read(br, extra);

    return this;
  }

  toHex(extra) {
    return this.encode(extra).toString('hex');
  }

  fromHex(str, extra) {
    enforce(typeof str === 'string', 'str', 'string');

    const size = str.length >>> 1;
    const data = Buffer.from(str, 'hex');

    if (data.length !== size)
      throw new Error('Invalid hex string.');

    return this.decode(data, extra);
  }

  toBase64(extra) {
    return this.encode(extra).toString('base64');
  }

  fromBase64(str, extra) {
    enforce(typeof str === 'string', 'str', 'string');

    const data = Buffer.from(str, 'base64');

    if (str.length > size64(data.length))
      throw new Error('Invalid base64 string.');

    return this.decode(data, extra);
  }

  toJSON() {
    return this.getJSON();
  }

  [custom]() {
    return this.format();
  }

  /*
   * Static API
   */

  static read(br, extra) {
    return new this().read(br, extra);
  }

  static decode(data, extra) {
    return new this().decode(data, extra);
  }

  static fromHex(str, extra) {
    return new this().fromHex(str, extra);
  }

  static fromBase64(str, extra) {
    return new this().fromBase64(str, extra);
  }

  static fromString(str, extra) {
    return new this().fromString(str, extra);
  }

  static fromJSON(json, extra) {
    return new this().fromJSON(json, extra);
  }

  static fromOptions(options, extra) {
    return new this().fromOptions(options, extra);
  }

  static from(options, extra) {
    return new this().from(options, extra);
  }

  /*
   * Aliases
   */

  toWriter(bw, extra) {
    return this.write(bw, extra);
  }

  fromReader(br, extra) {
    return this.read(br, extra);
  }

  toRaw(extra) {
    return this.encode(extra);
  }

  fromRaw(data, extra) {
    return this.decode(data, extra);
  }

  /*
   * Static Aliases
   */

  static fromReader(br, extra) {
    return this.read(br, extra);
  }

  static fromRaw(data, extra) {
    return this.decode(data, extra);
  }
}

/*
 * Helpers
 */

function size64(size) {
  const expect = ((4 * size / 3) + 3) & ~3;
  return expect >>> 0;
}

/*
 * Expose
 */

module.exports = Struct;
}],
[/* 16 */ 'bcrypto', '/lib/sha256-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * sha256.js - sha256 for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(17 /* './js/sha256' */, module);
}],
[/* 17 */ 'bcrypto', '/lib/js/sha256.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * sha256.js - SHA256 implementation for bcrypto
 * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on indutny/hash.js:
 *   Copyright (c) 2014, Fedor Indutny (MIT License).
 *   https://github.com/indutny/hash.js
 *
 * Resources:
 *   https://en.wikipedia.org/wiki/SHA-2
 *   https://tools.ietf.org/html/rfc4634
 *   https://github.com/indutny/hash.js/blob/master/lib/hash/sha/256.js
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);
const HMAC = __browser_require__(19 /* '../internal/hmac' */, module);

/*
 * Constants
 */

const FINALIZED = -1;
const DESC = Buffer.alloc(8, 0x00);
const PADDING = Buffer.alloc(64, 0x00);

PADDING[0] = 0x80;

const K = new Uint32Array([
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);

/**
 * SHA256
 */

class SHA256 {
  constructor() {
    this.state = new Uint32Array(8);
    this.msg = new Uint32Array(64);
    this.block = Buffer.alloc(64);
    this.size = FINALIZED;
  }

  init() {
    this.state[0] = 0x6a09e667;
    this.state[1] = 0xbb67ae85;
    this.state[2] = 0x3c6ef372;
    this.state[3] = 0xa54ff53a;
    this.state[4] = 0x510e527f;
    this.state[5] = 0x9b05688c;
    this.state[6] = 0x1f83d9ab;
    this.state[7] = 0x5be0cd19;
    this.size = 0;
    return this;
  }

  update(data) {
    assert((data != null && data._isBuffer === true));
    this._update(data, data.length);
    return this;
  }

  final() {
    return this._final(Buffer.alloc(32));
  }

  _update(data, len) {
    assert(this.size !== FINALIZED, 'Context is not initialized.');

    let pos = this.size & 63;
    let off = 0;

    this.size += len;

    if (pos > 0) {
      let want = 64 - pos;

      if (want > len)
        want = len;

      data.copy(this.block, pos, off, off + want);

      pos += want;
      len -= want;
      off += want;

      if (pos < 64)
        return;

      this._transform(this.block, 0);
    }

    while (len >= 64) {
      this._transform(data, off);
      off += 64;
      len -= 64;
    }

    if (len > 0)
      data.copy(this.block, 0, off, off + len);
  }

  _final(out) {
    assert(this.size !== FINALIZED, 'Context is not initialized.');

    const pos = this.size & 63;
    const len = this.size * 8;

    writeU32(DESC, (len * (1 / 0x100000000)) >>> 0, 0);
    writeU32(DESC, len >>> 0, 4);

    this._update(PADDING, 1 + ((119 - pos) & 63));
    this._update(DESC, 8);

    for (let i = 0; i < 8; i++) {
      writeU32(out, this.state[i], i * 4);
      this.state[i] = 0;
    }

    for (let i = 0; i < 64; i++)
      this.msg[i] = 0;

    for (let i = 0; i < 64; i++)
      this.block[i] = 0;

    this.size = FINALIZED;

    return out;
  }

  _transform(chunk, pos) {
    const W = this.msg;

    let a = this.state[0];
    let b = this.state[1];
    let c = this.state[2];
    let d = this.state[3];
    let e = this.state[4];
    let f = this.state[5];
    let g = this.state[6];
    let h = this.state[7];
    let i = 0;

    for (; i < 16; i++)
      W[i] = readU32(chunk, pos + i * 4);

    for (; i < 64; i++)
      W[i] = sigma1(W[i - 2]) + W[i - 7] + sigma0(W[i - 15]) + W[i - 16];

    for (i = 0; i < 64; i++) {
      const t1 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i];
      const t2 = Sigma0(a) + Maj(a, b, c);

      h = g;
      g = f;
      f = e;

      e = (d + t1) >>> 0;

      d = c;
      c = b;
      b = a;

      a = (t1 + t2) >>> 0;
    }

    this.state[0] += a;
    this.state[1] += b;
    this.state[2] += c;
    this.state[3] += d;
    this.state[4] += e;
    this.state[5] += f;
    this.state[6] += g;
    this.state[7] += h;
  }

  static hash() {
    return new SHA256();
  }

  static hmac() {
    return new HMAC(SHA256, 64);
  }

  static digest(data) {
    return SHA256.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert((left != null && left._isBuffer === true) && left.length === 32);
    assert((right != null && right._isBuffer === true) && right.length === 32);
    return SHA256.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    const {ctx} = SHA256;

    ctx.init();
    ctx.update(x);
    ctx.update(y);

    if (z)
      ctx.update(z);

    return ctx.final();
  }

  static mac(data, key) {
    return SHA256.hmac().init(key).update(data).final();
  }
}

/*
 * Static
 */

SHA256.native = 0;
SHA256.id = 'SHA256';
SHA256.size = 32;
SHA256.bits = 256;
SHA256.blockSize = 64;
SHA256.zero = Buffer.alloc(32, 0x00);
SHA256.ctx = new SHA256();

/*
 * Helpers
 */

function Sigma0(x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}

function Sigma1(x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}

function sigma0(x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3);
}

function sigma1(x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10);
}

function Ch(x, y, z) {
  return z ^ (x & (y ^ z));
}

function Maj(x, y, z) {
  return (x & y) | (z & (x | y));
}

function readU32(data, off) {
  return (data[off++] * 0x1000000
        + data[off++] * 0x10000
        + data[off++] * 0x100
        + data[off]);
}

function writeU32(data, num, off) {
  data[off++] = num >>> 24;
  data[off++] = num >>> 16;
  data[off++] = num >>> 8;
  data[off++] = num;
  return off;
}

/*
 * Expose
 */

module.exports = SHA256;
}],
[/* 18 */ 'bcrypto', '/lib/internal/assert.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * assert.js - assert for bcrypto
 * Copyright (c) 2020, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

/*
 * Assert
 */

function assert(val, msg) {
  if (!val) {
    const err = new Error(msg || 'Assertion failed');

    if (Error.captureStackTrace)
      Error.captureStackTrace(err, assert);

    throw err;
  }
}

/*
 * Expose
 */

module.exports = assert;
}],
[/* 19 */ 'bcrypto', '/lib/internal/hmac.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * hmac.js - hmac for bcrypto
 * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on indutny/hash.js:
 *   Copyright (c) 2014, Fedor Indutny (MIT License).
 *   https://github.com/indutny/hash.js
 *
 * Resources:
 *   https://en.wikipedia.org/wiki/HMAC
 *   https://tools.ietf.org/html/rfc2104
 *   https://github.com/indutny/hash.js/blob/master/lib/hash/hmac.js
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);

/**
 * HMAC
 */

class HMAC {
  /**
   * Create an HMAC.
   * @param {Function} Hash
   * @param {Number} size
   * @param {Array} [x=[]]
   * @param {Array} [y=[]]
   */

  constructor(Hash, size, x = [], y = []) {
    assert(typeof Hash === 'function');
    assert((size >>> 0) === size);
    assert(Array.isArray(x));
    assert(Array.isArray(y));

    this.hash = Hash;
    this.size = size;
    this.x = x;
    this.y = y;

    this.inner = new Hash();
    this.outer = new Hash();
  }

  /**
   * Initialize HMAC context.
   * @param {Buffer} data
   */

  init(key) {
    assert((key != null && key._isBuffer === true));

    // Shorten key
    if (key.length > this.size) {
      const Hash = this.hash;
      const h = new Hash();

      h.init(...this.x);
      h.update(key);

      key = h.final(...this.y);

      assert(key.length <= this.size);
    }

    // Pad key
    const pad = Buffer.alloc(this.size);

    for (let i = 0; i < key.length; i++)
      pad[i] = key[i] ^ 0x36;

    for (let i = key.length; i < pad.length; i++)
      pad[i] = 0x36;

    this.inner.init(...this.x);
    this.inner.update(pad);

    for (let i = 0; i < key.length; i++)
      pad[i] = key[i] ^ 0x5c;

    for (let i = key.length; i < pad.length; i++)
      pad[i] = 0x5c;

    this.outer.init(...this.x);
    this.outer.update(pad);

    return this;
  }

  /**
   * Update HMAC context.
   * @param {Buffer} data
   */

  update(data) {
    this.inner.update(data);
    return this;
  }

  /**
   * Finalize HMAC context.
   * @returns {Buffer}
   */

  final() {
    this.outer.update(this.inner.final(...this.y));
    return this.outer.final(...this.y);
  }
}

/*
 * Expose
 */

module.exports = HMAC;
}],
[/* 20 */ 'bcrypto', '/lib/cleanse-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * cleanse.js - cleanse for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(21 /* './js/cleanse' */, module);
}],
[/* 21 */ 'bcrypto', '/lib/js/cleanse.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * cleanse.js - memzero for bcrypto
 * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);
const random = __browser_require__(22 /* '../random' */, module);

/**
 * A maybe-secure memzero.
 * @param {Buffer} data
 */

function cleanse(data) {
  assert((data != null && data._isBuffer === true));
  random.randomFill(data, 0, data.length);
}

/*
 * Static
 */

cleanse.native = 0;

/*
 * Expose
 */

module.exports = cleanse;
}],
[/* 22 */ 'bcrypto', '/lib/random-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * random.js - random for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(23 /* './js/random' */, module);
}],
[/* 23 */ 'bcrypto', '/lib/js/random.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * random.js - random number generator for bcrypto
 * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Resources:
 *   https://wiki.openssl.org/index.php/Random_Numbers
 *   https://csrc.nist.gov/projects/random-bit-generation/
 *   http://www.pcg-random.org/posts/bounded-rands.html
 *   https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);

/*
 * Constants
 */

const crypto = global.crypto || global.msCrypto;
const HAS_CRYPTO = crypto && typeof crypto.getRandomValues === 'function';
const randomValues = HAS_CRYPTO ? crypto.getRandomValues.bind(crypto) : null;
const pool = new Uint32Array(16);
const MAX_BYTES = 65536;

let poolPos = 0;

/**
 * Generate pseudo-random bytes.
 * @param {Number} size
 * @returns {Buffer}
 */

function randomBytes(size) {
  assert((size >>> 0) === size);

  const data = Buffer.alloc(size);

  randomFillSync(data, 0, size);

  return data;
}

/**
 * Generate pseudo-random bytes.
 * @param {Buffer} data
 * @param {Number} [off=0]
 * @param {Number} [size=data.length-off]
 * @returns {Buffer}
 */

function randomFill(data, off, size) {
  assert((data != null && data._isBuffer === true));

  if (off == null)
    off = 0;

  assert((off >>> 0) === off);

  if (size == null)
    size = data.length - off;

  assert((size >>> 0) === size);
  assert(off + size <= data.length);

  randomFillSync(data, off, size);

  return data;
}

/**
 * Generate a random uint32.
 * @returns {Number}
 */

function randomInt() {
  if ((poolPos & 15) === 0) {
    getRandomValues(pool);
    poolPos = 0;
  }

  return pool[poolPos++];
}

/**
 * Generate a random uint32 within a range.
 * @param {Number} min - Inclusive.
 * @param {Number} max - Exclusive.
 * @returns {Number}
 */

function randomRange(min, max) {
  assert((min >>> 0) === min);
  assert((max >>> 0) === max);
  assert(max >= min);

  const space = max - min;

  if (space === 0)
    return min;

  const top = -space >>> 0;

  let x, r;

  do {
    x = randomInt();
    r = x % space;
  } while (x - r > top);

  return r + min;
}

/*
 * Helpers
 */

function getRandomValues(array) {
  if (!HAS_CRYPTO)
    throw new Error('Entropy source not available.');

  return randomValues(array);
}

function randomFillSync(data, off, size) {
  assert((data != null && data._isBuffer === true));
  assert(data.buffer instanceof ArrayBuffer);
  assert((data.byteOffset >>> 0) === data.byteOffset);
  assert((data.byteLength >>> 0) === data.byteLength);
  assert((off >>> 0) === off);
  assert((size >>> 0) === size);
  assert(off + size <= data.byteLength);

  if (size > 2 ** 31 - 1)
    throw new RangeError('The value "size" is out of range.');

  const offset = data.byteOffset + off;
  const array = new Uint8Array(data.buffer, offset, size);

  if (array.length > MAX_BYTES) {
    for (let i = 0; i < array.length; i += MAX_BYTES) {
      let j = i + MAX_BYTES;

      if (j > array.length)
        j = array.length;

      getRandomValues(array.subarray(i, j));
    }
  } else {
    if (array.length > 0)
      getRandomValues(array);
  }
}

/*
 * Expose
 */

exports.native = 0;
exports.randomBytes = randomBytes;
exports.randomFill = randomFill;
exports.randomInt = randomInt;
exports.randomRange = randomRange;
}],
[/* 24 */ 'bcrypto', '/lib/pbkdf2-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * pbkdf2.js - pbkdf2 for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(25 /* './js/pbkdf2' */, module);
}],
[/* 25 */ 'bcrypto', '/lib/js/pbkdf2.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * pbkdf2.js - pbkdf2 for bcrypto
 * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Resources:
 *   https://en.wikipedia.org/wiki/PBKDF2
 *   https://tools.ietf.org/html/rfc2898
 *   https://tools.ietf.org/html/rfc2898#section-5.2
 *   https://tools.ietf.org/html/rfc6070
 *   https://www.emc.com/collateral/white-papers/h11302-pkcs5v2-1-password-based-cryptography-standard-wp.pdf
 *   http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);
const crypto = global.crypto || global.msCrypto || {};
const subtle = crypto.subtle || {};

/**
 * Perform key derivation using PBKDF2.
 * @param {Function} hash
 * @param {Buffer} pass
 * @param {Buffer} salt
 * @param {Number} iter
 * @param {Number} len
 * @returns {Buffer}
 */

function derive(hash, pass, salt, iter, len) {
  if (typeof pass === 'string')
    pass = Buffer.from(pass, 'utf8');

  if (typeof salt === 'string')
    salt = Buffer.from(salt, 'utf8');

  if (salt == null)
    salt = Buffer.alloc(0);

  assert(hash && typeof hash.id === 'string');
  assert((pass != null && pass._isBuffer === true));
  assert((salt != null && salt._isBuffer === true));
  assert((iter >>> 0) === iter);
  assert((len >>> 0) === len);

  const size = hash.size;
  const blocks = Math.ceil(len / size);
  const out = Buffer.alloc(blocks * size);
  const state = Buffer.alloc(salt.length + 4);

  salt.copy(state, 0);

  // Preemptively shorten key.
  if (pass.length > hash.blockSize) {
    pass = hash.digest(pass);
    assert(pass.length <= hash.blockSize);
  }

  for (let i = 0; i < blocks; i++) {
    const round = i + 1;

    state[salt.length + 0] = round >>> 24;
    state[salt.length + 1] = round >>> 16;
    state[salt.length + 2] = round >>> 8;
    state[salt.length + 3] = round;

    const block = hash.mac(state, pass);

    let mac = block;

    for (let j = 1; j < iter; j++) {
      mac = hash.mac(mac, pass);

      for (let k = 0; k < size; k++)
        block[k] ^= mac[k];
    }

    block.copy(out, i * size);
  }

  return out.slice(0, len);
}

/**
 * Execute pbkdf2 asynchronously.
 * @param {Function} hash
 * @param {Buffer} pass
 * @param {Buffer} salt
 * @param {Number} iter
 * @param {Number} len
 * @returns {Promise}
 */

async function deriveAsync(hash, pass, salt, iter, len) {
  if (typeof pass === 'string')
    pass = Buffer.from(pass, 'utf8');

  if (typeof salt === 'string')
    salt = Buffer.from(salt, 'utf8');

  if (salt == null)
    salt = Buffer.alloc(0);

  assert(hash && typeof hash.id === 'string');
  assert((pass != null && pass._isBuffer === true));
  assert((salt != null && salt._isBuffer === true));
  assert((iter >>> 0) === iter);
  assert((len >>> 0) === len);

  const name = getHash(hash);

  if (!subtle.importKey || !subtle.deriveBits || !name)
    return derive(hash, pass, salt, iter, len);

  const algo = { name: 'PBKDF2' };
  const use = ['deriveBits'];

  const options = {
    name: 'PBKDF2',
    salt: salt,
    iterations: iter,
    hash: name
  };

  const key = await subtle.importKey('raw', pass, algo, false, use);
  const out = await subtle.deriveBits(options, key, len * 8);

  return Buffer.from(out);
}

/*
 * Helpers
 */

function getHash(hash) {
  switch (hash.id) {
    case 'SHA1':
      return 'SHA-1';
    case 'SHA256':
      return 'SHA-256';
    case 'SHA384':
      return 'SHA-384';
    case 'SHA512':
      return 'SHA-512';
    default:
      return null;
  }
}

/*
 * Expose
 */

exports.native = 0;
exports.derive = derive;
exports.deriveAsync = deriveAsync;
}],
[/* 26 */ 'bcrypto', '/lib/sha512-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * sha512.js - sha512 for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(27 /* './js/sha512' */, module);
}],
[/* 27 */ 'bcrypto', '/lib/js/sha512.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * sha512.js - SHA512 implementation for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on indutny/hash.js:
 *   Copyright (c) 2014, Fedor Indutny (MIT License).
 *   https://github.com/indutny/hash.js
 *
 * Resources:
 *   https://en.wikipedia.org/wiki/SHA-2
 *   https://tools.ietf.org/html/rfc4634
 *   https://github.com/indutny/hash.js/blob/master/lib/hash/sha/512.js
 */

/* eslint camelcase: "off" */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);
const HMAC = __browser_require__(19 /* '../internal/hmac' */, module);

/*
 * Constants
 */

const FINALIZED = -1;
const DESC = Buffer.alloc(16, 0x00);
const PADDING = Buffer.alloc(128, 0x00);

PADDING[0] = 0x80;

const K = new Uint32Array([
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]);

/**
 * SHA512
 */

class SHA512 {
  constructor() {
    this.state = new Uint32Array(16);
    this.msg = new Uint32Array(160);
    this.block = Buffer.alloc(128);
    this.size = FINALIZED;
  }

  init() {
    this.state[0] = 0x6a09e667;
    this.state[1] = 0xf3bcc908;
    this.state[2] = 0xbb67ae85;
    this.state[3] = 0x84caa73b;
    this.state[4] = 0x3c6ef372;
    this.state[5] = 0xfe94f82b;
    this.state[6] = 0xa54ff53a;
    this.state[7] = 0x5f1d36f1;
    this.state[8] = 0x510e527f;
    this.state[9] = 0xade682d1;
    this.state[10] = 0x9b05688c;
    this.state[11] = 0x2b3e6c1f;
    this.state[12] = 0x1f83d9ab;
    this.state[13] = 0xfb41bd6b;
    this.state[14] = 0x5be0cd19;
    this.state[15] = 0x137e2179;
    this.size = 0;
    return this;
  }

  update(data) {
    assert((data != null && data._isBuffer === true));
    this._update(data, data.length);
    return this;
  }

  final() {
    return this._final(Buffer.alloc(64));
  }

  _update(data, len) {
    assert(this.size !== FINALIZED, 'Context is not initialized.');

    let pos = this.size & 127;
    let off = 0;

    this.size += len;

    if (pos > 0) {
      let want = 128 - pos;

      if (want > len)
        want = len;

      data.copy(this.block, pos, off, off + want);

      pos += want;
      len -= want;
      off += want;

      if (pos < 128)
        return;

      this._transform(this.block, 0);
    }

    while (len >= 128) {
      this._transform(data, off);
      off += 128;
      len -= 128;
    }

    if (len > 0)
      data.copy(this.block, 0, off, off + len);
  }

  /**
   * Finalize SHA512 context.
   * @private
   * @param {Buffer} out
   * @returns {Buffer}
   */

  _final(out) {
    assert(this.size !== FINALIZED, 'Context is not initialized.');

    const pos = this.size & 127;
    const len = this.size * 8;

    writeU32(DESC, (len * (1 / 0x100000000)) >>> 0, 8);
    writeU32(DESC, len >>> 0, 12);

    this._update(PADDING, 1 + ((239 - pos) & 127));
    this._update(DESC, 16);

    for (let i = 0; i < 16; i++) {
      writeU32(out, this.state[i], i * 4);
      this.state[i] = 0;
    }

    for (let i = 0; i < 160; i++)
      this.msg[i] = 0;

    for (let i = 0; i < 128; i++)
      this.block[i] = 0;

    this.size = FINALIZED;

    return out;
  }

  _prepare(chunk, pos) {
    const W = this.msg;

    let i = 0;

    for (; i < 32; i++)
      W[i] = readU32(chunk, pos + i * 4);

    for (; i < 160; i += 2) {
      const c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
      const c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      const c1_hi = W[i - 14];
      const c1_lo = W[i - 13];
      const c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
      const c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      const c3_hi = W[i - 32];
      const c3_lo = W[i - 31];

      W[i + 0] = sum64_4_hi(c0_hi, c0_lo,
                            c1_hi, c1_lo,
                            c2_hi, c2_lo,
                            c3_hi, c3_lo);

      W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                            c1_hi, c1_lo,
                            c2_hi, c2_lo,
                            c3_hi, c3_lo);
    }
  }

  _transform(chunk, pos) {
    const W = this.msg;

    this._prepare(chunk, pos);

    let ah = this.state[0];
    let al = this.state[1];
    let bh = this.state[2];
    let bl = this.state[3];
    let ch = this.state[4];
    let cl = this.state[5];
    let dh = this.state[6];
    let dl = this.state[7];
    let eh = this.state[8];
    let el = this.state[9];
    let fh = this.state[10];
    let fl = this.state[11];
    let gh = this.state[12];
    let gl = this.state[13];
    let hh = this.state[14];
    let hl = this.state[15];

    for (let i = 0; i < W.length; i += 2) {
      let c0_hi = hh;
      let c0_lo = hl;
      let c1_hi = s1_512_hi(eh, el);
      let c1_lo = s1_512_lo(eh, el);

      const c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      const c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      const c3_hi = K[i + 0];
      const c3_lo = K[i + 1];
      const c4_hi = W[i + 0];
      const c4_lo = W[i + 1];

      const T1_hi = sum64_5_hi(c0_hi, c0_lo,
                               c1_hi, c1_lo,
                               c2_hi, c2_lo,
                               c3_hi, c3_lo,
                               c4_hi, c4_lo);

      const T1_lo = sum64_5_lo(c0_hi, c0_lo,
                               c1_hi, c1_lo,
                               c2_hi, c2_lo,
                               c3_hi, c3_lo,
                               c4_hi, c4_lo);

      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

      const T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      const T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

      hh = gh;
      hl = gl;

      gh = fh;
      gl = fl;

      fh = eh;
      fl = el;

      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);

      dh = ch;
      dl = cl;

      ch = bh;
      cl = bl;

      bh = ah;
      bl = al;

      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64(this.state, 0, ah, al);
    sum64(this.state, 2, bh, bl);
    sum64(this.state, 4, ch, cl);
    sum64(this.state, 6, dh, dl);
    sum64(this.state, 8, eh, el);
    sum64(this.state, 10, fh, fl);
    sum64(this.state, 12, gh, gl);
    sum64(this.state, 14, hh, hl);
  }

  static hash() {
    return new SHA512();
  }

  static hmac() {
    return new HMAC(SHA512, 128);
  }

  static digest(data) {
    return SHA512.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert((left != null && left._isBuffer === true) && left.length === 64);
    assert((right != null && right._isBuffer === true) && right.length === 64);
    return SHA512.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    const {ctx} = SHA512;

    ctx.init();
    ctx.update(x);
    ctx.update(y);

    if (z)
      ctx.update(z);

    return ctx.final();
  }

  static mac(data, key) {
    return SHA512.hmac().init(key).update(data).final();
  }
}

/*
 * Static
 */

SHA512.native = 0;
SHA512.id = 'SHA512';
SHA512.size = 64;
SHA512.bits = 512;
SHA512.blockSize = 128;
SHA512.zero = Buffer.alloc(64, 0x00);
SHA512.ctx = new SHA512();

/*
 * Helpers
 */

function sum64(buf, pos, ah, al) {
  const bh = buf[pos + 0];
  const bl = buf[pos + 1];

  const lo = (al + bl) >>> 0;
  const hi = (lo < al) + ah + bh;

  buf[pos + 0] = hi >>> 0;
  buf[pos + 1] = lo;
}

function sum64_hi(ah, al, bh, bl) {
  const lo = (al + bl) >>> 0;
  const hi = (lo < al) + ah + bh;
  return hi >>> 0;
}

function sum64_lo(ah, al, bh, bl) {
  const lo = al + bl;
  return lo >>> 0;
}

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  let carry = 0;
  let lo = al;

  lo = (lo + bl) >>> 0;
  carry += (lo < al);

  lo = (lo + cl) >>> 0;
  carry += (lo < cl);

  lo = (lo + dl) >>> 0;
  carry += (lo < dl);

  const hi = ah + bh + ch + dh + carry;

  return hi >>> 0;
}

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  const lo = al + bl + cl + dl;
  return lo >>> 0;
}

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  let carry = 0;
  let lo = al;

  lo = (lo + bl) >>> 0;
  carry += (lo < al);

  lo = (lo + cl) >>> 0;
  carry += (lo < cl);

  lo = (lo + dl) >>> 0;
  carry += (lo < dl);

  lo = (lo + el) >>> 0;
  carry += (lo < el);

  const hi = ah + bh + ch + dh + eh + carry;

  return hi >>> 0;
}

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  const lo = al + bl + cl + dl + el;
  return lo >>> 0;
}

function rotr64_hi(ah, al, num) {
  const r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}

function rotr64_lo(ah, al, num) {
  const r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}

function shr64_hi(ah, al, num) {
  return ah >>> num;
}

function shr64_lo(ah, al, num) {
  const r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  const r = (xh & yh) ^ ((~xh) & zh);
  return r >>> 0;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  const r = (xl & yl) ^ ((~xl) & zl);
  return r >>> 0;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  const r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  return r >>> 0;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  const r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  return r >>> 0;
}

function s0_512_hi(xh, xl) {
  const c0_hi = rotr64_hi(xh, xl, 28);
  const c1_hi = rotr64_hi(xl, xh, 2); // 34
  const c2_hi = rotr64_hi(xl, xh, 7); // 39
  const r = c0_hi ^ c1_hi ^ c2_hi;
  return r >>> 0;
}

function s0_512_lo(xh, xl) {
  const c0_lo = rotr64_lo(xh, xl, 28);
  const c1_lo = rotr64_lo(xl, xh, 2); // 34
  const c2_lo = rotr64_lo(xl, xh, 7); // 39
  const r = c0_lo ^ c1_lo ^ c2_lo;
  return r >>> 0;
}

function s1_512_hi(xh, xl) {
  const c0_hi = rotr64_hi(xh, xl, 14);
  const c1_hi = rotr64_hi(xh, xl, 18);
  const c2_hi = rotr64_hi(xl, xh, 9); // 41
  const r = c0_hi ^ c1_hi ^ c2_hi;
  return r >>> 0;
}

function s1_512_lo(xh, xl) {
  const c0_lo = rotr64_lo(xh, xl, 14);
  const c1_lo = rotr64_lo(xh, xl, 18);
  const c2_lo = rotr64_lo(xl, xh, 9); // 41
  const r = c0_lo ^ c1_lo ^ c2_lo;
  return r >>> 0;
}

function g0_512_hi(xh, xl) {
  const c0_hi = rotr64_hi(xh, xl, 1);
  const c1_hi = rotr64_hi(xh, xl, 8);
  const c2_hi = shr64_hi(xh, xl, 7);
  const r = c0_hi ^ c1_hi ^ c2_hi;
  return r >>> 0;
}

function g0_512_lo(xh, xl) {
  const c0_lo = rotr64_lo(xh, xl, 1);
  const c1_lo = rotr64_lo(xh, xl, 8);
  const c2_lo = shr64_lo(xh, xl, 7);
  const r = c0_lo ^ c1_lo ^ c2_lo;
  return r >>> 0;
}

function g1_512_hi(xh, xl) {
  const c0_hi = rotr64_hi(xh, xl, 19);
  const c1_hi = rotr64_hi(xl, xh, 29); // 61
  const c2_hi = shr64_hi(xh, xl, 6);
  const r = c0_hi ^ c1_hi ^ c2_hi;
  return r >>> 0;
}

function g1_512_lo(xh, xl) {
  const c0_lo = rotr64_lo(xh, xl, 19);
  const c1_lo = rotr64_lo(xl, xh, 29); // 61
  const c2_lo = shr64_lo(xh, xl, 6);
  const r = c0_lo ^ c1_lo ^ c2_lo;
  return r >>> 0;
}

function readU32(data, off) {
  return (data[off++] * 0x1000000
        + data[off++] * 0x10000
        + data[off++] * 0x100
        + data[off]);
}

function writeU32(data, num, off) {
  data[off++] = num >>> 24;
  data[off++] = num >>> 16;
  data[off++] = num >>> 8;
  data[off++] = num;
  return off;
}

/*
 * Expose
 */

module.exports = SHA512;
}],
[/* 28 */ 'bcoin', '/lib/hd/wordlist-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * wordlist.js - wordlists for bcoin
 * Copyright (c) 2015-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const words = __browser_require__(29 /* './words' */, module);

exports.get = function get(name) {
  switch (name) {
    case 'simplified chinese':
      return words.chinese.simplified;
    case 'traditional chinese':
      return words.chinese.traditional;
    case 'english':
      return words.english;
    case 'french':
      return words.french;
    case 'italian':
      return words.italian;
    case 'japanese':
      return words.japanese;
    case 'spanish':
      return words.spanish;
    default:
      throw new Error(`Unknown language: ${name}.`);
  }
};
}],
[/* 29 */ 'bcoin', '/lib/hd/words/index.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * index.js - wordlists for bcoin
 * Copyright (c) 2015-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

exports.chinese = {
  simplified: __browser_require__(30 /* './chinese-simplified.js' */, module),
  traditional: __browser_require__(31 /* './chinese-traditional.js' */, module)
};

exports.english = __browser_require__(32 /* './english.js' */, module);
exports.french = __browser_require__(33 /* './french.js' */, module);
exports.italian = __browser_require__(34 /* './italian.js' */, module);
exports.japanese = __browser_require__(35 /* './japanese.js' */, module);
exports.spanish = __browser_require__(36 /* './spanish.js' */, module);
}],
[/* 30 */ 'bcoin', '/lib/hd/words/chinese-simplified.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

module.exports = [
  '的',
  '一',
  '是',
  '在',
  '不',
  '了',
  '有',
  '和',
  '人',
  '这',
  '中',
  '大',
  '为',
  '上',
  '个',
  '国',
  '我',
  '以',
  '要',
  '他',
  '时',
  '来',
  '用',
  '们',
  '生',
  '到',
  '作',
  '地',
  '于',
  '出',
  '就',
  '分',
  '对',
  '成',
  '会',
  '可',
  '主',
  '发',
  '年',
  '动',
  '同',
  '工',
  '也',
  '能',
  '下',
  '过',
  '子',
  '说',
  '产',
  '种',
  '面',
  '而',
  '方',
  '后',
  '多',
  '定',
  '行',
  '学',
  '法',
  '所',
  '民',
  '得',
  '经',
  '十',
  '三',
  '之',
  '进',
  '着',
  '等',
  '部',
  '度',
  '家',
  '电',
  '力',
  '里',
  '如',
  '水',
  '化',
  '高',
  '自',
  '二',
  '理',
  '起',
  '小',
  '物',
  '现',
  '实',
  '加',
  '量',
  '都',
  '两',
  '体',
  '制',
  '机',
  '当',
  '使',
  '点',
  '从',
  '业',
  '本',
  '去',
  '把',
  '性',
  '好',
  '应',
  '开',
  '它',
  '合',
  '还',
  '因',
  '由',
  '其',
  '些',
  '然',
  '前',
  '外',
  '天',
  '政',
  '四',
  '日',
  '那',
  '社',
  '义',
  '事',
  '平',
  '形',
  '相',
  '全',
  '表',
  '间',
  '样',
  '与',
  '关',
  '各',
  '重',
  '新',
  '线',
  '内',
  '数',
  '正',
  '心',
  '反',
  '你',
  '明',
  '看',
  '原',
  '又',
  '么',
  '利',
  '比',
  '或',
  '但',
  '质',
  '气',
  '第',
  '向',
  '道',
  '命',
  '此',
  '变',
  '条',
  '只',
  '没',
  '结',
  '解',
  '问',
  '意',
  '建',
  '月',
  '公',
  '无',
  '系',
  '军',
  '很',
  '情',
  '者',
  '最',
  '立',
  '代',
  '想',
  '已',
  '通',
  '并',
  '提',
  '直',
  '题',
  '党',
  '程',
  '展',
  '五',
  '果',
  '料',
  '象',
  '员',
  '革',
  '位',
  '入',
  '常',
  '文',
  '总',
  '次',
  '品',
  '式',
  '活',
  '设',
  '及',
  '管',
  '特',
  '件',
  '长',
  '求',
  '老',
  '头',
  '基',
  '资',
  '边',
  '流',
  '路',
  '级',
  '少',
  '图',
  '山',
  '统',
  '接',
  '知',
  '较',
  '将',
  '组',
  '见',
  '计',
  '别',
  '她',
  '手',
  '角',
  '期',
  '根',
  '论',
  '运',
  '农',
  '指',
  '几',
  '九',
  '区',
  '强',
  '放',
  '决',
  '西',
  '被',
  '干',
  '做',
  '必',
  '战',
  '先',
  '回',
  '则',
  '任',
  '取',
  '据',
  '处',
  '队',
  '南',
  '给',
  '色',
  '光',
  '门',
  '即',
  '保',
  '治',
  '北',
  '造',
  '百',
  '规',
  '热',
  '领',
  '七',
  '海',
  '口',
  '东',
  '导',
  '器',
  '压',
  '志',
  '世',
  '金',
  '增',
  '争',
  '济',
  '阶',
  '油',
  '思',
  '术',
  '极',
  '交',
  '受',
  '联',
  '什',
  '认',
  '六',
  '共',
  '权',
  '收',
  '证',
  '改',
  '清',
  '美',
  '再',
  '采',
  '转',
  '更',
  '单',
  '风',
  '切',
  '打',
  '白',
  '教',
  '速',
  '花',
  '带',
  '安',
  '场',
  '身',
  '车',
  '例',
  '真',
  '务',
  '具',
  '万',
  '每',
  '目',
  '至',
  '达',
  '走',
  '积',
  '示',
  '议',
  '声',
  '报',
  '斗',
  '完',
  '类',
  '八',
  '离',
  '华',
  '名',
  '确',
  '才',
  '科',
  '张',
  '信',
  '马',
  '节',
  '话',
  '米',
  '整',
  '空',
  '元',
  '况',
  '今',
  '集',
  '温',
  '传',
  '土',
  '许',
  '步',
  '群',
  '广',
  '石',
  '记',
  '需',
  '段',
  '研',
  '界',
  '拉',
  '林',
  '律',
  '叫',
  '且',
  '究',
  '观',
  '越',
  '织',
  '装',
  '影',
  '算',
  '低',
  '持',
  '音',
  '众',
  '书',
  '布',
  '复',
  '容',
  '儿',
  '须',
  '际',
  '商',
  '非',
  '验',
  '连',
  '断',
  '深',
  '难',
  '近',
  '矿',
  '千',
  '周',
  '委',
  '素',
  '技',
  '备',
  '半',
  '办',
  '青',
  '省',
  '列',
  '习',
  '响',
  '约',
  '支',
  '般',
  '史',
  '感',
  '劳',
  '便',
  '团',
  '往',
  '酸',
  '历',
  '市',
  '克',
  '何',
  '除',
  '消',
  '构',
  '府',
  '称',
  '太',
  '准',
  '精',
  '值',
  '号',
  '率',
  '族',
  '维',
  '划',
  '选',
  '标',
  '写',
  '存',
  '候',
  '毛',
  '亲',
  '快',
  '效',
  '斯',
  '院',
  '查',
  '江',
  '型',
  '眼',
  '王',
  '按',
  '格',
  '养',
  '易',
  '置',
  '派',
  '层',
  '片',
  '始',
  '却',
  '专',
  '状',
  '育',
  '厂',
  '京',
  '识',
  '适',
  '属',
  '圆',
  '包',
  '火',
  '住',
  '调',
  '满',
  '县',
  '局',
  '照',
  '参',
  '红',
  '细',
  '引',
  '听',
  '该',
  '铁',
  '价',
  '严',
  '首',
  '底',
  '液',
  '官',
  '德',
  '随',
  '病',
  '苏',
  '失',
  '尔',
  '死',
  '讲',
  '配',
  '女',
  '黄',
  '推',
  '显',
  '谈',
  '罪',
  '神',
  '艺',
  '呢',
  '席',
  '含',
  '企',
  '望',
  '密',
  '批',
  '营',
  '项',
  '防',
  '举',
  '球',
  '英',
  '氧',
  '势',
  '告',
  '李',
  '台',
  '落',
  '木',
  '帮',
  '轮',
  '破',
  '亚',
  '师',
  '围',
  '注',
  '远',
  '字',
  '材',
  '排',
  '供',
  '河',
  '态',
  '封',
  '另',
  '施',
  '减',
  '树',
  '溶',
  '怎',
  '止',
  '案',
  '言',
  '士',
  '均',
  '武',
  '固',
  '叶',
  '鱼',
  '波',
  '视',
  '仅',
  '费',
  '紧',
  '爱',
  '左',
  '章',
  '早',
  '朝',
  '害',
  '续',
  '轻',
  '服',
  '试',
  '食',
  '充',
  '兵',
  '源',
  '判',
  '护',
  '司',
  '足',
  '某',
  '练',
  '差',
  '致',
  '板',
  '田',
  '降',
  '黑',
  '犯',
  '负',
  '击',
  '范',
  '继',
  '兴',
  '似',
  '余',
  '坚',
  '曲',
  '输',
  '修',
  '故',
  '城',
  '夫',
  '够',
  '送',
  '笔',
  '船',
  '占',
  '右',
  '财',
  '吃',
  '富',
  '春',
  '职',
  '觉',
  '汉',
  '画',
  '功',
  '巴',
  '跟',
  '虽',
  '杂',
  '飞',
  '检',
  '吸',
  '助',
  '升',
  '阳',
  '互',
  '初',
  '创',
  '抗',
  '考',
  '投',
  '坏',
  '策',
  '古',
  '径',
  '换',
  '未',
  '跑',
  '留',
  '钢',
  '曾',
  '端',
  '责',
  '站',
  '简',
  '述',
  '钱',
  '副',
  '尽',
  '帝',
  '射',
  '草',
  '冲',
  '承',
  '独',
  '令',
  '限',
  '阿',
  '宣',
  '环',
  '双',
  '请',
  '超',
  '微',
  '让',
  '控',
  '州',
  '良',
  '轴',
  '找',
  '否',
  '纪',
  '益',
  '依',
  '优',
  '顶',
  '础',
  '载',
  '倒',
  '房',
  '突',
  '坐',
  '粉',
  '敌',
  '略',
  '客',
  '袁',
  '冷',
  '胜',
  '绝',
  '析',
  '块',
  '剂',
  '测',
  '丝',
  '协',
  '诉',
  '念',
  '陈',
  '仍',
  '罗',
  '盐',
  '友',
  '洋',
  '错',
  '苦',
  '夜',
  '刑',
  '移',
  '频',
  '逐',
  '靠',
  '混',
  '母',
  '短',
  '皮',
  '终',
  '聚',
  '汽',
  '村',
  '云',
  '哪',
  '既',
  '距',
  '卫',
  '停',
  '烈',
  '央',
  '察',
  '烧',
  '迅',
  '境',
  '若',
  '印',
  '洲',
  '刻',
  '括',
  '激',
  '孔',
  '搞',
  '甚',
  '室',
  '待',
  '核',
  '校',
  '散',
  '侵',
  '吧',
  '甲',
  '游',
  '久',
  '菜',
  '味',
  '旧',
  '模',
  '湖',
  '货',
  '损',
  '预',
  '阻',
  '毫',
  '普',
  '稳',
  '乙',
  '妈',
  '植',
  '息',
  '扩',
  '银',
  '语',
  '挥',
  '酒',
  '守',
  '拿',
  '序',
  '纸',
  '医',
  '缺',
  '雨',
  '吗',
  '针',
  '刘',
  '啊',
  '急',
  '唱',
  '误',
  '训',
  '愿',
  '审',
  '附',
  '获',
  '茶',
  '鲜',
  '粮',
  '斤',
  '孩',
  '脱',
  '硫',
  '肥',
  '善',
  '龙',
  '演',
  '父',
  '渐',
  '血',
  '欢',
  '械',
  '掌',
  '歌',
  '沙',
  '刚',
  '攻',
  '谓',
  '盾',
  '讨',
  '晚',
  '粒',
  '乱',
  '燃',
  '矛',
  '乎',
  '杀',
  '药',
  '宁',
  '鲁',
  '贵',
  '钟',
  '煤',
  '读',
  '班',
  '伯',
  '香',
  '介',
  '迫',
  '句',
  '丰',
  '培',
  '握',
  '兰',
  '担',
  '弦',
  '蛋',
  '沉',
  '假',
  '穿',
  '执',
  '答',
  '乐',
  '谁',
  '顺',
  '烟',
  '缩',
  '征',
  '脸',
  '喜',
  '松',
  '脚',
  '困',
  '异',
  '免',
  '背',
  '星',
  '福',
  '买',
  '染',
  '井',
  '概',
  '慢',
  '怕',
  '磁',
  '倍',
  '祖',
  '皇',
  '促',
  '静',
  '补',
  '评',
  '翻',
  '肉',
  '践',
  '尼',
  '衣',
  '宽',
  '扬',
  '棉',
  '希',
  '伤',
  '操',
  '垂',
  '秋',
  '宜',
  '氢',
  '套',
  '督',
  '振',
  '架',
  '亮',
  '末',
  '宪',
  '庆',
  '编',
  '牛',
  '触',
  '映',
  '雷',
  '销',
  '诗',
  '座',
  '居',
  '抓',
  '裂',
  '胞',
  '呼',
  '娘',
  '景',
  '威',
  '绿',
  '晶',
  '厚',
  '盟',
  '衡',
  '鸡',
  '孙',
  '延',
  '危',
  '胶',
  '屋',
  '乡',
  '临',
  '陆',
  '顾',
  '掉',
  '呀',
  '灯',
  '岁',
  '措',
  '束',
  '耐',
  '剧',
  '玉',
  '赵',
  '跳',
  '哥',
  '季',
  '课',
  '凯',
  '胡',
  '额',
  '款',
  '绍',
  '卷',
  '齐',
  '伟',
  '蒸',
  '殖',
  '永',
  '宗',
  '苗',
  '川',
  '炉',
  '岩',
  '弱',
  '零',
  '杨',
  '奏',
  '沿',
  '露',
  '杆',
  '探',
  '滑',
  '镇',
  '饭',
  '浓',
  '航',
  '怀',
  '赶',
  '库',
  '夺',
  '伊',
  '灵',
  '税',
  '途',
  '灭',
  '赛',
  '归',
  '召',
  '鼓',
  '播',
  '盘',
  '裁',
  '险',
  '康',
  '唯',
  '录',
  '菌',
  '纯',
  '借',
  '糖',
  '盖',
  '横',
  '符',
  '私',
  '努',
  '堂',
  '域',
  '枪',
  '润',
  '幅',
  '哈',
  '竟',
  '熟',
  '虫',
  '泽',
  '脑',
  '壤',
  '碳',
  '欧',
  '遍',
  '侧',
  '寨',
  '敢',
  '彻',
  '虑',
  '斜',
  '薄',
  '庭',
  '纳',
  '弹',
  '饲',
  '伸',
  '折',
  '麦',
  '湿',
  '暗',
  '荷',
  '瓦',
  '塞',
  '床',
  '筑',
  '恶',
  '户',
  '访',
  '塔',
  '奇',
  '透',
  '梁',
  '刀',
  '旋',
  '迹',
  '卡',
  '氯',
  '遇',
  '份',
  '毒',
  '泥',
  '退',
  '洗',
  '摆',
  '灰',
  '彩',
  '卖',
  '耗',
  '夏',
  '择',
  '忙',
  '铜',
  '献',
  '硬',
  '予',
  '繁',
  '圈',
  '雪',
  '函',
  '亦',
  '抽',
  '篇',
  '阵',
  '阴',
  '丁',
  '尺',
  '追',
  '堆',
  '雄',
  '迎',
  '泛',
  '爸',
  '楼',
  '避',
  '谋',
  '吨',
  '野',
  '猪',
  '旗',
  '累',
  '偏',
  '典',
  '馆',
  '索',
  '秦',
  '脂',
  '潮',
  '爷',
  '豆',
  '忽',
  '托',
  '惊',
  '塑',
  '遗',
  '愈',
  '朱',
  '替',
  '纤',
  '粗',
  '倾',
  '尚',
  '痛',
  '楚',
  '谢',
  '奋',
  '购',
  '磨',
  '君',
  '池',
  '旁',
  '碎',
  '骨',
  '监',
  '捕',
  '弟',
  '暴',
  '割',
  '贯',
  '殊',
  '释',
  '词',
  '亡',
  '壁',
  '顿',
  '宝',
  '午',
  '尘',
  '闻',
  '揭',
  '炮',
  '残',
  '冬',
  '桥',
  '妇',
  '警',
  '综',
  '招',
  '吴',
  '付',
  '浮',
  '遭',
  '徐',
  '您',
  '摇',
  '谷',
  '赞',
  '箱',
  '隔',
  '订',
  '男',
  '吹',
  '园',
  '纷',
  '唐',
  '败',
  '宋',
  '玻',
  '巨',
  '耕',
  '坦',
  '荣',
  '闭',
  '湾',
  '键',
  '凡',
  '驻',
  '锅',
  '救',
  '恩',
  '剥',
  '凝',
  '碱',
  '齿',
  '截',
  '炼',
  '麻',
  '纺',
  '禁',
  '废',
  '盛',
  '版',
  '缓',
  '净',
  '睛',
  '昌',
  '婚',
  '涉',
  '筒',
  '嘴',
  '插',
  '岸',
  '朗',
  '庄',
  '街',
  '藏',
  '姑',
  '贸',
  '腐',
  '奴',
  '啦',
  '惯',
  '乘',
  '伙',
  '恢',
  '匀',
  '纱',
  '扎',
  '辩',
  '耳',
  '彪',
  '臣',
  '亿',
  '璃',
  '抵',
  '脉',
  '秀',
  '萨',
  '俄',
  '网',
  '舞',
  '店',
  '喷',
  '纵',
  '寸',
  '汗',
  '挂',
  '洪',
  '贺',
  '闪',
  '柬',
  '爆',
  '烯',
  '津',
  '稻',
  '墙',
  '软',
  '勇',
  '像',
  '滚',
  '厘',
  '蒙',
  '芳',
  '肯',
  '坡',
  '柱',
  '荡',
  '腿',
  '仪',
  '旅',
  '尾',
  '轧',
  '冰',
  '贡',
  '登',
  '黎',
  '削',
  '钻',
  '勒',
  '逃',
  '障',
  '氨',
  '郭',
  '峰',
  '币',
  '港',
  '伏',
  '轨',
  '亩',
  '毕',
  '擦',
  '莫',
  '刺',
  '浪',
  '秘',
  '援',
  '株',
  '健',
  '售',
  '股',
  '岛',
  '甘',
  '泡',
  '睡',
  '童',
  '铸',
  '汤',
  '阀',
  '休',
  '汇',
  '舍',
  '牧',
  '绕',
  '炸',
  '哲',
  '磷',
  '绩',
  '朋',
  '淡',
  '尖',
  '启',
  '陷',
  '柴',
  '呈',
  '徒',
  '颜',
  '泪',
  '稍',
  '忘',
  '泵',
  '蓝',
  '拖',
  '洞',
  '授',
  '镜',
  '辛',
  '壮',
  '锋',
  '贫',
  '虚',
  '弯',
  '摩',
  '泰',
  '幼',
  '廷',
  '尊',
  '窗',
  '纲',
  '弄',
  '隶',
  '疑',
  '氏',
  '宫',
  '姐',
  '震',
  '瑞',
  '怪',
  '尤',
  '琴',
  '循',
  '描',
  '膜',
  '违',
  '夹',
  '腰',
  '缘',
  '珠',
  '穷',
  '森',
  '枝',
  '竹',
  '沟',
  '催',
  '绳',
  '忆',
  '邦',
  '剩',
  '幸',
  '浆',
  '栏',
  '拥',
  '牙',
  '贮',
  '礼',
  '滤',
  '钠',
  '纹',
  '罢',
  '拍',
  '咱',
  '喊',
  '袖',
  '埃',
  '勤',
  '罚',
  '焦',
  '潜',
  '伍',
  '墨',
  '欲',
  '缝',
  '姓',
  '刊',
  '饱',
  '仿',
  '奖',
  '铝',
  '鬼',
  '丽',
  '跨',
  '默',
  '挖',
  '链',
  '扫',
  '喝',
  '袋',
  '炭',
  '污',
  '幕',
  '诸',
  '弧',
  '励',
  '梅',
  '奶',
  '洁',
  '灾',
  '舟',
  '鉴',
  '苯',
  '讼',
  '抱',
  '毁',
  '懂',
  '寒',
  '智',
  '埔',
  '寄',
  '届',
  '跃',
  '渡',
  '挑',
  '丹',
  '艰',
  '贝',
  '碰',
  '拔',
  '爹',
  '戴',
  '码',
  '梦',
  '芽',
  '熔',
  '赤',
  '渔',
  '哭',
  '敬',
  '颗',
  '奔',
  '铅',
  '仲',
  '虎',
  '稀',
  '妹',
  '乏',
  '珍',
  '申',
  '桌',
  '遵',
  '允',
  '隆',
  '螺',
  '仓',
  '魏',
  '锐',
  '晓',
  '氮',
  '兼',
  '隐',
  '碍',
  '赫',
  '拨',
  '忠',
  '肃',
  '缸',
  '牵',
  '抢',
  '博',
  '巧',
  '壳',
  '兄',
  '杜',
  '讯',
  '诚',
  '碧',
  '祥',
  '柯',
  '页',
  '巡',
  '矩',
  '悲',
  '灌',
  '龄',
  '伦',
  '票',
  '寻',
  '桂',
  '铺',
  '圣',
  '恐',
  '恰',
  '郑',
  '趣',
  '抬',
  '荒',
  '腾',
  '贴',
  '柔',
  '滴',
  '猛',
  '阔',
  '辆',
  '妻',
  '填',
  '撤',
  '储',
  '签',
  '闹',
  '扰',
  '紫',
  '砂',
  '递',
  '戏',
  '吊',
  '陶',
  '伐',
  '喂',
  '疗',
  '瓶',
  '婆',
  '抚',
  '臂',
  '摸',
  '忍',
  '虾',
  '蜡',
  '邻',
  '胸',
  '巩',
  '挤',
  '偶',
  '弃',
  '槽',
  '劲',
  '乳',
  '邓',
  '吉',
  '仁',
  '烂',
  '砖',
  '租',
  '乌',
  '舰',
  '伴',
  '瓜',
  '浅',
  '丙',
  '暂',
  '燥',
  '橡',
  '柳',
  '迷',
  '暖',
  '牌',
  '秧',
  '胆',
  '详',
  '簧',
  '踏',
  '瓷',
  '谱',
  '呆',
  '宾',
  '糊',
  '洛',
  '辉',
  '愤',
  '竞',
  '隙',
  '怒',
  '粘',
  '乃',
  '绪',
  '肩',
  '籍',
  '敏',
  '涂',
  '熙',
  '皆',
  '侦',
  '悬',
  '掘',
  '享',
  '纠',
  '醒',
  '狂',
  '锁',
  '淀',
  '恨',
  '牲',
  '霸',
  '爬',
  '赏',
  '逆',
  '玩',
  '陵',
  '祝',
  '秒',
  '浙',
  '貌',
  '役',
  '彼',
  '悉',
  '鸭',
  '趋',
  '凤',
  '晨',
  '畜',
  '辈',
  '秩',
  '卵',
  '署',
  '梯',
  '炎',
  '滩',
  '棋',
  '驱',
  '筛',
  '峡',
  '冒',
  '啥',
  '寿',
  '译',
  '浸',
  '泉',
  '帽',
  '迟',
  '硅',
  '疆',
  '贷',
  '漏',
  '稿',
  '冠',
  '嫩',
  '胁',
  '芯',
  '牢',
  '叛',
  '蚀',
  '奥',
  '鸣',
  '岭',
  '羊',
  '凭',
  '串',
  '塘',
  '绘',
  '酵',
  '融',
  '盆',
  '锡',
  '庙',
  '筹',
  '冻',
  '辅',
  '摄',
  '袭',
  '筋',
  '拒',
  '僚',
  '旱',
  '钾',
  '鸟',
  '漆',
  '沈',
  '眉',
  '疏',
  '添',
  '棒',
  '穗',
  '硝',
  '韩',
  '逼',
  '扭',
  '侨',
  '凉',
  '挺',
  '碗',
  '栽',
  '炒',
  '杯',
  '患',
  '馏',
  '劝',
  '豪',
  '辽',
  '勃',
  '鸿',
  '旦',
  '吏',
  '拜',
  '狗',
  '埋',
  '辊',
  '掩',
  '饮',
  '搬',
  '骂',
  '辞',
  '勾',
  '扣',
  '估',
  '蒋',
  '绒',
  '雾',
  '丈',
  '朵',
  '姆',
  '拟',
  '宇',
  '辑',
  '陕',
  '雕',
  '偿',
  '蓄',
  '崇',
  '剪',
  '倡',
  '厅',
  '咬',
  '驶',
  '薯',
  '刷',
  '斥',
  '番',
  '赋',
  '奉',
  '佛',
  '浇',
  '漫',
  '曼',
  '扇',
  '钙',
  '桃',
  '扶',
  '仔',
  '返',
  '俗',
  '亏',
  '腔',
  '鞋',
  '棱',
  '覆',
  '框',
  '悄',
  '叔',
  '撞',
  '骗',
  '勘',
  '旺',
  '沸',
  '孤',
  '吐',
  '孟',
  '渠',
  '屈',
  '疾',
  '妙',
  '惜',
  '仰',
  '狠',
  '胀',
  '谐',
  '抛',
  '霉',
  '桑',
  '岗',
  '嘛',
  '衰',
  '盗',
  '渗',
  '脏',
  '赖',
  '涌',
  '甜',
  '曹',
  '阅',
  '肌',
  '哩',
  '厉',
  '烃',
  '纬',
  '毅',
  '昨',
  '伪',
  '症',
  '煮',
  '叹',
  '钉',
  '搭',
  '茎',
  '笼',
  '酷',
  '偷',
  '弓',
  '锥',
  '恒',
  '杰',
  '坑',
  '鼻',
  '翼',
  '纶',
  '叙',
  '狱',
  '逮',
  '罐',
  '络',
  '棚',
  '抑',
  '膨',
  '蔬',
  '寺',
  '骤',
  '穆',
  '冶',
  '枯',
  '册',
  '尸',
  '凸',
  '绅',
  '坯',
  '牺',
  '焰',
  '轰',
  '欣',
  '晋',
  '瘦',
  '御',
  '锭',
  '锦',
  '丧',
  '旬',
  '锻',
  '垄',
  '搜',
  '扑',
  '邀',
  '亭',
  '酯',
  '迈',
  '舒',
  '脆',
  '酶',
  '闲',
  '忧',
  '酚',
  '顽',
  '羽',
  '涨',
  '卸',
  '仗',
  '陪',
  '辟',
  '惩',
  '杭',
  '姚',
  '肚',
  '捉',
  '飘',
  '漂',
  '昆',
  '欺',
  '吾',
  '郎',
  '烷',
  '汁',
  '呵',
  '饰',
  '萧',
  '雅',
  '邮',
  '迁',
  '燕',
  '撒',
  '姻',
  '赴',
  '宴',
  '烦',
  '债',
  '帐',
  '斑',
  '铃',
  '旨',
  '醇',
  '董',
  '饼',
  '雏',
  '姿',
  '拌',
  '傅',
  '腹',
  '妥',
  '揉',
  '贤',
  '拆',
  '歪',
  '葡',
  '胺',
  '丢',
  '浩',
  '徽',
  '昂',
  '垫',
  '挡',
  '览',
  '贪',
  '慰',
  '缴',
  '汪',
  '慌',
  '冯',
  '诺',
  '姜',
  '谊',
  '凶',
  '劣',
  '诬',
  '耀',
  '昏',
  '躺',
  '盈',
  '骑',
  '乔',
  '溪',
  '丛',
  '卢',
  '抹',
  '闷',
  '咨',
  '刮',
  '驾',
  '缆',
  '悟',
  '摘',
  '铒',
  '掷',
  '颇',
  '幻',
  '柄',
  '惠',
  '惨',
  '佳',
  '仇',
  '腊',
  '窝',
  '涤',
  '剑',
  '瞧',
  '堡',
  '泼',
  '葱',
  '罩',
  '霍',
  '捞',
  '胎',
  '苍',
  '滨',
  '俩',
  '捅',
  '湘',
  '砍',
  '霞',
  '邵',
  '萄',
  '疯',
  '淮',
  '遂',
  '熊',
  '粪',
  '烘',
  '宿',
  '档',
  '戈',
  '驳',
  '嫂',
  '裕',
  '徙',
  '箭',
  '捐',
  '肠',
  '撑',
  '晒',
  '辨',
  '殿',
  '莲',
  '摊',
  '搅',
  '酱',
  '屏',
  '疫',
  '哀',
  '蔡',
  '堵',
  '沫',
  '皱',
  '畅',
  '叠',
  '阁',
  '莱',
  '敲',
  '辖',
  '钩',
  '痕',
  '坝',
  '巷',
  '饿',
  '祸',
  '丘',
  '玄',
  '溜',
  '曰',
  '逻',
  '彭',
  '尝',
  '卿',
  '妨',
  '艇',
  '吞',
  '韦',
  '怨',
  '矮',
  '歇'
];
}],
[/* 31 */ 'bcoin', '/lib/hd/words/chinese-traditional.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

module.exports = [
  '的',
  '一',
  '是',
  '在',
  '不',
  '了',
  '有',
  '和',
  '人',
  '這',
  '中',
  '大',
  '為',
  '上',
  '個',
  '國',
  '我',
  '以',
  '要',
  '他',
  '時',
  '來',
  '用',
  '們',
  '生',
  '到',
  '作',
  '地',
  '於',
  '出',
  '就',
  '分',
  '對',
  '成',
  '會',
  '可',
  '主',
  '發',
  '年',
  '動',
  '同',
  '工',
  '也',
  '能',
  '下',
  '過',
  '子',
  '說',
  '產',
  '種',
  '面',
  '而',
  '方',
  '後',
  '多',
  '定',
  '行',
  '學',
  '法',
  '所',
  '民',
  '得',
  '經',
  '十',
  '三',
  '之',
  '進',
  '著',
  '等',
  '部',
  '度',
  '家',
  '電',
  '力',
  '裡',
  '如',
  '水',
  '化',
  '高',
  '自',
  '二',
  '理',
  '起',
  '小',
  '物',
  '現',
  '實',
  '加',
  '量',
  '都',
  '兩',
  '體',
  '制',
  '機',
  '當',
  '使',
  '點',
  '從',
  '業',
  '本',
  '去',
  '把',
  '性',
  '好',
  '應',
  '開',
  '它',
  '合',
  '還',
  '因',
  '由',
  '其',
  '些',
  '然',
  '前',
  '外',
  '天',
  '政',
  '四',
  '日',
  '那',
  '社',
  '義',
  '事',
  '平',
  '形',
  '相',
  '全',
  '表',
  '間',
  '樣',
  '與',
  '關',
  '各',
  '重',
  '新',
  '線',
  '內',
  '數',
  '正',
  '心',
  '反',
  '你',
  '明',
  '看',
  '原',
  '又',
  '麼',
  '利',
  '比',
  '或',
  '但',
  '質',
  '氣',
  '第',
  '向',
  '道',
  '命',
  '此',
  '變',
  '條',
  '只',
  '沒',
  '結',
  '解',
  '問',
  '意',
  '建',
  '月',
  '公',
  '無',
  '系',
  '軍',
  '很',
  '情',
  '者',
  '最',
  '立',
  '代',
  '想',
  '已',
  '通',
  '並',
  '提',
  '直',
  '題',
  '黨',
  '程',
  '展',
  '五',
  '果',
  '料',
  '象',
  '員',
  '革',
  '位',
  '入',
  '常',
  '文',
  '總',
  '次',
  '品',
  '式',
  '活',
  '設',
  '及',
  '管',
  '特',
  '件',
  '長',
  '求',
  '老',
  '頭',
  '基',
  '資',
  '邊',
  '流',
  '路',
  '級',
  '少',
  '圖',
  '山',
  '統',
  '接',
  '知',
  '較',
  '將',
  '組',
  '見',
  '計',
  '別',
  '她',
  '手',
  '角',
  '期',
  '根',
  '論',
  '運',
  '農',
  '指',
  '幾',
  '九',
  '區',
  '強',
  '放',
  '決',
  '西',
  '被',
  '幹',
  '做',
  '必',
  '戰',
  '先',
  '回',
  '則',
  '任',
  '取',
  '據',
  '處',
  '隊',
  '南',
  '給',
  '色',
  '光',
  '門',
  '即',
  '保',
  '治',
  '北',
  '造',
  '百',
  '規',
  '熱',
  '領',
  '七',
  '海',
  '口',
  '東',
  '導',
  '器',
  '壓',
  '志',
  '世',
  '金',
  '增',
  '爭',
  '濟',
  '階',
  '油',
  '思',
  '術',
  '極',
  '交',
  '受',
  '聯',
  '什',
  '認',
  '六',
  '共',
  '權',
  '收',
  '證',
  '改',
  '清',
  '美',
  '再',
  '採',
  '轉',
  '更',
  '單',
  '風',
  '切',
  '打',
  '白',
  '教',
  '速',
  '花',
  '帶',
  '安',
  '場',
  '身',
  '車',
  '例',
  '真',
  '務',
  '具',
  '萬',
  '每',
  '目',
  '至',
  '達',
  '走',
  '積',
  '示',
  '議',
  '聲',
  '報',
  '鬥',
  '完',
  '類',
  '八',
  '離',
  '華',
  '名',
  '確',
  '才',
  '科',
  '張',
  '信',
  '馬',
  '節',
  '話',
  '米',
  '整',
  '空',
  '元',
  '況',
  '今',
  '集',
  '溫',
  '傳',
  '土',
  '許',
  '步',
  '群',
  '廣',
  '石',
  '記',
  '需',
  '段',
  '研',
  '界',
  '拉',
  '林',
  '律',
  '叫',
  '且',
  '究',
  '觀',
  '越',
  '織',
  '裝',
  '影',
  '算',
  '低',
  '持',
  '音',
  '眾',
  '書',
  '布',
  '复',
  '容',
  '兒',
  '須',
  '際',
  '商',
  '非',
  '驗',
  '連',
  '斷',
  '深',
  '難',
  '近',
  '礦',
  '千',
  '週',
  '委',
  '素',
  '技',
  '備',
  '半',
  '辦',
  '青',
  '省',
  '列',
  '習',
  '響',
  '約',
  '支',
  '般',
  '史',
  '感',
  '勞',
  '便',
  '團',
  '往',
  '酸',
  '歷',
  '市',
  '克',
  '何',
  '除',
  '消',
  '構',
  '府',
  '稱',
  '太',
  '準',
  '精',
  '值',
  '號',
  '率',
  '族',
  '維',
  '劃',
  '選',
  '標',
  '寫',
  '存',
  '候',
  '毛',
  '親',
  '快',
  '效',
  '斯',
  '院',
  '查',
  '江',
  '型',
  '眼',
  '王',
  '按',
  '格',
  '養',
  '易',
  '置',
  '派',
  '層',
  '片',
  '始',
  '卻',
  '專',
  '狀',
  '育',
  '廠',
  '京',
  '識',
  '適',
  '屬',
  '圓',
  '包',
  '火',
  '住',
  '調',
  '滿',
  '縣',
  '局',
  '照',
  '參',
  '紅',
  '細',
  '引',
  '聽',
  '該',
  '鐵',
  '價',
  '嚴',
  '首',
  '底',
  '液',
  '官',
  '德',
  '隨',
  '病',
  '蘇',
  '失',
  '爾',
  '死',
  '講',
  '配',
  '女',
  '黃',
  '推',
  '顯',
  '談',
  '罪',
  '神',
  '藝',
  '呢',
  '席',
  '含',
  '企',
  '望',
  '密',
  '批',
  '營',
  '項',
  '防',
  '舉',
  '球',
  '英',
  '氧',
  '勢',
  '告',
  '李',
  '台',
  '落',
  '木',
  '幫',
  '輪',
  '破',
  '亞',
  '師',
  '圍',
  '注',
  '遠',
  '字',
  '材',
  '排',
  '供',
  '河',
  '態',
  '封',
  '另',
  '施',
  '減',
  '樹',
  '溶',
  '怎',
  '止',
  '案',
  '言',
  '士',
  '均',
  '武',
  '固',
  '葉',
  '魚',
  '波',
  '視',
  '僅',
  '費',
  '緊',
  '愛',
  '左',
  '章',
  '早',
  '朝',
  '害',
  '續',
  '輕',
  '服',
  '試',
  '食',
  '充',
  '兵',
  '源',
  '判',
  '護',
  '司',
  '足',
  '某',
  '練',
  '差',
  '致',
  '板',
  '田',
  '降',
  '黑',
  '犯',
  '負',
  '擊',
  '范',
  '繼',
  '興',
  '似',
  '餘',
  '堅',
  '曲',
  '輸',
  '修',
  '故',
  '城',
  '夫',
  '夠',
  '送',
  '筆',
  '船',
  '佔',
  '右',
  '財',
  '吃',
  '富',
  '春',
  '職',
  '覺',
  '漢',
  '畫',
  '功',
  '巴',
  '跟',
  '雖',
  '雜',
  '飛',
  '檢',
  '吸',
  '助',
  '昇',
  '陽',
  '互',
  '初',
  '創',
  '抗',
  '考',
  '投',
  '壞',
  '策',
  '古',
  '徑',
  '換',
  '未',
  '跑',
  '留',
  '鋼',
  '曾',
  '端',
  '責',
  '站',
  '簡',
  '述',
  '錢',
  '副',
  '盡',
  '帝',
  '射',
  '草',
  '衝',
  '承',
  '獨',
  '令',
  '限',
  '阿',
  '宣',
  '環',
  '雙',
  '請',
  '超',
  '微',
  '讓',
  '控',
  '州',
  '良',
  '軸',
  '找',
  '否',
  '紀',
  '益',
  '依',
  '優',
  '頂',
  '礎',
  '載',
  '倒',
  '房',
  '突',
  '坐',
  '粉',
  '敵',
  '略',
  '客',
  '袁',
  '冷',
  '勝',
  '絕',
  '析',
  '塊',
  '劑',
  '測',
  '絲',
  '協',
  '訴',
  '念',
  '陳',
  '仍',
  '羅',
  '鹽',
  '友',
  '洋',
  '錯',
  '苦',
  '夜',
  '刑',
  '移',
  '頻',
  '逐',
  '靠',
  '混',
  '母',
  '短',
  '皮',
  '終',
  '聚',
  '汽',
  '村',
  '雲',
  '哪',
  '既',
  '距',
  '衛',
  '停',
  '烈',
  '央',
  '察',
  '燒',
  '迅',
  '境',
  '若',
  '印',
  '洲',
  '刻',
  '括',
  '激',
  '孔',
  '搞',
  '甚',
  '室',
  '待',
  '核',
  '校',
  '散',
  '侵',
  '吧',
  '甲',
  '遊',
  '久',
  '菜',
  '味',
  '舊',
  '模',
  '湖',
  '貨',
  '損',
  '預',
  '阻',
  '毫',
  '普',
  '穩',
  '乙',
  '媽',
  '植',
  '息',
  '擴',
  '銀',
  '語',
  '揮',
  '酒',
  '守',
  '拿',
  '序',
  '紙',
  '醫',
  '缺',
  '雨',
  '嗎',
  '針',
  '劉',
  '啊',
  '急',
  '唱',
  '誤',
  '訓',
  '願',
  '審',
  '附',
  '獲',
  '茶',
  '鮮',
  '糧',
  '斤',
  '孩',
  '脫',
  '硫',
  '肥',
  '善',
  '龍',
  '演',
  '父',
  '漸',
  '血',
  '歡',
  '械',
  '掌',
  '歌',
  '沙',
  '剛',
  '攻',
  '謂',
  '盾',
  '討',
  '晚',
  '粒',
  '亂',
  '燃',
  '矛',
  '乎',
  '殺',
  '藥',
  '寧',
  '魯',
  '貴',
  '鐘',
  '煤',
  '讀',
  '班',
  '伯',
  '香',
  '介',
  '迫',
  '句',
  '豐',
  '培',
  '握',
  '蘭',
  '擔',
  '弦',
  '蛋',
  '沉',
  '假',
  '穿',
  '執',
  '答',
  '樂',
  '誰',
  '順',
  '煙',
  '縮',
  '徵',
  '臉',
  '喜',
  '松',
  '腳',
  '困',
  '異',
  '免',
  '背',
  '星',
  '福',
  '買',
  '染',
  '井',
  '概',
  '慢',
  '怕',
  '磁',
  '倍',
  '祖',
  '皇',
  '促',
  '靜',
  '補',
  '評',
  '翻',
  '肉',
  '踐',
  '尼',
  '衣',
  '寬',
  '揚',
  '棉',
  '希',
  '傷',
  '操',
  '垂',
  '秋',
  '宜',
  '氫',
  '套',
  '督',
  '振',
  '架',
  '亮',
  '末',
  '憲',
  '慶',
  '編',
  '牛',
  '觸',
  '映',
  '雷',
  '銷',
  '詩',
  '座',
  '居',
  '抓',
  '裂',
  '胞',
  '呼',
  '娘',
  '景',
  '威',
  '綠',
  '晶',
  '厚',
  '盟',
  '衡',
  '雞',
  '孫',
  '延',
  '危',
  '膠',
  '屋',
  '鄉',
  '臨',
  '陸',
  '顧',
  '掉',
  '呀',
  '燈',
  '歲',
  '措',
  '束',
  '耐',
  '劇',
  '玉',
  '趙',
  '跳',
  '哥',
  '季',
  '課',
  '凱',
  '胡',
  '額',
  '款',
  '紹',
  '卷',
  '齊',
  '偉',
  '蒸',
  '殖',
  '永',
  '宗',
  '苗',
  '川',
  '爐',
  '岩',
  '弱',
  '零',
  '楊',
  '奏',
  '沿',
  '露',
  '桿',
  '探',
  '滑',
  '鎮',
  '飯',
  '濃',
  '航',
  '懷',
  '趕',
  '庫',
  '奪',
  '伊',
  '靈',
  '稅',
  '途',
  '滅',
  '賽',
  '歸',
  '召',
  '鼓',
  '播',
  '盤',
  '裁',
  '險',
  '康',
  '唯',
  '錄',
  '菌',
  '純',
  '借',
  '糖',
  '蓋',
  '橫',
  '符',
  '私',
  '努',
  '堂',
  '域',
  '槍',
  '潤',
  '幅',
  '哈',
  '竟',
  '熟',
  '蟲',
  '澤',
  '腦',
  '壤',
  '碳',
  '歐',
  '遍',
  '側',
  '寨',
  '敢',
  '徹',
  '慮',
  '斜',
  '薄',
  '庭',
  '納',
  '彈',
  '飼',
  '伸',
  '折',
  '麥',
  '濕',
  '暗',
  '荷',
  '瓦',
  '塞',
  '床',
  '築',
  '惡',
  '戶',
  '訪',
  '塔',
  '奇',
  '透',
  '梁',
  '刀',
  '旋',
  '跡',
  '卡',
  '氯',
  '遇',
  '份',
  '毒',
  '泥',
  '退',
  '洗',
  '擺',
  '灰',
  '彩',
  '賣',
  '耗',
  '夏',
  '擇',
  '忙',
  '銅',
  '獻',
  '硬',
  '予',
  '繁',
  '圈',
  '雪',
  '函',
  '亦',
  '抽',
  '篇',
  '陣',
  '陰',
  '丁',
  '尺',
  '追',
  '堆',
  '雄',
  '迎',
  '泛',
  '爸',
  '樓',
  '避',
  '謀',
  '噸',
  '野',
  '豬',
  '旗',
  '累',
  '偏',
  '典',
  '館',
  '索',
  '秦',
  '脂',
  '潮',
  '爺',
  '豆',
  '忽',
  '托',
  '驚',
  '塑',
  '遺',
  '愈',
  '朱',
  '替',
  '纖',
  '粗',
  '傾',
  '尚',
  '痛',
  '楚',
  '謝',
  '奮',
  '購',
  '磨',
  '君',
  '池',
  '旁',
  '碎',
  '骨',
  '監',
  '捕',
  '弟',
  '暴',
  '割',
  '貫',
  '殊',
  '釋',
  '詞',
  '亡',
  '壁',
  '頓',
  '寶',
  '午',
  '塵',
  '聞',
  '揭',
  '炮',
  '殘',
  '冬',
  '橋',
  '婦',
  '警',
  '綜',
  '招',
  '吳',
  '付',
  '浮',
  '遭',
  '徐',
  '您',
  '搖',
  '谷',
  '贊',
  '箱',
  '隔',
  '訂',
  '男',
  '吹',
  '園',
  '紛',
  '唐',
  '敗',
  '宋',
  '玻',
  '巨',
  '耕',
  '坦',
  '榮',
  '閉',
  '灣',
  '鍵',
  '凡',
  '駐',
  '鍋',
  '救',
  '恩',
  '剝',
  '凝',
  '鹼',
  '齒',
  '截',
  '煉',
  '麻',
  '紡',
  '禁',
  '廢',
  '盛',
  '版',
  '緩',
  '淨',
  '睛',
  '昌',
  '婚',
  '涉',
  '筒',
  '嘴',
  '插',
  '岸',
  '朗',
  '莊',
  '街',
  '藏',
  '姑',
  '貿',
  '腐',
  '奴',
  '啦',
  '慣',
  '乘',
  '夥',
  '恢',
  '勻',
  '紗',
  '扎',
  '辯',
  '耳',
  '彪',
  '臣',
  '億',
  '璃',
  '抵',
  '脈',
  '秀',
  '薩',
  '俄',
  '網',
  '舞',
  '店',
  '噴',
  '縱',
  '寸',
  '汗',
  '掛',
  '洪',
  '賀',
  '閃',
  '柬',
  '爆',
  '烯',
  '津',
  '稻',
  '牆',
  '軟',
  '勇',
  '像',
  '滾',
  '厘',
  '蒙',
  '芳',
  '肯',
  '坡',
  '柱',
  '盪',
  '腿',
  '儀',
  '旅',
  '尾',
  '軋',
  '冰',
  '貢',
  '登',
  '黎',
  '削',
  '鑽',
  '勒',
  '逃',
  '障',
  '氨',
  '郭',
  '峰',
  '幣',
  '港',
  '伏',
  '軌',
  '畝',
  '畢',
  '擦',
  '莫',
  '刺',
  '浪',
  '秘',
  '援',
  '株',
  '健',
  '售',
  '股',
  '島',
  '甘',
  '泡',
  '睡',
  '童',
  '鑄',
  '湯',
  '閥',
  '休',
  '匯',
  '舍',
  '牧',
  '繞',
  '炸',
  '哲',
  '磷',
  '績',
  '朋',
  '淡',
  '尖',
  '啟',
  '陷',
  '柴',
  '呈',
  '徒',
  '顏',
  '淚',
  '稍',
  '忘',
  '泵',
  '藍',
  '拖',
  '洞',
  '授',
  '鏡',
  '辛',
  '壯',
  '鋒',
  '貧',
  '虛',
  '彎',
  '摩',
  '泰',
  '幼',
  '廷',
  '尊',
  '窗',
  '綱',
  '弄',
  '隸',
  '疑',
  '氏',
  '宮',
  '姐',
  '震',
  '瑞',
  '怪',
  '尤',
  '琴',
  '循',
  '描',
  '膜',
  '違',
  '夾',
  '腰',
  '緣',
  '珠',
  '窮',
  '森',
  '枝',
  '竹',
  '溝',
  '催',
  '繩',
  '憶',
  '邦',
  '剩',
  '幸',
  '漿',
  '欄',
  '擁',
  '牙',
  '貯',
  '禮',
  '濾',
  '鈉',
  '紋',
  '罷',
  '拍',
  '咱',
  '喊',
  '袖',
  '埃',
  '勤',
  '罰',
  '焦',
  '潛',
  '伍',
  '墨',
  '欲',
  '縫',
  '姓',
  '刊',
  '飽',
  '仿',
  '獎',
  '鋁',
  '鬼',
  '麗',
  '跨',
  '默',
  '挖',
  '鏈',
  '掃',
  '喝',
  '袋',
  '炭',
  '污',
  '幕',
  '諸',
  '弧',
  '勵',
  '梅',
  '奶',
  '潔',
  '災',
  '舟',
  '鑑',
  '苯',
  '訟',
  '抱',
  '毀',
  '懂',
  '寒',
  '智',
  '埔',
  '寄',
  '屆',
  '躍',
  '渡',
  '挑',
  '丹',
  '艱',
  '貝',
  '碰',
  '拔',
  '爹',
  '戴',
  '碼',
  '夢',
  '芽',
  '熔',
  '赤',
  '漁',
  '哭',
  '敬',
  '顆',
  '奔',
  '鉛',
  '仲',
  '虎',
  '稀',
  '妹',
  '乏',
  '珍',
  '申',
  '桌',
  '遵',
  '允',
  '隆',
  '螺',
  '倉',
  '魏',
  '銳',
  '曉',
  '氮',
  '兼',
  '隱',
  '礙',
  '赫',
  '撥',
  '忠',
  '肅',
  '缸',
  '牽',
  '搶',
  '博',
  '巧',
  '殼',
  '兄',
  '杜',
  '訊',
  '誠',
  '碧',
  '祥',
  '柯',
  '頁',
  '巡',
  '矩',
  '悲',
  '灌',
  '齡',
  '倫',
  '票',
  '尋',
  '桂',
  '鋪',
  '聖',
  '恐',
  '恰',
  '鄭',
  '趣',
  '抬',
  '荒',
  '騰',
  '貼',
  '柔',
  '滴',
  '猛',
  '闊',
  '輛',
  '妻',
  '填',
  '撤',
  '儲',
  '簽',
  '鬧',
  '擾',
  '紫',
  '砂',
  '遞',
  '戲',
  '吊',
  '陶',
  '伐',
  '餵',
  '療',
  '瓶',
  '婆',
  '撫',
  '臂',
  '摸',
  '忍',
  '蝦',
  '蠟',
  '鄰',
  '胸',
  '鞏',
  '擠',
  '偶',
  '棄',
  '槽',
  '勁',
  '乳',
  '鄧',
  '吉',
  '仁',
  '爛',
  '磚',
  '租',
  '烏',
  '艦',
  '伴',
  '瓜',
  '淺',
  '丙',
  '暫',
  '燥',
  '橡',
  '柳',
  '迷',
  '暖',
  '牌',
  '秧',
  '膽',
  '詳',
  '簧',
  '踏',
  '瓷',
  '譜',
  '呆',
  '賓',
  '糊',
  '洛',
  '輝',
  '憤',
  '競',
  '隙',
  '怒',
  '粘',
  '乃',
  '緒',
  '肩',
  '籍',
  '敏',
  '塗',
  '熙',
  '皆',
  '偵',
  '懸',
  '掘',
  '享',
  '糾',
  '醒',
  '狂',
  '鎖',
  '淀',
  '恨',
  '牲',
  '霸',
  '爬',
  '賞',
  '逆',
  '玩',
  '陵',
  '祝',
  '秒',
  '浙',
  '貌',
  '役',
  '彼',
  '悉',
  '鴨',
  '趨',
  '鳳',
  '晨',
  '畜',
  '輩',
  '秩',
  '卵',
  '署',
  '梯',
  '炎',
  '灘',
  '棋',
  '驅',
  '篩',
  '峽',
  '冒',
  '啥',
  '壽',
  '譯',
  '浸',
  '泉',
  '帽',
  '遲',
  '矽',
  '疆',
  '貸',
  '漏',
  '稿',
  '冠',
  '嫩',
  '脅',
  '芯',
  '牢',
  '叛',
  '蝕',
  '奧',
  '鳴',
  '嶺',
  '羊',
  '憑',
  '串',
  '塘',
  '繪',
  '酵',
  '融',
  '盆',
  '錫',
  '廟',
  '籌',
  '凍',
  '輔',
  '攝',
  '襲',
  '筋',
  '拒',
  '僚',
  '旱',
  '鉀',
  '鳥',
  '漆',
  '沈',
  '眉',
  '疏',
  '添',
  '棒',
  '穗',
  '硝',
  '韓',
  '逼',
  '扭',
  '僑',
  '涼',
  '挺',
  '碗',
  '栽',
  '炒',
  '杯',
  '患',
  '餾',
  '勸',
  '豪',
  '遼',
  '勃',
  '鴻',
  '旦',
  '吏',
  '拜',
  '狗',
  '埋',
  '輥',
  '掩',
  '飲',
  '搬',
  '罵',
  '辭',
  '勾',
  '扣',
  '估',
  '蔣',
  '絨',
  '霧',
  '丈',
  '朵',
  '姆',
  '擬',
  '宇',
  '輯',
  '陝',
  '雕',
  '償',
  '蓄',
  '崇',
  '剪',
  '倡',
  '廳',
  '咬',
  '駛',
  '薯',
  '刷',
  '斥',
  '番',
  '賦',
  '奉',
  '佛',
  '澆',
  '漫',
  '曼',
  '扇',
  '鈣',
  '桃',
  '扶',
  '仔',
  '返',
  '俗',
  '虧',
  '腔',
  '鞋',
  '棱',
  '覆',
  '框',
  '悄',
  '叔',
  '撞',
  '騙',
  '勘',
  '旺',
  '沸',
  '孤',
  '吐',
  '孟',
  '渠',
  '屈',
  '疾',
  '妙',
  '惜',
  '仰',
  '狠',
  '脹',
  '諧',
  '拋',
  '黴',
  '桑',
  '崗',
  '嘛',
  '衰',
  '盜',
  '滲',
  '臟',
  '賴',
  '湧',
  '甜',
  '曹',
  '閱',
  '肌',
  '哩',
  '厲',
  '烴',
  '緯',
  '毅',
  '昨',
  '偽',
  '症',
  '煮',
  '嘆',
  '釘',
  '搭',
  '莖',
  '籠',
  '酷',
  '偷',
  '弓',
  '錐',
  '恆',
  '傑',
  '坑',
  '鼻',
  '翼',
  '綸',
  '敘',
  '獄',
  '逮',
  '罐',
  '絡',
  '棚',
  '抑',
  '膨',
  '蔬',
  '寺',
  '驟',
  '穆',
  '冶',
  '枯',
  '冊',
  '屍',
  '凸',
  '紳',
  '坯',
  '犧',
  '焰',
  '轟',
  '欣',
  '晉',
  '瘦',
  '禦',
  '錠',
  '錦',
  '喪',
  '旬',
  '鍛',
  '壟',
  '搜',
  '撲',
  '邀',
  '亭',
  '酯',
  '邁',
  '舒',
  '脆',
  '酶',
  '閒',
  '憂',
  '酚',
  '頑',
  '羽',
  '漲',
  '卸',
  '仗',
  '陪',
  '闢',
  '懲',
  '杭',
  '姚',
  '肚',
  '捉',
  '飄',
  '漂',
  '昆',
  '欺',
  '吾',
  '郎',
  '烷',
  '汁',
  '呵',
  '飾',
  '蕭',
  '雅',
  '郵',
  '遷',
  '燕',
  '撒',
  '姻',
  '赴',
  '宴',
  '煩',
  '債',
  '帳',
  '斑',
  '鈴',
  '旨',
  '醇',
  '董',
  '餅',
  '雛',
  '姿',
  '拌',
  '傅',
  '腹',
  '妥',
  '揉',
  '賢',
  '拆',
  '歪',
  '葡',
  '胺',
  '丟',
  '浩',
  '徽',
  '昂',
  '墊',
  '擋',
  '覽',
  '貪',
  '慰',
  '繳',
  '汪',
  '慌',
  '馮',
  '諾',
  '姜',
  '誼',
  '兇',
  '劣',
  '誣',
  '耀',
  '昏',
  '躺',
  '盈',
  '騎',
  '喬',
  '溪',
  '叢',
  '盧',
  '抹',
  '悶',
  '諮',
  '刮',
  '駕',
  '纜',
  '悟',
  '摘',
  '鉺',
  '擲',
  '頗',
  '幻',
  '柄',
  '惠',
  '慘',
  '佳',
  '仇',
  '臘',
  '窩',
  '滌',
  '劍',
  '瞧',
  '堡',
  '潑',
  '蔥',
  '罩',
  '霍',
  '撈',
  '胎',
  '蒼',
  '濱',
  '倆',
  '捅',
  '湘',
  '砍',
  '霞',
  '邵',
  '萄',
  '瘋',
  '淮',
  '遂',
  '熊',
  '糞',
  '烘',
  '宿',
  '檔',
  '戈',
  '駁',
  '嫂',
  '裕',
  '徙',
  '箭',
  '捐',
  '腸',
  '撐',
  '曬',
  '辨',
  '殿',
  '蓮',
  '攤',
  '攪',
  '醬',
  '屏',
  '疫',
  '哀',
  '蔡',
  '堵',
  '沫',
  '皺',
  '暢',
  '疊',
  '閣',
  '萊',
  '敲',
  '轄',
  '鉤',
  '痕',
  '壩',
  '巷',
  '餓',
  '禍',
  '丘',
  '玄',
  '溜',
  '曰',
  '邏',
  '彭',
  '嘗',
  '卿',
  '妨',
  '艇',
  '吞',
  '韋',
  '怨',
  '矮',
  '歇'
];
}],
[/* 32 */ 'bcoin', '/lib/hd/words/english.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

module.exports = [
  'abandon',
  'ability',
  'able',
  'about',
  'above',
  'absent',
  'absorb',
  'abstract',
  'absurd',
  'abuse',
  'access',
  'accident',
  'account',
  'accuse',
  'achieve',
  'acid',
  'acoustic',
  'acquire',
  'across',
  'act',
  'action',
  'actor',
  'actress',
  'actual',
  'adapt',
  'add',
  'addict',
  'address',
  'adjust',
  'admit',
  'adult',
  'advance',
  'advice',
  'aerobic',
  'affair',
  'afford',
  'afraid',
  'again',
  'age',
  'agent',
  'agree',
  'ahead',
  'aim',
  'air',
  'airport',
  'aisle',
  'alarm',
  'album',
  'alcohol',
  'alert',
  'alien',
  'all',
  'alley',
  'allow',
  'almost',
  'alone',
  'alpha',
  'already',
  'also',
  'alter',
  'always',
  'amateur',
  'amazing',
  'among',
  'amount',
  'amused',
  'analyst',
  'anchor',
  'ancient',
  'anger',
  'angle',
  'angry',
  'animal',
  'ankle',
  'announce',
  'annual',
  'another',
  'answer',
  'antenna',
  'antique',
  'anxiety',
  'any',
  'apart',
  'apology',
  'appear',
  'apple',
  'approve',
  'april',
  'arch',
  'arctic',
  'area',
  'arena',
  'argue',
  'arm',
  'armed',
  'armor',
  'army',
  'around',
  'arrange',
  'arrest',
  'arrive',
  'arrow',
  'art',
  'artefact',
  'artist',
  'artwork',
  'ask',
  'aspect',
  'assault',
  'asset',
  'assist',
  'assume',
  'asthma',
  'athlete',
  'atom',
  'attack',
  'attend',
  'attitude',
  'attract',
  'auction',
  'audit',
  'august',
  'aunt',
  'author',
  'auto',
  'autumn',
  'average',
  'avocado',
  'avoid',
  'awake',
  'aware',
  'away',
  'awesome',
  'awful',
  'awkward',
  'axis',
  'baby',
  'bachelor',
  'bacon',
  'badge',
  'bag',
  'balance',
  'balcony',
  'ball',
  'bamboo',
  'banana',
  'banner',
  'bar',
  'barely',
  'bargain',
  'barrel',
  'base',
  'basic',
  'basket',
  'battle',
  'beach',
  'bean',
  'beauty',
  'because',
  'become',
  'beef',
  'before',
  'begin',
  'behave',
  'behind',
  'believe',
  'below',
  'belt',
  'bench',
  'benefit',
  'best',
  'betray',
  'better',
  'between',
  'beyond',
  'bicycle',
  'bid',
  'bike',
  'bind',
  'biology',
  'bird',
  'birth',
  'bitter',
  'black',
  'blade',
  'blame',
  'blanket',
  'blast',
  'bleak',
  'bless',
  'blind',
  'blood',
  'blossom',
  'blouse',
  'blue',
  'blur',
  'blush',
  'board',
  'boat',
  'body',
  'boil',
  'bomb',
  'bone',
  'bonus',
  'book',
  'boost',
  'border',
  'boring',
  'borrow',
  'boss',
  'bottom',
  'bounce',
  'box',
  'boy',
  'bracket',
  'brain',
  'brand',
  'brass',
  'brave',
  'bread',
  'breeze',
  'brick',
  'bridge',
  'brief',
  'bright',
  'bring',
  'brisk',
  'broccoli',
  'broken',
  'bronze',
  'broom',
  'brother',
  'brown',
  'brush',
  'bubble',
  'buddy',
  'budget',
  'buffalo',
  'build',
  'bulb',
  'bulk',
  'bullet',
  'bundle',
  'bunker',
  'burden',
  'burger',
  'burst',
  'bus',
  'business',
  'busy',
  'butter',
  'buyer',
  'buzz',
  'cabbage',
  'cabin',
  'cable',
  'cactus',
  'cage',
  'cake',
  'call',
  'calm',
  'camera',
  'camp',
  'can',
  'canal',
  'cancel',
  'candy',
  'cannon',
  'canoe',
  'canvas',
  'canyon',
  'capable',
  'capital',
  'captain',
  'car',
  'carbon',
  'card',
  'cargo',
  'carpet',
  'carry',
  'cart',
  'case',
  'cash',
  'casino',
  'castle',
  'casual',
  'cat',
  'catalog',
  'catch',
  'category',
  'cattle',
  'caught',
  'cause',
  'caution',
  'cave',
  'ceiling',
  'celery',
  'cement',
  'census',
  'century',
  'cereal',
  'certain',
  'chair',
  'chalk',
  'champion',
  'change',
  'chaos',
  'chapter',
  'charge',
  'chase',
  'chat',
  'cheap',
  'check',
  'cheese',
  'chef',
  'cherry',
  'chest',
  'chicken',
  'chief',
  'child',
  'chimney',
  'choice',
  'choose',
  'chronic',
  'chuckle',
  'chunk',
  'churn',
  'cigar',
  'cinnamon',
  'circle',
  'citizen',
  'city',
  'civil',
  'claim',
  'clap',
  'clarify',
  'claw',
  'clay',
  'clean',
  'clerk',
  'clever',
  'click',
  'client',
  'cliff',
  'climb',
  'clinic',
  'clip',
  'clock',
  'clog',
  'close',
  'cloth',
  'cloud',
  'clown',
  'club',
  'clump',
  'cluster',
  'clutch',
  'coach',
  'coast',
  'coconut',
  'code',
  'coffee',
  'coil',
  'coin',
  'collect',
  'color',
  'column',
  'combine',
  'come',
  'comfort',
  'comic',
  'common',
  'company',
  'concert',
  'conduct',
  'confirm',
  'congress',
  'connect',
  'consider',
  'control',
  'convince',
  'cook',
  'cool',
  'copper',
  'copy',
  'coral',
  'core',
  'corn',
  'correct',
  'cost',
  'cotton',
  'couch',
  'country',
  'couple',
  'course',
  'cousin',
  'cover',
  'coyote',
  'crack',
  'cradle',
  'craft',
  'cram',
  'crane',
  'crash',
  'crater',
  'crawl',
  'crazy',
  'cream',
  'credit',
  'creek',
  'crew',
  'cricket',
  'crime',
  'crisp',
  'critic',
  'crop',
  'cross',
  'crouch',
  'crowd',
  'crucial',
  'cruel',
  'cruise',
  'crumble',
  'crunch',
  'crush',
  'cry',
  'crystal',
  'cube',
  'culture',
  'cup',
  'cupboard',
  'curious',
  'current',
  'curtain',
  'curve',
  'cushion',
  'custom',
  'cute',
  'cycle',
  'dad',
  'damage',
  'damp',
  'dance',
  'danger',
  'daring',
  'dash',
  'daughter',
  'dawn',
  'day',
  'deal',
  'debate',
  'debris',
  'decade',
  'december',
  'decide',
  'decline',
  'decorate',
  'decrease',
  'deer',
  'defense',
  'define',
  'defy',
  'degree',
  'delay',
  'deliver',
  'demand',
  'demise',
  'denial',
  'dentist',
  'deny',
  'depart',
  'depend',
  'deposit',
  'depth',
  'deputy',
  'derive',
  'describe',
  'desert',
  'design',
  'desk',
  'despair',
  'destroy',
  'detail',
  'detect',
  'develop',
  'device',
  'devote',
  'diagram',
  'dial',
  'diamond',
  'diary',
  'dice',
  'diesel',
  'diet',
  'differ',
  'digital',
  'dignity',
  'dilemma',
  'dinner',
  'dinosaur',
  'direct',
  'dirt',
  'disagree',
  'discover',
  'disease',
  'dish',
  'dismiss',
  'disorder',
  'display',
  'distance',
  'divert',
  'divide',
  'divorce',
  'dizzy',
  'doctor',
  'document',
  'dog',
  'doll',
  'dolphin',
  'domain',
  'donate',
  'donkey',
  'donor',
  'door',
  'dose',
  'double',
  'dove',
  'draft',
  'dragon',
  'drama',
  'drastic',
  'draw',
  'dream',
  'dress',
  'drift',
  'drill',
  'drink',
  'drip',
  'drive',
  'drop',
  'drum',
  'dry',
  'duck',
  'dumb',
  'dune',
  'during',
  'dust',
  'dutch',
  'duty',
  'dwarf',
  'dynamic',
  'eager',
  'eagle',
  'early',
  'earn',
  'earth',
  'easily',
  'east',
  'easy',
  'echo',
  'ecology',
  'economy',
  'edge',
  'edit',
  'educate',
  'effort',
  'egg',
  'eight',
  'either',
  'elbow',
  'elder',
  'electric',
  'elegant',
  'element',
  'elephant',
  'elevator',
  'elite',
  'else',
  'embark',
  'embody',
  'embrace',
  'emerge',
  'emotion',
  'employ',
  'empower',
  'empty',
  'enable',
  'enact',
  'end',
  'endless',
  'endorse',
  'enemy',
  'energy',
  'enforce',
  'engage',
  'engine',
  'enhance',
  'enjoy',
  'enlist',
  'enough',
  'enrich',
  'enroll',
  'ensure',
  'enter',
  'entire',
  'entry',
  'envelope',
  'episode',
  'equal',
  'equip',
  'era',
  'erase',
  'erode',
  'erosion',
  'error',
  'erupt',
  'escape',
  'essay',
  'essence',
  'estate',
  'eternal',
  'ethics',
  'evidence',
  'evil',
  'evoke',
  'evolve',
  'exact',
  'example',
  'excess',
  'exchange',
  'excite',
  'exclude',
  'excuse',
  'execute',
  'exercise',
  'exhaust',
  'exhibit',
  'exile',
  'exist',
  'exit',
  'exotic',
  'expand',
  'expect',
  'expire',
  'explain',
  'expose',
  'express',
  'extend',
  'extra',
  'eye',
  'eyebrow',
  'fabric',
  'face',
  'faculty',
  'fade',
  'faint',
  'faith',
  'fall',
  'false',
  'fame',
  'family',
  'famous',
  'fan',
  'fancy',
  'fantasy',
  'farm',
  'fashion',
  'fat',
  'fatal',
  'father',
  'fatigue',
  'fault',
  'favorite',
  'feature',
  'february',
  'federal',
  'fee',
  'feed',
  'feel',
  'female',
  'fence',
  'festival',
  'fetch',
  'fever',
  'few',
  'fiber',
  'fiction',
  'field',
  'figure',
  'file',
  'film',
  'filter',
  'final',
  'find',
  'fine',
  'finger',
  'finish',
  'fire',
  'firm',
  'first',
  'fiscal',
  'fish',
  'fit',
  'fitness',
  'fix',
  'flag',
  'flame',
  'flash',
  'flat',
  'flavor',
  'flee',
  'flight',
  'flip',
  'float',
  'flock',
  'floor',
  'flower',
  'fluid',
  'flush',
  'fly',
  'foam',
  'focus',
  'fog',
  'foil',
  'fold',
  'follow',
  'food',
  'foot',
  'force',
  'forest',
  'forget',
  'fork',
  'fortune',
  'forum',
  'forward',
  'fossil',
  'foster',
  'found',
  'fox',
  'fragile',
  'frame',
  'frequent',
  'fresh',
  'friend',
  'fringe',
  'frog',
  'front',
  'frost',
  'frown',
  'frozen',
  'fruit',
  'fuel',
  'fun',
  'funny',
  'furnace',
  'fury',
  'future',
  'gadget',
  'gain',
  'galaxy',
  'gallery',
  'game',
  'gap',
  'garage',
  'garbage',
  'garden',
  'garlic',
  'garment',
  'gas',
  'gasp',
  'gate',
  'gather',
  'gauge',
  'gaze',
  'general',
  'genius',
  'genre',
  'gentle',
  'genuine',
  'gesture',
  'ghost',
  'giant',
  'gift',
  'giggle',
  'ginger',
  'giraffe',
  'girl',
  'give',
  'glad',
  'glance',
  'glare',
  'glass',
  'glide',
  'glimpse',
  'globe',
  'gloom',
  'glory',
  'glove',
  'glow',
  'glue',
  'goat',
  'goddess',
  'gold',
  'good',
  'goose',
  'gorilla',
  'gospel',
  'gossip',
  'govern',
  'gown',
  'grab',
  'grace',
  'grain',
  'grant',
  'grape',
  'grass',
  'gravity',
  'great',
  'green',
  'grid',
  'grief',
  'grit',
  'grocery',
  'group',
  'grow',
  'grunt',
  'guard',
  'guess',
  'guide',
  'guilt',
  'guitar',
  'gun',
  'gym',
  'habit',
  'hair',
  'half',
  'hammer',
  'hamster',
  'hand',
  'happy',
  'harbor',
  'hard',
  'harsh',
  'harvest',
  'hat',
  'have',
  'hawk',
  'hazard',
  'head',
  'health',
  'heart',
  'heavy',
  'hedgehog',
  'height',
  'hello',
  'helmet',
  'help',
  'hen',
  'hero',
  'hidden',
  'high',
  'hill',
  'hint',
  'hip',
  'hire',
  'history',
  'hobby',
  'hockey',
  'hold',
  'hole',
  'holiday',
  'hollow',
  'home',
  'honey',
  'hood',
  'hope',
  'horn',
  'horror',
  'horse',
  'hospital',
  'host',
  'hotel',
  'hour',
  'hover',
  'hub',
  'huge',
  'human',
  'humble',
  'humor',
  'hundred',
  'hungry',
  'hunt',
  'hurdle',
  'hurry',
  'hurt',
  'husband',
  'hybrid',
  'ice',
  'icon',
  'idea',
  'identify',
  'idle',
  'ignore',
  'ill',
  'illegal',
  'illness',
  'image',
  'imitate',
  'immense',
  'immune',
  'impact',
  'impose',
  'improve',
  'impulse',
  'inch',
  'include',
  'income',
  'increase',
  'index',
  'indicate',
  'indoor',
  'industry',
  'infant',
  'inflict',
  'inform',
  'inhale',
  'inherit',
  'initial',
  'inject',
  'injury',
  'inmate',
  'inner',
  'innocent',
  'input',
  'inquiry',
  'insane',
  'insect',
  'inside',
  'inspire',
  'install',
  'intact',
  'interest',
  'into',
  'invest',
  'invite',
  'involve',
  'iron',
  'island',
  'isolate',
  'issue',
  'item',
  'ivory',
  'jacket',
  'jaguar',
  'jar',
  'jazz',
  'jealous',
  'jeans',
  'jelly',
  'jewel',
  'job',
  'join',
  'joke',
  'journey',
  'joy',
  'judge',
  'juice',
  'jump',
  'jungle',
  'junior',
  'junk',
  'just',
  'kangaroo',
  'keen',
  'keep',
  'ketchup',
  'key',
  'kick',
  'kid',
  'kidney',
  'kind',
  'kingdom',
  'kiss',
  'kit',
  'kitchen',
  'kite',
  'kitten',
  'kiwi',
  'knee',
  'knife',
  'knock',
  'know',
  'lab',
  'label',
  'labor',
  'ladder',
  'lady',
  'lake',
  'lamp',
  'language',
  'laptop',
  'large',
  'later',
  'latin',
  'laugh',
  'laundry',
  'lava',
  'law',
  'lawn',
  'lawsuit',
  'layer',
  'lazy',
  'leader',
  'leaf',
  'learn',
  'leave',
  'lecture',
  'left',
  'leg',
  'legal',
  'legend',
  'leisure',
  'lemon',
  'lend',
  'length',
  'lens',
  'leopard',
  'lesson',
  'letter',
  'level',
  'liar',
  'liberty',
  'library',
  'license',
  'life',
  'lift',
  'light',
  'like',
  'limb',
  'limit',
  'link',
  'lion',
  'liquid',
  'list',
  'little',
  'live',
  'lizard',
  'load',
  'loan',
  'lobster',
  'local',
  'lock',
  'logic',
  'lonely',
  'long',
  'loop',
  'lottery',
  'loud',
  'lounge',
  'love',
  'loyal',
  'lucky',
  'luggage',
  'lumber',
  'lunar',
  'lunch',
  'luxury',
  'lyrics',
  'machine',
  'mad',
  'magic',
  'magnet',
  'maid',
  'mail',
  'main',
  'major',
  'make',
  'mammal',
  'man',
  'manage',
  'mandate',
  'mango',
  'mansion',
  'manual',
  'maple',
  'marble',
  'march',
  'margin',
  'marine',
  'market',
  'marriage',
  'mask',
  'mass',
  'master',
  'match',
  'material',
  'math',
  'matrix',
  'matter',
  'maximum',
  'maze',
  'meadow',
  'mean',
  'measure',
  'meat',
  'mechanic',
  'medal',
  'media',
  'melody',
  'melt',
  'member',
  'memory',
  'mention',
  'menu',
  'mercy',
  'merge',
  'merit',
  'merry',
  'mesh',
  'message',
  'metal',
  'method',
  'middle',
  'midnight',
  'milk',
  'million',
  'mimic',
  'mind',
  'minimum',
  'minor',
  'minute',
  'miracle',
  'mirror',
  'misery',
  'miss',
  'mistake',
  'mix',
  'mixed',
  'mixture',
  'mobile',
  'model',
  'modify',
  'mom',
  'moment',
  'monitor',
  'monkey',
  'monster',
  'month',
  'moon',
  'moral',
  'more',
  'morning',
  'mosquito',
  'mother',
  'motion',
  'motor',
  'mountain',
  'mouse',
  'move',
  'movie',
  'much',
  'muffin',
  'mule',
  'multiply',
  'muscle',
  'museum',
  'mushroom',
  'music',
  'must',
  'mutual',
  'myself',
  'mystery',
  'myth',
  'naive',
  'name',
  'napkin',
  'narrow',
  'nasty',
  'nation',
  'nature',
  'near',
  'neck',
  'need',
  'negative',
  'neglect',
  'neither',
  'nephew',
  'nerve',
  'nest',
  'net',
  'network',
  'neutral',
  'never',
  'news',
  'next',
  'nice',
  'night',
  'noble',
  'noise',
  'nominee',
  'noodle',
  'normal',
  'north',
  'nose',
  'notable',
  'note',
  'nothing',
  'notice',
  'novel',
  'now',
  'nuclear',
  'number',
  'nurse',
  'nut',
  'oak',
  'obey',
  'object',
  'oblige',
  'obscure',
  'observe',
  'obtain',
  'obvious',
  'occur',
  'ocean',
  'october',
  'odor',
  'off',
  'offer',
  'office',
  'often',
  'oil',
  'okay',
  'old',
  'olive',
  'olympic',
  'omit',
  'once',
  'one',
  'onion',
  'online',
  'only',
  'open',
  'opera',
  'opinion',
  'oppose',
  'option',
  'orange',
  'orbit',
  'orchard',
  'order',
  'ordinary',
  'organ',
  'orient',
  'original',
  'orphan',
  'ostrich',
  'other',
  'outdoor',
  'outer',
  'output',
  'outside',
  'oval',
  'oven',
  'over',
  'own',
  'owner',
  'oxygen',
  'oyster',
  'ozone',
  'pact',
  'paddle',
  'page',
  'pair',
  'palace',
  'palm',
  'panda',
  'panel',
  'panic',
  'panther',
  'paper',
  'parade',
  'parent',
  'park',
  'parrot',
  'party',
  'pass',
  'patch',
  'path',
  'patient',
  'patrol',
  'pattern',
  'pause',
  'pave',
  'payment',
  'peace',
  'peanut',
  'pear',
  'peasant',
  'pelican',
  'pen',
  'penalty',
  'pencil',
  'people',
  'pepper',
  'perfect',
  'permit',
  'person',
  'pet',
  'phone',
  'photo',
  'phrase',
  'physical',
  'piano',
  'picnic',
  'picture',
  'piece',
  'pig',
  'pigeon',
  'pill',
  'pilot',
  'pink',
  'pioneer',
  'pipe',
  'pistol',
  'pitch',
  'pizza',
  'place',
  'planet',
  'plastic',
  'plate',
  'play',
  'please',
  'pledge',
  'pluck',
  'plug',
  'plunge',
  'poem',
  'poet',
  'point',
  'polar',
  'pole',
  'police',
  'pond',
  'pony',
  'pool',
  'popular',
  'portion',
  'position',
  'possible',
  'post',
  'potato',
  'pottery',
  'poverty',
  'powder',
  'power',
  'practice',
  'praise',
  'predict',
  'prefer',
  'prepare',
  'present',
  'pretty',
  'prevent',
  'price',
  'pride',
  'primary',
  'print',
  'priority',
  'prison',
  'private',
  'prize',
  'problem',
  'process',
  'produce',
  'profit',
  'program',
  'project',
  'promote',
  'proof',
  'property',
  'prosper',
  'protect',
  'proud',
  'provide',
  'public',
  'pudding',
  'pull',
  'pulp',
  'pulse',
  'pumpkin',
  'punch',
  'pupil',
  'puppy',
  'purchase',
  'purity',
  'purpose',
  'purse',
  'push',
  'put',
  'puzzle',
  'pyramid',
  'quality',
  'quantum',
  'quarter',
  'question',
  'quick',
  'quit',
  'quiz',
  'quote',
  'rabbit',
  'raccoon',
  'race',
  'rack',
  'radar',
  'radio',
  'rail',
  'rain',
  'raise',
  'rally',
  'ramp',
  'ranch',
  'random',
  'range',
  'rapid',
  'rare',
  'rate',
  'rather',
  'raven',
  'raw',
  'razor',
  'ready',
  'real',
  'reason',
  'rebel',
  'rebuild',
  'recall',
  'receive',
  'recipe',
  'record',
  'recycle',
  'reduce',
  'reflect',
  'reform',
  'refuse',
  'region',
  'regret',
  'regular',
  'reject',
  'relax',
  'release',
  'relief',
  'rely',
  'remain',
  'remember',
  'remind',
  'remove',
  'render',
  'renew',
  'rent',
  'reopen',
  'repair',
  'repeat',
  'replace',
  'report',
  'require',
  'rescue',
  'resemble',
  'resist',
  'resource',
  'response',
  'result',
  'retire',
  'retreat',
  'return',
  'reunion',
  'reveal',
  'review',
  'reward',
  'rhythm',
  'rib',
  'ribbon',
  'rice',
  'rich',
  'ride',
  'ridge',
  'rifle',
  'right',
  'rigid',
  'ring',
  'riot',
  'ripple',
  'risk',
  'ritual',
  'rival',
  'river',
  'road',
  'roast',
  'robot',
  'robust',
  'rocket',
  'romance',
  'roof',
  'rookie',
  'room',
  'rose',
  'rotate',
  'rough',
  'round',
  'route',
  'royal',
  'rubber',
  'rude',
  'rug',
  'rule',
  'run',
  'runway',
  'rural',
  'sad',
  'saddle',
  'sadness',
  'safe',
  'sail',
  'salad',
  'salmon',
  'salon',
  'salt',
  'salute',
  'same',
  'sample',
  'sand',
  'satisfy',
  'satoshi',
  'sauce',
  'sausage',
  'save',
  'say',
  'scale',
  'scan',
  'scare',
  'scatter',
  'scene',
  'scheme',
  'school',
  'science',
  'scissors',
  'scorpion',
  'scout',
  'scrap',
  'screen',
  'script',
  'scrub',
  'sea',
  'search',
  'season',
  'seat',
  'second',
  'secret',
  'section',
  'security',
  'seed',
  'seek',
  'segment',
  'select',
  'sell',
  'seminar',
  'senior',
  'sense',
  'sentence',
  'series',
  'service',
  'session',
  'settle',
  'setup',
  'seven',
  'shadow',
  'shaft',
  'shallow',
  'share',
  'shed',
  'shell',
  'sheriff',
  'shield',
  'shift',
  'shine',
  'ship',
  'shiver',
  'shock',
  'shoe',
  'shoot',
  'shop',
  'short',
  'shoulder',
  'shove',
  'shrimp',
  'shrug',
  'shuffle',
  'shy',
  'sibling',
  'sick',
  'side',
  'siege',
  'sight',
  'sign',
  'silent',
  'silk',
  'silly',
  'silver',
  'similar',
  'simple',
  'since',
  'sing',
  'siren',
  'sister',
  'situate',
  'six',
  'size',
  'skate',
  'sketch',
  'ski',
  'skill',
  'skin',
  'skirt',
  'skull',
  'slab',
  'slam',
  'sleep',
  'slender',
  'slice',
  'slide',
  'slight',
  'slim',
  'slogan',
  'slot',
  'slow',
  'slush',
  'small',
  'smart',
  'smile',
  'smoke',
  'smooth',
  'snack',
  'snake',
  'snap',
  'sniff',
  'snow',
  'soap',
  'soccer',
  'social',
  'sock',
  'soda',
  'soft',
  'solar',
  'soldier',
  'solid',
  'solution',
  'solve',
  'someone',
  'song',
  'soon',
  'sorry',
  'sort',
  'soul',
  'sound',
  'soup',
  'source',
  'south',
  'space',
  'spare',
  'spatial',
  'spawn',
  'speak',
  'special',
  'speed',
  'spell',
  'spend',
  'sphere',
  'spice',
  'spider',
  'spike',
  'spin',
  'spirit',
  'split',
  'spoil',
  'sponsor',
  'spoon',
  'sport',
  'spot',
  'spray',
  'spread',
  'spring',
  'spy',
  'square',
  'squeeze',
  'squirrel',
  'stable',
  'stadium',
  'staff',
  'stage',
  'stairs',
  'stamp',
  'stand',
  'start',
  'state',
  'stay',
  'steak',
  'steel',
  'stem',
  'step',
  'stereo',
  'stick',
  'still',
  'sting',
  'stock',
  'stomach',
  'stone',
  'stool',
  'story',
  'stove',
  'strategy',
  'street',
  'strike',
  'strong',
  'struggle',
  'student',
  'stuff',
  'stumble',
  'style',
  'subject',
  'submit',
  'subway',
  'success',
  'such',
  'sudden',
  'suffer',
  'sugar',
  'suggest',
  'suit',
  'summer',
  'sun',
  'sunny',
  'sunset',
  'super',
  'supply',
  'supreme',
  'sure',
  'surface',
  'surge',
  'surprise',
  'surround',
  'survey',
  'suspect',
  'sustain',
  'swallow',
  'swamp',
  'swap',
  'swarm',
  'swear',
  'sweet',
  'swift',
  'swim',
  'swing',
  'switch',
  'sword',
  'symbol',
  'symptom',
  'syrup',
  'system',
  'table',
  'tackle',
  'tag',
  'tail',
  'talent',
  'talk',
  'tank',
  'tape',
  'target',
  'task',
  'taste',
  'tattoo',
  'taxi',
  'teach',
  'team',
  'tell',
  'ten',
  'tenant',
  'tennis',
  'tent',
  'term',
  'test',
  'text',
  'thank',
  'that',
  'theme',
  'then',
  'theory',
  'there',
  'they',
  'thing',
  'this',
  'thought',
  'three',
  'thrive',
  'throw',
  'thumb',
  'thunder',
  'ticket',
  'tide',
  'tiger',
  'tilt',
  'timber',
  'time',
  'tiny',
  'tip',
  'tired',
  'tissue',
  'title',
  'toast',
  'tobacco',
  'today',
  'toddler',
  'toe',
  'together',
  'toilet',
  'token',
  'tomato',
  'tomorrow',
  'tone',
  'tongue',
  'tonight',
  'tool',
  'tooth',
  'top',
  'topic',
  'topple',
  'torch',
  'tornado',
  'tortoise',
  'toss',
  'total',
  'tourist',
  'toward',
  'tower',
  'town',
  'toy',
  'track',
  'trade',
  'traffic',
  'tragic',
  'train',
  'transfer',
  'trap',
  'trash',
  'travel',
  'tray',
  'treat',
  'tree',
  'trend',
  'trial',
  'tribe',
  'trick',
  'trigger',
  'trim',
  'trip',
  'trophy',
  'trouble',
  'truck',
  'true',
  'truly',
  'trumpet',
  'trust',
  'truth',
  'try',
  'tube',
  'tuition',
  'tumble',
  'tuna',
  'tunnel',
  'turkey',
  'turn',
  'turtle',
  'twelve',
  'twenty',
  'twice',
  'twin',
  'twist',
  'two',
  'type',
  'typical',
  'ugly',
  'umbrella',
  'unable',
  'unaware',
  'uncle',
  'uncover',
  'under',
  'undo',
  'unfair',
  'unfold',
  'unhappy',
  'uniform',
  'unique',
  'unit',
  'universe',
  'unknown',
  'unlock',
  'until',
  'unusual',
  'unveil',
  'update',
  'upgrade',
  'uphold',
  'upon',
  'upper',
  'upset',
  'urban',
  'urge',
  'usage',
  'use',
  'used',
  'useful',
  'useless',
  'usual',
  'utility',
  'vacant',
  'vacuum',
  'vague',
  'valid',
  'valley',
  'valve',
  'van',
  'vanish',
  'vapor',
  'various',
  'vast',
  'vault',
  'vehicle',
  'velvet',
  'vendor',
  'venture',
  'venue',
  'verb',
  'verify',
  'version',
  'very',
  'vessel',
  'veteran',
  'viable',
  'vibrant',
  'vicious',
  'victory',
  'video',
  'view',
  'village',
  'vintage',
  'violin',
  'virtual',
  'virus',
  'visa',
  'visit',
  'visual',
  'vital',
  'vivid',
  'vocal',
  'voice',
  'void',
  'volcano',
  'volume',
  'vote',
  'voyage',
  'wage',
  'wagon',
  'wait',
  'walk',
  'wall',
  'walnut',
  'want',
  'warfare',
  'warm',
  'warrior',
  'wash',
  'wasp',
  'waste',
  'water',
  'wave',
  'way',
  'wealth',
  'weapon',
  'wear',
  'weasel',
  'weather',
  'web',
  'wedding',
  'weekend',
  'weird',
  'welcome',
  'west',
  'wet',
  'whale',
  'what',
  'wheat',
  'wheel',
  'when',
  'where',
  'whip',
  'whisper',
  'wide',
  'width',
  'wife',
  'wild',
  'will',
  'win',
  'window',
  'wine',
  'wing',
  'wink',
  'winner',
  'winter',
  'wire',
  'wisdom',
  'wise',
  'wish',
  'witness',
  'wolf',
  'woman',
  'wonder',
  'wood',
  'wool',
  'word',
  'work',
  'world',
  'worry',
  'worth',
  'wrap',
  'wreck',
  'wrestle',
  'wrist',
  'write',
  'wrong',
  'yard',
  'year',
  'yellow',
  'you',
  'young',
  'youth',
  'zebra',
  'zero',
  'zone',
  'zoo'
];
}],
[/* 33 */ 'bcoin', '/lib/hd/words/french.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

module.exports = [
  'abaisser',
  'abandon',
  'abdiquer',
  'abeille',
  'abolir',
  'aborder',
  'aboutir',
  'aboyer',
  'abrasif',
  'abreuver',
  'abriter',
  'abroger',
  'abrupt',
  'absence',
  'absolu',
  'absurde',
  'abusif',
  'abyssal',
  'académie',
  'acajou',
  'acarien',
  'accabler',
  'accepter',
  'acclamer',
  'accolade',
  'accroche',
  'accuser',
  'acerbe',
  'achat',
  'acheter',
  'aciduler',
  'acier',
  'acompte',
  'acquérir',
  'acronyme',
  'acteur',
  'actif',
  'actuel',
  'adepte',
  'adéquat',
  'adhésif',
  'adjectif',
  'adjuger',
  'admettre',
  'admirer',
  'adopter',
  'adorer',
  'adoucir',
  'adresse',
  'adroit',
  'adulte',
  'adverbe',
  'aérer',
  'aéronef',
  'affaire',
  'affecter',
  'affiche',
  'affreux',
  'affubler',
  'agacer',
  'agencer',
  'agile',
  'agiter',
  'agrafer',
  'agréable',
  'agrume',
  'aider',
  'aiguille',
  'ailier',
  'aimable',
  'aisance',
  'ajouter',
  'ajuster',
  'alarmer',
  'alchimie',
  'alerte',
  'algèbre',
  'algue',
  'aliéner',
  'aliment',
  'alléger',
  'alliage',
  'allouer',
  'allumer',
  'alourdir',
  'alpaga',
  'altesse',
  'alvéole',
  'amateur',
  'ambigu',
  'ambre',
  'aménager',
  'amertume',
  'amidon',
  'amiral',
  'amorcer',
  'amour',
  'amovible',
  'amphibie',
  'ampleur',
  'amusant',
  'analyse',
  'anaphore',
  'anarchie',
  'anatomie',
  'ancien',
  'anéantir',
  'angle',
  'angoisse',
  'anguleux',
  'animal',
  'annexer',
  'annonce',
  'annuel',
  'anodin',
  'anomalie',
  'anonyme',
  'anormal',
  'antenne',
  'antidote',
  'anxieux',
  'apaiser',
  'apéritif',
  'aplanir',
  'apologie',
  'appareil',
  'appeler',
  'apporter',
  'appuyer',
  'aquarium',
  'aqueduc',
  'arbitre',
  'arbuste',
  'ardeur',
  'ardoise',
  'argent',
  'arlequin',
  'armature',
  'armement',
  'armoire',
  'armure',
  'arpenter',
  'arracher',
  'arriver',
  'arroser',
  'arsenic',
  'artériel',
  'article',
  'aspect',
  'asphalte',
  'aspirer',
  'assaut',
  'asservir',
  'assiette',
  'associer',
  'assurer',
  'asticot',
  'astre',
  'astuce',
  'atelier',
  'atome',
  'atrium',
  'atroce',
  'attaque',
  'attentif',
  'attirer',
  'attraper',
  'aubaine',
  'auberge',
  'audace',
  'audible',
  'augurer',
  'aurore',
  'automne',
  'autruche',
  'avaler',
  'avancer',
  'avarice',
  'avenir',
  'averse',
  'aveugle',
  'aviateur',
  'avide',
  'avion',
  'aviser',
  'avoine',
  'avouer',
  'avril',
  'axial',
  'axiome',
  'badge',
  'bafouer',
  'bagage',
  'baguette',
  'baignade',
  'balancer',
  'balcon',
  'baleine',
  'balisage',
  'bambin',
  'bancaire',
  'bandage',
  'banlieue',
  'bannière',
  'banquier',
  'barbier',
  'baril',
  'baron',
  'barque',
  'barrage',
  'bassin',
  'bastion',
  'bataille',
  'bateau',
  'batterie',
  'baudrier',
  'bavarder',
  'belette',
  'bélier',
  'belote',
  'bénéfice',
  'berceau',
  'berger',
  'berline',
  'bermuda',
  'besace',
  'besogne',
  'bétail',
  'beurre',
  'biberon',
  'bicycle',
  'bidule',
  'bijou',
  'bilan',
  'bilingue',
  'billard',
  'binaire',
  'biologie',
  'biopsie',
  'biotype',
  'biscuit',
  'bison',
  'bistouri',
  'bitume',
  'bizarre',
  'blafard',
  'blague',
  'blanchir',
  'blessant',
  'blinder',
  'blond',
  'bloquer',
  'blouson',
  'bobard',
  'bobine',
  'boire',
  'boiser',
  'bolide',
  'bonbon',
  'bondir',
  'bonheur',
  'bonifier',
  'bonus',
  'bordure',
  'borne',
  'botte',
  'boucle',
  'boueux',
  'bougie',
  'boulon',
  'bouquin',
  'bourse',
  'boussole',
  'boutique',
  'boxeur',
  'branche',
  'brasier',
  'brave',
  'brebis',
  'brèche',
  'breuvage',
  'bricoler',
  'brigade',
  'brillant',
  'brioche',
  'brique',
  'brochure',
  'broder',
  'bronzer',
  'brousse',
  'broyeur',
  'brume',
  'brusque',
  'brutal',
  'bruyant',
  'buffle',
  'buisson',
  'bulletin',
  'bureau',
  'burin',
  'bustier',
  'butiner',
  'butoir',
  'buvable',
  'buvette',
  'cabanon',
  'cabine',
  'cachette',
  'cadeau',
  'cadre',
  'caféine',
  'caillou',
  'caisson',
  'calculer',
  'calepin',
  'calibre',
  'calmer',
  'calomnie',
  'calvaire',
  'camarade',
  'caméra',
  'camion',
  'campagne',
  'canal',
  'caneton',
  'canon',
  'cantine',
  'canular',
  'capable',
  'caporal',
  'caprice',
  'capsule',
  'capter',
  'capuche',
  'carabine',
  'carbone',
  'caresser',
  'caribou',
  'carnage',
  'carotte',
  'carreau',
  'carton',
  'cascade',
  'casier',
  'casque',
  'cassure',
  'causer',
  'caution',
  'cavalier',
  'caverne',
  'caviar',
  'cédille',
  'ceinture',
  'céleste',
  'cellule',
  'cendrier',
  'censurer',
  'central',
  'cercle',
  'cérébral',
  'cerise',
  'cerner',
  'cerveau',
  'cesser',
  'chagrin',
  'chaise',
  'chaleur',
  'chambre',
  'chance',
  'chapitre',
  'charbon',
  'chasseur',
  'chaton',
  'chausson',
  'chavirer',
  'chemise',
  'chenille',
  'chéquier',
  'chercher',
  'cheval',
  'chien',
  'chiffre',
  'chignon',
  'chimère',
  'chiot',
  'chlorure',
  'chocolat',
  'choisir',
  'chose',
  'chouette',
  'chrome',
  'chute',
  'cigare',
  'cigogne',
  'cimenter',
  'cinéma',
  'cintrer',
  'circuler',
  'cirer',
  'cirque',
  'citerne',
  'citoyen',
  'citron',
  'civil',
  'clairon',
  'clameur',
  'claquer',
  'classe',
  'clavier',
  'client',
  'cligner',
  'climat',
  'clivage',
  'cloche',
  'clonage',
  'cloporte',
  'cobalt',
  'cobra',
  'cocasse',
  'cocotier',
  'coder',
  'codifier',
  'coffre',
  'cogner',
  'cohésion',
  'coiffer',
  'coincer',
  'colère',
  'colibri',
  'colline',
  'colmater',
  'colonel',
  'combat',
  'comédie',
  'commande',
  'compact',
  'concert',
  'conduire',
  'confier',
  'congeler',
  'connoter',
  'consonne',
  'contact',
  'convexe',
  'copain',
  'copie',
  'corail',
  'corbeau',
  'cordage',
  'corniche',
  'corpus',
  'correct',
  'cortège',
  'cosmique',
  'costume',
  'coton',
  'coude',
  'coupure',
  'courage',
  'couteau',
  'couvrir',
  'coyote',
  'crabe',
  'crainte',
  'cravate',
  'crayon',
  'créature',
  'créditer',
  'crémeux',
  'creuser',
  'crevette',
  'cribler',
  'crier',
  'cristal',
  'critère',
  'croire',
  'croquer',
  'crotale',
  'crucial',
  'cruel',
  'crypter',
  'cubique',
  'cueillir',
  'cuillère',
  'cuisine',
  'cuivre',
  'culminer',
  'cultiver',
  'cumuler',
  'cupide',
  'curatif',
  'curseur',
  'cyanure',
  'cycle',
  'cylindre',
  'cynique',
  'daigner',
  'damier',
  'danger',
  'danseur',
  'dauphin',
  'débattre',
  'débiter',
  'déborder',
  'débrider',
  'débutant',
  'décaler',
  'décembre',
  'déchirer',
  'décider',
  'déclarer',
  'décorer',
  'décrire',
  'décupler',
  'dédale',
  'déductif',
  'déesse',
  'défensif',
  'défiler',
  'défrayer',
  'dégager',
  'dégivrer',
  'déglutir',
  'dégrafer',
  'déjeuner',
  'délice',
  'déloger',
  'demander',
  'demeurer',
  'démolir',
  'dénicher',
  'dénouer',
  'dentelle',
  'dénuder',
  'départ',
  'dépenser',
  'déphaser',
  'déplacer',
  'déposer',
  'déranger',
  'dérober',
  'désastre',
  'descente',
  'désert',
  'désigner',
  'désobéir',
  'dessiner',
  'destrier',
  'détacher',
  'détester',
  'détourer',
  'détresse',
  'devancer',
  'devenir',
  'deviner',
  'devoir',
  'diable',
  'dialogue',
  'diamant',
  'dicter',
  'différer',
  'digérer',
  'digital',
  'digne',
  'diluer',
  'dimanche',
  'diminuer',
  'dioxyde',
  'directif',
  'diriger',
  'discuter',
  'disposer',
  'dissiper',
  'distance',
  'divertir',
  'diviser',
  'docile',
  'docteur',
  'dogme',
  'doigt',
  'domaine',
  'domicile',
  'dompter',
  'donateur',
  'donjon',
  'donner',
  'dopamine',
  'dortoir',
  'dorure',
  'dosage',
  'doseur',
  'dossier',
  'dotation',
  'douanier',
  'double',
  'douceur',
  'douter',
  'doyen',
  'dragon',
  'draper',
  'dresser',
  'dribbler',
  'droiture',
  'duperie',
  'duplexe',
  'durable',
  'durcir',
  'dynastie',
  'éblouir',
  'écarter',
  'écharpe',
  'échelle',
  'éclairer',
  'éclipse',
  'éclore',
  'écluse',
  'école',
  'économie',
  'écorce',
  'écouter',
  'écraser',
  'écrémer',
  'écrivain',
  'écrou',
  'écume',
  'écureuil',
  'édifier',
  'éduquer',
  'effacer',
  'effectif',
  'effigie',
  'effort',
  'effrayer',
  'effusion',
  'égaliser',
  'égarer',
  'éjecter',
  'élaborer',
  'élargir',
  'électron',
  'élégant',
  'éléphant',
  'élève',
  'éligible',
  'élitisme',
  'éloge',
  'élucider',
  'éluder',
  'emballer',
  'embellir',
  'embryon',
  'émeraude',
  'émission',
  'emmener',
  'émotion',
  'émouvoir',
  'empereur',
  'employer',
  'emporter',
  'emprise',
  'émulsion',
  'encadrer',
  'enchère',
  'enclave',
  'encoche',
  'endiguer',
  'endosser',
  'endroit',
  'enduire',
  'énergie',
  'enfance',
  'enfermer',
  'enfouir',
  'engager',
  'engin',
  'englober',
  'énigme',
  'enjamber',
  'enjeu',
  'enlever',
  'ennemi',
  'ennuyeux',
  'enrichir',
  'enrobage',
  'enseigne',
  'entasser',
  'entendre',
  'entier',
  'entourer',
  'entraver',
  'énumérer',
  'envahir',
  'enviable',
  'envoyer',
  'enzyme',
  'éolien',
  'épaissir',
  'épargne',
  'épatant',
  'épaule',
  'épicerie',
  'épidémie',
  'épier',
  'épilogue',
  'épine',
  'épisode',
  'épitaphe',
  'époque',
  'épreuve',
  'éprouver',
  'épuisant',
  'équerre',
  'équipe',
  'ériger',
  'érosion',
  'erreur',
  'éruption',
  'escalier',
  'espadon',
  'espèce',
  'espiègle',
  'espoir',
  'esprit',
  'esquiver',
  'essayer',
  'essence',
  'essieu',
  'essorer',
  'estime',
  'estomac',
  'estrade',
  'étagère',
  'étaler',
  'étanche',
  'étatique',
  'éteindre',
  'étendoir',
  'éternel',
  'éthanol',
  'éthique',
  'ethnie',
  'étirer',
  'étoffer',
  'étoile',
  'étonnant',
  'étourdir',
  'étrange',
  'étroit',
  'étude',
  'euphorie',
  'évaluer',
  'évasion',
  'éventail',
  'évidence',
  'éviter',
  'évolutif',
  'évoquer',
  'exact',
  'exagérer',
  'exaucer',
  'exceller',
  'excitant',
  'exclusif',
  'excuse',
  'exécuter',
  'exemple',
  'exercer',
  'exhaler',
  'exhorter',
  'exigence',
  'exiler',
  'exister',
  'exotique',
  'expédier',
  'explorer',
  'exposer',
  'exprimer',
  'exquis',
  'extensif',
  'extraire',
  'exulter',
  'fable',
  'fabuleux',
  'facette',
  'facile',
  'facture',
  'faiblir',
  'falaise',
  'fameux',
  'famille',
  'farceur',
  'farfelu',
  'farine',
  'farouche',
  'fasciner',
  'fatal',
  'fatigue',
  'faucon',
  'fautif',
  'faveur',
  'favori',
  'fébrile',
  'féconder',
  'fédérer',
  'félin',
  'femme',
  'fémur',
  'fendoir',
  'féodal',
  'fermer',
  'féroce',
  'ferveur',
  'festival',
  'feuille',
  'feutre',
  'février',
  'fiasco',
  'ficeler',
  'fictif',
  'fidèle',
  'figure',
  'filature',
  'filetage',
  'filière',
  'filleul',
  'filmer',
  'filou',
  'filtrer',
  'financer',
  'finir',
  'fiole',
  'firme',
  'fissure',
  'fixer',
  'flairer',
  'flamme',
  'flasque',
  'flatteur',
  'fléau',
  'flèche',
  'fleur',
  'flexion',
  'flocon',
  'flore',
  'fluctuer',
  'fluide',
  'fluvial',
  'folie',
  'fonderie',
  'fongible',
  'fontaine',
  'forcer',
  'forgeron',
  'formuler',
  'fortune',
  'fossile',
  'foudre',
  'fougère',
  'fouiller',
  'foulure',
  'fourmi',
  'fragile',
  'fraise',
  'franchir',
  'frapper',
  'frayeur',
  'frégate',
  'freiner',
  'frelon',
  'frémir',
  'frénésie',
  'frère',
  'friable',
  'friction',
  'frisson',
  'frivole',
  'froid',
  'fromage',
  'frontal',
  'frotter',
  'fruit',
  'fugitif',
  'fuite',
  'fureur',
  'furieux',
  'furtif',
  'fusion',
  'futur',
  'gagner',
  'galaxie',
  'galerie',
  'gambader',
  'garantir',
  'gardien',
  'garnir',
  'garrigue',
  'gazelle',
  'gazon',
  'géant',
  'gélatine',
  'gélule',
  'gendarme',
  'général',
  'génie',
  'genou',
  'gentil',
  'géologie',
  'géomètre',
  'géranium',
  'germe',
  'gestuel',
  'geyser',
  'gibier',
  'gicler',
  'girafe',
  'givre',
  'glace',
  'glaive',
  'glisser',
  'globe',
  'gloire',
  'glorieux',
  'golfeur',
  'gomme',
  'gonfler',
  'gorge',
  'gorille',
  'goudron',
  'gouffre',
  'goulot',
  'goupille',
  'gourmand',
  'goutte',
  'graduel',
  'graffiti',
  'graine',
  'grand',
  'grappin',
  'gratuit',
  'gravir',
  'grenat',
  'griffure',
  'griller',
  'grimper',
  'grogner',
  'gronder',
  'grotte',
  'groupe',
  'gruger',
  'grutier',
  'gruyère',
  'guépard',
  'guerrier',
  'guide',
  'guimauve',
  'guitare',
  'gustatif',
  'gymnaste',
  'gyrostat',
  'habitude',
  'hachoir',
  'halte',
  'hameau',
  'hangar',
  'hanneton',
  'haricot',
  'harmonie',
  'harpon',
  'hasard',
  'hélium',
  'hématome',
  'herbe',
  'hérisson',
  'hermine',
  'héron',
  'hésiter',
  'heureux',
  'hiberner',
  'hibou',
  'hilarant',
  'histoire',
  'hiver',
  'homard',
  'hommage',
  'homogène',
  'honneur',
  'honorer',
  'honteux',
  'horde',
  'horizon',
  'horloge',
  'hormone',
  'horrible',
  'houleux',
  'housse',
  'hublot',
  'huileux',
  'humain',
  'humble',
  'humide',
  'humour',
  'hurler',
  'hydromel',
  'hygiène',
  'hymne',
  'hypnose',
  'idylle',
  'ignorer',
  'iguane',
  'illicite',
  'illusion',
  'image',
  'imbiber',
  'imiter',
  'immense',
  'immobile',
  'immuable',
  'impact',
  'impérial',
  'implorer',
  'imposer',
  'imprimer',
  'imputer',
  'incarner',
  'incendie',
  'incident',
  'incliner',
  'incolore',
  'indexer',
  'indice',
  'inductif',
  'inédit',
  'ineptie',
  'inexact',
  'infini',
  'infliger',
  'informer',
  'infusion',
  'ingérer',
  'inhaler',
  'inhiber',
  'injecter',
  'injure',
  'innocent',
  'inoculer',
  'inonder',
  'inscrire',
  'insecte',
  'insigne',
  'insolite',
  'inspirer',
  'instinct',
  'insulter',
  'intact',
  'intense',
  'intime',
  'intrigue',
  'intuitif',
  'inutile',
  'invasion',
  'inventer',
  'inviter',
  'invoquer',
  'ironique',
  'irradier',
  'irréel',
  'irriter',
  'isoler',
  'ivoire',
  'ivresse',
  'jaguar',
  'jaillir',
  'jambe',
  'janvier',
  'jardin',
  'jauger',
  'jaune',
  'javelot',
  'jetable',
  'jeton',
  'jeudi',
  'jeunesse',
  'joindre',
  'joncher',
  'jongler',
  'joueur',
  'jouissif',
  'journal',
  'jovial',
  'joyau',
  'joyeux',
  'jubiler',
  'jugement',
  'junior',
  'jupon',
  'juriste',
  'justice',
  'juteux',
  'juvénile',
  'kayak',
  'kimono',
  'kiosque',
  'label',
  'labial',
  'labourer',
  'lacérer',
  'lactose',
  'lagune',
  'laine',
  'laisser',
  'laitier',
  'lambeau',
  'lamelle',
  'lampe',
  'lanceur',
  'langage',
  'lanterne',
  'lapin',
  'largeur',
  'larme',
  'laurier',
  'lavabo',
  'lavoir',
  'lecture',
  'légal',
  'léger',
  'légume',
  'lessive',
  'lettre',
  'levier',
  'lexique',
  'lézard',
  'liasse',
  'libérer',
  'libre',
  'licence',
  'licorne',
  'liège',
  'lièvre',
  'ligature',
  'ligoter',
  'ligue',
  'limer',
  'limite',
  'limonade',
  'limpide',
  'linéaire',
  'lingot',
  'lionceau',
  'liquide',
  'lisière',
  'lister',
  'lithium',
  'litige',
  'littoral',
  'livreur',
  'logique',
  'lointain',
  'loisir',
  'lombric',
  'loterie',
  'louer',
  'lourd',
  'loutre',
  'louve',
  'loyal',
  'lubie',
  'lucide',
  'lucratif',
  'lueur',
  'lugubre',
  'luisant',
  'lumière',
  'lunaire',
  'lundi',
  'luron',
  'lutter',
  'luxueux',
  'machine',
  'magasin',
  'magenta',
  'magique',
  'maigre',
  'maillon',
  'maintien',
  'mairie',
  'maison',
  'majorer',
  'malaxer',
  'maléfice',
  'malheur',
  'malice',
  'mallette',
  'mammouth',
  'mandater',
  'maniable',
  'manquant',
  'manteau',
  'manuel',
  'marathon',
  'marbre',
  'marchand',
  'mardi',
  'maritime',
  'marqueur',
  'marron',
  'marteler',
  'mascotte',
  'massif',
  'matériel',
  'matière',
  'matraque',
  'maudire',
  'maussade',
  'mauve',
  'maximal',
  'méchant',
  'méconnu',
  'médaille',
  'médecin',
  'méditer',
  'méduse',
  'meilleur',
  'mélange',
  'mélodie',
  'membre',
  'mémoire',
  'menacer',
  'mener',
  'menhir',
  'mensonge',
  'mentor',
  'mercredi',
  'mérite',
  'merle',
  'messager',
  'mesure',
  'métal',
  'météore',
  'méthode',
  'métier',
  'meuble',
  'miauler',
  'microbe',
  'miette',
  'mignon',
  'migrer',
  'milieu',
  'million',
  'mimique',
  'mince',
  'minéral',
  'minimal',
  'minorer',
  'minute',
  'miracle',
  'miroiter',
  'missile',
  'mixte',
  'mobile',
  'moderne',
  'moelleux',
  'mondial',
  'moniteur',
  'monnaie',
  'monotone',
  'monstre',
  'montagne',
  'monument',
  'moqueur',
  'morceau',
  'morsure',
  'mortier',
  'moteur',
  'motif',
  'mouche',
  'moufle',
  'moulin',
  'mousson',
  'mouton',
  'mouvant',
  'multiple',
  'munition',
  'muraille',
  'murène',
  'murmure',
  'muscle',
  'muséum',
  'musicien',
  'mutation',
  'muter',
  'mutuel',
  'myriade',
  'myrtille',
  'mystère',
  'mythique',
  'nageur',
  'nappe',
  'narquois',
  'narrer',
  'natation',
  'nation',
  'nature',
  'naufrage',
  'nautique',
  'navire',
  'nébuleux',
  'nectar',
  'néfaste',
  'négation',
  'négliger',
  'négocier',
  'neige',
  'nerveux',
  'nettoyer',
  'neurone',
  'neutron',
  'neveu',
  'niche',
  'nickel',
  'nitrate',
  'niveau',
  'noble',
  'nocif',
  'nocturne',
  'noirceur',
  'noisette',
  'nomade',
  'nombreux',
  'nommer',
  'normatif',
  'notable',
  'notifier',
  'notoire',
  'nourrir',
  'nouveau',
  'novateur',
  'novembre',
  'novice',
  'nuage',
  'nuancer',
  'nuire',
  'nuisible',
  'numéro',
  'nuptial',
  'nuque',
  'nutritif',
  'obéir',
  'objectif',
  'obliger',
  'obscur',
  'observer',
  'obstacle',
  'obtenir',
  'obturer',
  'occasion',
  'occuper',
  'océan',
  'octobre',
  'octroyer',
  'octupler',
  'oculaire',
  'odeur',
  'odorant',
  'offenser',
  'officier',
  'offrir',
  'ogive',
  'oiseau',
  'oisillon',
  'olfactif',
  'olivier',
  'ombrage',
  'omettre',
  'onctueux',
  'onduler',
  'onéreux',
  'onirique',
  'opale',
  'opaque',
  'opérer',
  'opinion',
  'opportun',
  'opprimer',
  'opter',
  'optique',
  'orageux',
  'orange',
  'orbite',
  'ordonner',
  'oreille',
  'organe',
  'orgueil',
  'orifice',
  'ornement',
  'orque',
  'ortie',
  'osciller',
  'osmose',
  'ossature',
  'otarie',
  'ouragan',
  'ourson',
  'outil',
  'outrager',
  'ouvrage',
  'ovation',
  'oxyde',
  'oxygène',
  'ozone',
  'paisible',
  'palace',
  'palmarès',
  'palourde',
  'palper',
  'panache',
  'panda',
  'pangolin',
  'paniquer',
  'panneau',
  'panorama',
  'pantalon',
  'papaye',
  'papier',
  'papoter',
  'papyrus',
  'paradoxe',
  'parcelle',
  'paresse',
  'parfumer',
  'parler',
  'parole',
  'parrain',
  'parsemer',
  'partager',
  'parure',
  'parvenir',
  'passion',
  'pastèque',
  'paternel',
  'patience',
  'patron',
  'pavillon',
  'pavoiser',
  'payer',
  'paysage',
  'peigne',
  'peintre',
  'pelage',
  'pélican',
  'pelle',
  'pelouse',
  'peluche',
  'pendule',
  'pénétrer',
  'pénible',
  'pensif',
  'pénurie',
  'pépite',
  'péplum',
  'perdrix',
  'perforer',
  'période',
  'permuter',
  'perplexe',
  'persil',
  'perte',
  'peser',
  'pétale',
  'petit',
  'pétrir',
  'peuple',
  'pharaon',
  'phobie',
  'phoque',
  'photon',
  'phrase',
  'physique',
  'piano',
  'pictural',
  'pièce',
  'pierre',
  'pieuvre',
  'pilote',
  'pinceau',
  'pipette',
  'piquer',
  'pirogue',
  'piscine',
  'piston',
  'pivoter',
  'pixel',
  'pizza',
  'placard',
  'plafond',
  'plaisir',
  'planer',
  'plaque',
  'plastron',
  'plateau',
  'pleurer',
  'plexus',
  'pliage',
  'plomb',
  'plonger',
  'pluie',
  'plumage',
  'pochette',
  'poésie',
  'poète',
  'pointe',
  'poirier',
  'poisson',
  'poivre',
  'polaire',
  'policier',
  'pollen',
  'polygone',
  'pommade',
  'pompier',
  'ponctuel',
  'pondérer',
  'poney',
  'portique',
  'position',
  'posséder',
  'posture',
  'potager',
  'poteau',
  'potion',
  'pouce',
  'poulain',
  'poumon',
  'pourpre',
  'poussin',
  'pouvoir',
  'prairie',
  'pratique',
  'précieux',
  'prédire',
  'préfixe',
  'prélude',
  'prénom',
  'présence',
  'prétexte',
  'prévoir',
  'primitif',
  'prince',
  'prison',
  'priver',
  'problème',
  'procéder',
  'prodige',
  'profond',
  'progrès',
  'proie',
  'projeter',
  'prologue',
  'promener',
  'propre',
  'prospère',
  'protéger',
  'prouesse',
  'proverbe',
  'prudence',
  'pruneau',
  'psychose',
  'public',
  'puceron',
  'puiser',
  'pulpe',
  'pulsar',
  'punaise',
  'punitif',
  'pupitre',
  'purifier',
  'puzzle',
  'pyramide',
  'quasar',
  'querelle',
  'question',
  'quiétude',
  'quitter',
  'quotient',
  'racine',
  'raconter',
  'radieux',
  'ragondin',
  'raideur',
  'raisin',
  'ralentir',
  'rallonge',
  'ramasser',
  'rapide',
  'rasage',
  'ratisser',
  'ravager',
  'ravin',
  'rayonner',
  'réactif',
  'réagir',
  'réaliser',
  'réanimer',
  'recevoir',
  'réciter',
  'réclamer',
  'récolter',
  'recruter',
  'reculer',
  'recycler',
  'rédiger',
  'redouter',
  'refaire',
  'réflexe',
  'réformer',
  'refrain',
  'refuge',
  'régalien',
  'région',
  'réglage',
  'régulier',
  'réitérer',
  'rejeter',
  'rejouer',
  'relatif',
  'relever',
  'relief',
  'remarque',
  'remède',
  'remise',
  'remonter',
  'remplir',
  'remuer',
  'renard',
  'renfort',
  'renifler',
  'renoncer',
  'rentrer',
  'renvoi',
  'replier',
  'reporter',
  'reprise',
  'reptile',
  'requin',
  'réserve',
  'résineux',
  'résoudre',
  'respect',
  'rester',
  'résultat',
  'rétablir',
  'retenir',
  'réticule',
  'retomber',
  'retracer',
  'réunion',
  'réussir',
  'revanche',
  'revivre',
  'révolte',
  'révulsif',
  'richesse',
  'rideau',
  'rieur',
  'rigide',
  'rigoler',
  'rincer',
  'riposter',
  'risible',
  'risque',
  'rituel',
  'rival',
  'rivière',
  'rocheux',
  'romance',
  'rompre',
  'ronce',
  'rondin',
  'roseau',
  'rosier',
  'rotatif',
  'rotor',
  'rotule',
  'rouge',
  'rouille',
  'rouleau',
  'routine',
  'royaume',
  'ruban',
  'rubis',
  'ruche',
  'ruelle',
  'rugueux',
  'ruiner',
  'ruisseau',
  'ruser',
  'rustique',
  'rythme',
  'sabler',
  'saboter',
  'sabre',
  'sacoche',
  'safari',
  'sagesse',
  'saisir',
  'salade',
  'salive',
  'salon',
  'saluer',
  'samedi',
  'sanction',
  'sanglier',
  'sarcasme',
  'sardine',
  'saturer',
  'saugrenu',
  'saumon',
  'sauter',
  'sauvage',
  'savant',
  'savonner',
  'scalpel',
  'scandale',
  'scélérat',
  'scénario',
  'sceptre',
  'schéma',
  'science',
  'scinder',
  'score',
  'scrutin',
  'sculpter',
  'séance',
  'sécable',
  'sécher',
  'secouer',
  'sécréter',
  'sédatif',
  'séduire',
  'seigneur',
  'séjour',
  'sélectif',
  'semaine',
  'sembler',
  'semence',
  'séminal',
  'sénateur',
  'sensible',
  'sentence',
  'séparer',
  'séquence',
  'serein',
  'sergent',
  'sérieux',
  'serrure',
  'sérum',
  'service',
  'sésame',
  'sévir',
  'sevrage',
  'sextuple',
  'sidéral',
  'siècle',
  'siéger',
  'siffler',
  'sigle',
  'signal',
  'silence',
  'silicium',
  'simple',
  'sincère',
  'sinistre',
  'siphon',
  'sirop',
  'sismique',
  'situer',
  'skier',
  'social',
  'socle',
  'sodium',
  'soigneux',
  'soldat',
  'soleil',
  'solitude',
  'soluble',
  'sombre',
  'sommeil',
  'somnoler',
  'sonde',
  'songeur',
  'sonnette',
  'sonore',
  'sorcier',
  'sortir',
  'sosie',
  'sottise',
  'soucieux',
  'soudure',
  'souffle',
  'soulever',
  'soupape',
  'source',
  'soutirer',
  'souvenir',
  'spacieux',
  'spatial',
  'spécial',
  'sphère',
  'spiral',
  'stable',
  'station',
  'sternum',
  'stimulus',
  'stipuler',
  'strict',
  'studieux',
  'stupeur',
  'styliste',
  'sublime',
  'substrat',
  'subtil',
  'subvenir',
  'succès',
  'sucre',
  'suffixe',
  'suggérer',
  'suiveur',
  'sulfate',
  'superbe',
  'supplier',
  'surface',
  'suricate',
  'surmener',
  'surprise',
  'sursaut',
  'survie',
  'suspect',
  'syllabe',
  'symbole',
  'symétrie',
  'synapse',
  'syntaxe',
  'système',
  'tabac',
  'tablier',
  'tactile',
  'tailler',
  'talent',
  'talisman',
  'talonner',
  'tambour',
  'tamiser',
  'tangible',
  'tapis',
  'taquiner',
  'tarder',
  'tarif',
  'tartine',
  'tasse',
  'tatami',
  'tatouage',
  'taupe',
  'taureau',
  'taxer',
  'témoin',
  'temporel',
  'tenaille',
  'tendre',
  'teneur',
  'tenir',
  'tension',
  'terminer',
  'terne',
  'terrible',
  'tétine',
  'texte',
  'thème',
  'théorie',
  'thérapie',
  'thorax',
  'tibia',
  'tiède',
  'timide',
  'tirelire',
  'tiroir',
  'tissu',
  'titane',
  'titre',
  'tituber',
  'toboggan',
  'tolérant',
  'tomate',
  'tonique',
  'tonneau',
  'toponyme',
  'torche',
  'tordre',
  'tornade',
  'torpille',
  'torrent',
  'torse',
  'tortue',
  'totem',
  'toucher',
  'tournage',
  'tousser',
  'toxine',
  'traction',
  'trafic',
  'tragique',
  'trahir',
  'train',
  'trancher',
  'travail',
  'trèfle',
  'tremper',
  'trésor',
  'treuil',
  'triage',
  'tribunal',
  'tricoter',
  'trilogie',
  'triomphe',
  'tripler',
  'triturer',
  'trivial',
  'trombone',
  'tronc',
  'tropical',
  'troupeau',
  'tuile',
  'tulipe',
  'tumulte',
  'tunnel',
  'turbine',
  'tuteur',
  'tutoyer',
  'tuyau',
  'tympan',
  'typhon',
  'typique',
  'tyran',
  'ubuesque',
  'ultime',
  'ultrason',
  'unanime',
  'unifier',
  'union',
  'unique',
  'unitaire',
  'univers',
  'uranium',
  'urbain',
  'urticant',
  'usage',
  'usine',
  'usuel',
  'usure',
  'utile',
  'utopie',
  'vacarme',
  'vaccin',
  'vagabond',
  'vague',
  'vaillant',
  'vaincre',
  'vaisseau',
  'valable',
  'valise',
  'vallon',
  'valve',
  'vampire',
  'vanille',
  'vapeur',
  'varier',
  'vaseux',
  'vassal',
  'vaste',
  'vecteur',
  'vedette',
  'végétal',
  'véhicule',
  'veinard',
  'véloce',
  'vendredi',
  'vénérer',
  'venger',
  'venimeux',
  'ventouse',
  'verdure',
  'vérin',
  'vernir',
  'verrou',
  'verser',
  'vertu',
  'veston',
  'vétéran',
  'vétuste',
  'vexant',
  'vexer',
  'viaduc',
  'viande',
  'victoire',
  'vidange',
  'vidéo',
  'vignette',
  'vigueur',
  'vilain',
  'village',
  'vinaigre',
  'violon',
  'vipère',
  'virement',
  'virtuose',
  'virus',
  'visage',
  'viseur',
  'vision',
  'visqueux',
  'visuel',
  'vital',
  'vitesse',
  'viticole',
  'vitrine',
  'vivace',
  'vivipare',
  'vocation',
  'voguer',
  'voile',
  'voisin',
  'voiture',
  'volaille',
  'volcan',
  'voltiger',
  'volume',
  'vorace',
  'vortex',
  'voter',
  'vouloir',
  'voyage',
  'voyelle',
  'wagon',
  'xénon',
  'yacht',
  'zèbre',
  'zénith',
  'zeste',
  'zoologie'
];
}],
[/* 34 */ 'bcoin', '/lib/hd/words/italian.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

module.exports = [
  'abaco',
  'abbaglio',
  'abbinato',
  'abete',
  'abisso',
  'abolire',
  'abrasivo',
  'abrogato',
  'accadere',
  'accenno',
  'accusato',
  'acetone',
  'achille',
  'acido',
  'acqua',
  'acre',
  'acrilico',
  'acrobata',
  'acuto',
  'adagio',
  'addebito',
  'addome',
  'adeguato',
  'aderire',
  'adipe',
  'adottare',
  'adulare',
  'affabile',
  'affetto',
  'affisso',
  'affranto',
  'aforisma',
  'afoso',
  'africano',
  'agave',
  'agente',
  'agevole',
  'aggancio',
  'agire',
  'agitare',
  'agonismo',
  'agricolo',
  'agrumeto',
  'aguzzo',
  'alabarda',
  'alato',
  'albatro',
  'alberato',
  'albo',
  'albume',
  'alce',
  'alcolico',
  'alettone',
  'alfa',
  'algebra',
  'aliante',
  'alibi',
  'alimento',
  'allagato',
  'allegro',
  'allievo',
  'allodola',
  'allusivo',
  'almeno',
  'alogeno',
  'alpaca',
  'alpestre',
  'altalena',
  'alterno',
  'alticcio',
  'altrove',
  'alunno',
  'alveolo',
  'alzare',
  'amalgama',
  'amanita',
  'amarena',
  'ambito',
  'ambrato',
  'ameba',
  'america',
  'ametista',
  'amico',
  'ammasso',
  'ammenda',
  'ammirare',
  'ammonito',
  'amore',
  'ampio',
  'ampliare',
  'amuleto',
  'anacardo',
  'anagrafe',
  'analista',
  'anarchia',
  'anatra',
  'anca',
  'ancella',
  'ancora',
  'andare',
  'andrea',
  'anello',
  'angelo',
  'angolare',
  'angusto',
  'anima',
  'annegare',
  'annidato',
  'anno',
  'annuncio',
  'anonimo',
  'anticipo',
  'anzi',
  'apatico',
  'apertura',
  'apode',
  'apparire',
  'appetito',
  'appoggio',
  'approdo',
  'appunto',
  'aprile',
  'arabica',
  'arachide',
  'aragosta',
  'araldica',
  'arancio',
  'aratura',
  'arazzo',
  'arbitro',
  'archivio',
  'ardito',
  'arenile',
  'argento',
  'argine',
  'arguto',
  'aria',
  'armonia',
  'arnese',
  'arredato',
  'arringa',
  'arrosto',
  'arsenico',
  'arso',
  'artefice',
  'arzillo',
  'asciutto',
  'ascolto',
  'asepsi',
  'asettico',
  'asfalto',
  'asino',
  'asola',
  'aspirato',
  'aspro',
  'assaggio',
  'asse',
  'assoluto',
  'assurdo',
  'asta',
  'astenuto',
  'astice',
  'astratto',
  'atavico',
  'ateismo',
  'atomico',
  'atono',
  'attesa',
  'attivare',
  'attorno',
  'attrito',
  'attuale',
  'ausilio',
  'austria',
  'autista',
  'autonomo',
  'autunno',
  'avanzato',
  'avere',
  'avvenire',
  'avviso',
  'avvolgere',
  'azione',
  'azoto',
  'azzimo',
  'azzurro',
  'babele',
  'baccano',
  'bacino',
  'baco',
  'badessa',
  'badilata',
  'bagnato',
  'baita',
  'balcone',
  'baldo',
  'balena',
  'ballata',
  'balzano',
  'bambino',
  'bandire',
  'baraonda',
  'barbaro',
  'barca',
  'baritono',
  'barlume',
  'barocco',
  'basilico',
  'basso',
  'batosta',
  'battuto',
  'baule',
  'bava',
  'bavosa',
  'becco',
  'beffa',
  'belgio',
  'belva',
  'benda',
  'benevole',
  'benigno',
  'benzina',
  'bere',
  'berlina',
  'beta',
  'bibita',
  'bici',
  'bidone',
  'bifido',
  'biga',
  'bilancia',
  'bimbo',
  'binocolo',
  'biologo',
  'bipede',
  'bipolare',
  'birbante',
  'birra',
  'biscotto',
  'bisesto',
  'bisnonno',
  'bisonte',
  'bisturi',
  'bizzarro',
  'blando',
  'blatta',
  'bollito',
  'bonifico',
  'bordo',
  'bosco',
  'botanico',
  'bottino',
  'bozzolo',
  'braccio',
  'bradipo',
  'brama',
  'branca',
  'bravura',
  'bretella',
  'brevetto',
  'brezza',
  'briglia',
  'brillante',
  'brindare',
  'broccolo',
  'brodo',
  'bronzina',
  'brullo',
  'bruno',
  'bubbone',
  'buca',
  'budino',
  'buffone',
  'buio',
  'bulbo',
  'buono',
  'burlone',
  'burrasca',
  'bussola',
  'busta',
  'cadetto',
  'caduco',
  'calamaro',
  'calcolo',
  'calesse',
  'calibro',
  'calmo',
  'caloria',
  'cambusa',
  'camerata',
  'camicia',
  'cammino',
  'camola',
  'campale',
  'canapa',
  'candela',
  'cane',
  'canino',
  'canotto',
  'cantina',
  'capace',
  'capello',
  'capitolo',
  'capogiro',
  'cappero',
  'capra',
  'capsula',
  'carapace',
  'carcassa',
  'cardo',
  'carisma',
  'carovana',
  'carretto',
  'cartolina',
  'casaccio',
  'cascata',
  'caserma',
  'caso',
  'cassone',
  'castello',
  'casuale',
  'catasta',
  'catena',
  'catrame',
  'cauto',
  'cavillo',
  'cedibile',
  'cedrata',
  'cefalo',
  'celebre',
  'cellulare',
  'cena',
  'cenone',
  'centesimo',
  'ceramica',
  'cercare',
  'certo',
  'cerume',
  'cervello',
  'cesoia',
  'cespo',
  'ceto',
  'chela',
  'chiaro',
  'chicca',
  'chiedere',
  'chimera',
  'china',
  'chirurgo',
  'chitarra',
  'ciao',
  'ciclismo',
  'cifrare',
  'cigno',
  'cilindro',
  'ciottolo',
  'circa',
  'cirrosi',
  'citrico',
  'cittadino',
  'ciuffo',
  'civetta',
  'civile',
  'classico',
  'clinica',
  'cloro',
  'cocco',
  'codardo',
  'codice',
  'coerente',
  'cognome',
  'collare',
  'colmato',
  'colore',
  'colposo',
  'coltivato',
  'colza',
  'coma',
  'cometa',
  'commando',
  'comodo',
  'computer',
  'comune',
  'conciso',
  'condurre',
  'conferma',
  'congelare',
  'coniuge',
  'connesso',
  'conoscere',
  'consumo',
  'continuo',
  'convegno',
  'coperto',
  'copione',
  'coppia',
  'copricapo',
  'corazza',
  'cordata',
  'coricato',
  'cornice',
  'corolla',
  'corpo',
  'corredo',
  'corsia',
  'cortese',
  'cosmico',
  'costante',
  'cottura',
  'covato',
  'cratere',
  'cravatta',
  'creato',
  'credere',
  'cremoso',
  'crescita',
  'creta',
  'criceto',
  'crinale',
  'crisi',
  'critico',
  'croce',
  'cronaca',
  'crostata',
  'cruciale',
  'crusca',
  'cucire',
  'cuculo',
  'cugino',
  'cullato',
  'cupola',
  'curatore',
  'cursore',
  'curvo',
  'cuscino',
  'custode',
  'dado',
  'daino',
  'dalmata',
  'damerino',
  'daniela',
  'dannoso',
  'danzare',
  'datato',
  'davanti',
  'davvero',
  'debutto',
  'decennio',
  'deciso',
  'declino',
  'decollo',
  'decreto',
  'dedicato',
  'definito',
  'deforme',
  'degno',
  'delegare',
  'delfino',
  'delirio',
  'delta',
  'demenza',
  'denotato',
  'dentro',
  'deposito',
  'derapata',
  'derivare',
  'deroga',
  'descritto',
  'deserto',
  'desiderio',
  'desumere',
  'detersivo',
  'devoto',
  'diametro',
  'dicembre',
  'diedro',
  'difeso',
  'diffuso',
  'digerire',
  'digitale',
  'diluvio',
  'dinamico',
  'dinnanzi',
  'dipinto',
  'diploma',
  'dipolo',
  'diradare',
  'dire',
  'dirotto',
  'dirupo',
  'disagio',
  'discreto',
  'disfare',
  'disgelo',
  'disposto',
  'distanza',
  'disumano',
  'dito',
  'divano',
  'divelto',
  'dividere',
  'divorato',
  'doblone',
  'docente',
  'doganale',
  'dogma',
  'dolce',
  'domato',
  'domenica',
  'dominare',
  'dondolo',
  'dono',
  'dormire',
  'dote',
  'dottore',
  'dovuto',
  'dozzina',
  'drago',
  'druido',
  'dubbio',
  'dubitare',
  'ducale',
  'duna',
  'duomo',
  'duplice',
  'duraturo',
  'ebano',
  'eccesso',
  'ecco',
  'eclissi',
  'economia',
  'edera',
  'edicola',
  'edile',
  'editoria',
  'educare',
  'egemonia',
  'egli',
  'egoismo',
  'egregio',
  'elaborato',
  'elargire',
  'elegante',
  'elencato',
  'eletto',
  'elevare',
  'elfico',
  'elica',
  'elmo',
  'elsa',
  'eluso',
  'emanato',
  'emblema',
  'emesso',
  'emiro',
  'emotivo',
  'emozione',
  'empirico',
  'emulo',
  'endemico',
  'enduro',
  'energia',
  'enfasi',
  'enoteca',
  'entrare',
  'enzima',
  'epatite',
  'epilogo',
  'episodio',
  'epocale',
  'eppure',
  'equatore',
  'erario',
  'erba',
  'erboso',
  'erede',
  'eremita',
  'erigere',
  'ermetico',
  'eroe',
  'erosivo',
  'errante',
  'esagono',
  'esame',
  'esanime',
  'esaudire',
  'esca',
  'esempio',
  'esercito',
  'esibito',
  'esigente',
  'esistere',
  'esito',
  'esofago',
  'esortato',
  'esoso',
  'espanso',
  'espresso',
  'essenza',
  'esso',
  'esteso',
  'estimare',
  'estonia',
  'estroso',
  'esultare',
  'etilico',
  'etnico',
  'etrusco',
  'etto',
  'euclideo',
  'europa',
  'evaso',
  'evidenza',
  'evitato',
  'evoluto',
  'evviva',
  'fabbrica',
  'faccenda',
  'fachiro',
  'falco',
  'famiglia',
  'fanale',
  'fanfara',
  'fango',
  'fantasma',
  'fare',
  'farfalla',
  'farinoso',
  'farmaco',
  'fascia',
  'fastoso',
  'fasullo',
  'faticare',
  'fato',
  'favoloso',
  'febbre',
  'fecola',
  'fede',
  'fegato',
  'felpa',
  'feltro',
  'femmina',
  'fendere',
  'fenomeno',
  'fermento',
  'ferro',
  'fertile',
  'fessura',
  'festivo',
  'fetta',
  'feudo',
  'fiaba',
  'fiducia',
  'fifa',
  'figurato',
  'filo',
  'finanza',
  'finestra',
  'finire',
  'fiore',
  'fiscale',
  'fisico',
  'fiume',
  'flacone',
  'flamenco',
  'flebo',
  'flemma',
  'florido',
  'fluente',
  'fluoro',
  'fobico',
  'focaccia',
  'focoso',
  'foderato',
  'foglio',
  'folata',
  'folclore',
  'folgore',
  'fondente',
  'fonetico',
  'fonia',
  'fontana',
  'forbito',
  'forchetta',
  'foresta',
  'formica',
  'fornaio',
  'foro',
  'fortezza',
  'forzare',
  'fosfato',
  'fosso',
  'fracasso',
  'frana',
  'frassino',
  'fratello',
  'freccetta',
  'frenata',
  'fresco',
  'frigo',
  'frollino',
  'fronde',
  'frugale',
  'frutta',
  'fucilata',
  'fucsia',
  'fuggente',
  'fulmine',
  'fulvo',
  'fumante',
  'fumetto',
  'fumoso',
  'fune',
  'funzione',
  'fuoco',
  'furbo',
  'furgone',
  'furore',
  'fuso',
  'futile',
  'gabbiano',
  'gaffe',
  'galateo',
  'gallina',
  'galoppo',
  'gambero',
  'gamma',
  'garanzia',
  'garbo',
  'garofano',
  'garzone',
  'gasdotto',
  'gasolio',
  'gastrico',
  'gatto',
  'gaudio',
  'gazebo',
  'gazzella',
  'geco',
  'gelatina',
  'gelso',
  'gemello',
  'gemmato',
  'gene',
  'genitore',
  'gennaio',
  'genotipo',
  'gergo',
  'ghepardo',
  'ghiaccio',
  'ghisa',
  'giallo',
  'gilda',
  'ginepro',
  'giocare',
  'gioiello',
  'giorno',
  'giove',
  'girato',
  'girone',
  'gittata',
  'giudizio',
  'giurato',
  'giusto',
  'globulo',
  'glutine',
  'gnomo',
  'gobba',
  'golf',
  'gomito',
  'gommone',
  'gonfio',
  'gonna',
  'governo',
  'gracile',
  'grado',
  'grafico',
  'grammo',
  'grande',
  'grattare',
  'gravoso',
  'grazia',
  'greca',
  'gregge',
  'grifone',
  'grigio',
  'grinza',
  'grotta',
  'gruppo',
  'guadagno',
  'guaio',
  'guanto',
  'guardare',
  'gufo',
  'guidare',
  'ibernato',
  'icona',
  'identico',
  'idillio',
  'idolo',
  'idra',
  'idrico',
  'idrogeno',
  'igiene',
  'ignaro',
  'ignorato',
  'ilare',
  'illeso',
  'illogico',
  'illudere',
  'imballo',
  'imbevuto',
  'imbocco',
  'imbuto',
  'immane',
  'immerso',
  'immolato',
  'impacco',
  'impeto',
  'impiego',
  'importo',
  'impronta',
  'inalare',
  'inarcare',
  'inattivo',
  'incanto',
  'incendio',
  'inchino',
  'incisivo',
  'incluso',
  'incontro',
  'incrocio',
  'incubo',
  'indagine',
  'india',
  'indole',
  'inedito',
  'infatti',
  'infilare',
  'inflitto',
  'ingaggio',
  'ingegno',
  'inglese',
  'ingordo',
  'ingrosso',
  'innesco',
  'inodore',
  'inoltrare',
  'inondato',
  'insano',
  'insetto',
  'insieme',
  'insonnia',
  'insulina',
  'intasato',
  'intero',
  'intonaco',
  'intuito',
  'inumidire',
  'invalido',
  'invece',
  'invito',
  'iperbole',
  'ipnotico',
  'ipotesi',
  'ippica',
  'iride',
  'irlanda',
  'ironico',
  'irrigato',
  'irrorare',
  'isolato',
  'isotopo',
  'isterico',
  'istituto',
  'istrice',
  'italia',
  'iterare',
  'labbro',
  'labirinto',
  'lacca',
  'lacerato',
  'lacrima',
  'lacuna',
  'laddove',
  'lago',
  'lampo',
  'lancetta',
  'lanterna',
  'lardoso',
  'larga',
  'laringe',
  'lastra',
  'latenza',
  'latino',
  'lattuga',
  'lavagna',
  'lavoro',
  'legale',
  'leggero',
  'lembo',
  'lentezza',
  'lenza',
  'leone',
  'lepre',
  'lesivo',
  'lessato',
  'lesto',
  'letterale',
  'leva',
  'levigato',
  'libero',
  'lido',
  'lievito',
  'lilla',
  'limatura',
  'limitare',
  'limpido',
  'lineare',
  'lingua',
  'liquido',
  'lira',
  'lirica',
  'lisca',
  'lite',
  'litigio',
  'livrea',
  'locanda',
  'lode',
  'logica',
  'lombare',
  'londra',
  'longevo',
  'loquace',
  'lorenzo',
  'loto',
  'lotteria',
  'luce',
  'lucidato',
  'lumaca',
  'luminoso',
  'lungo',
  'lupo',
  'luppolo',
  'lusinga',
  'lusso',
  'lutto',
  'macabro',
  'macchina',
  'macero',
  'macinato',
  'madama',
  'magico',
  'maglia',
  'magnete',
  'magro',
  'maiolica',
  'malafede',
  'malgrado',
  'malinteso',
  'malsano',
  'malto',
  'malumore',
  'mana',
  'mancia',
  'mandorla',
  'mangiare',
  'manifesto',
  'mannaro',
  'manovra',
  'mansarda',
  'mantide',
  'manubrio',
  'mappa',
  'maratona',
  'marcire',
  'maretta',
  'marmo',
  'marsupio',
  'maschera',
  'massaia',
  'mastino',
  'materasso',
  'matricola',
  'mattone',
  'maturo',
  'mazurca',
  'meandro',
  'meccanico',
  'mecenate',
  'medesimo',
  'meditare',
  'mega',
  'melassa',
  'melis',
  'melodia',
  'meninge',
  'meno',
  'mensola',
  'mercurio',
  'merenda',
  'merlo',
  'meschino',
  'mese',
  'messere',
  'mestolo',
  'metallo',
  'metodo',
  'mettere',
  'miagolare',
  'mica',
  'micelio',
  'michele',
  'microbo',
  'midollo',
  'miele',
  'migliore',
  'milano',
  'milite',
  'mimosa',
  'minerale',
  'mini',
  'minore',
  'mirino',
  'mirtillo',
  'miscela',
  'missiva',
  'misto',
  'misurare',
  'mitezza',
  'mitigare',
  'mitra',
  'mittente',
  'mnemonico',
  'modello',
  'modifica',
  'modulo',
  'mogano',
  'mogio',
  'mole',
  'molosso',
  'monastero',
  'monco',
  'mondina',
  'monetario',
  'monile',
  'monotono',
  'monsone',
  'montato',
  'monviso',
  'mora',
  'mordere',
  'morsicato',
  'mostro',
  'motivato',
  'motosega',
  'motto',
  'movenza',
  'movimento',
  'mozzo',
  'mucca',
  'mucosa',
  'muffa',
  'mughetto',
  'mugnaio',
  'mulatto',
  'mulinello',
  'multiplo',
  'mummia',
  'munto',
  'muovere',
  'murale',
  'musa',
  'muscolo',
  'musica',
  'mutevole',
  'muto',
  'nababbo',
  'nafta',
  'nanometro',
  'narciso',
  'narice',
  'narrato',
  'nascere',
  'nastrare',
  'naturale',
  'nautica',
  'naviglio',
  'nebulosa',
  'necrosi',
  'negativo',
  'negozio',
  'nemmeno',
  'neofita',
  'neretto',
  'nervo',
  'nessuno',
  'nettuno',
  'neutrale',
  'neve',
  'nevrotico',
  'nicchia',
  'ninfa',
  'nitido',
  'nobile',
  'nocivo',
  'nodo',
  'nome',
  'nomina',
  'nordico',
  'normale',
  'norvegese',
  'nostrano',
  'notare',
  'notizia',
  'notturno',
  'novella',
  'nucleo',
  'nulla',
  'numero',
  'nuovo',
  'nutrire',
  'nuvola',
  'nuziale',
  'oasi',
  'obbedire',
  'obbligo',
  'obelisco',
  'oblio',
  'obolo',
  'obsoleto',
  'occasione',
  'occhio',
  'occidente',
  'occorrere',
  'occultare',
  'ocra',
  'oculato',
  'odierno',
  'odorare',
  'offerta',
  'offrire',
  'offuscato',
  'oggetto',
  'oggi',
  'ognuno',
  'olandese',
  'olfatto',
  'oliato',
  'oliva',
  'ologramma',
  'oltre',
  'omaggio',
  'ombelico',
  'ombra',
  'omega',
  'omissione',
  'ondoso',
  'onere',
  'onice',
  'onnivoro',
  'onorevole',
  'onta',
  'operato',
  'opinione',
  'opposto',
  'oracolo',
  'orafo',
  'ordine',
  'orecchino',
  'orefice',
  'orfano',
  'organico',
  'origine',
  'orizzonte',
  'orma',
  'ormeggio',
  'ornativo',
  'orologio',
  'orrendo',
  'orribile',
  'ortensia',
  'ortica',
  'orzata',
  'orzo',
  'osare',
  'oscurare',
  'osmosi',
  'ospedale',
  'ospite',
  'ossa',
  'ossidare',
  'ostacolo',
  'oste',
  'otite',
  'otre',
  'ottagono',
  'ottimo',
  'ottobre',
  'ovale',
  'ovest',
  'ovino',
  'oviparo',
  'ovocito',
  'ovunque',
  'ovviare',
  'ozio',
  'pacchetto',
  'pace',
  'pacifico',
  'padella',
  'padrone',
  'paese',
  'paga',
  'pagina',
  'palazzina',
  'palesare',
  'pallido',
  'palo',
  'palude',
  'pandoro',
  'pannello',
  'paolo',
  'paonazzo',
  'paprica',
  'parabola',
  'parcella',
  'parere',
  'pargolo',
  'pari',
  'parlato',
  'parola',
  'partire',
  'parvenza',
  'parziale',
  'passivo',
  'pasticca',
  'patacca',
  'patologia',
  'pattume',
  'pavone',
  'peccato',
  'pedalare',
  'pedonale',
  'peggio',
  'peloso',
  'penare',
  'pendice',
  'penisola',
  'pennuto',
  'penombra',
  'pensare',
  'pentola',
  'pepe',
  'pepita',
  'perbene',
  'percorso',
  'perdonato',
  'perforare',
  'pergamena',
  'periodo',
  'permesso',
  'perno',
  'perplesso',
  'persuaso',
  'pertugio',
  'pervaso',
  'pesatore',
  'pesista',
  'peso',
  'pestifero',
  'petalo',
  'pettine',
  'petulante',
  'pezzo',
  'piacere',
  'pianta',
  'piattino',
  'piccino',
  'picozza',
  'piega',
  'pietra',
  'piffero',
  'pigiama',
  'pigolio',
  'pigro',
  'pila',
  'pilifero',
  'pillola',
  'pilota',
  'pimpante',
  'pineta',
  'pinna',
  'pinolo',
  'pioggia',
  'piombo',
  'piramide',
  'piretico',
  'pirite',
  'pirolisi',
  'pitone',
  'pizzico',
  'placebo',
  'planare',
  'plasma',
  'platano',
  'plenario',
  'pochezza',
  'poderoso',
  'podismo',
  'poesia',
  'poggiare',
  'polenta',
  'poligono',
  'pollice',
  'polmonite',
  'polpetta',
  'polso',
  'poltrona',
  'polvere',
  'pomice',
  'pomodoro',
  'ponte',
  'popoloso',
  'porfido',
  'poroso',
  'porpora',
  'porre',
  'portata',
  'posa',
  'positivo',
  'possesso',
  'postulato',
  'potassio',
  'potere',
  'pranzo',
  'prassi',
  'pratica',
  'precluso',
  'predica',
  'prefisso',
  'pregiato',
  'prelievo',
  'premere',
  'prenotare',
  'preparato',
  'presenza',
  'pretesto',
  'prevalso',
  'prima',
  'principe',
  'privato',
  'problema',
  'procura',
  'produrre',
  'profumo',
  'progetto',
  'prolunga',
  'promessa',
  'pronome',
  'proposta',
  'proroga',
  'proteso',
  'prova',
  'prudente',
  'prugna',
  'prurito',
  'psiche',
  'pubblico',
  'pudica',
  'pugilato',
  'pugno',
  'pulce',
  'pulito',
  'pulsante',
  'puntare',
  'pupazzo',
  'pupilla',
  'puro',
  'quadro',
  'qualcosa',
  'quasi',
  'querela',
  'quota',
  'raccolto',
  'raddoppio',
  'radicale',
  'radunato',
  'raffica',
  'ragazzo',
  'ragione',
  'ragno',
  'ramarro',
  'ramingo',
  'ramo',
  'randagio',
  'rantolare',
  'rapato',
  'rapina',
  'rappreso',
  'rasatura',
  'raschiato',
  'rasente',
  'rassegna',
  'rastrello',
  'rata',
  'ravveduto',
  'reale',
  'recepire',
  'recinto',
  'recluta',
  'recondito',
  'recupero',
  'reddito',
  'redimere',
  'regalato',
  'registro',
  'regola',
  'regresso',
  'relazione',
  'remare',
  'remoto',
  'renna',
  'replica',
  'reprimere',
  'reputare',
  'resa',
  'residente',
  'responso',
  'restauro',
  'rete',
  'retina',
  'retorica',
  'rettifica',
  'revocato',
  'riassunto',
  'ribadire',
  'ribelle',
  'ribrezzo',
  'ricarica',
  'ricco',
  'ricevere',
  'riciclato',
  'ricordo',
  'ricreduto',
  'ridicolo',
  'ridurre',
  'rifasare',
  'riflesso',
  'riforma',
  'rifugio',
  'rigare',
  'rigettato',
  'righello',
  'rilassato',
  'rilevato',
  'rimanere',
  'rimbalzo',
  'rimedio',
  'rimorchio',
  'rinascita',
  'rincaro',
  'rinforzo',
  'rinnovo',
  'rinomato',
  'rinsavito',
  'rintocco',
  'rinuncia',
  'rinvenire',
  'riparato',
  'ripetuto',
  'ripieno',
  'riportare',
  'ripresa',
  'ripulire',
  'risata',
  'rischio',
  'riserva',
  'risibile',
  'riso',
  'rispetto',
  'ristoro',
  'risultato',
  'risvolto',
  'ritardo',
  'ritegno',
  'ritmico',
  'ritrovo',
  'riunione',
  'riva',
  'riverso',
  'rivincita',
  'rivolto',
  'rizoma',
  'roba',
  'robotico',
  'robusto',
  'roccia',
  'roco',
  'rodaggio',
  'rodere',
  'roditore',
  'rogito',
  'rollio',
  'romantico',
  'rompere',
  'ronzio',
  'rosolare',
  'rospo',
  'rotante',
  'rotondo',
  'rotula',
  'rovescio',
  'rubizzo',
  'rubrica',
  'ruga',
  'rullino',
  'rumine',
  'rumoroso',
  'ruolo',
  'rupe',
  'russare',
  'rustico',
  'sabato',
  'sabbiare',
  'sabotato',
  'sagoma',
  'salasso',
  'saldatura',
  'salgemma',
  'salivare',
  'salmone',
  'salone',
  'saltare',
  'saluto',
  'salvo',
  'sapere',
  'sapido',
  'saporito',
  'saraceno',
  'sarcasmo',
  'sarto',
  'sassoso',
  'satellite',
  'satira',
  'satollo',
  'saturno',
  'savana',
  'savio',
  'saziato',
  'sbadiglio',
  'sbalzo',
  'sbancato',
  'sbarra',
  'sbattere',
  'sbavare',
  'sbendare',
  'sbirciare',
  'sbloccato',
  'sbocciato',
  'sbrinare',
  'sbruffone',
  'sbuffare',
  'scabroso',
  'scadenza',
  'scala',
  'scambiare',
  'scandalo',
  'scapola',
  'scarso',
  'scatenare',
  'scavato',
  'scelto',
  'scenico',
  'scettro',
  'scheda',
  'schiena',
  'sciarpa',
  'scienza',
  'scindere',
  'scippo',
  'sciroppo',
  'scivolo',
  'sclerare',
  'scodella',
  'scolpito',
  'scomparto',
  'sconforto',
  'scoprire',
  'scorta',
  'scossone',
  'scozzese',
  'scriba',
  'scrollare',
  'scrutinio',
  'scuderia',
  'scultore',
  'scuola',
  'scuro',
  'scusare',
  'sdebitare',
  'sdoganare',
  'seccatura',
  'secondo',
  'sedano',
  'seggiola',
  'segnalato',
  'segregato',
  'seguito',
  'selciato',
  'selettivo',
  'sella',
  'selvaggio',
  'semaforo',
  'sembrare',
  'seme',
  'seminato',
  'sempre',
  'senso',
  'sentire',
  'sepolto',
  'sequenza',
  'serata',
  'serbato',
  'sereno',
  'serio',
  'serpente',
  'serraglio',
  'servire',
  'sestina',
  'setola',
  'settimana',
  'sfacelo',
  'sfaldare',
  'sfamato',
  'sfarzoso',
  'sfaticato',
  'sfera',
  'sfida',
  'sfilato',
  'sfinge',
  'sfocato',
  'sfoderare',
  'sfogo',
  'sfoltire',
  'sforzato',
  'sfratto',
  'sfruttato',
  'sfuggito',
  'sfumare',
  'sfuso',
  'sgabello',
  'sgarbato',
  'sgonfiare',
  'sgorbio',
  'sgrassato',
  'sguardo',
  'sibilo',
  'siccome',
  'sierra',
  'sigla',
  'signore',
  'silenzio',
  'sillaba',
  'simbolo',
  'simpatico',
  'simulato',
  'sinfonia',
  'singolo',
  'sinistro',
  'sino',
  'sintesi',
  'sinusoide',
  'sipario',
  'sisma',
  'sistole',
  'situato',
  'slitta',
  'slogatura',
  'sloveno',
  'smarrito',
  'smemorato',
  'smentito',
  'smeraldo',
  'smilzo',
  'smontare',
  'smottato',
  'smussato',
  'snellire',
  'snervato',
  'snodo',
  'sobbalzo',
  'sobrio',
  'soccorso',
  'sociale',
  'sodale',
  'soffitto',
  'sogno',
  'soldato',
  'solenne',
  'solido',
  'sollazzo',
  'solo',
  'solubile',
  'solvente',
  'somatico',
  'somma',
  'sonda',
  'sonetto',
  'sonnifero',
  'sopire',
  'soppeso',
  'sopra',
  'sorgere',
  'sorpasso',
  'sorriso',
  'sorso',
  'sorteggio',
  'sorvolato',
  'sospiro',
  'sosta',
  'sottile',
  'spada',
  'spalla',
  'spargere',
  'spatola',
  'spavento',
  'spazzola',
  'specie',
  'spedire',
  'spegnere',
  'spelatura',
  'speranza',
  'spessore',
  'spettrale',
  'spezzato',
  'spia',
  'spigoloso',
  'spillato',
  'spinoso',
  'spirale',
  'splendido',
  'sportivo',
  'sposo',
  'spranga',
  'sprecare',
  'spronato',
  'spruzzo',
  'spuntino',
  'squillo',
  'sradicare',
  'srotolato',
  'stabile',
  'stacco',
  'staffa',
  'stagnare',
  'stampato',
  'stantio',
  'starnuto',
  'stasera',
  'statuto',
  'stelo',
  'steppa',
  'sterzo',
  'stiletto',
  'stima',
  'stirpe',
  'stivale',
  'stizzoso',
  'stonato',
  'storico',
  'strappo',
  'stregato',
  'stridulo',
  'strozzare',
  'strutto',
  'stuccare',
  'stufo',
  'stupendo',
  'subentro',
  'succoso',
  'sudore',
  'suggerito',
  'sugo',
  'sultano',
  'suonare',
  'superbo',
  'supporto',
  'surgelato',
  'surrogato',
  'sussurro',
  'sutura',
  'svagare',
  'svedese',
  'sveglio',
  'svelare',
  'svenuto',
  'svezia',
  'sviluppo',
  'svista',
  'svizzera',
  'svolta',
  'svuotare',
  'tabacco',
  'tabulato',
  'tacciare',
  'taciturno',
  'tale',
  'talismano',
  'tampone',
  'tannino',
  'tara',
  'tardivo',
  'targato',
  'tariffa',
  'tarpare',
  'tartaruga',
  'tasto',
  'tattico',
  'taverna',
  'tavolata',
  'tazza',
  'teca',
  'tecnico',
  'telefono',
  'temerario',
  'tempo',
  'temuto',
  'tendone',
  'tenero',
  'tensione',
  'tentacolo',
  'teorema',
  'terme',
  'terrazzo',
  'terzetto',
  'tesi',
  'tesserato',
  'testato',
  'tetro',
  'tettoia',
  'tifare',
  'tigella',
  'timbro',
  'tinto',
  'tipico',
  'tipografo',
  'tiraggio',
  'tiro',
  'titanio',
  'titolo',
  'titubante',
  'tizio',
  'tizzone',
  'toccare',
  'tollerare',
  'tolto',
  'tombola',
  'tomo',
  'tonfo',
  'tonsilla',
  'topazio',
  'topologia',
  'toppa',
  'torba',
  'tornare',
  'torrone',
  'tortora',
  'toscano',
  'tossire',
  'tostatura',
  'totano',
  'trabocco',
  'trachea',
  'trafila',
  'tragedia',
  'tralcio',
  'tramonto',
  'transito',
  'trapano',
  'trarre',
  'trasloco',
  'trattato',
  'trave',
  'treccia',
  'tremolio',
  'trespolo',
  'tributo',
  'tricheco',
  'trifoglio',
  'trillo',
  'trincea',
  'trio',
  'tristezza',
  'triturato',
  'trivella',
  'tromba',
  'trono',
  'troppo',
  'trottola',
  'trovare',
  'truccato',
  'tubatura',
  'tuffato',
  'tulipano',
  'tumulto',
  'tunisia',
  'turbare',
  'turchino',
  'tuta',
  'tutela',
  'ubicato',
  'uccello',
  'uccisore',
  'udire',
  'uditivo',
  'uffa',
  'ufficio',
  'uguale',
  'ulisse',
  'ultimato',
  'umano',
  'umile',
  'umorismo',
  'uncinetto',
  'ungere',
  'ungherese',
  'unicorno',
  'unificato',
  'unisono',
  'unitario',
  'unte',
  'uovo',
  'upupa',
  'uragano',
  'urgenza',
  'urlo',
  'usanza',
  'usato',
  'uscito',
  'usignolo',
  'usuraio',
  'utensile',
  'utilizzo',
  'utopia',
  'vacante',
  'vaccinato',
  'vagabondo',
  'vagliato',
  'valanga',
  'valgo',
  'valico',
  'valletta',
  'valoroso',
  'valutare',
  'valvola',
  'vampata',
  'vangare',
  'vanitoso',
  'vano',
  'vantaggio',
  'vanvera',
  'vapore',
  'varano',
  'varcato',
  'variante',
  'vasca',
  'vedetta',
  'vedova',
  'veduto',
  'vegetale',
  'veicolo',
  'velcro',
  'velina',
  'velluto',
  'veloce',
  'venato',
  'vendemmia',
  'vento',
  'verace',
  'verbale',
  'vergogna',
  'verifica',
  'vero',
  'verruca',
  'verticale',
  'vescica',
  'vessillo',
  'vestale',
  'veterano',
  'vetrina',
  'vetusto',
  'viandante',
  'vibrante',
  'vicenda',
  'vichingo',
  'vicinanza',
  'vidimare',
  'vigilia',
  'vigneto',
  'vigore',
  'vile',
  'villano',
  'vimini',
  'vincitore',
  'viola',
  'vipera',
  'virgola',
  'virologo',
  'virulento',
  'viscoso',
  'visione',
  'vispo',
  'vissuto',
  'visura',
  'vita',
  'vitello',
  'vittima',
  'vivanda',
  'vivido',
  'viziare',
  'voce',
  'voga',
  'volatile',
  'volere',
  'volpe',
  'voragine',
  'vulcano',
  'zampogna',
  'zanna',
  'zappato',
  'zattera',
  'zavorra',
  'zefiro',
  'zelante',
  'zelo',
  'zenzero',
  'zerbino',
  'zibetto',
  'zinco',
  'zircone',
  'zitto',
  'zolla',
  'zotico',
  'zucchero',
  'zufolo',
  'zulu',
  'zuppa'
];
}],
[/* 35 */ 'bcoin', '/lib/hd/words/japanese.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

module.exports = [
  'あいこくしん',
  'あいさつ',
  'あいだ',
  'あおぞら',
  'あかちゃん',
  'あきる',
  'あけがた',
  'あける',
  'あこがれる',
  'あさい',
  'あさひ',
  'あしあと',
  'あじわう',
  'あずかる',
  'あずき',
  'あそぶ',
  'あたえる',
  'あたためる',
  'あたりまえ',
  'あたる',
  'あつい',
  'あつかう',
  'あっしゅく',
  'あつまり',
  'あつめる',
  'あてな',
  'あてはまる',
  'あひる',
  'あぶら',
  'あぶる',
  'あふれる',
  'あまい',
  'あまど',
  'あまやかす',
  'あまり',
  'あみもの',
  'あめりか',
  'あやまる',
  'あゆむ',
  'あらいぐま',
  'あらし',
  'あらすじ',
  'あらためる',
  'あらゆる',
  'あらわす',
  'ありがとう',
  'あわせる',
  'あわてる',
  'あんい',
  'あんがい',
  'あんこ',
  'あんぜん',
  'あんてい',
  'あんない',
  'あんまり',
  'いいだす',
  'いおん',
  'いがい',
  'いがく',
  'いきおい',
  'いきなり',
  'いきもの',
  'いきる',
  'いくじ',
  'いくぶん',
  'いけばな',
  'いけん',
  'いこう',
  'いこく',
  'いこつ',
  'いさましい',
  'いさん',
  'いしき',
  'いじゅう',
  'いじょう',
  'いじわる',
  'いずみ',
  'いずれ',
  'いせい',
  'いせえび',
  'いせかい',
  'いせき',
  'いぜん',
  'いそうろう',
  'いそがしい',
  'いだい',
  'いだく',
  'いたずら',
  'いたみ',
  'いたりあ',
  'いちおう',
  'いちじ',
  'いちど',
  'いちば',
  'いちぶ',
  'いちりゅう',
  'いつか',
  'いっしゅん',
  'いっせい',
  'いっそう',
  'いったん',
  'いっち',
  'いってい',
  'いっぽう',
  'いてざ',
  'いてん',
  'いどう',
  'いとこ',
  'いない',
  'いなか',
  'いねむり',
  'いのち',
  'いのる',
  'いはつ',
  'いばる',
  'いはん',
  'いびき',
  'いひん',
  'いふく',
  'いへん',
  'いほう',
  'いみん',
  'いもうと',
  'いもたれ',
  'いもり',
  'いやがる',
  'いやす',
  'いよかん',
  'いよく',
  'いらい',
  'いらすと',
  'いりぐち',
  'いりょう',
  'いれい',
  'いれもの',
  'いれる',
  'いろえんぴつ',
  'いわい',
  'いわう',
  'いわかん',
  'いわば',
  'いわゆる',
  'いんげんまめ',
  'いんさつ',
  'いんしょう',
  'いんよう',
  'うえき',
  'うえる',
  'うおざ',
  'うがい',
  'うかぶ',
  'うかべる',
  'うきわ',
  'うくらいな',
  'うくれれ',
  'うけたまわる',
  'うけつけ',
  'うけとる',
  'うけもつ',
  'うける',
  'うごかす',
  'うごく',
  'うこん',
  'うさぎ',
  'うしなう',
  'うしろがみ',
  'うすい',
  'うすぎ',
  'うすぐらい',
  'うすめる',
  'うせつ',
  'うちあわせ',
  'うちがわ',
  'うちき',
  'うちゅう',
  'うっかり',
  'うつくしい',
  'うったえる',
  'うつる',
  'うどん',
  'うなぎ',
  'うなじ',
  'うなずく',
  'うなる',
  'うねる',
  'うのう',
  'うぶげ',
  'うぶごえ',
  'うまれる',
  'うめる',
  'うもう',
  'うやまう',
  'うよく',
  'うらがえす',
  'うらぐち',
  'うらない',
  'うりあげ',
  'うりきれ',
  'うるさい',
  'うれしい',
  'うれゆき',
  'うれる',
  'うろこ',
  'うわき',
  'うわさ',
  'うんこう',
  'うんちん',
  'うんてん',
  'うんどう',
  'えいえん',
  'えいが',
  'えいきょう',
  'えいご',
  'えいせい',
  'えいぶん',
  'えいよう',
  'えいわ',
  'えおり',
  'えがお',
  'えがく',
  'えきたい',
  'えくせる',
  'えしゃく',
  'えすて',
  'えつらん',
  'えのぐ',
  'えほうまき',
  'えほん',
  'えまき',
  'えもじ',
  'えもの',
  'えらい',
  'えらぶ',
  'えりあ',
  'えんえん',
  'えんかい',
  'えんぎ',
  'えんげき',
  'えんしゅう',
  'えんぜつ',
  'えんそく',
  'えんちょう',
  'えんとつ',
  'おいかける',
  'おいこす',
  'おいしい',
  'おいつく',
  'おうえん',
  'おうさま',
  'おうじ',
  'おうせつ',
  'おうたい',
  'おうふく',
  'おうべい',
  'おうよう',
  'おえる',
  'おおい',
  'おおう',
  'おおどおり',
  'おおや',
  'おおよそ',
  'おかえり',
  'おかず',
  'おがむ',
  'おかわり',
  'おぎなう',
  'おきる',
  'おくさま',
  'おくじょう',
  'おくりがな',
  'おくる',
  'おくれる',
  'おこす',
  'おこなう',
  'おこる',
  'おさえる',
  'おさない',
  'おさめる',
  'おしいれ',
  'おしえる',
  'おじぎ',
  'おじさん',
  'おしゃれ',
  'おそらく',
  'おそわる',
  'おたがい',
  'おたく',
  'おだやか',
  'おちつく',
  'おっと',
  'おつり',
  'おでかけ',
  'おとしもの',
  'おとなしい',
  'おどり',
  'おどろかす',
  'おばさん',
  'おまいり',
  'おめでとう',
  'おもいで',
  'おもう',
  'おもたい',
  'おもちゃ',
  'おやつ',
  'おやゆび',
  'およぼす',
  'おらんだ',
  'おろす',
  'おんがく',
  'おんけい',
  'おんしゃ',
  'おんせん',
  'おんだん',
  'おんちゅう',
  'おんどけい',
  'かあつ',
  'かいが',
  'がいき',
  'がいけん',
  'がいこう',
  'かいさつ',
  'かいしゃ',
  'かいすいよく',
  'かいぜん',
  'かいぞうど',
  'かいつう',
  'かいてん',
  'かいとう',
  'かいふく',
  'がいへき',
  'かいほう',
  'かいよう',
  'がいらい',
  'かいわ',
  'かえる',
  'かおり',
  'かかえる',
  'かがく',
  'かがし',
  'かがみ',
  'かくご',
  'かくとく',
  'かざる',
  'がぞう',
  'かたい',
  'かたち',
  'がちょう',
  'がっきゅう',
  'がっこう',
  'がっさん',
  'がっしょう',
  'かなざわし',
  'かのう',
  'がはく',
  'かぶか',
  'かほう',
  'かほご',
  'かまう',
  'かまぼこ',
  'かめれおん',
  'かゆい',
  'かようび',
  'からい',
  'かるい',
  'かろう',
  'かわく',
  'かわら',
  'がんか',
  'かんけい',
  'かんこう',
  'かんしゃ',
  'かんそう',
  'かんたん',
  'かんち',
  'がんばる',
  'きあい',
  'きあつ',
  'きいろ',
  'ぎいん',
  'きうい',
  'きうん',
  'きえる',
  'きおう',
  'きおく',
  'きおち',
  'きおん',
  'きかい',
  'きかく',
  'きかんしゃ',
  'ききて',
  'きくばり',
  'きくらげ',
  'きけんせい',
  'きこう',
  'きこえる',
  'きこく',
  'きさい',
  'きさく',
  'きさま',
  'きさらぎ',
  'ぎじかがく',
  'ぎしき',
  'ぎじたいけん',
  'ぎじにってい',
  'ぎじゅつしゃ',
  'きすう',
  'きせい',
  'きせき',
  'きせつ',
  'きそう',
  'きぞく',
  'きぞん',
  'きたえる',
  'きちょう',
  'きつえん',
  'ぎっちり',
  'きつつき',
  'きつね',
  'きてい',
  'きどう',
  'きどく',
  'きない',
  'きなが',
  'きなこ',
  'きぬごし',
  'きねん',
  'きのう',
  'きのした',
  'きはく',
  'きびしい',
  'きひん',
  'きふく',
  'きぶん',
  'きぼう',
  'きほん',
  'きまる',
  'きみつ',
  'きむずかしい',
  'きめる',
  'きもだめし',
  'きもち',
  'きもの',
  'きゃく',
  'きやく',
  'ぎゅうにく',
  'きよう',
  'きょうりゅう',
  'きらい',
  'きらく',
  'きりん',
  'きれい',
  'きれつ',
  'きろく',
  'ぎろん',
  'きわめる',
  'ぎんいろ',
  'きんかくじ',
  'きんじょ',
  'きんようび',
  'ぐあい',
  'くいず',
  'くうかん',
  'くうき',
  'くうぐん',
  'くうこう',
  'ぐうせい',
  'くうそう',
  'ぐうたら',
  'くうふく',
  'くうぼ',
  'くかん',
  'くきょう',
  'くげん',
  'ぐこう',
  'くさい',
  'くさき',
  'くさばな',
  'くさる',
  'くしゃみ',
  'くしょう',
  'くすのき',
  'くすりゆび',
  'くせげ',
  'くせん',
  'ぐたいてき',
  'くださる',
  'くたびれる',
  'くちこみ',
  'くちさき',
  'くつした',
  'ぐっすり',
  'くつろぐ',
  'くとうてん',
  'くどく',
  'くなん',
  'くねくね',
  'くのう',
  'くふう',
  'くみあわせ',
  'くみたてる',
  'くめる',
  'くやくしょ',
  'くらす',
  'くらべる',
  'くるま',
  'くれる',
  'くろう',
  'くわしい',
  'ぐんかん',
  'ぐんしょく',
  'ぐんたい',
  'ぐんて',
  'けあな',
  'けいかく',
  'けいけん',
  'けいこ',
  'けいさつ',
  'げいじゅつ',
  'けいたい',
  'げいのうじん',
  'けいれき',
  'けいろ',
  'けおとす',
  'けおりもの',
  'げきか',
  'げきげん',
  'げきだん',
  'げきちん',
  'げきとつ',
  'げきは',
  'げきやく',
  'げこう',
  'げこくじょう',
  'げざい',
  'けさき',
  'げざん',
  'けしき',
  'けしごむ',
  'けしょう',
  'げすと',
  'けたば',
  'けちゃっぷ',
  'けちらす',
  'けつあつ',
  'けつい',
  'けつえき',
  'けっこん',
  'けつじょ',
  'けっせき',
  'けってい',
  'けつまつ',
  'げつようび',
  'げつれい',
  'けつろん',
  'げどく',
  'けとばす',
  'けとる',
  'けなげ',
  'けなす',
  'けなみ',
  'けぬき',
  'げねつ',
  'けねん',
  'けはい',
  'げひん',
  'けぶかい',
  'げぼく',
  'けまり',
  'けみかる',
  'けむし',
  'けむり',
  'けもの',
  'けらい',
  'けろけろ',
  'けわしい',
  'けんい',
  'けんえつ',
  'けんお',
  'けんか',
  'げんき',
  'けんげん',
  'けんこう',
  'けんさく',
  'けんしゅう',
  'けんすう',
  'げんそう',
  'けんちく',
  'けんてい',
  'けんとう',
  'けんない',
  'けんにん',
  'げんぶつ',
  'けんま',
  'けんみん',
  'けんめい',
  'けんらん',
  'けんり',
  'こあくま',
  'こいぬ',
  'こいびと',
  'ごうい',
  'こうえん',
  'こうおん',
  'こうかん',
  'ごうきゅう',
  'ごうけい',
  'こうこう',
  'こうさい',
  'こうじ',
  'こうすい',
  'ごうせい',
  'こうそく',
  'こうたい',
  'こうちゃ',
  'こうつう',
  'こうてい',
  'こうどう',
  'こうない',
  'こうはい',
  'ごうほう',
  'ごうまん',
  'こうもく',
  'こうりつ',
  'こえる',
  'こおり',
  'ごかい',
  'ごがつ',
  'ごかん',
  'こくご',
  'こくさい',
  'こくとう',
  'こくない',
  'こくはく',
  'こぐま',
  'こけい',
  'こける',
  'ここのか',
  'こころ',
  'こさめ',
  'こしつ',
  'こすう',
  'こせい',
  'こせき',
  'こぜん',
  'こそだて',
  'こたい',
  'こたえる',
  'こたつ',
  'こちょう',
  'こっか',
  'こつこつ',
  'こつばん',
  'こつぶ',
  'こてい',
  'こてん',
  'ことがら',
  'ことし',
  'ことば',
  'ことり',
  'こなごな',
  'こねこね',
  'このまま',
  'このみ',
  'このよ',
  'ごはん',
  'こひつじ',
  'こふう',
  'こふん',
  'こぼれる',
  'ごまあぶら',
  'こまかい',
  'ごますり',
  'こまつな',
  'こまる',
  'こむぎこ',
  'こもじ',
  'こもち',
  'こもの',
  'こもん',
  'こやく',
  'こやま',
  'こゆう',
  'こゆび',
  'こよい',
  'こよう',
  'こりる',
  'これくしょん',
  'ころっけ',
  'こわもて',
  'こわれる',
  'こんいん',
  'こんかい',
  'こんき',
  'こんしゅう',
  'こんすい',
  'こんだて',
  'こんとん',
  'こんなん',
  'こんびに',
  'こんぽん',
  'こんまけ',
  'こんや',
  'こんれい',
  'こんわく',
  'ざいえき',
  'さいかい',
  'さいきん',
  'ざいげん',
  'ざいこ',
  'さいしょ',
  'さいせい',
  'ざいたく',
  'ざいちゅう',
  'さいてき',
  'ざいりょう',
  'さうな',
  'さかいし',
  'さがす',
  'さかな',
  'さかみち',
  'さがる',
  'さぎょう',
  'さくし',
  'さくひん',
  'さくら',
  'さこく',
  'さこつ',
  'さずかる',
  'ざせき',
  'さたん',
  'さつえい',
  'ざつおん',
  'ざっか',
  'ざつがく',
  'さっきょく',
  'ざっし',
  'さつじん',
  'ざっそう',
  'さつたば',
  'さつまいも',
  'さてい',
  'さといも',
  'さとう',
  'さとおや',
  'さとし',
  'さとる',
  'さのう',
  'さばく',
  'さびしい',
  'さべつ',
  'さほう',
  'さほど',
  'さます',
  'さみしい',
  'さみだれ',
  'さむけ',
  'さめる',
  'さやえんどう',
  'さゆう',
  'さよう',
  'さよく',
  'さらだ',
  'ざるそば',
  'さわやか',
  'さわる',
  'さんいん',
  'さんか',
  'さんきゃく',
  'さんこう',
  'さんさい',
  'ざんしょ',
  'さんすう',
  'さんせい',
  'さんそ',
  'さんち',
  'さんま',
  'さんみ',
  'さんらん',
  'しあい',
  'しあげ',
  'しあさって',
  'しあわせ',
  'しいく',
  'しいん',
  'しうち',
  'しえい',
  'しおけ',
  'しかい',
  'しかく',
  'じかん',
  'しごと',
  'しすう',
  'じだい',
  'したうけ',
  'したぎ',
  'したて',
  'したみ',
  'しちょう',
  'しちりん',
  'しっかり',
  'しつじ',
  'しつもん',
  'してい',
  'してき',
  'してつ',
  'じてん',
  'じどう',
  'しなぎれ',
  'しなもの',
  'しなん',
  'しねま',
  'しねん',
  'しのぐ',
  'しのぶ',
  'しはい',
  'しばかり',
  'しはつ',
  'しはらい',
  'しはん',
  'しひょう',
  'しふく',
  'じぶん',
  'しへい',
  'しほう',
  'しほん',
  'しまう',
  'しまる',
  'しみん',
  'しむける',
  'じむしょ',
  'しめい',
  'しめる',
  'しもん',
  'しゃいん',
  'しゃうん',
  'しゃおん',
  'じゃがいも',
  'しやくしょ',
  'しゃくほう',
  'しゃけん',
  'しゃこ',
  'しゃざい',
  'しゃしん',
  'しゃせん',
  'しゃそう',
  'しゃたい',
  'しゃちょう',
  'しゃっきん',
  'じゃま',
  'しゃりん',
  'しゃれい',
  'じゆう',
  'じゅうしょ',
  'しゅくはく',
  'じゅしん',
  'しゅっせき',
  'しゅみ',
  'しゅらば',
  'じゅんばん',
  'しょうかい',
  'しょくたく',
  'しょっけん',
  'しょどう',
  'しょもつ',
  'しらせる',
  'しらべる',
  'しんか',
  'しんこう',
  'じんじゃ',
  'しんせいじ',
  'しんちく',
  'しんりん',
  'すあげ',
  'すあし',
  'すあな',
  'ずあん',
  'すいえい',
  'すいか',
  'すいとう',
  'ずいぶん',
  'すいようび',
  'すうがく',
  'すうじつ',
  'すうせん',
  'すおどり',
  'すきま',
  'すくう',
  'すくない',
  'すける',
  'すごい',
  'すこし',
  'ずさん',
  'すずしい',
  'すすむ',
  'すすめる',
  'すっかり',
  'ずっしり',
  'ずっと',
  'すてき',
  'すてる',
  'すねる',
  'すのこ',
  'すはだ',
  'すばらしい',
  'ずひょう',
  'ずぶぬれ',
  'すぶり',
  'すふれ',
  'すべて',
  'すべる',
  'ずほう',
  'すぼん',
  'すまい',
  'すめし',
  'すもう',
  'すやき',
  'すらすら',
  'するめ',
  'すれちがう',
  'すろっと',
  'すわる',
  'すんぜん',
  'すんぽう',
  'せあぶら',
  'せいかつ',
  'せいげん',
  'せいじ',
  'せいよう',
  'せおう',
  'せかいかん',
  'せきにん',
  'せきむ',
  'せきゆ',
  'せきらんうん',
  'せけん',
  'せこう',
  'せすじ',
  'せたい',
  'せたけ',
  'せっかく',
  'せっきゃく',
  'ぜっく',
  'せっけん',
  'せっこつ',
  'せっさたくま',
  'せつぞく',
  'せつだん',
  'せつでん',
  'せっぱん',
  'せつび',
  'せつぶん',
  'せつめい',
  'せつりつ',
  'せなか',
  'せのび',
  'せはば',
  'せびろ',
  'せぼね',
  'せまい',
  'せまる',
  'せめる',
  'せもたれ',
  'せりふ',
  'ぜんあく',
  'せんい',
  'せんえい',
  'せんか',
  'せんきょ',
  'せんく',
  'せんげん',
  'ぜんご',
  'せんさい',
  'せんしゅ',
  'せんすい',
  'せんせい',
  'せんぞ',
  'せんたく',
  'せんちょう',
  'せんてい',
  'せんとう',
  'せんぬき',
  'せんねん',
  'せんぱい',
  'ぜんぶ',
  'ぜんぽう',
  'せんむ',
  'せんめんじょ',
  'せんもん',
  'せんやく',
  'せんゆう',
  'せんよう',
  'ぜんら',
  'ぜんりゃく',
  'せんれい',
  'せんろ',
  'そあく',
  'そいとげる',
  'そいね',
  'そうがんきょう',
  'そうき',
  'そうご',
  'そうしん',
  'そうだん',
  'そうなん',
  'そうび',
  'そうめん',
  'そうり',
  'そえもの',
  'そえん',
  'そがい',
  'そげき',
  'そこう',
  'そこそこ',
  'そざい',
  'そしな',
  'そせい',
  'そせん',
  'そそぐ',
  'そだてる',
  'そつう',
  'そつえん',
  'そっかん',
  'そつぎょう',
  'そっけつ',
  'そっこう',
  'そっせん',
  'そっと',
  'そとがわ',
  'そとづら',
  'そなえる',
  'そなた',
  'そふぼ',
  'そぼく',
  'そぼろ',
  'そまつ',
  'そまる',
  'そむく',
  'そむりえ',
  'そめる',
  'そもそも',
  'そよかぜ',
  'そらまめ',
  'そろう',
  'そんかい',
  'そんけい',
  'そんざい',
  'そんしつ',
  'そんぞく',
  'そんちょう',
  'ぞんび',
  'ぞんぶん',
  'そんみん',
  'たあい',
  'たいいん',
  'たいうん',
  'たいえき',
  'たいおう',
  'だいがく',
  'たいき',
  'たいぐう',
  'たいけん',
  'たいこ',
  'たいざい',
  'だいじょうぶ',
  'だいすき',
  'たいせつ',
  'たいそう',
  'だいたい',
  'たいちょう',
  'たいてい',
  'だいどころ',
  'たいない',
  'たいねつ',
  'たいのう',
  'たいはん',
  'だいひょう',
  'たいふう',
  'たいへん',
  'たいほ',
  'たいまつばな',
  'たいみんぐ',
  'たいむ',
  'たいめん',
  'たいやき',
  'たいよう',
  'たいら',
  'たいりょく',
  'たいる',
  'たいわん',
  'たうえ',
  'たえる',
  'たおす',
  'たおる',
  'たおれる',
  'たかい',
  'たかね',
  'たきび',
  'たくさん',
  'たこく',
  'たこやき',
  'たさい',
  'たしざん',
  'だじゃれ',
  'たすける',
  'たずさわる',
  'たそがれ',
  'たたかう',
  'たたく',
  'ただしい',
  'たたみ',
  'たちばな',
  'だっかい',
  'だっきゃく',
  'だっこ',
  'だっしゅつ',
  'だったい',
  'たてる',
  'たとえる',
  'たなばた',
  'たにん',
  'たぬき',
  'たのしみ',
  'たはつ',
  'たぶん',
  'たべる',
  'たぼう',
  'たまご',
  'たまる',
  'だむる',
  'ためいき',
  'ためす',
  'ためる',
  'たもつ',
  'たやすい',
  'たよる',
  'たらす',
  'たりきほんがん',
  'たりょう',
  'たりる',
  'たると',
  'たれる',
  'たれんと',
  'たろっと',
  'たわむれる',
  'だんあつ',
  'たんい',
  'たんおん',
  'たんか',
  'たんき',
  'たんけん',
  'たんご',
  'たんさん',
  'たんじょうび',
  'だんせい',
  'たんそく',
  'たんたい',
  'だんち',
  'たんてい',
  'たんとう',
  'だんな',
  'たんにん',
  'だんねつ',
  'たんのう',
  'たんぴん',
  'だんぼう',
  'たんまつ',
  'たんめい',
  'だんれつ',
  'だんろ',
  'だんわ',
  'ちあい',
  'ちあん',
  'ちいき',
  'ちいさい',
  'ちえん',
  'ちかい',
  'ちから',
  'ちきゅう',
  'ちきん',
  'ちけいず',
  'ちけん',
  'ちこく',
  'ちさい',
  'ちしき',
  'ちしりょう',
  'ちせい',
  'ちそう',
  'ちたい',
  'ちたん',
  'ちちおや',
  'ちつじょ',
  'ちてき',
  'ちてん',
  'ちぬき',
  'ちぬり',
  'ちのう',
  'ちひょう',
  'ちへいせん',
  'ちほう',
  'ちまた',
  'ちみつ',
  'ちみどろ',
  'ちめいど',
  'ちゃんこなべ',
  'ちゅうい',
  'ちゆりょく',
  'ちょうし',
  'ちょさくけん',
  'ちらし',
  'ちらみ',
  'ちりがみ',
  'ちりょう',
  'ちるど',
  'ちわわ',
  'ちんたい',
  'ちんもく',
  'ついか',
  'ついたち',
  'つうか',
  'つうじょう',
  'つうはん',
  'つうわ',
  'つかう',
  'つかれる',
  'つくね',
  'つくる',
  'つけね',
  'つける',
  'つごう',
  'つたえる',
  'つづく',
  'つつじ',
  'つつむ',
  'つとめる',
  'つながる',
  'つなみ',
  'つねづね',
  'つのる',
  'つぶす',
  'つまらない',
  'つまる',
  'つみき',
  'つめたい',
  'つもり',
  'つもる',
  'つよい',
  'つるぼ',
  'つるみく',
  'つわもの',
  'つわり',
  'てあし',
  'てあて',
  'てあみ',
  'ていおん',
  'ていか',
  'ていき',
  'ていけい',
  'ていこく',
  'ていさつ',
  'ていし',
  'ていせい',
  'ていたい',
  'ていど',
  'ていねい',
  'ていひょう',
  'ていへん',
  'ていぼう',
  'てうち',
  'ておくれ',
  'てきとう',
  'てくび',
  'でこぼこ',
  'てさぎょう',
  'てさげ',
  'てすり',
  'てそう',
  'てちがい',
  'てちょう',
  'てつがく',
  'てつづき',
  'でっぱ',
  'てつぼう',
  'てつや',
  'でぬかえ',
  'てぬき',
  'てぬぐい',
  'てのひら',
  'てはい',
  'てぶくろ',
  'てふだ',
  'てほどき',
  'てほん',
  'てまえ',
  'てまきずし',
  'てみじか',
  'てみやげ',
  'てらす',
  'てれび',
  'てわけ',
  'てわたし',
  'でんあつ',
  'てんいん',
  'てんかい',
  'てんき',
  'てんぐ',
  'てんけん',
  'てんごく',
  'てんさい',
  'てんし',
  'てんすう',
  'でんち',
  'てんてき',
  'てんとう',
  'てんない',
  'てんぷら',
  'てんぼうだい',
  'てんめつ',
  'てんらんかい',
  'でんりょく',
  'でんわ',
  'どあい',
  'といれ',
  'どうかん',
  'とうきゅう',
  'どうぐ',
  'とうし',
  'とうむぎ',
  'とおい',
  'とおか',
  'とおく',
  'とおす',
  'とおる',
  'とかい',
  'とかす',
  'ときおり',
  'ときどき',
  'とくい',
  'とくしゅう',
  'とくてん',
  'とくに',
  'とくべつ',
  'とけい',
  'とける',
  'とこや',
  'とさか',
  'としょかん',
  'とそう',
  'とたん',
  'とちゅう',
  'とっきゅう',
  'とっくん',
  'とつぜん',
  'とつにゅう',
  'とどける',
  'ととのえる',
  'とない',
  'となえる',
  'となり',
  'とのさま',
  'とばす',
  'どぶがわ',
  'とほう',
  'とまる',
  'とめる',
  'ともだち',
  'ともる',
  'どようび',
  'とらえる',
  'とんかつ',
  'どんぶり',
  'ないかく',
  'ないこう',
  'ないしょ',
  'ないす',
  'ないせん',
  'ないそう',
  'なおす',
  'ながい',
  'なくす',
  'なげる',
  'なこうど',
  'なさけ',
  'なたでここ',
  'なっとう',
  'なつやすみ',
  'ななおし',
  'なにごと',
  'なにもの',
  'なにわ',
  'なのか',
  'なふだ',
  'なまいき',
  'なまえ',
  'なまみ',
  'なみだ',
  'なめらか',
  'なめる',
  'なやむ',
  'ならう',
  'ならび',
  'ならぶ',
  'なれる',
  'なわとび',
  'なわばり',
  'にあう',
  'にいがた',
  'にうけ',
  'におい',
  'にかい',
  'にがて',
  'にきび',
  'にくしみ',
  'にくまん',
  'にげる',
  'にさんかたんそ',
  'にしき',
  'にせもの',
  'にちじょう',
  'にちようび',
  'にっか',
  'にっき',
  'にっけい',
  'にっこう',
  'にっさん',
  'にっしょく',
  'にっすう',
  'にっせき',
  'にってい',
  'になう',
  'にほん',
  'にまめ',
  'にもつ',
  'にやり',
  'にゅういん',
  'にりんしゃ',
  'にわとり',
  'にんい',
  'にんか',
  'にんき',
  'にんげん',
  'にんしき',
  'にんずう',
  'にんそう',
  'にんたい',
  'にんち',
  'にんてい',
  'にんにく',
  'にんぷ',
  'にんまり',
  'にんむ',
  'にんめい',
  'にんよう',
  'ぬいくぎ',
  'ぬかす',
  'ぬぐいとる',
  'ぬぐう',
  'ぬくもり',
  'ぬすむ',
  'ぬまえび',
  'ぬめり',
  'ぬらす',
  'ぬんちゃく',
  'ねあげ',
  'ねいき',
  'ねいる',
  'ねいろ',
  'ねぐせ',
  'ねくたい',
  'ねくら',
  'ねこぜ',
  'ねこむ',
  'ねさげ',
  'ねすごす',
  'ねそべる',
  'ねだん',
  'ねつい',
  'ねっしん',
  'ねつぞう',
  'ねったいぎょ',
  'ねぶそく',
  'ねふだ',
  'ねぼう',
  'ねほりはほり',
  'ねまき',
  'ねまわし',
  'ねみみ',
  'ねむい',
  'ねむたい',
  'ねもと',
  'ねらう',
  'ねわざ',
  'ねんいり',
  'ねんおし',
  'ねんかん',
  'ねんきん',
  'ねんぐ',
  'ねんざ',
  'ねんし',
  'ねんちゃく',
  'ねんど',
  'ねんぴ',
  'ねんぶつ',
  'ねんまつ',
  'ねんりょう',
  'ねんれい',
  'のいず',
  'のおづま',
  'のがす',
  'のきなみ',
  'のこぎり',
  'のこす',
  'のこる',
  'のせる',
  'のぞく',
  'のぞむ',
  'のたまう',
  'のちほど',
  'のっく',
  'のばす',
  'のはら',
  'のべる',
  'のぼる',
  'のみもの',
  'のやま',
  'のらいぬ',
  'のらねこ',
  'のりもの',
  'のりゆき',
  'のれん',
  'のんき',
  'ばあい',
  'はあく',
  'ばあさん',
  'ばいか',
  'ばいく',
  'はいけん',
  'はいご',
  'はいしん',
  'はいすい',
  'はいせん',
  'はいそう',
  'はいち',
  'ばいばい',
  'はいれつ',
  'はえる',
  'はおる',
  'はかい',
  'ばかり',
  'はかる',
  'はくしゅ',
  'はけん',
  'はこぶ',
  'はさみ',
  'はさん',
  'はしご',
  'ばしょ',
  'はしる',
  'はせる',
  'ぱそこん',
  'はそん',
  'はたん',
  'はちみつ',
  'はつおん',
  'はっかく',
  'はづき',
  'はっきり',
  'はっくつ',
  'はっけん',
  'はっこう',
  'はっさん',
  'はっしん',
  'はったつ',
  'はっちゅう',
  'はってん',
  'はっぴょう',
  'はっぽう',
  'はなす',
  'はなび',
  'はにかむ',
  'はぶらし',
  'はみがき',
  'はむかう',
  'はめつ',
  'はやい',
  'はやし',
  'はらう',
  'はろうぃん',
  'はわい',
  'はんい',
  'はんえい',
  'はんおん',
  'はんかく',
  'はんきょう',
  'ばんぐみ',
  'はんこ',
  'はんしゃ',
  'はんすう',
  'はんだん',
  'ぱんち',
  'ぱんつ',
  'はんてい',
  'はんとし',
  'はんのう',
  'はんぱ',
  'はんぶん',
  'はんぺん',
  'はんぼうき',
  'はんめい',
  'はんらん',
  'はんろん',
  'ひいき',
  'ひうん',
  'ひえる',
  'ひかく',
  'ひかり',
  'ひかる',
  'ひかん',
  'ひくい',
  'ひけつ',
  'ひこうき',
  'ひこく',
  'ひさい',
  'ひさしぶり',
  'ひさん',
  'びじゅつかん',
  'ひしょ',
  'ひそか',
  'ひそむ',
  'ひたむき',
  'ひだり',
  'ひたる',
  'ひつぎ',
  'ひっこし',
  'ひっし',
  'ひつじゅひん',
  'ひっす',
  'ひつぜん',
  'ぴったり',
  'ぴっちり',
  'ひつよう',
  'ひてい',
  'ひとごみ',
  'ひなまつり',
  'ひなん',
  'ひねる',
  'ひはん',
  'ひびく',
  'ひひょう',
  'ひほう',
  'ひまわり',
  'ひまん',
  'ひみつ',
  'ひめい',
  'ひめじし',
  'ひやけ',
  'ひやす',
  'ひよう',
  'びょうき',
  'ひらがな',
  'ひらく',
  'ひりつ',
  'ひりょう',
  'ひるま',
  'ひるやすみ',
  'ひれい',
  'ひろい',
  'ひろう',
  'ひろき',
  'ひろゆき',
  'ひんかく',
  'ひんけつ',
  'ひんこん',
  'ひんしゅ',
  'ひんそう',
  'ぴんち',
  'ひんぱん',
  'びんぼう',
  'ふあん',
  'ふいうち',
  'ふうけい',
  'ふうせん',
  'ぷうたろう',
  'ふうとう',
  'ふうふ',
  'ふえる',
  'ふおん',
  'ふかい',
  'ふきん',
  'ふくざつ',
  'ふくぶくろ',
  'ふこう',
  'ふさい',
  'ふしぎ',
  'ふじみ',
  'ふすま',
  'ふせい',
  'ふせぐ',
  'ふそく',
  'ぶたにく',
  'ふたん',
  'ふちょう',
  'ふつう',
  'ふつか',
  'ふっかつ',
  'ふっき',
  'ふっこく',
  'ぶどう',
  'ふとる',
  'ふとん',
  'ふのう',
  'ふはい',
  'ふひょう',
  'ふへん',
  'ふまん',
  'ふみん',
  'ふめつ',
  'ふめん',
  'ふよう',
  'ふりこ',
  'ふりる',
  'ふるい',
  'ふんいき',
  'ぶんがく',
  'ぶんぐ',
  'ふんしつ',
  'ぶんせき',
  'ふんそう',
  'ぶんぽう',
  'へいあん',
  'へいおん',
  'へいがい',
  'へいき',
  'へいげん',
  'へいこう',
  'へいさ',
  'へいしゃ',
  'へいせつ',
  'へいそ',
  'へいたく',
  'へいてん',
  'へいねつ',
  'へいわ',
  'へきが',
  'へこむ',
  'べにいろ',
  'べにしょうが',
  'へらす',
  'へんかん',
  'べんきょう',
  'べんごし',
  'へんさい',
  'へんたい',
  'べんり',
  'ほあん',
  'ほいく',
  'ぼうぎょ',
  'ほうこく',
  'ほうそう',
  'ほうほう',
  'ほうもん',
  'ほうりつ',
  'ほえる',
  'ほおん',
  'ほかん',
  'ほきょう',
  'ぼきん',
  'ほくろ',
  'ほけつ',
  'ほけん',
  'ほこう',
  'ほこる',
  'ほしい',
  'ほしつ',
  'ほしゅ',
  'ほしょう',
  'ほせい',
  'ほそい',
  'ほそく',
  'ほたて',
  'ほたる',
  'ぽちぶくろ',
  'ほっきょく',
  'ほっさ',
  'ほったん',
  'ほとんど',
  'ほめる',
  'ほんい',
  'ほんき',
  'ほんけ',
  'ほんしつ',
  'ほんやく',
  'まいにち',
  'まかい',
  'まかせる',
  'まがる',
  'まける',
  'まこと',
  'まさつ',
  'まじめ',
  'ますく',
  'まぜる',
  'まつり',
  'まとめ',
  'まなぶ',
  'まぬけ',
  'まねく',
  'まほう',
  'まもる',
  'まゆげ',
  'まよう',
  'まろやか',
  'まわす',
  'まわり',
  'まわる',
  'まんが',
  'まんきつ',
  'まんぞく',
  'まんなか',
  'みいら',
  'みうち',
  'みえる',
  'みがく',
  'みかた',
  'みかん',
  'みけん',
  'みこん',
  'みじかい',
  'みすい',
  'みすえる',
  'みせる',
  'みっか',
  'みつかる',
  'みつける',
  'みてい',
  'みとめる',
  'みなと',
  'みなみかさい',
  'みねらる',
  'みのう',
  'みのがす',
  'みほん',
  'みもと',
  'みやげ',
  'みらい',
  'みりょく',
  'みわく',
  'みんか',
  'みんぞく',
  'むいか',
  'むえき',
  'むえん',
  'むかい',
  'むかう',
  'むかえ',
  'むかし',
  'むぎちゃ',
  'むける',
  'むげん',
  'むさぼる',
  'むしあつい',
  'むしば',
  'むじゅん',
  'むしろ',
  'むすう',
  'むすこ',
  'むすぶ',
  'むすめ',
  'むせる',
  'むせん',
  'むちゅう',
  'むなしい',
  'むのう',
  'むやみ',
  'むよう',
  'むらさき',
  'むりょう',
  'むろん',
  'めいあん',
  'めいうん',
  'めいえん',
  'めいかく',
  'めいきょく',
  'めいさい',
  'めいし',
  'めいそう',
  'めいぶつ',
  'めいれい',
  'めいわく',
  'めぐまれる',
  'めざす',
  'めした',
  'めずらしい',
  'めだつ',
  'めまい',
  'めやす',
  'めんきょ',
  'めんせき',
  'めんどう',
  'もうしあげる',
  'もうどうけん',
  'もえる',
  'もくし',
  'もくてき',
  'もくようび',
  'もちろん',
  'もどる',
  'もらう',
  'もんく',
  'もんだい',
  'やおや',
  'やける',
  'やさい',
  'やさしい',
  'やすい',
  'やすたろう',
  'やすみ',
  'やせる',
  'やそう',
  'やたい',
  'やちん',
  'やっと',
  'やっぱり',
  'やぶる',
  'やめる',
  'ややこしい',
  'やよい',
  'やわらかい',
  'ゆうき',
  'ゆうびんきょく',
  'ゆうべ',
  'ゆうめい',
  'ゆけつ',
  'ゆしゅつ',
  'ゆせん',
  'ゆそう',
  'ゆたか',
  'ゆちゃく',
  'ゆでる',
  'ゆにゅう',
  'ゆびわ',
  'ゆらい',
  'ゆれる',
  'ようい',
  'ようか',
  'ようきゅう',
  'ようじ',
  'ようす',
  'ようちえん',
  'よかぜ',
  'よかん',
  'よきん',
  'よくせい',
  'よくぼう',
  'よけい',
  'よごれる',
  'よさん',
  'よしゅう',
  'よそう',
  'よそく',
  'よっか',
  'よてい',
  'よどがわく',
  'よねつ',
  'よやく',
  'よゆう',
  'よろこぶ',
  'よろしい',
  'らいう',
  'らくがき',
  'らくご',
  'らくさつ',
  'らくだ',
  'らしんばん',
  'らせん',
  'らぞく',
  'らたい',
  'らっか',
  'られつ',
  'りえき',
  'りかい',
  'りきさく',
  'りきせつ',
  'りくぐん',
  'りくつ',
  'りけん',
  'りこう',
  'りせい',
  'りそう',
  'りそく',
  'りてん',
  'りねん',
  'りゆう',
  'りゅうがく',
  'りよう',
  'りょうり',
  'りょかん',
  'りょくちゃ',
  'りょこう',
  'りりく',
  'りれき',
  'りろん',
  'りんご',
  'るいけい',
  'るいさい',
  'るいじ',
  'るいせき',
  'るすばん',
  'るりがわら',
  'れいかん',
  'れいぎ',
  'れいせい',
  'れいぞうこ',
  'れいとう',
  'れいぼう',
  'れきし',
  'れきだい',
  'れんあい',
  'れんけい',
  'れんこん',
  'れんさい',
  'れんしゅう',
  'れんぞく',
  'れんらく',
  'ろうか',
  'ろうご',
  'ろうじん',
  'ろうそく',
  'ろくが',
  'ろこつ',
  'ろじうら',
  'ろしゅつ',
  'ろせん',
  'ろてん',
  'ろめん',
  'ろれつ',
  'ろんぎ',
  'ろんぱ',
  'ろんぶん',
  'ろんり',
  'わかす',
  'わかめ',
  'わかやま',
  'わかれる',
  'わしつ',
  'わじまし',
  'わすれもの',
  'わらう',
  'われる'
];
}],
[/* 36 */ 'bcoin', '/lib/hd/words/spanish.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

module.exports = [
  'ábaco',
  'abdomen',
  'abeja',
  'abierto',
  'abogado',
  'abono',
  'aborto',
  'abrazo',
  'abrir',
  'abuelo',
  'abuso',
  'acabar',
  'academia',
  'acceso',
  'acción',
  'aceite',
  'acelga',
  'acento',
  'aceptar',
  'ácido',
  'aclarar',
  'acné',
  'acoger',
  'acoso',
  'activo',
  'acto',
  'actriz',
  'actuar',
  'acudir',
  'acuerdo',
  'acusar',
  'adicto',
  'admitir',
  'adoptar',
  'adorno',
  'aduana',
  'adulto',
  'aéreo',
  'afectar',
  'afición',
  'afinar',
  'afirmar',
  'ágil',
  'agitar',
  'agonía',
  'agosto',
  'agotar',
  'agregar',
  'agrio',
  'agua',
  'agudo',
  'águila',
  'aguja',
  'ahogo',
  'ahorro',
  'aire',
  'aislar',
  'ajedrez',
  'ajeno',
  'ajuste',
  'alacrán',
  'alambre',
  'alarma',
  'alba',
  'álbum',
  'alcalde',
  'aldea',
  'alegre',
  'alejar',
  'alerta',
  'aleta',
  'alfiler',
  'alga',
  'algodón',
  'aliado',
  'aliento',
  'alivio',
  'alma',
  'almeja',
  'almíbar',
  'altar',
  'alteza',
  'altivo',
  'alto',
  'altura',
  'alumno',
  'alzar',
  'amable',
  'amante',
  'amapola',
  'amargo',
  'amasar',
  'ámbar',
  'ámbito',
  'ameno',
  'amigo',
  'amistad',
  'amor',
  'amparo',
  'amplio',
  'ancho',
  'anciano',
  'ancla',
  'andar',
  'andén',
  'anemia',
  'ángulo',
  'anillo',
  'ánimo',
  'anís',
  'anotar',
  'antena',
  'antiguo',
  'antojo',
  'anual',
  'anular',
  'anuncio',
  'añadir',
  'añejo',
  'año',
  'apagar',
  'aparato',
  'apetito',
  'apio',
  'aplicar',
  'apodo',
  'aporte',
  'apoyo',
  'aprender',
  'aprobar',
  'apuesta',
  'apuro',
  'arado',
  'araña',
  'arar',
  'árbitro',
  'árbol',
  'arbusto',
  'archivo',
  'arco',
  'arder',
  'ardilla',
  'arduo',
  'área',
  'árido',
  'aries',
  'armonía',
  'arnés',
  'aroma',
  'arpa',
  'arpón',
  'arreglo',
  'arroz',
  'arruga',
  'arte',
  'artista',
  'asa',
  'asado',
  'asalto',
  'ascenso',
  'asegurar',
  'aseo',
  'asesor',
  'asiento',
  'asilo',
  'asistir',
  'asno',
  'asombro',
  'áspero',
  'astilla',
  'astro',
  'astuto',
  'asumir',
  'asunto',
  'atajo',
  'ataque',
  'atar',
  'atento',
  'ateo',
  'ático',
  'atleta',
  'átomo',
  'atraer',
  'atroz',
  'atún',
  'audaz',
  'audio',
  'auge',
  'aula',
  'aumento',
  'ausente',
  'autor',
  'aval',
  'avance',
  'avaro',
  'ave',
  'avellana',
  'avena',
  'avestruz',
  'avión',
  'aviso',
  'ayer',
  'ayuda',
  'ayuno',
  'azafrán',
  'azar',
  'azote',
  'azúcar',
  'azufre',
  'azul',
  'baba',
  'babor',
  'bache',
  'bahía',
  'baile',
  'bajar',
  'balanza',
  'balcón',
  'balde',
  'bambú',
  'banco',
  'banda',
  'baño',
  'barba',
  'barco',
  'barniz',
  'barro',
  'báscula',
  'bastón',
  'basura',
  'batalla',
  'batería',
  'batir',
  'batuta',
  'baúl',
  'bazar',
  'bebé',
  'bebida',
  'bello',
  'besar',
  'beso',
  'bestia',
  'bicho',
  'bien',
  'bingo',
  'blanco',
  'bloque',
  'blusa',
  'boa',
  'bobina',
  'bobo',
  'boca',
  'bocina',
  'boda',
  'bodega',
  'boina',
  'bola',
  'bolero',
  'bolsa',
  'bomba',
  'bondad',
  'bonito',
  'bono',
  'bonsái',
  'borde',
  'borrar',
  'bosque',
  'bote',
  'botín',
  'bóveda',
  'bozal',
  'bravo',
  'brazo',
  'brecha',
  'breve',
  'brillo',
  'brinco',
  'brisa',
  'broca',
  'broma',
  'bronce',
  'brote',
  'bruja',
  'brusco',
  'bruto',
  'buceo',
  'bucle',
  'bueno',
  'buey',
  'bufanda',
  'bufón',
  'búho',
  'buitre',
  'bulto',
  'burbuja',
  'burla',
  'burro',
  'buscar',
  'butaca',
  'buzón',
  'caballo',
  'cabeza',
  'cabina',
  'cabra',
  'cacao',
  'cadáver',
  'cadena',
  'caer',
  'café',
  'caída',
  'caimán',
  'caja',
  'cajón',
  'cal',
  'calamar',
  'calcio',
  'caldo',
  'calidad',
  'calle',
  'calma',
  'calor',
  'calvo',
  'cama',
  'cambio',
  'camello',
  'camino',
  'campo',
  'cáncer',
  'candil',
  'canela',
  'canguro',
  'canica',
  'canto',
  'caña',
  'cañón',
  'caoba',
  'caos',
  'capaz',
  'capitán',
  'capote',
  'captar',
  'capucha',
  'cara',
  'carbón',
  'cárcel',
  'careta',
  'carga',
  'cariño',
  'carne',
  'carpeta',
  'carro',
  'carta',
  'casa',
  'casco',
  'casero',
  'caspa',
  'castor',
  'catorce',
  'catre',
  'caudal',
  'causa',
  'cazo',
  'cebolla',
  'ceder',
  'cedro',
  'celda',
  'célebre',
  'celoso',
  'célula',
  'cemento',
  'ceniza',
  'centro',
  'cerca',
  'cerdo',
  'cereza',
  'cero',
  'cerrar',
  'certeza',
  'césped',
  'cetro',
  'chacal',
  'chaleco',
  'champú',
  'chancla',
  'chapa',
  'charla',
  'chico',
  'chiste',
  'chivo',
  'choque',
  'choza',
  'chuleta',
  'chupar',
  'ciclón',
  'ciego',
  'cielo',
  'cien',
  'cierto',
  'cifra',
  'cigarro',
  'cima',
  'cinco',
  'cine',
  'cinta',
  'ciprés',
  'circo',
  'ciruela',
  'cisne',
  'cita',
  'ciudad',
  'clamor',
  'clan',
  'claro',
  'clase',
  'clave',
  'cliente',
  'clima',
  'clínica',
  'cobre',
  'cocción',
  'cochino',
  'cocina',
  'coco',
  'código',
  'codo',
  'cofre',
  'coger',
  'cohete',
  'cojín',
  'cojo',
  'cola',
  'colcha',
  'colegio',
  'colgar',
  'colina',
  'collar',
  'colmo',
  'columna',
  'combate',
  'comer',
  'comida',
  'cómodo',
  'compra',
  'conde',
  'conejo',
  'conga',
  'conocer',
  'consejo',
  'contar',
  'copa',
  'copia',
  'corazón',
  'corbata',
  'corcho',
  'cordón',
  'corona',
  'correr',
  'coser',
  'cosmos',
  'costa',
  'cráneo',
  'cráter',
  'crear',
  'crecer',
  'creído',
  'crema',
  'cría',
  'crimen',
  'cripta',
  'crisis',
  'cromo',
  'crónica',
  'croqueta',
  'crudo',
  'cruz',
  'cuadro',
  'cuarto',
  'cuatro',
  'cubo',
  'cubrir',
  'cuchara',
  'cuello',
  'cuento',
  'cuerda',
  'cuesta',
  'cueva',
  'cuidar',
  'culebra',
  'culpa',
  'culto',
  'cumbre',
  'cumplir',
  'cuna',
  'cuneta',
  'cuota',
  'cupón',
  'cúpula',
  'curar',
  'curioso',
  'curso',
  'curva',
  'cutis',
  'dama',
  'danza',
  'dar',
  'dardo',
  'dátil',
  'deber',
  'débil',
  'década',
  'decir',
  'dedo',
  'defensa',
  'definir',
  'dejar',
  'delfín',
  'delgado',
  'delito',
  'demora',
  'denso',
  'dental',
  'deporte',
  'derecho',
  'derrota',
  'desayuno',
  'deseo',
  'desfile',
  'desnudo',
  'destino',
  'desvío',
  'detalle',
  'detener',
  'deuda',
  'día',
  'diablo',
  'diadema',
  'diamante',
  'diana',
  'diario',
  'dibujo',
  'dictar',
  'diente',
  'dieta',
  'diez',
  'difícil',
  'digno',
  'dilema',
  'diluir',
  'dinero',
  'directo',
  'dirigir',
  'disco',
  'diseño',
  'disfraz',
  'diva',
  'divino',
  'doble',
  'doce',
  'dolor',
  'domingo',
  'don',
  'donar',
  'dorado',
  'dormir',
  'dorso',
  'dos',
  'dosis',
  'dragón',
  'droga',
  'ducha',
  'duda',
  'duelo',
  'dueño',
  'dulce',
  'dúo',
  'duque',
  'durar',
  'dureza',
  'duro',
  'ébano',
  'ebrio',
  'echar',
  'eco',
  'ecuador',
  'edad',
  'edición',
  'edificio',
  'editor',
  'educar',
  'efecto',
  'eficaz',
  'eje',
  'ejemplo',
  'elefante',
  'elegir',
  'elemento',
  'elevar',
  'elipse',
  'élite',
  'elixir',
  'elogio',
  'eludir',
  'embudo',
  'emitir',
  'emoción',
  'empate',
  'empeño',
  'empleo',
  'empresa',
  'enano',
  'encargo',
  'enchufe',
  'encía',
  'enemigo',
  'enero',
  'enfado',
  'enfermo',
  'engaño',
  'enigma',
  'enlace',
  'enorme',
  'enredo',
  'ensayo',
  'enseñar',
  'entero',
  'entrar',
  'envase',
  'envío',
  'época',
  'equipo',
  'erizo',
  'escala',
  'escena',
  'escolar',
  'escribir',
  'escudo',
  'esencia',
  'esfera',
  'esfuerzo',
  'espada',
  'espejo',
  'espía',
  'esposa',
  'espuma',
  'esquí',
  'estar',
  'este',
  'estilo',
  'estufa',
  'etapa',
  'eterno',
  'ética',
  'etnia',
  'evadir',
  'evaluar',
  'evento',
  'evitar',
  'exacto',
  'examen',
  'exceso',
  'excusa',
  'exento',
  'exigir',
  'exilio',
  'existir',
  'éxito',
  'experto',
  'explicar',
  'exponer',
  'extremo',
  'fábrica',
  'fábula',
  'fachada',
  'fácil',
  'factor',
  'faena',
  'faja',
  'falda',
  'fallo',
  'falso',
  'faltar',
  'fama',
  'familia',
  'famoso',
  'faraón',
  'farmacia',
  'farol',
  'farsa',
  'fase',
  'fatiga',
  'fauna',
  'favor',
  'fax',
  'febrero',
  'fecha',
  'feliz',
  'feo',
  'feria',
  'feroz',
  'fértil',
  'fervor',
  'festín',
  'fiable',
  'fianza',
  'fiar',
  'fibra',
  'ficción',
  'ficha',
  'fideo',
  'fiebre',
  'fiel',
  'fiera',
  'fiesta',
  'figura',
  'fijar',
  'fijo',
  'fila',
  'filete',
  'filial',
  'filtro',
  'fin',
  'finca',
  'fingir',
  'finito',
  'firma',
  'flaco',
  'flauta',
  'flecha',
  'flor',
  'flota',
  'fluir',
  'flujo',
  'flúor',
  'fobia',
  'foca',
  'fogata',
  'fogón',
  'folio',
  'folleto',
  'fondo',
  'forma',
  'forro',
  'fortuna',
  'forzar',
  'fosa',
  'foto',
  'fracaso',
  'frágil',
  'franja',
  'frase',
  'fraude',
  'freír',
  'freno',
  'fresa',
  'frío',
  'frito',
  'fruta',
  'fuego',
  'fuente',
  'fuerza',
  'fuga',
  'fumar',
  'función',
  'funda',
  'furgón',
  'furia',
  'fusil',
  'fútbol',
  'futuro',
  'gacela',
  'gafas',
  'gaita',
  'gajo',
  'gala',
  'galería',
  'gallo',
  'gamba',
  'ganar',
  'gancho',
  'ganga',
  'ganso',
  'garaje',
  'garza',
  'gasolina',
  'gastar',
  'gato',
  'gavilán',
  'gemelo',
  'gemir',
  'gen',
  'género',
  'genio',
  'gente',
  'geranio',
  'gerente',
  'germen',
  'gesto',
  'gigante',
  'gimnasio',
  'girar',
  'giro',
  'glaciar',
  'globo',
  'gloria',
  'gol',
  'golfo',
  'goloso',
  'golpe',
  'goma',
  'gordo',
  'gorila',
  'gorra',
  'gota',
  'goteo',
  'gozar',
  'grada',
  'gráfico',
  'grano',
  'grasa',
  'gratis',
  'grave',
  'grieta',
  'grillo',
  'gripe',
  'gris',
  'grito',
  'grosor',
  'grúa',
  'grueso',
  'grumo',
  'grupo',
  'guante',
  'guapo',
  'guardia',
  'guerra',
  'guía',
  'guiño',
  'guion',
  'guiso',
  'guitarra',
  'gusano',
  'gustar',
  'haber',
  'hábil',
  'hablar',
  'hacer',
  'hacha',
  'hada',
  'hallar',
  'hamaca',
  'harina',
  'haz',
  'hazaña',
  'hebilla',
  'hebra',
  'hecho',
  'helado',
  'helio',
  'hembra',
  'herir',
  'hermano',
  'héroe',
  'hervir',
  'hielo',
  'hierro',
  'hígado',
  'higiene',
  'hijo',
  'himno',
  'historia',
  'hocico',
  'hogar',
  'hoguera',
  'hoja',
  'hombre',
  'hongo',
  'honor',
  'honra',
  'hora',
  'hormiga',
  'horno',
  'hostil',
  'hoyo',
  'hueco',
  'huelga',
  'huerta',
  'hueso',
  'huevo',
  'huida',
  'huir',
  'humano',
  'húmedo',
  'humilde',
  'humo',
  'hundir',
  'huracán',
  'hurto',
  'icono',
  'ideal',
  'idioma',
  'ídolo',
  'iglesia',
  'iglú',
  'igual',
  'ilegal',
  'ilusión',
  'imagen',
  'imán',
  'imitar',
  'impar',
  'imperio',
  'imponer',
  'impulso',
  'incapaz',
  'índice',
  'inerte',
  'infiel',
  'informe',
  'ingenio',
  'inicio',
  'inmenso',
  'inmune',
  'innato',
  'insecto',
  'instante',
  'interés',
  'íntimo',
  'intuir',
  'inútil',
  'invierno',
  'ira',
  'iris',
  'ironía',
  'isla',
  'islote',
  'jabalí',
  'jabón',
  'jamón',
  'jarabe',
  'jardín',
  'jarra',
  'jaula',
  'jazmín',
  'jefe',
  'jeringa',
  'jinete',
  'jornada',
  'joroba',
  'joven',
  'joya',
  'juerga',
  'jueves',
  'juez',
  'jugador',
  'jugo',
  'juguete',
  'juicio',
  'junco',
  'jungla',
  'junio',
  'juntar',
  'júpiter',
  'jurar',
  'justo',
  'juvenil',
  'juzgar',
  'kilo',
  'koala',
  'labio',
  'lacio',
  'lacra',
  'lado',
  'ladrón',
  'lagarto',
  'lágrima',
  'laguna',
  'laico',
  'lamer',
  'lámina',
  'lámpara',
  'lana',
  'lancha',
  'langosta',
  'lanza',
  'lápiz',
  'largo',
  'larva',
  'lástima',
  'lata',
  'látex',
  'latir',
  'laurel',
  'lavar',
  'lazo',
  'leal',
  'lección',
  'leche',
  'lector',
  'leer',
  'legión',
  'legumbre',
  'lejano',
  'lengua',
  'lento',
  'leña',
  'león',
  'leopardo',
  'lesión',
  'letal',
  'letra',
  'leve',
  'leyenda',
  'libertad',
  'libro',
  'licor',
  'líder',
  'lidiar',
  'lienzo',
  'liga',
  'ligero',
  'lima',
  'límite',
  'limón',
  'limpio',
  'lince',
  'lindo',
  'línea',
  'lingote',
  'lino',
  'linterna',
  'líquido',
  'liso',
  'lista',
  'litera',
  'litio',
  'litro',
  'llaga',
  'llama',
  'llanto',
  'llave',
  'llegar',
  'llenar',
  'llevar',
  'llorar',
  'llover',
  'lluvia',
  'lobo',
  'loción',
  'loco',
  'locura',
  'lógica',
  'logro',
  'lombriz',
  'lomo',
  'lonja',
  'lote',
  'lucha',
  'lucir',
  'lugar',
  'lujo',
  'luna',
  'lunes',
  'lupa',
  'lustro',
  'luto',
  'luz',
  'maceta',
  'macho',
  'madera',
  'madre',
  'maduro',
  'maestro',
  'mafia',
  'magia',
  'mago',
  'maíz',
  'maldad',
  'maleta',
  'malla',
  'malo',
  'mamá',
  'mambo',
  'mamut',
  'manco',
  'mando',
  'manejar',
  'manga',
  'maniquí',
  'manjar',
  'mano',
  'manso',
  'manta',
  'mañana',
  'mapa',
  'máquina',
  'mar',
  'marco',
  'marea',
  'marfil',
  'margen',
  'marido',
  'mármol',
  'marrón',
  'martes',
  'marzo',
  'masa',
  'máscara',
  'masivo',
  'matar',
  'materia',
  'matiz',
  'matriz',
  'máximo',
  'mayor',
  'mazorca',
  'mecha',
  'medalla',
  'medio',
  'médula',
  'mejilla',
  'mejor',
  'melena',
  'melón',
  'memoria',
  'menor',
  'mensaje',
  'mente',
  'menú',
  'mercado',
  'merengue',
  'mérito',
  'mes',
  'mesón',
  'meta',
  'meter',
  'método',
  'metro',
  'mezcla',
  'miedo',
  'miel',
  'miembro',
  'miga',
  'mil',
  'milagro',
  'militar',
  'millón',
  'mimo',
  'mina',
  'minero',
  'mínimo',
  'minuto',
  'miope',
  'mirar',
  'misa',
  'miseria',
  'misil',
  'mismo',
  'mitad',
  'mito',
  'mochila',
  'moción',
  'moda',
  'modelo',
  'moho',
  'mojar',
  'molde',
  'moler',
  'molino',
  'momento',
  'momia',
  'monarca',
  'moneda',
  'monja',
  'monto',
  'moño',
  'morada',
  'morder',
  'moreno',
  'morir',
  'morro',
  'morsa',
  'mortal',
  'mosca',
  'mostrar',
  'motivo',
  'mover',
  'móvil',
  'mozo',
  'mucho',
  'mudar',
  'mueble',
  'muela',
  'muerte',
  'muestra',
  'mugre',
  'mujer',
  'mula',
  'muleta',
  'multa',
  'mundo',
  'muñeca',
  'mural',
  'muro',
  'músculo',
  'museo',
  'musgo',
  'música',
  'muslo',
  'nácar',
  'nación',
  'nadar',
  'naipe',
  'naranja',
  'nariz',
  'narrar',
  'nasal',
  'natal',
  'nativo',
  'natural',
  'náusea',
  'naval',
  'nave',
  'navidad',
  'necio',
  'néctar',
  'negar',
  'negocio',
  'negro',
  'neón',
  'nervio',
  'neto',
  'neutro',
  'nevar',
  'nevera',
  'nicho',
  'nido',
  'niebla',
  'nieto',
  'niñez',
  'niño',
  'nítido',
  'nivel',
  'nobleza',
  'noche',
  'nómina',
  'noria',
  'norma',
  'norte',
  'nota',
  'noticia',
  'novato',
  'novela',
  'novio',
  'nube',
  'nuca',
  'núcleo',
  'nudillo',
  'nudo',
  'nuera',
  'nueve',
  'nuez',
  'nulo',
  'número',
  'nutria',
  'oasis',
  'obeso',
  'obispo',
  'objeto',
  'obra',
  'obrero',
  'observar',
  'obtener',
  'obvio',
  'oca',
  'ocaso',
  'océano',
  'ochenta',
  'ocho',
  'ocio',
  'ocre',
  'octavo',
  'octubre',
  'oculto',
  'ocupar',
  'ocurrir',
  'odiar',
  'odio',
  'odisea',
  'oeste',
  'ofensa',
  'oferta',
  'oficio',
  'ofrecer',
  'ogro',
  'oído',
  'oír',
  'ojo',
  'ola',
  'oleada',
  'olfato',
  'olivo',
  'olla',
  'olmo',
  'olor',
  'olvido',
  'ombligo',
  'onda',
  'onza',
  'opaco',
  'opción',
  'ópera',
  'opinar',
  'oponer',
  'optar',
  'óptica',
  'opuesto',
  'oración',
  'orador',
  'oral',
  'órbita',
  'orca',
  'orden',
  'oreja',
  'órgano',
  'orgía',
  'orgullo',
  'oriente',
  'origen',
  'orilla',
  'oro',
  'orquesta',
  'oruga',
  'osadía',
  'oscuro',
  'osezno',
  'oso',
  'ostra',
  'otoño',
  'otro',
  'oveja',
  'óvulo',
  'óxido',
  'oxígeno',
  'oyente',
  'ozono',
  'pacto',
  'padre',
  'paella',
  'página',
  'pago',
  'país',
  'pájaro',
  'palabra',
  'palco',
  'paleta',
  'pálido',
  'palma',
  'paloma',
  'palpar',
  'pan',
  'panal',
  'pánico',
  'pantera',
  'pañuelo',
  'papá',
  'papel',
  'papilla',
  'paquete',
  'parar',
  'parcela',
  'pared',
  'parir',
  'paro',
  'párpado',
  'parque',
  'párrafo',
  'parte',
  'pasar',
  'paseo',
  'pasión',
  'paso',
  'pasta',
  'pata',
  'patio',
  'patria',
  'pausa',
  'pauta',
  'pavo',
  'payaso',
  'peatón',
  'pecado',
  'pecera',
  'pecho',
  'pedal',
  'pedir',
  'pegar',
  'peine',
  'pelar',
  'peldaño',
  'pelea',
  'peligro',
  'pellejo',
  'pelo',
  'peluca',
  'pena',
  'pensar',
  'peñón',
  'peón',
  'peor',
  'pepino',
  'pequeño',
  'pera',
  'percha',
  'perder',
  'pereza',
  'perfil',
  'perico',
  'perla',
  'permiso',
  'perro',
  'persona',
  'pesa',
  'pesca',
  'pésimo',
  'pestaña',
  'pétalo',
  'petróleo',
  'pez',
  'pezuña',
  'picar',
  'pichón',
  'pie',
  'piedra',
  'pierna',
  'pieza',
  'pijama',
  'pilar',
  'piloto',
  'pimienta',
  'pino',
  'pintor',
  'pinza',
  'piña',
  'piojo',
  'pipa',
  'pirata',
  'pisar',
  'piscina',
  'piso',
  'pista',
  'pitón',
  'pizca',
  'placa',
  'plan',
  'plata',
  'playa',
  'plaza',
  'pleito',
  'pleno',
  'plomo',
  'pluma',
  'plural',
  'pobre',
  'poco',
  'poder',
  'podio',
  'poema',
  'poesía',
  'poeta',
  'polen',
  'policía',
  'pollo',
  'polvo',
  'pomada',
  'pomelo',
  'pomo',
  'pompa',
  'poner',
  'porción',
  'portal',
  'posada',
  'poseer',
  'posible',
  'poste',
  'potencia',
  'potro',
  'pozo',
  'prado',
  'precoz',
  'pregunta',
  'premio',
  'prensa',
  'preso',
  'previo',
  'primo',
  'príncipe',
  'prisión',
  'privar',
  'proa',
  'probar',
  'proceso',
  'producto',
  'proeza',
  'profesor',
  'programa',
  'prole',
  'promesa',
  'pronto',
  'propio',
  'próximo',
  'prueba',
  'público',
  'puchero',
  'pudor',
  'pueblo',
  'puerta',
  'puesto',
  'pulga',
  'pulir',
  'pulmón',
  'pulpo',
  'pulso',
  'puma',
  'punto',
  'puñal',
  'puño',
  'pupa',
  'pupila',
  'puré',
  'quedar',
  'queja',
  'quemar',
  'querer',
  'queso',
  'quieto',
  'química',
  'quince',
  'quitar',
  'rábano',
  'rabia',
  'rabo',
  'ración',
  'radical',
  'raíz',
  'rama',
  'rampa',
  'rancho',
  'rango',
  'rapaz',
  'rápido',
  'rapto',
  'rasgo',
  'raspa',
  'rato',
  'rayo',
  'raza',
  'razón',
  'reacción',
  'realidad',
  'rebaño',
  'rebote',
  'recaer',
  'receta',
  'rechazo',
  'recoger',
  'recreo',
  'recto',
  'recurso',
  'red',
  'redondo',
  'reducir',
  'reflejo',
  'reforma',
  'refrán',
  'refugio',
  'regalo',
  'regir',
  'regla',
  'regreso',
  'rehén',
  'reino',
  'reír',
  'reja',
  'relato',
  'relevo',
  'relieve',
  'relleno',
  'reloj',
  'remar',
  'remedio',
  'remo',
  'rencor',
  'rendir',
  'renta',
  'reparto',
  'repetir',
  'reposo',
  'reptil',
  'res',
  'rescate',
  'resina',
  'respeto',
  'resto',
  'resumen',
  'retiro',
  'retorno',
  'retrato',
  'reunir',
  'revés',
  'revista',
  'rey',
  'rezar',
  'rico',
  'riego',
  'rienda',
  'riesgo',
  'rifa',
  'rígido',
  'rigor',
  'rincón',
  'riñón',
  'río',
  'riqueza',
  'risa',
  'ritmo',
  'rito',
  'rizo',
  'roble',
  'roce',
  'rociar',
  'rodar',
  'rodeo',
  'rodilla',
  'roer',
  'rojizo',
  'rojo',
  'romero',
  'romper',
  'ron',
  'ronco',
  'ronda',
  'ropa',
  'ropero',
  'rosa',
  'rosca',
  'rostro',
  'rotar',
  'rubí',
  'rubor',
  'rudo',
  'rueda',
  'rugir',
  'ruido',
  'ruina',
  'ruleta',
  'rulo',
  'rumbo',
  'rumor',
  'ruptura',
  'ruta',
  'rutina',
  'sábado',
  'saber',
  'sabio',
  'sable',
  'sacar',
  'sagaz',
  'sagrado',
  'sala',
  'saldo',
  'salero',
  'salir',
  'salmón',
  'salón',
  'salsa',
  'salto',
  'salud',
  'salvar',
  'samba',
  'sanción',
  'sandía',
  'sanear',
  'sangre',
  'sanidad',
  'sano',
  'santo',
  'sapo',
  'saque',
  'sardina',
  'sartén',
  'sastre',
  'satán',
  'sauna',
  'saxofón',
  'sección',
  'seco',
  'secreto',
  'secta',
  'sed',
  'seguir',
  'seis',
  'sello',
  'selva',
  'semana',
  'semilla',
  'senda',
  'sensor',
  'señal',
  'señor',
  'separar',
  'sepia',
  'sequía',
  'ser',
  'serie',
  'sermón',
  'servir',
  'sesenta',
  'sesión',
  'seta',
  'setenta',
  'severo',
  'sexo',
  'sexto',
  'sidra',
  'siesta',
  'siete',
  'siglo',
  'signo',
  'sílaba',
  'silbar',
  'silencio',
  'silla',
  'símbolo',
  'simio',
  'sirena',
  'sistema',
  'sitio',
  'situar',
  'sobre',
  'socio',
  'sodio',
  'sol',
  'solapa',
  'soldado',
  'soledad',
  'sólido',
  'soltar',
  'solución',
  'sombra',
  'sondeo',
  'sonido',
  'sonoro',
  'sonrisa',
  'sopa',
  'soplar',
  'soporte',
  'sordo',
  'sorpresa',
  'sorteo',
  'sostén',
  'sótano',
  'suave',
  'subir',
  'suceso',
  'sudor',
  'suegra',
  'suelo',
  'sueño',
  'suerte',
  'sufrir',
  'sujeto',
  'sultán',
  'sumar',
  'superar',
  'suplir',
  'suponer',
  'supremo',
  'sur',
  'surco',
  'sureño',
  'surgir',
  'susto',
  'sutil',
  'tabaco',
  'tabique',
  'tabla',
  'tabú',
  'taco',
  'tacto',
  'tajo',
  'talar',
  'talco',
  'talento',
  'talla',
  'talón',
  'tamaño',
  'tambor',
  'tango',
  'tanque',
  'tapa',
  'tapete',
  'tapia',
  'tapón',
  'taquilla',
  'tarde',
  'tarea',
  'tarifa',
  'tarjeta',
  'tarot',
  'tarro',
  'tarta',
  'tatuaje',
  'tauro',
  'taza',
  'tazón',
  'teatro',
  'techo',
  'tecla',
  'técnica',
  'tejado',
  'tejer',
  'tejido',
  'tela',
  'teléfono',
  'tema',
  'temor',
  'templo',
  'tenaz',
  'tender',
  'tener',
  'tenis',
  'tenso',
  'teoría',
  'terapia',
  'terco',
  'término',
  'ternura',
  'terror',
  'tesis',
  'tesoro',
  'testigo',
  'tetera',
  'texto',
  'tez',
  'tibio',
  'tiburón',
  'tiempo',
  'tienda',
  'tierra',
  'tieso',
  'tigre',
  'tijera',
  'tilde',
  'timbre',
  'tímido',
  'timo',
  'tinta',
  'tío',
  'típico',
  'tipo',
  'tira',
  'tirón',
  'titán',
  'títere',
  'título',
  'tiza',
  'toalla',
  'tobillo',
  'tocar',
  'tocino',
  'todo',
  'toga',
  'toldo',
  'tomar',
  'tono',
  'tonto',
  'topar',
  'tope',
  'toque',
  'tórax',
  'torero',
  'tormenta',
  'torneo',
  'toro',
  'torpedo',
  'torre',
  'torso',
  'tortuga',
  'tos',
  'tosco',
  'toser',
  'tóxico',
  'trabajo',
  'tractor',
  'traer',
  'tráfico',
  'trago',
  'traje',
  'tramo',
  'trance',
  'trato',
  'trauma',
  'trazar',
  'trébol',
  'tregua',
  'treinta',
  'tren',
  'trepar',
  'tres',
  'tribu',
  'trigo',
  'tripa',
  'triste',
  'triunfo',
  'trofeo',
  'trompa',
  'tronco',
  'tropa',
  'trote',
  'trozo',
  'truco',
  'trueno',
  'trufa',
  'tubería',
  'tubo',
  'tuerto',
  'tumba',
  'tumor',
  'túnel',
  'túnica',
  'turbina',
  'turismo',
  'turno',
  'tutor',
  'ubicar',
  'úlcera',
  'umbral',
  'unidad',
  'unir',
  'universo',
  'uno',
  'untar',
  'uña',
  'urbano',
  'urbe',
  'urgente',
  'urna',
  'usar',
  'usuario',
  'útil',
  'utopía',
  'uva',
  'vaca',
  'vacío',
  'vacuna',
  'vagar',
  'vago',
  'vaina',
  'vajilla',
  'vale',
  'válido',
  'valle',
  'valor',
  'válvula',
  'vampiro',
  'vara',
  'variar',
  'varón',
  'vaso',
  'vecino',
  'vector',
  'vehículo',
  'veinte',
  'vejez',
  'vela',
  'velero',
  'veloz',
  'vena',
  'vencer',
  'venda',
  'veneno',
  'vengar',
  'venir',
  'venta',
  'venus',
  'ver',
  'verano',
  'verbo',
  'verde',
  'vereda',
  'verja',
  'verso',
  'verter',
  'vía',
  'viaje',
  'vibrar',
  'vicio',
  'víctima',
  'vida',
  'vídeo',
  'vidrio',
  'viejo',
  'viernes',
  'vigor',
  'vil',
  'villa',
  'vinagre',
  'vino',
  'viñedo',
  'violín',
  'viral',
  'virgo',
  'virtud',
  'visor',
  'víspera',
  'vista',
  'vitamina',
  'viudo',
  'vivaz',
  'vivero',
  'vivir',
  'vivo',
  'volcán',
  'volumen',
  'volver',
  'voraz',
  'votar',
  'voto',
  'voz',
  'vuelo',
  'vulgar',
  'yacer',
  'yate',
  'yegua',
  'yema',
  'yerno',
  'yeso',
  'yodo',
  'yoga',
  'yogur',
  'zafiro',
  'zanja',
  'zapato',
  'zarza',
  'zona',
  'zorro',
  'zumo',
  'zurdo'
];
}],
[/* 37 */ 'bcoin', '/lib/hd/nfkd-compat.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * nfkd-compat.js - unicode normalization for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const unorm = __browser_require__(38 /* './unorm' */, module);

function nfkd(str) {
  if (str.normalize)
    return str.normalize('NFKD');

  return unorm.nfkd(str);
}

/*
 * Expose
 */

module.exports = nfkd;
}],
[/* 38 */ 'bcoin', '/lib/hd/unorm.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * Unorm
 * https://github.com/walling/unorm
 *
 * The software dual licensed under the MIT and GPL licenses. MIT license:
 *
 * Copyright (c) 2008-2013
 * Matsuza <matsuza@gmail.com>,
 * Bjarke Walling <bwp@bwp.dk>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * GPL notice (please read the [full GPL license] online):
 *
 * Copyright (C) 2008-2013
 * Matsuza <matsuza@gmail.com>,
 * Bjarke Walling <bwp@bwp.dk>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA.
 *
 * [full GPL license]: http://www.gnu.org/licenses/gpl-2.0-standalone.html
*/

'use strict';

const udata = __browser_require__(39 /* './udata.json' */, module);
const DEFAULT_FEATURE = [null, 0, {}];
const CACHE_THRESHOLD = 10;
const SBase = 0xac00;
const LBase = 0x1100;
const VBase = 0x1161;
const TBase = 0x11a7;
const LCount = 19;
const VCount = 21;
const TCount = 28;
const NCount = VCount * TCount; // 588
const SCount = LCount * NCount; // 11172

const cache = {};
const cacheCounter = [];

for (let i = 0; i <= 0xff; i++)
  cacheCounter[i] = 0;

let fromCharCode = null;

class UChar {
  constructor(cp, feature) {
    this.codepoint = cp;
    this.feature = feature;
  }

  static isHighSurrogate(cp) {
    return cp >= 0xd800 && cp <= 0xdbff;
  }

  static isLowSurrogate(cp) {
    return cp >= 0xdc00 && cp <= 0xdfff;
  }

  prepFeature() {
    if (!this.feature)
      this.feature = fromCharCode(this.codepoint, true).feature;
  }

  toString() {
    if (this.codepoint < 0x10000)
      return String.fromCharCode(this.codepoint);

    const x = this.codepoint - 0x10000;

    return String.fromCharCode(
      Math.floor(x / 0x400) + 0xd800,
      x % 0x400 + 0xdc00
    );
  }

  getDecomp() {
    this.prepFeature();
    return this.feature[0] || null;
  }

  isCompatibility() {
    this.prepFeature();
    return Boolean(this.feature[1]) && (this.feature[1] & (1 << 8)) !== 0;
  }

  isExclude() {
    this.prepFeature();
    return Boolean(this.feature[1]) && (this.feature[1] & (1 << 9)) !== 0;
  }

  getCanonicalClass() {
    this.prepFeature();
    return this.feature[1] ? (this.feature[1] & 0xff) : 0;
  }

  getComposite(following) {
    this.prepFeature();

    if (!this.feature[2])
      return null;

    const cp = this.feature[2][following.codepoint];

    return cp ? fromCharCode(cp) : null;
  }
}

function fromCache(next, cp, needFeature) {
  let ret = cache[cp];

  if (!ret) {
    ret = next(cp, needFeature);
    if (ret.feature && ++cacheCounter[(cp >> 8) & 0xff] > CACHE_THRESHOLD)
      cache[cp] = ret;
  }

  return ret;
}

function fromData(next, cp, needFeature) {
  const hash = cp & 0xff00;
  const dunit = udata[hash] || {};
  const f = dunit[cp];
  return f ? new UChar(cp, f) : new UChar(cp, DEFAULT_FEATURE);
}

function fromCpOnly(next, cp, needFeature) {
  return needFeature ? next(cp, needFeature) : new UChar(cp, null);
}

function fromRuleBasedJamo(next, cp, needFeature) {
  if (cp < LBase
      || (LBase + LCount <= cp && cp < SBase)
      || (SBase + SCount < cp)) {
    return next(cp, needFeature);
  }

  if (LBase <= cp && cp < LBase + LCount) {
    const c = {};
    const base = (cp - LBase) * VCount;

    for (let j = 0; j < VCount; j++)
      c[VBase + j] = SBase + TCount * (j + base);

    return new UChar(cp, [null, null, c]);
  }

  const SIndex = cp - SBase;
  const TIndex = SIndex % TCount;
  const feature = [];

  if (TIndex !== 0) {
    feature[0] = [SBase + SIndex - TIndex, TBase + TIndex];
  } else {
    feature[0] = [
      LBase + Math.floor(SIndex / NCount),
      VBase + Math.floor((SIndex % NCount) / TCount)
    ];
    feature[2] = {};
    for (let j = 1; j < TCount; j++)
      feature[2][TBase + j] = cp + j;
  }

  return new UChar(cp, feature);
}

function fromCpFilter(next, cp, needFeature) {
  return cp < 60 || 13311 < cp && cp < 42607
    ? new UChar(cp, DEFAULT_FEATURE)
    : next(cp, needFeature);
}

const strategies = [
  fromCpFilter,
  fromCache,
  fromCpOnly,
  fromRuleBasedJamo,
  fromData
];

fromCharCode = strategies.reduceRight((next, strategy) => {
  return (cp, needFeature) => {
    return strategy(next, cp, needFeature);
  };
}, null);

class UCharIterator {
  constructor(str) {
    this.str = str;
    this.cursor = 0;
  }
  next() {
    if (this.str && this.cursor < this.str.length) {
      let cp = this.str.charCodeAt(this.cursor++);

      if (UChar.isHighSurrogate(cp) && this.cursor < this.str.length) {
        const d = this.str.charCodeAt(this.cursor);
        if (UChar.isLowSurrogate(d)) {
          cp = (cp - 0xd800) * 0x400 + (d - 0xdc00) + 0x10000;
          this.cursor += 1;
        }
      }

      return fromCharCode(cp);
    }

    this.str = null;
    return null;
  }
}

class RecursDecompIterator {
  constructor(it, cano) {
    this.it = it;
    this.canonical = cano;
    this.resBuf = [];
  }

  recursiveDecomp(uchar) {
    const cano = this.canonical;
    const decomp = uchar.getDecomp();

    if (decomp && !(cano && uchar.isCompatibility())) {
      let ret = [];
      for (let i = 0; i < decomp.length; i++) {
        const a = this.recursiveDecomp(fromCharCode(decomp[i]));
        ret = ret.concat(a);
      }
      return ret;
    }

    return [uchar];
  }

  next() {
    if (this.resBuf.length === 0) {
      const uchar = this.it.next();

      if (!uchar)
        return null;

      this.resBuf = this.recursiveDecomp(uchar);
    }

    return this.resBuf.shift();
  }
}

class DecompIterator {
  constructor(it) {
    this.it = it;
    this.resBuf = [];
  }

  next() {
    if (this.resBuf.length === 0) {
      for (;;) {
        const uchar = this.it.next();

        if (!uchar)
          break;

        const cc = uchar.getCanonicalClass();

        let inspt = this.resBuf.length;

        if (cc !== 0) {
          while (inspt > 0) {
            const uchar2 = this.resBuf[inspt - 1];
            const cc2 = uchar2.getCanonicalClass();
            if (cc2 <= cc)
              break;
            inspt -= 1;
          }
        }

        this.resBuf.splice(inspt, 0, uchar);

        if (cc === 0)
          break;
      }
    }

    return this.resBuf.shift();
  }
}

class CompIterator {
  constructor(it) {
    this.it = it;
    this.procBuf = [];
    this.resBuf = [];
    this.lastClass = null;
  }
  next() {
    while (this.resBuf.length === 0) {
      const uchar = this.it.next();

      if (!uchar) {
        this.resBuf = this.procBuf;
        this.procBuf = [];
        break;
      }

      if (this.procBuf.length === 0) {
        this.lastClass = uchar.getCanonicalClass();
        this.procBuf.push(uchar);
        continue;
      }

      const starter = this.procBuf[0];
      const composite = starter.getComposite(uchar);
      const cc = uchar.getCanonicalClass();

      if (composite && (this.lastClass < cc || this.lastClass === 0)) {
        this.procBuf[0] = composite;
        continue;
      }

      if (cc === 0) {
        this.resBuf = this.procBuf;
        this.procBuf = [];
      }

      this.lastClass = cc;
      this.procBuf.push(uchar);
    }

    return this.resBuf.shift();
  }
}

function createIterator(mode, str) {
  switch (mode) {
    case 'NFD': {
      const it1 = new UCharIterator(str);
      const it2 = new RecursDecompIterator(it1, true);
      return new DecompIterator(it2);
    }
    case 'NFKD': {
      const it1 = new UCharIterator(str);
      const it2 = new RecursDecompIterator(it1, false);
      return new DecompIterator(it2);
    }
    case 'NFC': {
      const it1 = new UCharIterator(str);
      const it2 = new RecursDecompIterator(it1, true);
      const it3 = new DecompIterator(it2);
      return new CompIterator(it3);
    }
    case 'NFKC': {
      const it1 = new UCharIterator(str);
      const it2 = new RecursDecompIterator(it1, false);
      const it3 = new DecompIterator(it2);
      return new CompIterator(it3);
    }
  }

  throw new Error(`${mode} is invalid.`);
}

function normalize(mode, str) {
  const it = createIterator(mode, str);

  let ret = '';
  let uchar;

  for (;;) {
    uchar = it.next();

    if (!uchar)
      break;

    ret += uchar.toString();
  }

  return ret;
};

function nfd(str) {
  return normalize('NFD', str);
}

function nfkd(str) {
  return normalize('NFKD', str);
}

function nfc(str) {
  return normalize('NFC', str);
}

function nfkc(str) {
  return normalize('NFKC', str);
}

exports.nfc = nfc;
exports.nfd = nfd;
exports.nfkc = nfkc;
exports.nfkd = nfkd;
}],
[/* 39 */ 'bcoin', '/lib/hd/udata.json', function(exports, require, module, __filename, __dirname, __meta) {
module.exports = {
  "0": {
    "60": [
      null,
      null,
      {
        "824": 8814
      }
    ],
    "61": [
      null,
      null,
      {
        "824": 8800
      }
    ],
    "62": [
      null,
      null,
      {
        "824": 8815
      }
    ],
    "65": [
      null,
      null,
      {
        "768": 192,
        "769": 193,
        "770": 194,
        "771": 195,
        "772": 256,
        "774": 258,
        "775": 550,
        "776": 196,
        "777": 7842,
        "778": 197,
        "780": 461,
        "783": 512,
        "785": 514,
        "803": 7840,
        "805": 7680,
        "808": 260
      }
    ],
    "66": [
      null,
      null,
      {
        "775": 7682,
        "803": 7684,
        "817": 7686
      }
    ],
    "67": [
      null,
      null,
      {
        "769": 262,
        "770": 264,
        "775": 266,
        "780": 268,
        "807": 199
      }
    ],
    "68": [
      null,
      null,
      {
        "775": 7690,
        "780": 270,
        "803": 7692,
        "807": 7696,
        "813": 7698,
        "817": 7694
      }
    ],
    "69": [
      null,
      null,
      {
        "768": 200,
        "769": 201,
        "770": 202,
        "771": 7868,
        "772": 274,
        "774": 276,
        "775": 278,
        "776": 203,
        "777": 7866,
        "780": 282,
        "783": 516,
        "785": 518,
        "803": 7864,
        "807": 552,
        "808": 280,
        "813": 7704,
        "816": 7706
      }
    ],
    "70": [
      null,
      null,
      {
        "775": 7710
      }
    ],
    "71": [
      null,
      null,
      {
        "769": 500,
        "770": 284,
        "772": 7712,
        "774": 286,
        "775": 288,
        "780": 486,
        "807": 290
      }
    ],
    "72": [
      null,
      null,
      {
        "770": 292,
        "775": 7714,
        "776": 7718,
        "780": 542,
        "803": 7716,
        "807": 7720,
        "814": 7722
      }
    ],
    "73": [
      null,
      null,
      {
        "768": 204,
        "769": 205,
        "770": 206,
        "771": 296,
        "772": 298,
        "774": 300,
        "775": 304,
        "776": 207,
        "777": 7880,
        "780": 463,
        "783": 520,
        "785": 522,
        "803": 7882,
        "808": 302,
        "816": 7724
      }
    ],
    "74": [
      null,
      null,
      {
        "770": 308
      }
    ],
    "75": [
      null,
      null,
      {
        "769": 7728,
        "780": 488,
        "803": 7730,
        "807": 310,
        "817": 7732
      }
    ],
    "76": [
      null,
      null,
      {
        "769": 313,
        "780": 317,
        "803": 7734,
        "807": 315,
        "813": 7740,
        "817": 7738
      }
    ],
    "77": [
      null,
      null,
      {
        "769": 7742,
        "775": 7744,
        "803": 7746
      }
    ],
    "78": [
      null,
      null,
      {
        "768": 504,
        "769": 323,
        "771": 209,
        "775": 7748,
        "780": 327,
        "803": 7750,
        "807": 325,
        "813": 7754,
        "817": 7752
      }
    ],
    "79": [
      null,
      null,
      {
        "768": 210,
        "769": 211,
        "770": 212,
        "771": 213,
        "772": 332,
        "774": 334,
        "775": 558,
        "776": 214,
        "777": 7886,
        "779": 336,
        "780": 465,
        "783": 524,
        "785": 526,
        "795": 416,
        "803": 7884,
        "808": 490
      }
    ],
    "80": [
      null,
      null,
      {
        "769": 7764,
        "775": 7766
      }
    ],
    "82": [
      null,
      null,
      {
        "769": 340,
        "775": 7768,
        "780": 344,
        "783": 528,
        "785": 530,
        "803": 7770,
        "807": 342,
        "817": 7774
      }
    ],
    "83": [
      null,
      null,
      {
        "769": 346,
        "770": 348,
        "775": 7776,
        "780": 352,
        "803": 7778,
        "806": 536,
        "807": 350
      }
    ],
    "84": [
      null,
      null,
      {
        "775": 7786,
        "780": 356,
        "803": 7788,
        "806": 538,
        "807": 354,
        "813": 7792,
        "817": 7790
      }
    ],
    "85": [
      null,
      null,
      {
        "768": 217,
        "769": 218,
        "770": 219,
        "771": 360,
        "772": 362,
        "774": 364,
        "776": 220,
        "777": 7910,
        "778": 366,
        "779": 368,
        "780": 467,
        "783": 532,
        "785": 534,
        "795": 431,
        "803": 7908,
        "804": 7794,
        "808": 370,
        "813": 7798,
        "816": 7796
      }
    ],
    "86": [
      null,
      null,
      {
        "771": 7804,
        "803": 7806
      }
    ],
    "87": [
      null,
      null,
      {
        "768": 7808,
        "769": 7810,
        "770": 372,
        "775": 7814,
        "776": 7812,
        "803": 7816
      }
    ],
    "88": [
      null,
      null,
      {
        "775": 7818,
        "776": 7820
      }
    ],
    "89": [
      null,
      null,
      {
        "768": 7922,
        "769": 221,
        "770": 374,
        "771": 7928,
        "772": 562,
        "775": 7822,
        "776": 376,
        "777": 7926,
        "803": 7924
      }
    ],
    "90": [
      null,
      null,
      {
        "769": 377,
        "770": 7824,
        "775": 379,
        "780": 381,
        "803": 7826,
        "817": 7828
      }
    ],
    "97": [
      null,
      null,
      {
        "768": 224,
        "769": 225,
        "770": 226,
        "771": 227,
        "772": 257,
        "774": 259,
        "775": 551,
        "776": 228,
        "777": 7843,
        "778": 229,
        "780": 462,
        "783": 513,
        "785": 515,
        "803": 7841,
        "805": 7681,
        "808": 261
      }
    ],
    "98": [
      null,
      null,
      {
        "775": 7683,
        "803": 7685,
        "817": 7687
      }
    ],
    "99": [
      null,
      null,
      {
        "769": 263,
        "770": 265,
        "775": 267,
        "780": 269,
        "807": 231
      }
    ],
    "100": [
      null,
      null,
      {
        "775": 7691,
        "780": 271,
        "803": 7693,
        "807": 7697,
        "813": 7699,
        "817": 7695
      }
    ],
    "101": [
      null,
      null,
      {
        "768": 232,
        "769": 233,
        "770": 234,
        "771": 7869,
        "772": 275,
        "774": 277,
        "775": 279,
        "776": 235,
        "777": 7867,
        "780": 283,
        "783": 517,
        "785": 519,
        "803": 7865,
        "807": 553,
        "808": 281,
        "813": 7705,
        "816": 7707
      }
    ],
    "102": [
      null,
      null,
      {
        "775": 7711
      }
    ],
    "103": [
      null,
      null,
      {
        "769": 501,
        "770": 285,
        "772": 7713,
        "774": 287,
        "775": 289,
        "780": 487,
        "807": 291
      }
    ],
    "104": [
      null,
      null,
      {
        "770": 293,
        "775": 7715,
        "776": 7719,
        "780": 543,
        "803": 7717,
        "807": 7721,
        "814": 7723,
        "817": 7830
      }
    ],
    "105": [
      null,
      null,
      {
        "768": 236,
        "769": 237,
        "770": 238,
        "771": 297,
        "772": 299,
        "774": 301,
        "776": 239,
        "777": 7881,
        "780": 464,
        "783": 521,
        "785": 523,
        "803": 7883,
        "808": 303,
        "816": 7725
      }
    ],
    "106": [
      null,
      null,
      {
        "770": 309,
        "780": 496
      }
    ],
    "107": [
      null,
      null,
      {
        "769": 7729,
        "780": 489,
        "803": 7731,
        "807": 311,
        "817": 7733
      }
    ],
    "108": [
      null,
      null,
      {
        "769": 314,
        "780": 318,
        "803": 7735,
        "807": 316,
        "813": 7741,
        "817": 7739
      }
    ],
    "109": [
      null,
      null,
      {
        "769": 7743,
        "775": 7745,
        "803": 7747
      }
    ],
    "110": [
      null,
      null,
      {
        "768": 505,
        "769": 324,
        "771": 241,
        "775": 7749,
        "780": 328,
        "803": 7751,
        "807": 326,
        "813": 7755,
        "817": 7753
      }
    ],
    "111": [
      null,
      null,
      {
        "768": 242,
        "769": 243,
        "770": 244,
        "771": 245,
        "772": 333,
        "774": 335,
        "775": 559,
        "776": 246,
        "777": 7887,
        "779": 337,
        "780": 466,
        "783": 525,
        "785": 527,
        "795": 417,
        "803": 7885,
        "808": 491
      }
    ],
    "112": [
      null,
      null,
      {
        "769": 7765,
        "775": 7767
      }
    ],
    "114": [
      null,
      null,
      {
        "769": 341,
        "775": 7769,
        "780": 345,
        "783": 529,
        "785": 531,
        "803": 7771,
        "807": 343,
        "817": 7775
      }
    ],
    "115": [
      null,
      null,
      {
        "769": 347,
        "770": 349,
        "775": 7777,
        "780": 353,
        "803": 7779,
        "806": 537,
        "807": 351
      }
    ],
    "116": [
      null,
      null,
      {
        "775": 7787,
        "776": 7831,
        "780": 357,
        "803": 7789,
        "806": 539,
        "807": 355,
        "813": 7793,
        "817": 7791
      }
    ],
    "117": [
      null,
      null,
      {
        "768": 249,
        "769": 250,
        "770": 251,
        "771": 361,
        "772": 363,
        "774": 365,
        "776": 252,
        "777": 7911,
        "778": 367,
        "779": 369,
        "780": 468,
        "783": 533,
        "785": 535,
        "795": 432,
        "803": 7909,
        "804": 7795,
        "808": 371,
        "813": 7799,
        "816": 7797
      }
    ],
    "118": [
      null,
      null,
      {
        "771": 7805,
        "803": 7807
      }
    ],
    "119": [
      null,
      null,
      {
        "768": 7809,
        "769": 7811,
        "770": 373,
        "775": 7815,
        "776": 7813,
        "778": 7832,
        "803": 7817
      }
    ],
    "120": [
      null,
      null,
      {
        "775": 7819,
        "776": 7821
      }
    ],
    "121": [
      null,
      null,
      {
        "768": 7923,
        "769": 253,
        "770": 375,
        "771": 7929,
        "772": 563,
        "775": 7823,
        "776": 255,
        "777": 7927,
        "778": 7833,
        "803": 7925
      }
    ],
    "122": [
      null,
      null,
      {
        "769": 378,
        "770": 7825,
        "775": 380,
        "780": 382,
        "803": 7827,
        "817": 7829
      }
    ],
    "160": [
      [
        32
      ],
      256
    ],
    "168": [
      [
        32,
        776
      ],
      256,
      {
        "768": 8173,
        "769": 901,
        "834": 8129
      }
    ],
    "170": [
      [
        97
      ],
      256
    ],
    "175": [
      [
        32,
        772
      ],
      256
    ],
    "178": [
      [
        50
      ],
      256
    ],
    "179": [
      [
        51
      ],
      256
    ],
    "180": [
      [
        32,
        769
      ],
      256
    ],
    "181": [
      [
        956
      ],
      256
    ],
    "184": [
      [
        32,
        807
      ],
      256
    ],
    "185": [
      [
        49
      ],
      256
    ],
    "186": [
      [
        111
      ],
      256
    ],
    "188": [
      [
        49,
        8260,
        52
      ],
      256
    ],
    "189": [
      [
        49,
        8260,
        50
      ],
      256
    ],
    "190": [
      [
        51,
        8260,
        52
      ],
      256
    ],
    "192": [
      [
        65,
        768
      ]
    ],
    "193": [
      [
        65,
        769
      ]
    ],
    "194": [
      [
        65,
        770
      ],
      null,
      {
        "768": 7846,
        "769": 7844,
        "771": 7850,
        "777": 7848
      }
    ],
    "195": [
      [
        65,
        771
      ]
    ],
    "196": [
      [
        65,
        776
      ],
      null,
      {
        "772": 478
      }
    ],
    "197": [
      [
        65,
        778
      ],
      null,
      {
        "769": 506
      }
    ],
    "198": [
      null,
      null,
      {
        "769": 508,
        "772": 482
      }
    ],
    "199": [
      [
        67,
        807
      ],
      null,
      {
        "769": 7688
      }
    ],
    "200": [
      [
        69,
        768
      ]
    ],
    "201": [
      [
        69,
        769
      ]
    ],
    "202": [
      [
        69,
        770
      ],
      null,
      {
        "768": 7872,
        "769": 7870,
        "771": 7876,
        "777": 7874
      }
    ],
    "203": [
      [
        69,
        776
      ]
    ],
    "204": [
      [
        73,
        768
      ]
    ],
    "205": [
      [
        73,
        769
      ]
    ],
    "206": [
      [
        73,
        770
      ]
    ],
    "207": [
      [
        73,
        776
      ],
      null,
      {
        "769": 7726
      }
    ],
    "209": [
      [
        78,
        771
      ]
    ],
    "210": [
      [
        79,
        768
      ]
    ],
    "211": [
      [
        79,
        769
      ]
    ],
    "212": [
      [
        79,
        770
      ],
      null,
      {
        "768": 7890,
        "769": 7888,
        "771": 7894,
        "777": 7892
      }
    ],
    "213": [
      [
        79,
        771
      ],
      null,
      {
        "769": 7756,
        "772": 556,
        "776": 7758
      }
    ],
    "214": [
      [
        79,
        776
      ],
      null,
      {
        "772": 554
      }
    ],
    "216": [
      null,
      null,
      {
        "769": 510
      }
    ],
    "217": [
      [
        85,
        768
      ]
    ],
    "218": [
      [
        85,
        769
      ]
    ],
    "219": [
      [
        85,
        770
      ]
    ],
    "220": [
      [
        85,
        776
      ],
      null,
      {
        "768": 475,
        "769": 471,
        "772": 469,
        "780": 473
      }
    ],
    "221": [
      [
        89,
        769
      ]
    ],
    "224": [
      [
        97,
        768
      ]
    ],
    "225": [
      [
        97,
        769
      ]
    ],
    "226": [
      [
        97,
        770
      ],
      null,
      {
        "768": 7847,
        "769": 7845,
        "771": 7851,
        "777": 7849
      }
    ],
    "227": [
      [
        97,
        771
      ]
    ],
    "228": [
      [
        97,
        776
      ],
      null,
      {
        "772": 479
      }
    ],
    "229": [
      [
        97,
        778
      ],
      null,
      {
        "769": 507
      }
    ],
    "230": [
      null,
      null,
      {
        "769": 509,
        "772": 483
      }
    ],
    "231": [
      [
        99,
        807
      ],
      null,
      {
        "769": 7689
      }
    ],
    "232": [
      [
        101,
        768
      ]
    ],
    "233": [
      [
        101,
        769
      ]
    ],
    "234": [
      [
        101,
        770
      ],
      null,
      {
        "768": 7873,
        "769": 7871,
        "771": 7877,
        "777": 7875
      }
    ],
    "235": [
      [
        101,
        776
      ]
    ],
    "236": [
      [
        105,
        768
      ]
    ],
    "237": [
      [
        105,
        769
      ]
    ],
    "238": [
      [
        105,
        770
      ]
    ],
    "239": [
      [
        105,
        776
      ],
      null,
      {
        "769": 7727
      }
    ],
    "241": [
      [
        110,
        771
      ]
    ],
    "242": [
      [
        111,
        768
      ]
    ],
    "243": [
      [
        111,
        769
      ]
    ],
    "244": [
      [
        111,
        770
      ],
      null,
      {
        "768": 7891,
        "769": 7889,
        "771": 7895,
        "777": 7893
      }
    ],
    "245": [
      [
        111,
        771
      ],
      null,
      {
        "769": 7757,
        "772": 557,
        "776": 7759
      }
    ],
    "246": [
      [
        111,
        776
      ],
      null,
      {
        "772": 555
      }
    ],
    "248": [
      null,
      null,
      {
        "769": 511
      }
    ],
    "249": [
      [
        117,
        768
      ]
    ],
    "250": [
      [
        117,
        769
      ]
    ],
    "251": [
      [
        117,
        770
      ]
    ],
    "252": [
      [
        117,
        776
      ],
      null,
      {
        "768": 476,
        "769": 472,
        "772": 470,
        "780": 474
      }
    ],
    "253": [
      [
        121,
        769
      ]
    ],
    "255": [
      [
        121,
        776
      ]
    ]
  },
  "256": {
    "256": [
      [
        65,
        772
      ]
    ],
    "257": [
      [
        97,
        772
      ]
    ],
    "258": [
      [
        65,
        774
      ],
      null,
      {
        "768": 7856,
        "769": 7854,
        "771": 7860,
        "777": 7858
      }
    ],
    "259": [
      [
        97,
        774
      ],
      null,
      {
        "768": 7857,
        "769": 7855,
        "771": 7861,
        "777": 7859
      }
    ],
    "260": [
      [
        65,
        808
      ]
    ],
    "261": [
      [
        97,
        808
      ]
    ],
    "262": [
      [
        67,
        769
      ]
    ],
    "263": [
      [
        99,
        769
      ]
    ],
    "264": [
      [
        67,
        770
      ]
    ],
    "265": [
      [
        99,
        770
      ]
    ],
    "266": [
      [
        67,
        775
      ]
    ],
    "267": [
      [
        99,
        775
      ]
    ],
    "268": [
      [
        67,
        780
      ]
    ],
    "269": [
      [
        99,
        780
      ]
    ],
    "270": [
      [
        68,
        780
      ]
    ],
    "271": [
      [
        100,
        780
      ]
    ],
    "274": [
      [
        69,
        772
      ],
      null,
      {
        "768": 7700,
        "769": 7702
      }
    ],
    "275": [
      [
        101,
        772
      ],
      null,
      {
        "768": 7701,
        "769": 7703
      }
    ],
    "276": [
      [
        69,
        774
      ]
    ],
    "277": [
      [
        101,
        774
      ]
    ],
    "278": [
      [
        69,
        775
      ]
    ],
    "279": [
      [
        101,
        775
      ]
    ],
    "280": [
      [
        69,
        808
      ]
    ],
    "281": [
      [
        101,
        808
      ]
    ],
    "282": [
      [
        69,
        780
      ]
    ],
    "283": [
      [
        101,
        780
      ]
    ],
    "284": [
      [
        71,
        770
      ]
    ],
    "285": [
      [
        103,
        770
      ]
    ],
    "286": [
      [
        71,
        774
      ]
    ],
    "287": [
      [
        103,
        774
      ]
    ],
    "288": [
      [
        71,
        775
      ]
    ],
    "289": [
      [
        103,
        775
      ]
    ],
    "290": [
      [
        71,
        807
      ]
    ],
    "291": [
      [
        103,
        807
      ]
    ],
    "292": [
      [
        72,
        770
      ]
    ],
    "293": [
      [
        104,
        770
      ]
    ],
    "296": [
      [
        73,
        771
      ]
    ],
    "297": [
      [
        105,
        771
      ]
    ],
    "298": [
      [
        73,
        772
      ]
    ],
    "299": [
      [
        105,
        772
      ]
    ],
    "300": [
      [
        73,
        774
      ]
    ],
    "301": [
      [
        105,
        774
      ]
    ],
    "302": [
      [
        73,
        808
      ]
    ],
    "303": [
      [
        105,
        808
      ]
    ],
    "304": [
      [
        73,
        775
      ]
    ],
    "306": [
      [
        73,
        74
      ],
      256
    ],
    "307": [
      [
        105,
        106
      ],
      256
    ],
    "308": [
      [
        74,
        770
      ]
    ],
    "309": [
      [
        106,
        770
      ]
    ],
    "310": [
      [
        75,
        807
      ]
    ],
    "311": [
      [
        107,
        807
      ]
    ],
    "313": [
      [
        76,
        769
      ]
    ],
    "314": [
      [
        108,
        769
      ]
    ],
    "315": [
      [
        76,
        807
      ]
    ],
    "316": [
      [
        108,
        807
      ]
    ],
    "317": [
      [
        76,
        780
      ]
    ],
    "318": [
      [
        108,
        780
      ]
    ],
    "319": [
      [
        76,
        183
      ],
      256
    ],
    "320": [
      [
        108,
        183
      ],
      256
    ],
    "323": [
      [
        78,
        769
      ]
    ],
    "324": [
      [
        110,
        769
      ]
    ],
    "325": [
      [
        78,
        807
      ]
    ],
    "326": [
      [
        110,
        807
      ]
    ],
    "327": [
      [
        78,
        780
      ]
    ],
    "328": [
      [
        110,
        780
      ]
    ],
    "329": [
      [
        700,
        110
      ],
      256
    ],
    "332": [
      [
        79,
        772
      ],
      null,
      {
        "768": 7760,
        "769": 7762
      }
    ],
    "333": [
      [
        111,
        772
      ],
      null,
      {
        "768": 7761,
        "769": 7763
      }
    ],
    "334": [
      [
        79,
        774
      ]
    ],
    "335": [
      [
        111,
        774
      ]
    ],
    "336": [
      [
        79,
        779
      ]
    ],
    "337": [
      [
        111,
        779
      ]
    ],
    "340": [
      [
        82,
        769
      ]
    ],
    "341": [
      [
        114,
        769
      ]
    ],
    "342": [
      [
        82,
        807
      ]
    ],
    "343": [
      [
        114,
        807
      ]
    ],
    "344": [
      [
        82,
        780
      ]
    ],
    "345": [
      [
        114,
        780
      ]
    ],
    "346": [
      [
        83,
        769
      ],
      null,
      {
        "775": 7780
      }
    ],
    "347": [
      [
        115,
        769
      ],
      null,
      {
        "775": 7781
      }
    ],
    "348": [
      [
        83,
        770
      ]
    ],
    "349": [
      [
        115,
        770
      ]
    ],
    "350": [
      [
        83,
        807
      ]
    ],
    "351": [
      [
        115,
        807
      ]
    ],
    "352": [
      [
        83,
        780
      ],
      null,
      {
        "775": 7782
      }
    ],
    "353": [
      [
        115,
        780
      ],
      null,
      {
        "775": 7783
      }
    ],
    "354": [
      [
        84,
        807
      ]
    ],
    "355": [
      [
        116,
        807
      ]
    ],
    "356": [
      [
        84,
        780
      ]
    ],
    "357": [
      [
        116,
        780
      ]
    ],
    "360": [
      [
        85,
        771
      ],
      null,
      {
        "769": 7800
      }
    ],
    "361": [
      [
        117,
        771
      ],
      null,
      {
        "769": 7801
      }
    ],
    "362": [
      [
        85,
        772
      ],
      null,
      {
        "776": 7802
      }
    ],
    "363": [
      [
        117,
        772
      ],
      null,
      {
        "776": 7803
      }
    ],
    "364": [
      [
        85,
        774
      ]
    ],
    "365": [
      [
        117,
        774
      ]
    ],
    "366": [
      [
        85,
        778
      ]
    ],
    "367": [
      [
        117,
        778
      ]
    ],
    "368": [
      [
        85,
        779
      ]
    ],
    "369": [
      [
        117,
        779
      ]
    ],
    "370": [
      [
        85,
        808
      ]
    ],
    "371": [
      [
        117,
        808
      ]
    ],
    "372": [
      [
        87,
        770
      ]
    ],
    "373": [
      [
        119,
        770
      ]
    ],
    "374": [
      [
        89,
        770
      ]
    ],
    "375": [
      [
        121,
        770
      ]
    ],
    "376": [
      [
        89,
        776
      ]
    ],
    "377": [
      [
        90,
        769
      ]
    ],
    "378": [
      [
        122,
        769
      ]
    ],
    "379": [
      [
        90,
        775
      ]
    ],
    "380": [
      [
        122,
        775
      ]
    ],
    "381": [
      [
        90,
        780
      ]
    ],
    "382": [
      [
        122,
        780
      ]
    ],
    "383": [
      [
        115
      ],
      256,
      {
        "775": 7835
      }
    ],
    "416": [
      [
        79,
        795
      ],
      null,
      {
        "768": 7900,
        "769": 7898,
        "771": 7904,
        "777": 7902,
        "803": 7906
      }
    ],
    "417": [
      [
        111,
        795
      ],
      null,
      {
        "768": 7901,
        "769": 7899,
        "771": 7905,
        "777": 7903,
        "803": 7907
      }
    ],
    "431": [
      [
        85,
        795
      ],
      null,
      {
        "768": 7914,
        "769": 7912,
        "771": 7918,
        "777": 7916,
        "803": 7920
      }
    ],
    "432": [
      [
        117,
        795
      ],
      null,
      {
        "768": 7915,
        "769": 7913,
        "771": 7919,
        "777": 7917,
        "803": 7921
      }
    ],
    "439": [
      null,
      null,
      {
        "780": 494
      }
    ],
    "452": [
      [
        68,
        381
      ],
      256
    ],
    "453": [
      [
        68,
        382
      ],
      256
    ],
    "454": [
      [
        100,
        382
      ],
      256
    ],
    "455": [
      [
        76,
        74
      ],
      256
    ],
    "456": [
      [
        76,
        106
      ],
      256
    ],
    "457": [
      [
        108,
        106
      ],
      256
    ],
    "458": [
      [
        78,
        74
      ],
      256
    ],
    "459": [
      [
        78,
        106
      ],
      256
    ],
    "460": [
      [
        110,
        106
      ],
      256
    ],
    "461": [
      [
        65,
        780
      ]
    ],
    "462": [
      [
        97,
        780
      ]
    ],
    "463": [
      [
        73,
        780
      ]
    ],
    "464": [
      [
        105,
        780
      ]
    ],
    "465": [
      [
        79,
        780
      ]
    ],
    "466": [
      [
        111,
        780
      ]
    ],
    "467": [
      [
        85,
        780
      ]
    ],
    "468": [
      [
        117,
        780
      ]
    ],
    "469": [
      [
        220,
        772
      ]
    ],
    "470": [
      [
        252,
        772
      ]
    ],
    "471": [
      [
        220,
        769
      ]
    ],
    "472": [
      [
        252,
        769
      ]
    ],
    "473": [
      [
        220,
        780
      ]
    ],
    "474": [
      [
        252,
        780
      ]
    ],
    "475": [
      [
        220,
        768
      ]
    ],
    "476": [
      [
        252,
        768
      ]
    ],
    "478": [
      [
        196,
        772
      ]
    ],
    "479": [
      [
        228,
        772
      ]
    ],
    "480": [
      [
        550,
        772
      ]
    ],
    "481": [
      [
        551,
        772
      ]
    ],
    "482": [
      [
        198,
        772
      ]
    ],
    "483": [
      [
        230,
        772
      ]
    ],
    "486": [
      [
        71,
        780
      ]
    ],
    "487": [
      [
        103,
        780
      ]
    ],
    "488": [
      [
        75,
        780
      ]
    ],
    "489": [
      [
        107,
        780
      ]
    ],
    "490": [
      [
        79,
        808
      ],
      null,
      {
        "772": 492
      }
    ],
    "491": [
      [
        111,
        808
      ],
      null,
      {
        "772": 493
      }
    ],
    "492": [
      [
        490,
        772
      ]
    ],
    "493": [
      [
        491,
        772
      ]
    ],
    "494": [
      [
        439,
        780
      ]
    ],
    "495": [
      [
        658,
        780
      ]
    ],
    "496": [
      [
        106,
        780
      ]
    ],
    "497": [
      [
        68,
        90
      ],
      256
    ],
    "498": [
      [
        68,
        122
      ],
      256
    ],
    "499": [
      [
        100,
        122
      ],
      256
    ],
    "500": [
      [
        71,
        769
      ]
    ],
    "501": [
      [
        103,
        769
      ]
    ],
    "504": [
      [
        78,
        768
      ]
    ],
    "505": [
      [
        110,
        768
      ]
    ],
    "506": [
      [
        197,
        769
      ]
    ],
    "507": [
      [
        229,
        769
      ]
    ],
    "508": [
      [
        198,
        769
      ]
    ],
    "509": [
      [
        230,
        769
      ]
    ],
    "510": [
      [
        216,
        769
      ]
    ],
    "511": [
      [
        248,
        769
      ]
    ],
    "66045": [
      null,
      220
    ]
  },
  "512": {
    "512": [
      [
        65,
        783
      ]
    ],
    "513": [
      [
        97,
        783
      ]
    ],
    "514": [
      [
        65,
        785
      ]
    ],
    "515": [
      [
        97,
        785
      ]
    ],
    "516": [
      [
        69,
        783
      ]
    ],
    "517": [
      [
        101,
        783
      ]
    ],
    "518": [
      [
        69,
        785
      ]
    ],
    "519": [
      [
        101,
        785
      ]
    ],
    "520": [
      [
        73,
        783
      ]
    ],
    "521": [
      [
        105,
        783
      ]
    ],
    "522": [
      [
        73,
        785
      ]
    ],
    "523": [
      [
        105,
        785
      ]
    ],
    "524": [
      [
        79,
        783
      ]
    ],
    "525": [
      [
        111,
        783
      ]
    ],
    "526": [
      [
        79,
        785
      ]
    ],
    "527": [
      [
        111,
        785
      ]
    ],
    "528": [
      [
        82,
        783
      ]
    ],
    "529": [
      [
        114,
        783
      ]
    ],
    "530": [
      [
        82,
        785
      ]
    ],
    "531": [
      [
        114,
        785
      ]
    ],
    "532": [
      [
        85,
        783
      ]
    ],
    "533": [
      [
        117,
        783
      ]
    ],
    "534": [
      [
        85,
        785
      ]
    ],
    "535": [
      [
        117,
        785
      ]
    ],
    "536": [
      [
        83,
        806
      ]
    ],
    "537": [
      [
        115,
        806
      ]
    ],
    "538": [
      [
        84,
        806
      ]
    ],
    "539": [
      [
        116,
        806
      ]
    ],
    "542": [
      [
        72,
        780
      ]
    ],
    "543": [
      [
        104,
        780
      ]
    ],
    "550": [
      [
        65,
        775
      ],
      null,
      {
        "772": 480
      }
    ],
    "551": [
      [
        97,
        775
      ],
      null,
      {
        "772": 481
      }
    ],
    "552": [
      [
        69,
        807
      ],
      null,
      {
        "774": 7708
      }
    ],
    "553": [
      [
        101,
        807
      ],
      null,
      {
        "774": 7709
      }
    ],
    "554": [
      [
        214,
        772
      ]
    ],
    "555": [
      [
        246,
        772
      ]
    ],
    "556": [
      [
        213,
        772
      ]
    ],
    "557": [
      [
        245,
        772
      ]
    ],
    "558": [
      [
        79,
        775
      ],
      null,
      {
        "772": 560
      }
    ],
    "559": [
      [
        111,
        775
      ],
      null,
      {
        "772": 561
      }
    ],
    "560": [
      [
        558,
        772
      ]
    ],
    "561": [
      [
        559,
        772
      ]
    ],
    "562": [
      [
        89,
        772
      ]
    ],
    "563": [
      [
        121,
        772
      ]
    ],
    "658": [
      null,
      null,
      {
        "780": 495
      }
    ],
    "688": [
      [
        104
      ],
      256
    ],
    "689": [
      [
        614
      ],
      256
    ],
    "690": [
      [
        106
      ],
      256
    ],
    "691": [
      [
        114
      ],
      256
    ],
    "692": [
      [
        633
      ],
      256
    ],
    "693": [
      [
        635
      ],
      256
    ],
    "694": [
      [
        641
      ],
      256
    ],
    "695": [
      [
        119
      ],
      256
    ],
    "696": [
      [
        121
      ],
      256
    ],
    "728": [
      [
        32,
        774
      ],
      256
    ],
    "729": [
      [
        32,
        775
      ],
      256
    ],
    "730": [
      [
        32,
        778
      ],
      256
    ],
    "731": [
      [
        32,
        808
      ],
      256
    ],
    "732": [
      [
        32,
        771
      ],
      256
    ],
    "733": [
      [
        32,
        779
      ],
      256
    ],
    "736": [
      [
        611
      ],
      256
    ],
    "737": [
      [
        108
      ],
      256
    ],
    "738": [
      [
        115
      ],
      256
    ],
    "739": [
      [
        120
      ],
      256
    ],
    "740": [
      [
        661
      ],
      256
    ],
    "66272": [
      null,
      220
    ]
  },
  "768": {
    "768": [
      null,
      230
    ],
    "769": [
      null,
      230
    ],
    "770": [
      null,
      230
    ],
    "771": [
      null,
      230
    ],
    "772": [
      null,
      230
    ],
    "773": [
      null,
      230
    ],
    "774": [
      null,
      230
    ],
    "775": [
      null,
      230
    ],
    "776": [
      null,
      230,
      {
        "769": 836
      }
    ],
    "777": [
      null,
      230
    ],
    "778": [
      null,
      230
    ],
    "779": [
      null,
      230
    ],
    "780": [
      null,
      230
    ],
    "781": [
      null,
      230
    ],
    "782": [
      null,
      230
    ],
    "783": [
      null,
      230
    ],
    "784": [
      null,
      230
    ],
    "785": [
      null,
      230
    ],
    "786": [
      null,
      230
    ],
    "787": [
      null,
      230
    ],
    "788": [
      null,
      230
    ],
    "789": [
      null,
      232
    ],
    "790": [
      null,
      220
    ],
    "791": [
      null,
      220
    ],
    "792": [
      null,
      220
    ],
    "793": [
      null,
      220
    ],
    "794": [
      null,
      232
    ],
    "795": [
      null,
      216
    ],
    "796": [
      null,
      220
    ],
    "797": [
      null,
      220
    ],
    "798": [
      null,
      220
    ],
    "799": [
      null,
      220
    ],
    "800": [
      null,
      220
    ],
    "801": [
      null,
      202
    ],
    "802": [
      null,
      202
    ],
    "803": [
      null,
      220
    ],
    "804": [
      null,
      220
    ],
    "805": [
      null,
      220
    ],
    "806": [
      null,
      220
    ],
    "807": [
      null,
      202
    ],
    "808": [
      null,
      202
    ],
    "809": [
      null,
      220
    ],
    "810": [
      null,
      220
    ],
    "811": [
      null,
      220
    ],
    "812": [
      null,
      220
    ],
    "813": [
      null,
      220
    ],
    "814": [
      null,
      220
    ],
    "815": [
      null,
      220
    ],
    "816": [
      null,
      220
    ],
    "817": [
      null,
      220
    ],
    "818": [
      null,
      220
    ],
    "819": [
      null,
      220
    ],
    "820": [
      null,
      1
    ],
    "821": [
      null,
      1
    ],
    "822": [
      null,
      1
    ],
    "823": [
      null,
      1
    ],
    "824": [
      null,
      1
    ],
    "825": [
      null,
      220
    ],
    "826": [
      null,
      220
    ],
    "827": [
      null,
      220
    ],
    "828": [
      null,
      220
    ],
    "829": [
      null,
      230
    ],
    "830": [
      null,
      230
    ],
    "831": [
      null,
      230
    ],
    "832": [
      [
        768
      ],
      230
    ],
    "833": [
      [
        769
      ],
      230
    ],
    "834": [
      null,
      230
    ],
    "835": [
      [
        787
      ],
      230
    ],
    "836": [
      [
        776,
        769
      ],
      230
    ],
    "837": [
      null,
      240
    ],
    "838": [
      null,
      230
    ],
    "839": [
      null,
      220
    ],
    "840": [
      null,
      220
    ],
    "841": [
      null,
      220
    ],
    "842": [
      null,
      230
    ],
    "843": [
      null,
      230
    ],
    "844": [
      null,
      230
    ],
    "845": [
      null,
      220
    ],
    "846": [
      null,
      220
    ],
    "848": [
      null,
      230
    ],
    "849": [
      null,
      230
    ],
    "850": [
      null,
      230
    ],
    "851": [
      null,
      220
    ],
    "852": [
      null,
      220
    ],
    "853": [
      null,
      220
    ],
    "854": [
      null,
      220
    ],
    "855": [
      null,
      230
    ],
    "856": [
      null,
      232
    ],
    "857": [
      null,
      220
    ],
    "858": [
      null,
      220
    ],
    "859": [
      null,
      230
    ],
    "860": [
      null,
      233
    ],
    "861": [
      null,
      234
    ],
    "862": [
      null,
      234
    ],
    "863": [
      null,
      233
    ],
    "864": [
      null,
      234
    ],
    "865": [
      null,
      234
    ],
    "866": [
      null,
      233
    ],
    "867": [
      null,
      230
    ],
    "868": [
      null,
      230
    ],
    "869": [
      null,
      230
    ],
    "870": [
      null,
      230
    ],
    "871": [
      null,
      230
    ],
    "872": [
      null,
      230
    ],
    "873": [
      null,
      230
    ],
    "874": [
      null,
      230
    ],
    "875": [
      null,
      230
    ],
    "876": [
      null,
      230
    ],
    "877": [
      null,
      230
    ],
    "878": [
      null,
      230
    ],
    "879": [
      null,
      230
    ],
    "884": [
      [
        697
      ]
    ],
    "890": [
      [
        32,
        837
      ],
      256
    ],
    "894": [
      [
        59
      ]
    ],
    "900": [
      [
        32,
        769
      ],
      256
    ],
    "901": [
      [
        168,
        769
      ]
    ],
    "902": [
      [
        913,
        769
      ]
    ],
    "903": [
      [
        183
      ]
    ],
    "904": [
      [
        917,
        769
      ]
    ],
    "905": [
      [
        919,
        769
      ]
    ],
    "906": [
      [
        921,
        769
      ]
    ],
    "908": [
      [
        927,
        769
      ]
    ],
    "910": [
      [
        933,
        769
      ]
    ],
    "911": [
      [
        937,
        769
      ]
    ],
    "912": [
      [
        970,
        769
      ]
    ],
    "913": [
      null,
      null,
      {
        "768": 8122,
        "769": 902,
        "772": 8121,
        "774": 8120,
        "787": 7944,
        "788": 7945,
        "837": 8124
      }
    ],
    "917": [
      null,
      null,
      {
        "768": 8136,
        "769": 904,
        "787": 7960,
        "788": 7961
      }
    ],
    "919": [
      null,
      null,
      {
        "768": 8138,
        "769": 905,
        "787": 7976,
        "788": 7977,
        "837": 8140
      }
    ],
    "921": [
      null,
      null,
      {
        "768": 8154,
        "769": 906,
        "772": 8153,
        "774": 8152,
        "776": 938,
        "787": 7992,
        "788": 7993
      }
    ],
    "927": [
      null,
      null,
      {
        "768": 8184,
        "769": 908,
        "787": 8008,
        "788": 8009
      }
    ],
    "929": [
      null,
      null,
      {
        "788": 8172
      }
    ],
    "933": [
      null,
      null,
      {
        "768": 8170,
        "769": 910,
        "772": 8169,
        "774": 8168,
        "776": 939,
        "788": 8025
      }
    ],
    "937": [
      null,
      null,
      {
        "768": 8186,
        "769": 911,
        "787": 8040,
        "788": 8041,
        "837": 8188
      }
    ],
    "938": [
      [
        921,
        776
      ]
    ],
    "939": [
      [
        933,
        776
      ]
    ],
    "940": [
      [
        945,
        769
      ],
      null,
      {
        "837": 8116
      }
    ],
    "941": [
      [
        949,
        769
      ]
    ],
    "942": [
      [
        951,
        769
      ],
      null,
      {
        "837": 8132
      }
    ],
    "943": [
      [
        953,
        769
      ]
    ],
    "944": [
      [
        971,
        769
      ]
    ],
    "945": [
      null,
      null,
      {
        "768": 8048,
        "769": 940,
        "772": 8113,
        "774": 8112,
        "787": 7936,
        "788": 7937,
        "834": 8118,
        "837": 8115
      }
    ],
    "949": [
      null,
      null,
      {
        "768": 8050,
        "769": 941,
        "787": 7952,
        "788": 7953
      }
    ],
    "951": [
      null,
      null,
      {
        "768": 8052,
        "769": 942,
        "787": 7968,
        "788": 7969,
        "834": 8134,
        "837": 8131
      }
    ],
    "953": [
      null,
      null,
      {
        "768": 8054,
        "769": 943,
        "772": 8145,
        "774": 8144,
        "776": 970,
        "787": 7984,
        "788": 7985,
        "834": 8150
      }
    ],
    "959": [
      null,
      null,
      {
        "768": 8056,
        "769": 972,
        "787": 8000,
        "788": 8001
      }
    ],
    "961": [
      null,
      null,
      {
        "787": 8164,
        "788": 8165
      }
    ],
    "965": [
      null,
      null,
      {
        "768": 8058,
        "769": 973,
        "772": 8161,
        "774": 8160,
        "776": 971,
        "787": 8016,
        "788": 8017,
        "834": 8166
      }
    ],
    "969": [
      null,
      null,
      {
        "768": 8060,
        "769": 974,
        "787": 8032,
        "788": 8033,
        "834": 8182,
        "837": 8179
      }
    ],
    "970": [
      [
        953,
        776
      ],
      null,
      {
        "768": 8146,
        "769": 912,
        "834": 8151
      }
    ],
    "971": [
      [
        965,
        776
      ],
      null,
      {
        "768": 8162,
        "769": 944,
        "834": 8167
      }
    ],
    "972": [
      [
        959,
        769
      ]
    ],
    "973": [
      [
        965,
        769
      ]
    ],
    "974": [
      [
        969,
        769
      ],
      null,
      {
        "837": 8180
      }
    ],
    "976": [
      [
        946
      ],
      256
    ],
    "977": [
      [
        952
      ],
      256
    ],
    "978": [
      [
        933
      ],
      256,
      {
        "769": 979,
        "776": 980
      }
    ],
    "979": [
      [
        978,
        769
      ]
    ],
    "980": [
      [
        978,
        776
      ]
    ],
    "981": [
      [
        966
      ],
      256
    ],
    "982": [
      [
        960
      ],
      256
    ],
    "1008": [
      [
        954
      ],
      256
    ],
    "1009": [
      [
        961
      ],
      256
    ],
    "1010": [
      [
        962
      ],
      256
    ],
    "1012": [
      [
        920
      ],
      256
    ],
    "1013": [
      [
        949
      ],
      256
    ],
    "1017": [
      [
        931
      ],
      256
    ],
    "66422": [
      null,
      230
    ],
    "66423": [
      null,
      230
    ],
    "66424": [
      null,
      230
    ],
    "66425": [
      null,
      230
    ],
    "66426": [
      null,
      230
    ]
  },
  "1024": {
    "1024": [
      [
        1045,
        768
      ]
    ],
    "1025": [
      [
        1045,
        776
      ]
    ],
    "1027": [
      [
        1043,
        769
      ]
    ],
    "1030": [
      null,
      null,
      {
        "776": 1031
      }
    ],
    "1031": [
      [
        1030,
        776
      ]
    ],
    "1036": [
      [
        1050,
        769
      ]
    ],
    "1037": [
      [
        1048,
        768
      ]
    ],
    "1038": [
      [
        1059,
        774
      ]
    ],
    "1040": [
      null,
      null,
      {
        "774": 1232,
        "776": 1234
      }
    ],
    "1043": [
      null,
      null,
      {
        "769": 1027
      }
    ],
    "1045": [
      null,
      null,
      {
        "768": 1024,
        "774": 1238,
        "776": 1025
      }
    ],
    "1046": [
      null,
      null,
      {
        "774": 1217,
        "776": 1244
      }
    ],
    "1047": [
      null,
      null,
      {
        "776": 1246
      }
    ],
    "1048": [
      null,
      null,
      {
        "768": 1037,
        "772": 1250,
        "774": 1049,
        "776": 1252
      }
    ],
    "1049": [
      [
        1048,
        774
      ]
    ],
    "1050": [
      null,
      null,
      {
        "769": 1036
      }
    ],
    "1054": [
      null,
      null,
      {
        "776": 1254
      }
    ],
    "1059": [
      null,
      null,
      {
        "772": 1262,
        "774": 1038,
        "776": 1264,
        "779": 1266
      }
    ],
    "1063": [
      null,
      null,
      {
        "776": 1268
      }
    ],
    "1067": [
      null,
      null,
      {
        "776": 1272
      }
    ],
    "1069": [
      null,
      null,
      {
        "776": 1260
      }
    ],
    "1072": [
      null,
      null,
      {
        "774": 1233,
        "776": 1235
      }
    ],
    "1075": [
      null,
      null,
      {
        "769": 1107
      }
    ],
    "1077": [
      null,
      null,
      {
        "768": 1104,
        "774": 1239,
        "776": 1105
      }
    ],
    "1078": [
      null,
      null,
      {
        "774": 1218,
        "776": 1245
      }
    ],
    "1079": [
      null,
      null,
      {
        "776": 1247
      }
    ],
    "1080": [
      null,
      null,
      {
        "768": 1117,
        "772": 1251,
        "774": 1081,
        "776": 1253
      }
    ],
    "1081": [
      [
        1080,
        774
      ]
    ],
    "1082": [
      null,
      null,
      {
        "769": 1116
      }
    ],
    "1086": [
      null,
      null,
      {
        "776": 1255
      }
    ],
    "1091": [
      null,
      null,
      {
        "772": 1263,
        "774": 1118,
        "776": 1265,
        "779": 1267
      }
    ],
    "1095": [
      null,
      null,
      {
        "776": 1269
      }
    ],
    "1099": [
      null,
      null,
      {
        "776": 1273
      }
    ],
    "1101": [
      null,
      null,
      {
        "776": 1261
      }
    ],
    "1104": [
      [
        1077,
        768
      ]
    ],
    "1105": [
      [
        1077,
        776
      ]
    ],
    "1107": [
      [
        1075,
        769
      ]
    ],
    "1110": [
      null,
      null,
      {
        "776": 1111
      }
    ],
    "1111": [
      [
        1110,
        776
      ]
    ],
    "1116": [
      [
        1082,
        769
      ]
    ],
    "1117": [
      [
        1080,
        768
      ]
    ],
    "1118": [
      [
        1091,
        774
      ]
    ],
    "1140": [
      null,
      null,
      {
        "783": 1142
      }
    ],
    "1141": [
      null,
      null,
      {
        "783": 1143
      }
    ],
    "1142": [
      [
        1140,
        783
      ]
    ],
    "1143": [
      [
        1141,
        783
      ]
    ],
    "1155": [
      null,
      230
    ],
    "1156": [
      null,
      230
    ],
    "1157": [
      null,
      230
    ],
    "1158": [
      null,
      230
    ],
    "1159": [
      null,
      230
    ],
    "1217": [
      [
        1046,
        774
      ]
    ],
    "1218": [
      [
        1078,
        774
      ]
    ],
    "1232": [
      [
        1040,
        774
      ]
    ],
    "1233": [
      [
        1072,
        774
      ]
    ],
    "1234": [
      [
        1040,
        776
      ]
    ],
    "1235": [
      [
        1072,
        776
      ]
    ],
    "1238": [
      [
        1045,
        774
      ]
    ],
    "1239": [
      [
        1077,
        774
      ]
    ],
    "1240": [
      null,
      null,
      {
        "776": 1242
      }
    ],
    "1241": [
      null,
      null,
      {
        "776": 1243
      }
    ],
    "1242": [
      [
        1240,
        776
      ]
    ],
    "1243": [
      [
        1241,
        776
      ]
    ],
    "1244": [
      [
        1046,
        776
      ]
    ],
    "1245": [
      [
        1078,
        776
      ]
    ],
    "1246": [
      [
        1047,
        776
      ]
    ],
    "1247": [
      [
        1079,
        776
      ]
    ],
    "1250": [
      [
        1048,
        772
      ]
    ],
    "1251": [
      [
        1080,
        772
      ]
    ],
    "1252": [
      [
        1048,
        776
      ]
    ],
    "1253": [
      [
        1080,
        776
      ]
    ],
    "1254": [
      [
        1054,
        776
      ]
    ],
    "1255": [
      [
        1086,
        776
      ]
    ],
    "1256": [
      null,
      null,
      {
        "776": 1258
      }
    ],
    "1257": [
      null,
      null,
      {
        "776": 1259
      }
    ],
    "1258": [
      [
        1256,
        776
      ]
    ],
    "1259": [
      [
        1257,
        776
      ]
    ],
    "1260": [
      [
        1069,
        776
      ]
    ],
    "1261": [
      [
        1101,
        776
      ]
    ],
    "1262": [
      [
        1059,
        772
      ]
    ],
    "1263": [
      [
        1091,
        772
      ]
    ],
    "1264": [
      [
        1059,
        776
      ]
    ],
    "1265": [
      [
        1091,
        776
      ]
    ],
    "1266": [
      [
        1059,
        779
      ]
    ],
    "1267": [
      [
        1091,
        779
      ]
    ],
    "1268": [
      [
        1063,
        776
      ]
    ],
    "1269": [
      [
        1095,
        776
      ]
    ],
    "1272": [
      [
        1067,
        776
      ]
    ],
    "1273": [
      [
        1099,
        776
      ]
    ]
  },
  "1280": {
    "1415": [
      [
        1381,
        1410
      ],
      256
    ],
    "1425": [
      null,
      220
    ],
    "1426": [
      null,
      230
    ],
    "1427": [
      null,
      230
    ],
    "1428": [
      null,
      230
    ],
    "1429": [
      null,
      230
    ],
    "1430": [
      null,
      220
    ],
    "1431": [
      null,
      230
    ],
    "1432": [
      null,
      230
    ],
    "1433": [
      null,
      230
    ],
    "1434": [
      null,
      222
    ],
    "1435": [
      null,
      220
    ],
    "1436": [
      null,
      230
    ],
    "1437": [
      null,
      230
    ],
    "1438": [
      null,
      230
    ],
    "1439": [
      null,
      230
    ],
    "1440": [
      null,
      230
    ],
    "1441": [
      null,
      230
    ],
    "1442": [
      null,
      220
    ],
    "1443": [
      null,
      220
    ],
    "1444": [
      null,
      220
    ],
    "1445": [
      null,
      220
    ],
    "1446": [
      null,
      220
    ],
    "1447": [
      null,
      220
    ],
    "1448": [
      null,
      230
    ],
    "1449": [
      null,
      230
    ],
    "1450": [
      null,
      220
    ],
    "1451": [
      null,
      230
    ],
    "1452": [
      null,
      230
    ],
    "1453": [
      null,
      222
    ],
    "1454": [
      null,
      228
    ],
    "1455": [
      null,
      230
    ],
    "1456": [
      null,
      10
    ],
    "1457": [
      null,
      11
    ],
    "1458": [
      null,
      12
    ],
    "1459": [
      null,
      13
    ],
    "1460": [
      null,
      14
    ],
    "1461": [
      null,
      15
    ],
    "1462": [
      null,
      16
    ],
    "1463": [
      null,
      17
    ],
    "1464": [
      null,
      18
    ],
    "1465": [
      null,
      19
    ],
    "1466": [
      null,
      19
    ],
    "1467": [
      null,
      20
    ],
    "1468": [
      null,
      21
    ],
    "1469": [
      null,
      22
    ],
    "1471": [
      null,
      23
    ],
    "1473": [
      null,
      24
    ],
    "1474": [
      null,
      25
    ],
    "1476": [
      null,
      230
    ],
    "1477": [
      null,
      220
    ],
    "1479": [
      null,
      18
    ]
  },
  "1536": {
    "1552": [
      null,
      230
    ],
    "1553": [
      null,
      230
    ],
    "1554": [
      null,
      230
    ],
    "1555": [
      null,
      230
    ],
    "1556": [
      null,
      230
    ],
    "1557": [
      null,
      230
    ],
    "1558": [
      null,
      230
    ],
    "1559": [
      null,
      230
    ],
    "1560": [
      null,
      30
    ],
    "1561": [
      null,
      31
    ],
    "1562": [
      null,
      32
    ],
    "1570": [
      [
        1575,
        1619
      ]
    ],
    "1571": [
      [
        1575,
        1620
      ]
    ],
    "1572": [
      [
        1608,
        1620
      ]
    ],
    "1573": [
      [
        1575,
        1621
      ]
    ],
    "1574": [
      [
        1610,
        1620
      ]
    ],
    "1575": [
      null,
      null,
      {
        "1619": 1570,
        "1620": 1571,
        "1621": 1573
      }
    ],
    "1608": [
      null,
      null,
      {
        "1620": 1572
      }
    ],
    "1610": [
      null,
      null,
      {
        "1620": 1574
      }
    ],
    "1611": [
      null,
      27
    ],
    "1612": [
      null,
      28
    ],
    "1613": [
      null,
      29
    ],
    "1614": [
      null,
      30
    ],
    "1615": [
      null,
      31
    ],
    "1616": [
      null,
      32
    ],
    "1617": [
      null,
      33
    ],
    "1618": [
      null,
      34
    ],
    "1619": [
      null,
      230
    ],
    "1620": [
      null,
      230
    ],
    "1621": [
      null,
      220
    ],
    "1622": [
      null,
      220
    ],
    "1623": [
      null,
      230
    ],
    "1624": [
      null,
      230
    ],
    "1625": [
      null,
      230
    ],
    "1626": [
      null,
      230
    ],
    "1627": [
      null,
      230
    ],
    "1628": [
      null,
      220
    ],
    "1629": [
      null,
      230
    ],
    "1630": [
      null,
      230
    ],
    "1631": [
      null,
      220
    ],
    "1648": [
      null,
      35
    ],
    "1653": [
      [
        1575,
        1652
      ],
      256
    ],
    "1654": [
      [
        1608,
        1652
      ],
      256
    ],
    "1655": [
      [
        1735,
        1652
      ],
      256
    ],
    "1656": [
      [
        1610,
        1652
      ],
      256
    ],
    "1728": [
      [
        1749,
        1620
      ]
    ],
    "1729": [
      null,
      null,
      {
        "1620": 1730
      }
    ],
    "1730": [
      [
        1729,
        1620
      ]
    ],
    "1746": [
      null,
      null,
      {
        "1620": 1747
      }
    ],
    "1747": [
      [
        1746,
        1620
      ]
    ],
    "1749": [
      null,
      null,
      {
        "1620": 1728
      }
    ],
    "1750": [
      null,
      230
    ],
    "1751": [
      null,
      230
    ],
    "1752": [
      null,
      230
    ],
    "1753": [
      null,
      230
    ],
    "1754": [
      null,
      230
    ],
    "1755": [
      null,
      230
    ],
    "1756": [
      null,
      230
    ],
    "1759": [
      null,
      230
    ],
    "1760": [
      null,
      230
    ],
    "1761": [
      null,
      230
    ],
    "1762": [
      null,
      230
    ],
    "1763": [
      null,
      220
    ],
    "1764": [
      null,
      230
    ],
    "1767": [
      null,
      230
    ],
    "1768": [
      null,
      230
    ],
    "1770": [
      null,
      220
    ],
    "1771": [
      null,
      230
    ],
    "1772": [
      null,
      230
    ],
    "1773": [
      null,
      220
    ]
  },
  "1792": {
    "1809": [
      null,
      36
    ],
    "1840": [
      null,
      230
    ],
    "1841": [
      null,
      220
    ],
    "1842": [
      null,
      230
    ],
    "1843": [
      null,
      230
    ],
    "1844": [
      null,
      220
    ],
    "1845": [
      null,
      230
    ],
    "1846": [
      null,
      230
    ],
    "1847": [
      null,
      220
    ],
    "1848": [
      null,
      220
    ],
    "1849": [
      null,
      220
    ],
    "1850": [
      null,
      230
    ],
    "1851": [
      null,
      220
    ],
    "1852": [
      null,
      220
    ],
    "1853": [
      null,
      230
    ],
    "1854": [
      null,
      220
    ],
    "1855": [
      null,
      230
    ],
    "1856": [
      null,
      230
    ],
    "1857": [
      null,
      230
    ],
    "1858": [
      null,
      220
    ],
    "1859": [
      null,
      230
    ],
    "1860": [
      null,
      220
    ],
    "1861": [
      null,
      230
    ],
    "1862": [
      null,
      220
    ],
    "1863": [
      null,
      230
    ],
    "1864": [
      null,
      220
    ],
    "1865": [
      null,
      230
    ],
    "1866": [
      null,
      230
    ],
    "2027": [
      null,
      230
    ],
    "2028": [
      null,
      230
    ],
    "2029": [
      null,
      230
    ],
    "2030": [
      null,
      230
    ],
    "2031": [
      null,
      230
    ],
    "2032": [
      null,
      230
    ],
    "2033": [
      null,
      230
    ],
    "2034": [
      null,
      220
    ],
    "2035": [
      null,
      230
    ]
  },
  "2048": {
    "2070": [
      null,
      230
    ],
    "2071": [
      null,
      230
    ],
    "2072": [
      null,
      230
    ],
    "2073": [
      null,
      230
    ],
    "2075": [
      null,
      230
    ],
    "2076": [
      null,
      230
    ],
    "2077": [
      null,
      230
    ],
    "2078": [
      null,
      230
    ],
    "2079": [
      null,
      230
    ],
    "2080": [
      null,
      230
    ],
    "2081": [
      null,
      230
    ],
    "2082": [
      null,
      230
    ],
    "2083": [
      null,
      230
    ],
    "2085": [
      null,
      230
    ],
    "2086": [
      null,
      230
    ],
    "2087": [
      null,
      230
    ],
    "2089": [
      null,
      230
    ],
    "2090": [
      null,
      230
    ],
    "2091": [
      null,
      230
    ],
    "2092": [
      null,
      230
    ],
    "2093": [
      null,
      230
    ],
    "2137": [
      null,
      220
    ],
    "2138": [
      null,
      220
    ],
    "2139": [
      null,
      220
    ],
    "2276": [
      null,
      230
    ],
    "2277": [
      null,
      230
    ],
    "2278": [
      null,
      220
    ],
    "2279": [
      null,
      230
    ],
    "2280": [
      null,
      230
    ],
    "2281": [
      null,
      220
    ],
    "2282": [
      null,
      230
    ],
    "2283": [
      null,
      230
    ],
    "2284": [
      null,
      230
    ],
    "2285": [
      null,
      220
    ],
    "2286": [
      null,
      220
    ],
    "2287": [
      null,
      220
    ],
    "2288": [
      null,
      27
    ],
    "2289": [
      null,
      28
    ],
    "2290": [
      null,
      29
    ],
    "2291": [
      null,
      230
    ],
    "2292": [
      null,
      230
    ],
    "2293": [
      null,
      230
    ],
    "2294": [
      null,
      220
    ],
    "2295": [
      null,
      230
    ],
    "2296": [
      null,
      230
    ],
    "2297": [
      null,
      220
    ],
    "2298": [
      null,
      220
    ],
    "2299": [
      null,
      230
    ],
    "2300": [
      null,
      230
    ],
    "2301": [
      null,
      230
    ],
    "2302": [
      null,
      230
    ],
    "2303": [
      null,
      230
    ]
  },
  "2304": {
    "2344": [
      null,
      null,
      {
        "2364": 2345
      }
    ],
    "2345": [
      [
        2344,
        2364
      ]
    ],
    "2352": [
      null,
      null,
      {
        "2364": 2353
      }
    ],
    "2353": [
      [
        2352,
        2364
      ]
    ],
    "2355": [
      null,
      null,
      {
        "2364": 2356
      }
    ],
    "2356": [
      [
        2355,
        2364
      ]
    ],
    "2364": [
      null,
      7
    ],
    "2381": [
      null,
      9
    ],
    "2385": [
      null,
      230
    ],
    "2386": [
      null,
      220
    ],
    "2387": [
      null,
      230
    ],
    "2388": [
      null,
      230
    ],
    "2392": [
      [
        2325,
        2364
      ],
      512
    ],
    "2393": [
      [
        2326,
        2364
      ],
      512
    ],
    "2394": [
      [
        2327,
        2364
      ],
      512
    ],
    "2395": [
      [
        2332,
        2364
      ],
      512
    ],
    "2396": [
      [
        2337,
        2364
      ],
      512
    ],
    "2397": [
      [
        2338,
        2364
      ],
      512
    ],
    "2398": [
      [
        2347,
        2364
      ],
      512
    ],
    "2399": [
      [
        2351,
        2364
      ],
      512
    ],
    "2492": [
      null,
      7
    ],
    "2503": [
      null,
      null,
      {
        "2494": 2507,
        "2519": 2508
      }
    ],
    "2507": [
      [
        2503,
        2494
      ]
    ],
    "2508": [
      [
        2503,
        2519
      ]
    ],
    "2509": [
      null,
      9
    ],
    "2524": [
      [
        2465,
        2492
      ],
      512
    ],
    "2525": [
      [
        2466,
        2492
      ],
      512
    ],
    "2527": [
      [
        2479,
        2492
      ],
      512
    ]
  },
  "2560": {
    "2611": [
      [
        2610,
        2620
      ],
      512
    ],
    "2614": [
      [
        2616,
        2620
      ],
      512
    ],
    "2620": [
      null,
      7
    ],
    "2637": [
      null,
      9
    ],
    "2649": [
      [
        2582,
        2620
      ],
      512
    ],
    "2650": [
      [
        2583,
        2620
      ],
      512
    ],
    "2651": [
      [
        2588,
        2620
      ],
      512
    ],
    "2654": [
      [
        2603,
        2620
      ],
      512
    ],
    "2748": [
      null,
      7
    ],
    "2765": [
      null,
      9
    ],
    "68109": [
      null,
      220
    ],
    "68111": [
      null,
      230
    ],
    "68152": [
      null,
      230
    ],
    "68153": [
      null,
      1
    ],
    "68154": [
      null,
      220
    ],
    "68159": [
      null,
      9
    ],
    "68325": [
      null,
      230
    ],
    "68326": [
      null,
      220
    ]
  },
  "2816": {
    "2876": [
      null,
      7
    ],
    "2887": [
      null,
      null,
      {
        "2878": 2891,
        "2902": 2888,
        "2903": 2892
      }
    ],
    "2888": [
      [
        2887,
        2902
      ]
    ],
    "2891": [
      [
        2887,
        2878
      ]
    ],
    "2892": [
      [
        2887,
        2903
      ]
    ],
    "2893": [
      null,
      9
    ],
    "2908": [
      [
        2849,
        2876
      ],
      512
    ],
    "2909": [
      [
        2850,
        2876
      ],
      512
    ],
    "2962": [
      null,
      null,
      {
        "3031": 2964
      }
    ],
    "2964": [
      [
        2962,
        3031
      ]
    ],
    "3014": [
      null,
      null,
      {
        "3006": 3018,
        "3031": 3020
      }
    ],
    "3015": [
      null,
      null,
      {
        "3006": 3019
      }
    ],
    "3018": [
      [
        3014,
        3006
      ]
    ],
    "3019": [
      [
        3015,
        3006
      ]
    ],
    "3020": [
      [
        3014,
        3031
      ]
    ],
    "3021": [
      null,
      9
    ]
  },
  "3072": {
    "3142": [
      null,
      null,
      {
        "3158": 3144
      }
    ],
    "3144": [
      [
        3142,
        3158
      ]
    ],
    "3149": [
      null,
      9
    ],
    "3157": [
      null,
      84
    ],
    "3158": [
      null,
      91
    ],
    "3260": [
      null,
      7
    ],
    "3263": [
      null,
      null,
      {
        "3285": 3264
      }
    ],
    "3264": [
      [
        3263,
        3285
      ]
    ],
    "3270": [
      null,
      null,
      {
        "3266": 3274,
        "3285": 3271,
        "3286": 3272
      }
    ],
    "3271": [
      [
        3270,
        3285
      ]
    ],
    "3272": [
      [
        3270,
        3286
      ]
    ],
    "3274": [
      [
        3270,
        3266
      ],
      null,
      {
        "3285": 3275
      }
    ],
    "3275": [
      [
        3274,
        3285
      ]
    ],
    "3277": [
      null,
      9
    ]
  },
  "3328": {
    "3398": [
      null,
      null,
      {
        "3390": 3402,
        "3415": 3404
      }
    ],
    "3399": [
      null,
      null,
      {
        "3390": 3403
      }
    ],
    "3402": [
      [
        3398,
        3390
      ]
    ],
    "3403": [
      [
        3399,
        3390
      ]
    ],
    "3404": [
      [
        3398,
        3415
      ]
    ],
    "3405": [
      null,
      9
    ],
    "3530": [
      null,
      9
    ],
    "3545": [
      null,
      null,
      {
        "3530": 3546,
        "3535": 3548,
        "3551": 3550
      }
    ],
    "3546": [
      [
        3545,
        3530
      ]
    ],
    "3548": [
      [
        3545,
        3535
      ],
      null,
      {
        "3530": 3549
      }
    ],
    "3549": [
      [
        3548,
        3530
      ]
    ],
    "3550": [
      [
        3545,
        3551
      ]
    ]
  },
  "3584": {
    "3635": [
      [
        3661,
        3634
      ],
      256
    ],
    "3640": [
      null,
      103
    ],
    "3641": [
      null,
      103
    ],
    "3642": [
      null,
      9
    ],
    "3656": [
      null,
      107
    ],
    "3657": [
      null,
      107
    ],
    "3658": [
      null,
      107
    ],
    "3659": [
      null,
      107
    ],
    "3763": [
      [
        3789,
        3762
      ],
      256
    ],
    "3768": [
      null,
      118
    ],
    "3769": [
      null,
      118
    ],
    "3784": [
      null,
      122
    ],
    "3785": [
      null,
      122
    ],
    "3786": [
      null,
      122
    ],
    "3787": [
      null,
      122
    ],
    "3804": [
      [
        3755,
        3737
      ],
      256
    ],
    "3805": [
      [
        3755,
        3745
      ],
      256
    ]
  },
  "3840": {
    "3852": [
      [
        3851
      ],
      256
    ],
    "3864": [
      null,
      220
    ],
    "3865": [
      null,
      220
    ],
    "3893": [
      null,
      220
    ],
    "3895": [
      null,
      220
    ],
    "3897": [
      null,
      216
    ],
    "3907": [
      [
        3906,
        4023
      ],
      512
    ],
    "3917": [
      [
        3916,
        4023
      ],
      512
    ],
    "3922": [
      [
        3921,
        4023
      ],
      512
    ],
    "3927": [
      [
        3926,
        4023
      ],
      512
    ],
    "3932": [
      [
        3931,
        4023
      ],
      512
    ],
    "3945": [
      [
        3904,
        4021
      ],
      512
    ],
    "3953": [
      null,
      129
    ],
    "3954": [
      null,
      130
    ],
    "3955": [
      [
        3953,
        3954
      ],
      512
    ],
    "3956": [
      null,
      132
    ],
    "3957": [
      [
        3953,
        3956
      ],
      512
    ],
    "3958": [
      [
        4018,
        3968
      ],
      512
    ],
    "3959": [
      [
        4018,
        3969
      ],
      256
    ],
    "3960": [
      [
        4019,
        3968
      ],
      512
    ],
    "3961": [
      [
        4019,
        3969
      ],
      256
    ],
    "3962": [
      null,
      130
    ],
    "3963": [
      null,
      130
    ],
    "3964": [
      null,
      130
    ],
    "3965": [
      null,
      130
    ],
    "3968": [
      null,
      130
    ],
    "3969": [
      [
        3953,
        3968
      ],
      512
    ],
    "3970": [
      null,
      230
    ],
    "3971": [
      null,
      230
    ],
    "3972": [
      null,
      9
    ],
    "3974": [
      null,
      230
    ],
    "3975": [
      null,
      230
    ],
    "3987": [
      [
        3986,
        4023
      ],
      512
    ],
    "3997": [
      [
        3996,
        4023
      ],
      512
    ],
    "4002": [
      [
        4001,
        4023
      ],
      512
    ],
    "4007": [
      [
        4006,
        4023
      ],
      512
    ],
    "4012": [
      [
        4011,
        4023
      ],
      512
    ],
    "4025": [
      [
        3984,
        4021
      ],
      512
    ],
    "4038": [
      null,
      220
    ]
  },
  "4096": {
    "4133": [
      null,
      null,
      {
        "4142": 4134
      }
    ],
    "4134": [
      [
        4133,
        4142
      ]
    ],
    "4151": [
      null,
      7
    ],
    "4153": [
      null,
      9
    ],
    "4154": [
      null,
      9
    ],
    "4237": [
      null,
      220
    ],
    "4348": [
      [
        4316
      ],
      256
    ],
    "69702": [
      null,
      9
    ],
    "69759": [
      null,
      9
    ],
    "69785": [
      null,
      null,
      {
        "69818": 69786
      }
    ],
    "69786": [
      [
        69785,
        69818
      ]
    ],
    "69787": [
      null,
      null,
      {
        "69818": 69788
      }
    ],
    "69788": [
      [
        69787,
        69818
      ]
    ],
    "69797": [
      null,
      null,
      {
        "69818": 69803
      }
    ],
    "69803": [
      [
        69797,
        69818
      ]
    ],
    "69817": [
      null,
      9
    ],
    "69818": [
      null,
      7
    ]
  },
  "4352": {
    "69888": [
      null,
      230
    ],
    "69889": [
      null,
      230
    ],
    "69890": [
      null,
      230
    ],
    "69934": [
      [
        69937,
        69927
      ]
    ],
    "69935": [
      [
        69938,
        69927
      ]
    ],
    "69937": [
      null,
      null,
      {
        "69927": 69934
      }
    ],
    "69938": [
      null,
      null,
      {
        "69927": 69935
      }
    ],
    "69939": [
      null,
      9
    ],
    "69940": [
      null,
      9
    ],
    "70003": [
      null,
      7
    ],
    "70080": [
      null,
      9
    ]
  },
  "4608": {
    "70197": [
      null,
      9
    ],
    "70198": [
      null,
      7
    ],
    "70377": [
      null,
      7
    ],
    "70378": [
      null,
      9
    ]
  },
  "4864": {
    "4957": [
      null,
      230
    ],
    "4958": [
      null,
      230
    ],
    "4959": [
      null,
      230
    ],
    "70460": [
      null,
      7
    ],
    "70471": [
      null,
      null,
      {
        "70462": 70475,
        "70487": 70476
      }
    ],
    "70475": [
      [
        70471,
        70462
      ]
    ],
    "70476": [
      [
        70471,
        70487
      ]
    ],
    "70477": [
      null,
      9
    ],
    "70502": [
      null,
      230
    ],
    "70503": [
      null,
      230
    ],
    "70504": [
      null,
      230
    ],
    "70505": [
      null,
      230
    ],
    "70506": [
      null,
      230
    ],
    "70507": [
      null,
      230
    ],
    "70508": [
      null,
      230
    ],
    "70512": [
      null,
      230
    ],
    "70513": [
      null,
      230
    ],
    "70514": [
      null,
      230
    ],
    "70515": [
      null,
      230
    ],
    "70516": [
      null,
      230
    ]
  },
  "5120": {
    "70841": [
      null,
      null,
      {
        "70832": 70844,
        "70842": 70843,
        "70845": 70846
      }
    ],
    "70843": [
      [
        70841,
        70842
      ]
    ],
    "70844": [
      [
        70841,
        70832
      ]
    ],
    "70846": [
      [
        70841,
        70845
      ]
    ],
    "70850": [
      null,
      9
    ],
    "70851": [
      null,
      7
    ]
  },
  "5376": {
    "71096": [
      null,
      null,
      {
        "71087": 71098
      }
    ],
    "71097": [
      null,
      null,
      {
        "71087": 71099
      }
    ],
    "71098": [
      [
        71096,
        71087
      ]
    ],
    "71099": [
      [
        71097,
        71087
      ]
    ],
    "71103": [
      null,
      9
    ],
    "71104": [
      null,
      7
    ]
  },
  "5632": {
    "71231": [
      null,
      9
    ],
    "71350": [
      null,
      9
    ],
    "71351": [
      null,
      7
    ]
  },
  "5888": {
    "5908": [
      null,
      9
    ],
    "5940": [
      null,
      9
    ],
    "6098": [
      null,
      9
    ],
    "6109": [
      null,
      230
    ]
  },
  "6144": {
    "6313": [
      null,
      228
    ]
  },
  "6400": {
    "6457": [
      null,
      222
    ],
    "6458": [
      null,
      230
    ],
    "6459": [
      null,
      220
    ]
  },
  "6656": {
    "6679": [
      null,
      230
    ],
    "6680": [
      null,
      220
    ],
    "6752": [
      null,
      9
    ],
    "6773": [
      null,
      230
    ],
    "6774": [
      null,
      230
    ],
    "6775": [
      null,
      230
    ],
    "6776": [
      null,
      230
    ],
    "6777": [
      null,
      230
    ],
    "6778": [
      null,
      230
    ],
    "6779": [
      null,
      230
    ],
    "6780": [
      null,
      230
    ],
    "6783": [
      null,
      220
    ],
    "6832": [
      null,
      230
    ],
    "6833": [
      null,
      230
    ],
    "6834": [
      null,
      230
    ],
    "6835": [
      null,
      230
    ],
    "6836": [
      null,
      230
    ],
    "6837": [
      null,
      220
    ],
    "6838": [
      null,
      220
    ],
    "6839": [
      null,
      220
    ],
    "6840": [
      null,
      220
    ],
    "6841": [
      null,
      220
    ],
    "6842": [
      null,
      220
    ],
    "6843": [
      null,
      230
    ],
    "6844": [
      null,
      230
    ],
    "6845": [
      null,
      220
    ]
  },
  "6912": {
    "6917": [
      null,
      null,
      {
        "6965": 6918
      }
    ],
    "6918": [
      [
        6917,
        6965
      ]
    ],
    "6919": [
      null,
      null,
      {
        "6965": 6920
      }
    ],
    "6920": [
      [
        6919,
        6965
      ]
    ],
    "6921": [
      null,
      null,
      {
        "6965": 6922
      }
    ],
    "6922": [
      [
        6921,
        6965
      ]
    ],
    "6923": [
      null,
      null,
      {
        "6965": 6924
      }
    ],
    "6924": [
      [
        6923,
        6965
      ]
    ],
    "6925": [
      null,
      null,
      {
        "6965": 6926
      }
    ],
    "6926": [
      [
        6925,
        6965
      ]
    ],
    "6929": [
      null,
      null,
      {
        "6965": 6930
      }
    ],
    "6930": [
      [
        6929,
        6965
      ]
    ],
    "6964": [
      null,
      7
    ],
    "6970": [
      null,
      null,
      {
        "6965": 6971
      }
    ],
    "6971": [
      [
        6970,
        6965
      ]
    ],
    "6972": [
      null,
      null,
      {
        "6965": 6973
      }
    ],
    "6973": [
      [
        6972,
        6965
      ]
    ],
    "6974": [
      null,
      null,
      {
        "6965": 6976
      }
    ],
    "6975": [
      null,
      null,
      {
        "6965": 6977
      }
    ],
    "6976": [
      [
        6974,
        6965
      ]
    ],
    "6977": [
      [
        6975,
        6965
      ]
    ],
    "6978": [
      null,
      null,
      {
        "6965": 6979
      }
    ],
    "6979": [
      [
        6978,
        6965
      ]
    ],
    "6980": [
      null,
      9
    ],
    "7019": [
      null,
      230
    ],
    "7020": [
      null,
      220
    ],
    "7021": [
      null,
      230
    ],
    "7022": [
      null,
      230
    ],
    "7023": [
      null,
      230
    ],
    "7024": [
      null,
      230
    ],
    "7025": [
      null,
      230
    ],
    "7026": [
      null,
      230
    ],
    "7027": [
      null,
      230
    ],
    "7082": [
      null,
      9
    ],
    "7083": [
      null,
      9
    ],
    "7142": [
      null,
      7
    ],
    "7154": [
      null,
      9
    ],
    "7155": [
      null,
      9
    ]
  },
  "7168": {
    "7223": [
      null,
      7
    ],
    "7376": [
      null,
      230
    ],
    "7377": [
      null,
      230
    ],
    "7378": [
      null,
      230
    ],
    "7380": [
      null,
      1
    ],
    "7381": [
      null,
      220
    ],
    "7382": [
      null,
      220
    ],
    "7383": [
      null,
      220
    ],
    "7384": [
      null,
      220
    ],
    "7385": [
      null,
      220
    ],
    "7386": [
      null,
      230
    ],
    "7387": [
      null,
      230
    ],
    "7388": [
      null,
      220
    ],
    "7389": [
      null,
      220
    ],
    "7390": [
      null,
      220
    ],
    "7391": [
      null,
      220
    ],
    "7392": [
      null,
      230
    ],
    "7394": [
      null,
      1
    ],
    "7395": [
      null,
      1
    ],
    "7396": [
      null,
      1
    ],
    "7397": [
      null,
      1
    ],
    "7398": [
      null,
      1
    ],
    "7399": [
      null,
      1
    ],
    "7400": [
      null,
      1
    ],
    "7405": [
      null,
      220
    ],
    "7412": [
      null,
      230
    ],
    "7416": [
      null,
      230
    ],
    "7417": [
      null,
      230
    ]
  },
  "7424": {
    "7468": [
      [
        65
      ],
      256
    ],
    "7469": [
      [
        198
      ],
      256
    ],
    "7470": [
      [
        66
      ],
      256
    ],
    "7472": [
      [
        68
      ],
      256
    ],
    "7473": [
      [
        69
      ],
      256
    ],
    "7474": [
      [
        398
      ],
      256
    ],
    "7475": [
      [
        71
      ],
      256
    ],
    "7476": [
      [
        72
      ],
      256
    ],
    "7477": [
      [
        73
      ],
      256
    ],
    "7478": [
      [
        74
      ],
      256
    ],
    "7479": [
      [
        75
      ],
      256
    ],
    "7480": [
      [
        76
      ],
      256
    ],
    "7481": [
      [
        77
      ],
      256
    ],
    "7482": [
      [
        78
      ],
      256
    ],
    "7484": [
      [
        79
      ],
      256
    ],
    "7485": [
      [
        546
      ],
      256
    ],
    "7486": [
      [
        80
      ],
      256
    ],
    "7487": [
      [
        82
      ],
      256
    ],
    "7488": [
      [
        84
      ],
      256
    ],
    "7489": [
      [
        85
      ],
      256
    ],
    "7490": [
      [
        87
      ],
      256
    ],
    "7491": [
      [
        97
      ],
      256
    ],
    "7492": [
      [
        592
      ],
      256
    ],
    "7493": [
      [
        593
      ],
      256
    ],
    "7494": [
      [
        7426
      ],
      256
    ],
    "7495": [
      [
        98
      ],
      256
    ],
    "7496": [
      [
        100
      ],
      256
    ],
    "7497": [
      [
        101
      ],
      256
    ],
    "7498": [
      [
        601
      ],
      256
    ],
    "7499": [
      [
        603
      ],
      256
    ],
    "7500": [
      [
        604
      ],
      256
    ],
    "7501": [
      [
        103
      ],
      256
    ],
    "7503": [
      [
        107
      ],
      256
    ],
    "7504": [
      [
        109
      ],
      256
    ],
    "7505": [
      [
        331
      ],
      256
    ],
    "7506": [
      [
        111
      ],
      256
    ],
    "7507": [
      [
        596
      ],
      256
    ],
    "7508": [
      [
        7446
      ],
      256
    ],
    "7509": [
      [
        7447
      ],
      256
    ],
    "7510": [
      [
        112
      ],
      256
    ],
    "7511": [
      [
        116
      ],
      256
    ],
    "7512": [
      [
        117
      ],
      256
    ],
    "7513": [
      [
        7453
      ],
      256
    ],
    "7514": [
      [
        623
      ],
      256
    ],
    "7515": [
      [
        118
      ],
      256
    ],
    "7516": [
      [
        7461
      ],
      256
    ],
    "7517": [
      [
        946
      ],
      256
    ],
    "7518": [
      [
        947
      ],
      256
    ],
    "7519": [
      [
        948
      ],
      256
    ],
    "7520": [
      [
        966
      ],
      256
    ],
    "7521": [
      [
        967
      ],
      256
    ],
    "7522": [
      [
        105
      ],
      256
    ],
    "7523": [
      [
        114
      ],
      256
    ],
    "7524": [
      [
        117
      ],
      256
    ],
    "7525": [
      [
        118
      ],
      256
    ],
    "7526": [
      [
        946
      ],
      256
    ],
    "7527": [
      [
        947
      ],
      256
    ],
    "7528": [
      [
        961
      ],
      256
    ],
    "7529": [
      [
        966
      ],
      256
    ],
    "7530": [
      [
        967
      ],
      256
    ],
    "7544": [
      [
        1085
      ],
      256
    ],
    "7579": [
      [
        594
      ],
      256
    ],
    "7580": [
      [
        99
      ],
      256
    ],
    "7581": [
      [
        597
      ],
      256
    ],
    "7582": [
      [
        240
      ],
      256
    ],
    "7583": [
      [
        604
      ],
      256
    ],
    "7584": [
      [
        102
      ],
      256
    ],
    "7585": [
      [
        607
      ],
      256
    ],
    "7586": [
      [
        609
      ],
      256
    ],
    "7587": [
      [
        613
      ],
      256
    ],
    "7588": [
      [
        616
      ],
      256
    ],
    "7589": [
      [
        617
      ],
      256
    ],
    "7590": [
      [
        618
      ],
      256
    ],
    "7591": [
      [
        7547
      ],
      256
    ],
    "7592": [
      [
        669
      ],
      256
    ],
    "7593": [
      [
        621
      ],
      256
    ],
    "7594": [
      [
        7557
      ],
      256
    ],
    "7595": [
      [
        671
      ],
      256
    ],
    "7596": [
      [
        625
      ],
      256
    ],
    "7597": [
      [
        624
      ],
      256
    ],
    "7598": [
      [
        626
      ],
      256
    ],
    "7599": [
      [
        627
      ],
      256
    ],
    "7600": [
      [
        628
      ],
      256
    ],
    "7601": [
      [
        629
      ],
      256
    ],
    "7602": [
      [
        632
      ],
      256
    ],
    "7603": [
      [
        642
      ],
      256
    ],
    "7604": [
      [
        643
      ],
      256
    ],
    "7605": [
      [
        427
      ],
      256
    ],
    "7606": [
      [
        649
      ],
      256
    ],
    "7607": [
      [
        650
      ],
      256
    ],
    "7608": [
      [
        7452
      ],
      256
    ],
    "7609": [
      [
        651
      ],
      256
    ],
    "7610": [
      [
        652
      ],
      256
    ],
    "7611": [
      [
        122
      ],
      256
    ],
    "7612": [
      [
        656
      ],
      256
    ],
    "7613": [
      [
        657
      ],
      256
    ],
    "7614": [
      [
        658
      ],
      256
    ],
    "7615": [
      [
        952
      ],
      256
    ],
    "7616": [
      null,
      230
    ],
    "7617": [
      null,
      230
    ],
    "7618": [
      null,
      220
    ],
    "7619": [
      null,
      230
    ],
    "7620": [
      null,
      230
    ],
    "7621": [
      null,
      230
    ],
    "7622": [
      null,
      230
    ],
    "7623": [
      null,
      230
    ],
    "7624": [
      null,
      230
    ],
    "7625": [
      null,
      230
    ],
    "7626": [
      null,
      220
    ],
    "7627": [
      null,
      230
    ],
    "7628": [
      null,
      230
    ],
    "7629": [
      null,
      234
    ],
    "7630": [
      null,
      214
    ],
    "7631": [
      null,
      220
    ],
    "7632": [
      null,
      202
    ],
    "7633": [
      null,
      230
    ],
    "7634": [
      null,
      230
    ],
    "7635": [
      null,
      230
    ],
    "7636": [
      null,
      230
    ],
    "7637": [
      null,
      230
    ],
    "7638": [
      null,
      230
    ],
    "7639": [
      null,
      230
    ],
    "7640": [
      null,
      230
    ],
    "7641": [
      null,
      230
    ],
    "7642": [
      null,
      230
    ],
    "7643": [
      null,
      230
    ],
    "7644": [
      null,
      230
    ],
    "7645": [
      null,
      230
    ],
    "7646": [
      null,
      230
    ],
    "7647": [
      null,
      230
    ],
    "7648": [
      null,
      230
    ],
    "7649": [
      null,
      230
    ],
    "7650": [
      null,
      230
    ],
    "7651": [
      null,
      230
    ],
    "7652": [
      null,
      230
    ],
    "7653": [
      null,
      230
    ],
    "7654": [
      null,
      230
    ],
    "7655": [
      null,
      230
    ],
    "7656": [
      null,
      230
    ],
    "7657": [
      null,
      230
    ],
    "7658": [
      null,
      230
    ],
    "7659": [
      null,
      230
    ],
    "7660": [
      null,
      230
    ],
    "7661": [
      null,
      230
    ],
    "7662": [
      null,
      230
    ],
    "7663": [
      null,
      230
    ],
    "7664": [
      null,
      230
    ],
    "7665": [
      null,
      230
    ],
    "7666": [
      null,
      230
    ],
    "7667": [
      null,
      230
    ],
    "7668": [
      null,
      230
    ],
    "7669": [
      null,
      230
    ],
    "7676": [
      null,
      233
    ],
    "7677": [
      null,
      220
    ],
    "7678": [
      null,
      230
    ],
    "7679": [
      null,
      220
    ]
  },
  "7680": {
    "7680": [
      [
        65,
        805
      ]
    ],
    "7681": [
      [
        97,
        805
      ]
    ],
    "7682": [
      [
        66,
        775
      ]
    ],
    "7683": [
      [
        98,
        775
      ]
    ],
    "7684": [
      [
        66,
        803
      ]
    ],
    "7685": [
      [
        98,
        803
      ]
    ],
    "7686": [
      [
        66,
        817
      ]
    ],
    "7687": [
      [
        98,
        817
      ]
    ],
    "7688": [
      [
        199,
        769
      ]
    ],
    "7689": [
      [
        231,
        769
      ]
    ],
    "7690": [
      [
        68,
        775
      ]
    ],
    "7691": [
      [
        100,
        775
      ]
    ],
    "7692": [
      [
        68,
        803
      ]
    ],
    "7693": [
      [
        100,
        803
      ]
    ],
    "7694": [
      [
        68,
        817
      ]
    ],
    "7695": [
      [
        100,
        817
      ]
    ],
    "7696": [
      [
        68,
        807
      ]
    ],
    "7697": [
      [
        100,
        807
      ]
    ],
    "7698": [
      [
        68,
        813
      ]
    ],
    "7699": [
      [
        100,
        813
      ]
    ],
    "7700": [
      [
        274,
        768
      ]
    ],
    "7701": [
      [
        275,
        768
      ]
    ],
    "7702": [
      [
        274,
        769
      ]
    ],
    "7703": [
      [
        275,
        769
      ]
    ],
    "7704": [
      [
        69,
        813
      ]
    ],
    "7705": [
      [
        101,
        813
      ]
    ],
    "7706": [
      [
        69,
        816
      ]
    ],
    "7707": [
      [
        101,
        816
      ]
    ],
    "7708": [
      [
        552,
        774
      ]
    ],
    "7709": [
      [
        553,
        774
      ]
    ],
    "7710": [
      [
        70,
        775
      ]
    ],
    "7711": [
      [
        102,
        775
      ]
    ],
    "7712": [
      [
        71,
        772
      ]
    ],
    "7713": [
      [
        103,
        772
      ]
    ],
    "7714": [
      [
        72,
        775
      ]
    ],
    "7715": [
      [
        104,
        775
      ]
    ],
    "7716": [
      [
        72,
        803
      ]
    ],
    "7717": [
      [
        104,
        803
      ]
    ],
    "7718": [
      [
        72,
        776
      ]
    ],
    "7719": [
      [
        104,
        776
      ]
    ],
    "7720": [
      [
        72,
        807
      ]
    ],
    "7721": [
      [
        104,
        807
      ]
    ],
    "7722": [
      [
        72,
        814
      ]
    ],
    "7723": [
      [
        104,
        814
      ]
    ],
    "7724": [
      [
        73,
        816
      ]
    ],
    "7725": [
      [
        105,
        816
      ]
    ],
    "7726": [
      [
        207,
        769
      ]
    ],
    "7727": [
      [
        239,
        769
      ]
    ],
    "7728": [
      [
        75,
        769
      ]
    ],
    "7729": [
      [
        107,
        769
      ]
    ],
    "7730": [
      [
        75,
        803
      ]
    ],
    "7731": [
      [
        107,
        803
      ]
    ],
    "7732": [
      [
        75,
        817
      ]
    ],
    "7733": [
      [
        107,
        817
      ]
    ],
    "7734": [
      [
        76,
        803
      ],
      null,
      {
        "772": 7736
      }
    ],
    "7735": [
      [
        108,
        803
      ],
      null,
      {
        "772": 7737
      }
    ],
    "7736": [
      [
        7734,
        772
      ]
    ],
    "7737": [
      [
        7735,
        772
      ]
    ],
    "7738": [
      [
        76,
        817
      ]
    ],
    "7739": [
      [
        108,
        817
      ]
    ],
    "7740": [
      [
        76,
        813
      ]
    ],
    "7741": [
      [
        108,
        813
      ]
    ],
    "7742": [
      [
        77,
        769
      ]
    ],
    "7743": [
      [
        109,
        769
      ]
    ],
    "7744": [
      [
        77,
        775
      ]
    ],
    "7745": [
      [
        109,
        775
      ]
    ],
    "7746": [
      [
        77,
        803
      ]
    ],
    "7747": [
      [
        109,
        803
      ]
    ],
    "7748": [
      [
        78,
        775
      ]
    ],
    "7749": [
      [
        110,
        775
      ]
    ],
    "7750": [
      [
        78,
        803
      ]
    ],
    "7751": [
      [
        110,
        803
      ]
    ],
    "7752": [
      [
        78,
        817
      ]
    ],
    "7753": [
      [
        110,
        817
      ]
    ],
    "7754": [
      [
        78,
        813
      ]
    ],
    "7755": [
      [
        110,
        813
      ]
    ],
    "7756": [
      [
        213,
        769
      ]
    ],
    "7757": [
      [
        245,
        769
      ]
    ],
    "7758": [
      [
        213,
        776
      ]
    ],
    "7759": [
      [
        245,
        776
      ]
    ],
    "7760": [
      [
        332,
        768
      ]
    ],
    "7761": [
      [
        333,
        768
      ]
    ],
    "7762": [
      [
        332,
        769
      ]
    ],
    "7763": [
      [
        333,
        769
      ]
    ],
    "7764": [
      [
        80,
        769
      ]
    ],
    "7765": [
      [
        112,
        769
      ]
    ],
    "7766": [
      [
        80,
        775
      ]
    ],
    "7767": [
      [
        112,
        775
      ]
    ],
    "7768": [
      [
        82,
        775
      ]
    ],
    "7769": [
      [
        114,
        775
      ]
    ],
    "7770": [
      [
        82,
        803
      ],
      null,
      {
        "772": 7772
      }
    ],
    "7771": [
      [
        114,
        803
      ],
      null,
      {
        "772": 7773
      }
    ],
    "7772": [
      [
        7770,
        772
      ]
    ],
    "7773": [
      [
        7771,
        772
      ]
    ],
    "7774": [
      [
        82,
        817
      ]
    ],
    "7775": [
      [
        114,
        817
      ]
    ],
    "7776": [
      [
        83,
        775
      ]
    ],
    "7777": [
      [
        115,
        775
      ]
    ],
    "7778": [
      [
        83,
        803
      ],
      null,
      {
        "775": 7784
      }
    ],
    "7779": [
      [
        115,
        803
      ],
      null,
      {
        "775": 7785
      }
    ],
    "7780": [
      [
        346,
        775
      ]
    ],
    "7781": [
      [
        347,
        775
      ]
    ],
    "7782": [
      [
        352,
        775
      ]
    ],
    "7783": [
      [
        353,
        775
      ]
    ],
    "7784": [
      [
        7778,
        775
      ]
    ],
    "7785": [
      [
        7779,
        775
      ]
    ],
    "7786": [
      [
        84,
        775
      ]
    ],
    "7787": [
      [
        116,
        775
      ]
    ],
    "7788": [
      [
        84,
        803
      ]
    ],
    "7789": [
      [
        116,
        803
      ]
    ],
    "7790": [
      [
        84,
        817
      ]
    ],
    "7791": [
      [
        116,
        817
      ]
    ],
    "7792": [
      [
        84,
        813
      ]
    ],
    "7793": [
      [
        116,
        813
      ]
    ],
    "7794": [
      [
        85,
        804
      ]
    ],
    "7795": [
      [
        117,
        804
      ]
    ],
    "7796": [
      [
        85,
        816
      ]
    ],
    "7797": [
      [
        117,
        816
      ]
    ],
    "7798": [
      [
        85,
        813
      ]
    ],
    "7799": [
      [
        117,
        813
      ]
    ],
    "7800": [
      [
        360,
        769
      ]
    ],
    "7801": [
      [
        361,
        769
      ]
    ],
    "7802": [
      [
        362,
        776
      ]
    ],
    "7803": [
      [
        363,
        776
      ]
    ],
    "7804": [
      [
        86,
        771
      ]
    ],
    "7805": [
      [
        118,
        771
      ]
    ],
    "7806": [
      [
        86,
        803
      ]
    ],
    "7807": [
      [
        118,
        803
      ]
    ],
    "7808": [
      [
        87,
        768
      ]
    ],
    "7809": [
      [
        119,
        768
      ]
    ],
    "7810": [
      [
        87,
        769
      ]
    ],
    "7811": [
      [
        119,
        769
      ]
    ],
    "7812": [
      [
        87,
        776
      ]
    ],
    "7813": [
      [
        119,
        776
      ]
    ],
    "7814": [
      [
        87,
        775
      ]
    ],
    "7815": [
      [
        119,
        775
      ]
    ],
    "7816": [
      [
        87,
        803
      ]
    ],
    "7817": [
      [
        119,
        803
      ]
    ],
    "7818": [
      [
        88,
        775
      ]
    ],
    "7819": [
      [
        120,
        775
      ]
    ],
    "7820": [
      [
        88,
        776
      ]
    ],
    "7821": [
      [
        120,
        776
      ]
    ],
    "7822": [
      [
        89,
        775
      ]
    ],
    "7823": [
      [
        121,
        775
      ]
    ],
    "7824": [
      [
        90,
        770
      ]
    ],
    "7825": [
      [
        122,
        770
      ]
    ],
    "7826": [
      [
        90,
        803
      ]
    ],
    "7827": [
      [
        122,
        803
      ]
    ],
    "7828": [
      [
        90,
        817
      ]
    ],
    "7829": [
      [
        122,
        817
      ]
    ],
    "7830": [
      [
        104,
        817
      ]
    ],
    "7831": [
      [
        116,
        776
      ]
    ],
    "7832": [
      [
        119,
        778
      ]
    ],
    "7833": [
      [
        121,
        778
      ]
    ],
    "7834": [
      [
        97,
        702
      ],
      256
    ],
    "7835": [
      [
        383,
        775
      ]
    ],
    "7840": [
      [
        65,
        803
      ],
      null,
      {
        "770": 7852,
        "774": 7862
      }
    ],
    "7841": [
      [
        97,
        803
      ],
      null,
      {
        "770": 7853,
        "774": 7863
      }
    ],
    "7842": [
      [
        65,
        777
      ]
    ],
    "7843": [
      [
        97,
        777
      ]
    ],
    "7844": [
      [
        194,
        769
      ]
    ],
    "7845": [
      [
        226,
        769
      ]
    ],
    "7846": [
      [
        194,
        768
      ]
    ],
    "7847": [
      [
        226,
        768
      ]
    ],
    "7848": [
      [
        194,
        777
      ]
    ],
    "7849": [
      [
        226,
        777
      ]
    ],
    "7850": [
      [
        194,
        771
      ]
    ],
    "7851": [
      [
        226,
        771
      ]
    ],
    "7852": [
      [
        7840,
        770
      ]
    ],
    "7853": [
      [
        7841,
        770
      ]
    ],
    "7854": [
      [
        258,
        769
      ]
    ],
    "7855": [
      [
        259,
        769
      ]
    ],
    "7856": [
      [
        258,
        768
      ]
    ],
    "7857": [
      [
        259,
        768
      ]
    ],
    "7858": [
      [
        258,
        777
      ]
    ],
    "7859": [
      [
        259,
        777
      ]
    ],
    "7860": [
      [
        258,
        771
      ]
    ],
    "7861": [
      [
        259,
        771
      ]
    ],
    "7862": [
      [
        7840,
        774
      ]
    ],
    "7863": [
      [
        7841,
        774
      ]
    ],
    "7864": [
      [
        69,
        803
      ],
      null,
      {
        "770": 7878
      }
    ],
    "7865": [
      [
        101,
        803
      ],
      null,
      {
        "770": 7879
      }
    ],
    "7866": [
      [
        69,
        777
      ]
    ],
    "7867": [
      [
        101,
        777
      ]
    ],
    "7868": [
      [
        69,
        771
      ]
    ],
    "7869": [
      [
        101,
        771
      ]
    ],
    "7870": [
      [
        202,
        769
      ]
    ],
    "7871": [
      [
        234,
        769
      ]
    ],
    "7872": [
      [
        202,
        768
      ]
    ],
    "7873": [
      [
        234,
        768
      ]
    ],
    "7874": [
      [
        202,
        777
      ]
    ],
    "7875": [
      [
        234,
        777
      ]
    ],
    "7876": [
      [
        202,
        771
      ]
    ],
    "7877": [
      [
        234,
        771
      ]
    ],
    "7878": [
      [
        7864,
        770
      ]
    ],
    "7879": [
      [
        7865,
        770
      ]
    ],
    "7880": [
      [
        73,
        777
      ]
    ],
    "7881": [
      [
        105,
        777
      ]
    ],
    "7882": [
      [
        73,
        803
      ]
    ],
    "7883": [
      [
        105,
        803
      ]
    ],
    "7884": [
      [
        79,
        803
      ],
      null,
      {
        "770": 7896
      }
    ],
    "7885": [
      [
        111,
        803
      ],
      null,
      {
        "770": 7897
      }
    ],
    "7886": [
      [
        79,
        777
      ]
    ],
    "7887": [
      [
        111,
        777
      ]
    ],
    "7888": [
      [
        212,
        769
      ]
    ],
    "7889": [
      [
        244,
        769
      ]
    ],
    "7890": [
      [
        212,
        768
      ]
    ],
    "7891": [
      [
        244,
        768
      ]
    ],
    "7892": [
      [
        212,
        777
      ]
    ],
    "7893": [
      [
        244,
        777
      ]
    ],
    "7894": [
      [
        212,
        771
      ]
    ],
    "7895": [
      [
        244,
        771
      ]
    ],
    "7896": [
      [
        7884,
        770
      ]
    ],
    "7897": [
      [
        7885,
        770
      ]
    ],
    "7898": [
      [
        416,
        769
      ]
    ],
    "7899": [
      [
        417,
        769
      ]
    ],
    "7900": [
      [
        416,
        768
      ]
    ],
    "7901": [
      [
        417,
        768
      ]
    ],
    "7902": [
      [
        416,
        777
      ]
    ],
    "7903": [
      [
        417,
        777
      ]
    ],
    "7904": [
      [
        416,
        771
      ]
    ],
    "7905": [
      [
        417,
        771
      ]
    ],
    "7906": [
      [
        416,
        803
      ]
    ],
    "7907": [
      [
        417,
        803
      ]
    ],
    "7908": [
      [
        85,
        803
      ]
    ],
    "7909": [
      [
        117,
        803
      ]
    ],
    "7910": [
      [
        85,
        777
      ]
    ],
    "7911": [
      [
        117,
        777
      ]
    ],
    "7912": [
      [
        431,
        769
      ]
    ],
    "7913": [
      [
        432,
        769
      ]
    ],
    "7914": [
      [
        431,
        768
      ]
    ],
    "7915": [
      [
        432,
        768
      ]
    ],
    "7916": [
      [
        431,
        777
      ]
    ],
    "7917": [
      [
        432,
        777
      ]
    ],
    "7918": [
      [
        431,
        771
      ]
    ],
    "7919": [
      [
        432,
        771
      ]
    ],
    "7920": [
      [
        431,
        803
      ]
    ],
    "7921": [
      [
        432,
        803
      ]
    ],
    "7922": [
      [
        89,
        768
      ]
    ],
    "7923": [
      [
        121,
        768
      ]
    ],
    "7924": [
      [
        89,
        803
      ]
    ],
    "7925": [
      [
        121,
        803
      ]
    ],
    "7926": [
      [
        89,
        777
      ]
    ],
    "7927": [
      [
        121,
        777
      ]
    ],
    "7928": [
      [
        89,
        771
      ]
    ],
    "7929": [
      [
        121,
        771
      ]
    ]
  },
  "7936": {
    "7936": [
      [
        945,
        787
      ],
      null,
      {
        "768": 7938,
        "769": 7940,
        "834": 7942,
        "837": 8064
      }
    ],
    "7937": [
      [
        945,
        788
      ],
      null,
      {
        "768": 7939,
        "769": 7941,
        "834": 7943,
        "837": 8065
      }
    ],
    "7938": [
      [
        7936,
        768
      ],
      null,
      {
        "837": 8066
      }
    ],
    "7939": [
      [
        7937,
        768
      ],
      null,
      {
        "837": 8067
      }
    ],
    "7940": [
      [
        7936,
        769
      ],
      null,
      {
        "837": 8068
      }
    ],
    "7941": [
      [
        7937,
        769
      ],
      null,
      {
        "837": 8069
      }
    ],
    "7942": [
      [
        7936,
        834
      ],
      null,
      {
        "837": 8070
      }
    ],
    "7943": [
      [
        7937,
        834
      ],
      null,
      {
        "837": 8071
      }
    ],
    "7944": [
      [
        913,
        787
      ],
      null,
      {
        "768": 7946,
        "769": 7948,
        "834": 7950,
        "837": 8072
      }
    ],
    "7945": [
      [
        913,
        788
      ],
      null,
      {
        "768": 7947,
        "769": 7949,
        "834": 7951,
        "837": 8073
      }
    ],
    "7946": [
      [
        7944,
        768
      ],
      null,
      {
        "837": 8074
      }
    ],
    "7947": [
      [
        7945,
        768
      ],
      null,
      {
        "837": 8075
      }
    ],
    "7948": [
      [
        7944,
        769
      ],
      null,
      {
        "837": 8076
      }
    ],
    "7949": [
      [
        7945,
        769
      ],
      null,
      {
        "837": 8077
      }
    ],
    "7950": [
      [
        7944,
        834
      ],
      null,
      {
        "837": 8078
      }
    ],
    "7951": [
      [
        7945,
        834
      ],
      null,
      {
        "837": 8079
      }
    ],
    "7952": [
      [
        949,
        787
      ],
      null,
      {
        "768": 7954,
        "769": 7956
      }
    ],
    "7953": [
      [
        949,
        788
      ],
      null,
      {
        "768": 7955,
        "769": 7957
      }
    ],
    "7954": [
      [
        7952,
        768
      ]
    ],
    "7955": [
      [
        7953,
        768
      ]
    ],
    "7956": [
      [
        7952,
        769
      ]
    ],
    "7957": [
      [
        7953,
        769
      ]
    ],
    "7960": [
      [
        917,
        787
      ],
      null,
      {
        "768": 7962,
        "769": 7964
      }
    ],
    "7961": [
      [
        917,
        788
      ],
      null,
      {
        "768": 7963,
        "769": 7965
      }
    ],
    "7962": [
      [
        7960,
        768
      ]
    ],
    "7963": [
      [
        7961,
        768
      ]
    ],
    "7964": [
      [
        7960,
        769
      ]
    ],
    "7965": [
      [
        7961,
        769
      ]
    ],
    "7968": [
      [
        951,
        787
      ],
      null,
      {
        "768": 7970,
        "769": 7972,
        "834": 7974,
        "837": 8080
      }
    ],
    "7969": [
      [
        951,
        788
      ],
      null,
      {
        "768": 7971,
        "769": 7973,
        "834": 7975,
        "837": 8081
      }
    ],
    "7970": [
      [
        7968,
        768
      ],
      null,
      {
        "837": 8082
      }
    ],
    "7971": [
      [
        7969,
        768
      ],
      null,
      {
        "837": 8083
      }
    ],
    "7972": [
      [
        7968,
        769
      ],
      null,
      {
        "837": 8084
      }
    ],
    "7973": [
      [
        7969,
        769
      ],
      null,
      {
        "837": 8085
      }
    ],
    "7974": [
      [
        7968,
        834
      ],
      null,
      {
        "837": 8086
      }
    ],
    "7975": [
      [
        7969,
        834
      ],
      null,
      {
        "837": 8087
      }
    ],
    "7976": [
      [
        919,
        787
      ],
      null,
      {
        "768": 7978,
        "769": 7980,
        "834": 7982,
        "837": 8088
      }
    ],
    "7977": [
      [
        919,
        788
      ],
      null,
      {
        "768": 7979,
        "769": 7981,
        "834": 7983,
        "837": 8089
      }
    ],
    "7978": [
      [
        7976,
        768
      ],
      null,
      {
        "837": 8090
      }
    ],
    "7979": [
      [
        7977,
        768
      ],
      null,
      {
        "837": 8091
      }
    ],
    "7980": [
      [
        7976,
        769
      ],
      null,
      {
        "837": 8092
      }
    ],
    "7981": [
      [
        7977,
        769
      ],
      null,
      {
        "837": 8093
      }
    ],
    "7982": [
      [
        7976,
        834
      ],
      null,
      {
        "837": 8094
      }
    ],
    "7983": [
      [
        7977,
        834
      ],
      null,
      {
        "837": 8095
      }
    ],
    "7984": [
      [
        953,
        787
      ],
      null,
      {
        "768": 7986,
        "769": 7988,
        "834": 7990
      }
    ],
    "7985": [
      [
        953,
        788
      ],
      null,
      {
        "768": 7987,
        "769": 7989,
        "834": 7991
      }
    ],
    "7986": [
      [
        7984,
        768
      ]
    ],
    "7987": [
      [
        7985,
        768
      ]
    ],
    "7988": [
      [
        7984,
        769
      ]
    ],
    "7989": [
      [
        7985,
        769
      ]
    ],
    "7990": [
      [
        7984,
        834
      ]
    ],
    "7991": [
      [
        7985,
        834
      ]
    ],
    "7992": [
      [
        921,
        787
      ],
      null,
      {
        "768": 7994,
        "769": 7996,
        "834": 7998
      }
    ],
    "7993": [
      [
        921,
        788
      ],
      null,
      {
        "768": 7995,
        "769": 7997,
        "834": 7999
      }
    ],
    "7994": [
      [
        7992,
        768
      ]
    ],
    "7995": [
      [
        7993,
        768
      ]
    ],
    "7996": [
      [
        7992,
        769
      ]
    ],
    "7997": [
      [
        7993,
        769
      ]
    ],
    "7998": [
      [
        7992,
        834
      ]
    ],
    "7999": [
      [
        7993,
        834
      ]
    ],
    "8000": [
      [
        959,
        787
      ],
      null,
      {
        "768": 8002,
        "769": 8004
      }
    ],
    "8001": [
      [
        959,
        788
      ],
      null,
      {
        "768": 8003,
        "769": 8005
      }
    ],
    "8002": [
      [
        8000,
        768
      ]
    ],
    "8003": [
      [
        8001,
        768
      ]
    ],
    "8004": [
      [
        8000,
        769
      ]
    ],
    "8005": [
      [
        8001,
        769
      ]
    ],
    "8008": [
      [
        927,
        787
      ],
      null,
      {
        "768": 8010,
        "769": 8012
      }
    ],
    "8009": [
      [
        927,
        788
      ],
      null,
      {
        "768": 8011,
        "769": 8013
      }
    ],
    "8010": [
      [
        8008,
        768
      ]
    ],
    "8011": [
      [
        8009,
        768
      ]
    ],
    "8012": [
      [
        8008,
        769
      ]
    ],
    "8013": [
      [
        8009,
        769
      ]
    ],
    "8016": [
      [
        965,
        787
      ],
      null,
      {
        "768": 8018,
        "769": 8020,
        "834": 8022
      }
    ],
    "8017": [
      [
        965,
        788
      ],
      null,
      {
        "768": 8019,
        "769": 8021,
        "834": 8023
      }
    ],
    "8018": [
      [
        8016,
        768
      ]
    ],
    "8019": [
      [
        8017,
        768
      ]
    ],
    "8020": [
      [
        8016,
        769
      ]
    ],
    "8021": [
      [
        8017,
        769
      ]
    ],
    "8022": [
      [
        8016,
        834
      ]
    ],
    "8023": [
      [
        8017,
        834
      ]
    ],
    "8025": [
      [
        933,
        788
      ],
      null,
      {
        "768": 8027,
        "769": 8029,
        "834": 8031
      }
    ],
    "8027": [
      [
        8025,
        768
      ]
    ],
    "8029": [
      [
        8025,
        769
      ]
    ],
    "8031": [
      [
        8025,
        834
      ]
    ],
    "8032": [
      [
        969,
        787
      ],
      null,
      {
        "768": 8034,
        "769": 8036,
        "834": 8038,
        "837": 8096
      }
    ],
    "8033": [
      [
        969,
        788
      ],
      null,
      {
        "768": 8035,
        "769": 8037,
        "834": 8039,
        "837": 8097
      }
    ],
    "8034": [
      [
        8032,
        768
      ],
      null,
      {
        "837": 8098
      }
    ],
    "8035": [
      [
        8033,
        768
      ],
      null,
      {
        "837": 8099
      }
    ],
    "8036": [
      [
        8032,
        769
      ],
      null,
      {
        "837": 8100
      }
    ],
    "8037": [
      [
        8033,
        769
      ],
      null,
      {
        "837": 8101
      }
    ],
    "8038": [
      [
        8032,
        834
      ],
      null,
      {
        "837": 8102
      }
    ],
    "8039": [
      [
        8033,
        834
      ],
      null,
      {
        "837": 8103
      }
    ],
    "8040": [
      [
        937,
        787
      ],
      null,
      {
        "768": 8042,
        "769": 8044,
        "834": 8046,
        "837": 8104
      }
    ],
    "8041": [
      [
        937,
        788
      ],
      null,
      {
        "768": 8043,
        "769": 8045,
        "834": 8047,
        "837": 8105
      }
    ],
    "8042": [
      [
        8040,
        768
      ],
      null,
      {
        "837": 8106
      }
    ],
    "8043": [
      [
        8041,
        768
      ],
      null,
      {
        "837": 8107
      }
    ],
    "8044": [
      [
        8040,
        769
      ],
      null,
      {
        "837": 8108
      }
    ],
    "8045": [
      [
        8041,
        769
      ],
      null,
      {
        "837": 8109
      }
    ],
    "8046": [
      [
        8040,
        834
      ],
      null,
      {
        "837": 8110
      }
    ],
    "8047": [
      [
        8041,
        834
      ],
      null,
      {
        "837": 8111
      }
    ],
    "8048": [
      [
        945,
        768
      ],
      null,
      {
        "837": 8114
      }
    ],
    "8049": [
      [
        940
      ]
    ],
    "8050": [
      [
        949,
        768
      ]
    ],
    "8051": [
      [
        941
      ]
    ],
    "8052": [
      [
        951,
        768
      ],
      null,
      {
        "837": 8130
      }
    ],
    "8053": [
      [
        942
      ]
    ],
    "8054": [
      [
        953,
        768
      ]
    ],
    "8055": [
      [
        943
      ]
    ],
    "8056": [
      [
        959,
        768
      ]
    ],
    "8057": [
      [
        972
      ]
    ],
    "8058": [
      [
        965,
        768
      ]
    ],
    "8059": [
      [
        973
      ]
    ],
    "8060": [
      [
        969,
        768
      ],
      null,
      {
        "837": 8178
      }
    ],
    "8061": [
      [
        974
      ]
    ],
    "8064": [
      [
        7936,
        837
      ]
    ],
    "8065": [
      [
        7937,
        837
      ]
    ],
    "8066": [
      [
        7938,
        837
      ]
    ],
    "8067": [
      [
        7939,
        837
      ]
    ],
    "8068": [
      [
        7940,
        837
      ]
    ],
    "8069": [
      [
        7941,
        837
      ]
    ],
    "8070": [
      [
        7942,
        837
      ]
    ],
    "8071": [
      [
        7943,
        837
      ]
    ],
    "8072": [
      [
        7944,
        837
      ]
    ],
    "8073": [
      [
        7945,
        837
      ]
    ],
    "8074": [
      [
        7946,
        837
      ]
    ],
    "8075": [
      [
        7947,
        837
      ]
    ],
    "8076": [
      [
        7948,
        837
      ]
    ],
    "8077": [
      [
        7949,
        837
      ]
    ],
    "8078": [
      [
        7950,
        837
      ]
    ],
    "8079": [
      [
        7951,
        837
      ]
    ],
    "8080": [
      [
        7968,
        837
      ]
    ],
    "8081": [
      [
        7969,
        837
      ]
    ],
    "8082": [
      [
        7970,
        837
      ]
    ],
    "8083": [
      [
        7971,
        837
      ]
    ],
    "8084": [
      [
        7972,
        837
      ]
    ],
    "8085": [
      [
        7973,
        837
      ]
    ],
    "8086": [
      [
        7974,
        837
      ]
    ],
    "8087": [
      [
        7975,
        837
      ]
    ],
    "8088": [
      [
        7976,
        837
      ]
    ],
    "8089": [
      [
        7977,
        837
      ]
    ],
    "8090": [
      [
        7978,
        837
      ]
    ],
    "8091": [
      [
        7979,
        837
      ]
    ],
    "8092": [
      [
        7980,
        837
      ]
    ],
    "8093": [
      [
        7981,
        837
      ]
    ],
    "8094": [
      [
        7982,
        837
      ]
    ],
    "8095": [
      [
        7983,
        837
      ]
    ],
    "8096": [
      [
        8032,
        837
      ]
    ],
    "8097": [
      [
        8033,
        837
      ]
    ],
    "8098": [
      [
        8034,
        837
      ]
    ],
    "8099": [
      [
        8035,
        837
      ]
    ],
    "8100": [
      [
        8036,
        837
      ]
    ],
    "8101": [
      [
        8037,
        837
      ]
    ],
    "8102": [
      [
        8038,
        837
      ]
    ],
    "8103": [
      [
        8039,
        837
      ]
    ],
    "8104": [
      [
        8040,
        837
      ]
    ],
    "8105": [
      [
        8041,
        837
      ]
    ],
    "8106": [
      [
        8042,
        837
      ]
    ],
    "8107": [
      [
        8043,
        837
      ]
    ],
    "8108": [
      [
        8044,
        837
      ]
    ],
    "8109": [
      [
        8045,
        837
      ]
    ],
    "8110": [
      [
        8046,
        837
      ]
    ],
    "8111": [
      [
        8047,
        837
      ]
    ],
    "8112": [
      [
        945,
        774
      ]
    ],
    "8113": [
      [
        945,
        772
      ]
    ],
    "8114": [
      [
        8048,
        837
      ]
    ],
    "8115": [
      [
        945,
        837
      ]
    ],
    "8116": [
      [
        940,
        837
      ]
    ],
    "8118": [
      [
        945,
        834
      ],
      null,
      {
        "837": 8119
      }
    ],
    "8119": [
      [
        8118,
        837
      ]
    ],
    "8120": [
      [
        913,
        774
      ]
    ],
    "8121": [
      [
        913,
        772
      ]
    ],
    "8122": [
      [
        913,
        768
      ]
    ],
    "8123": [
      [
        902
      ]
    ],
    "8124": [
      [
        913,
        837
      ]
    ],
    "8125": [
      [
        32,
        787
      ],
      256
    ],
    "8126": [
      [
        953
      ]
    ],
    "8127": [
      [
        32,
        787
      ],
      256,
      {
        "768": 8141,
        "769": 8142,
        "834": 8143
      }
    ],
    "8128": [
      [
        32,
        834
      ],
      256
    ],
    "8129": [
      [
        168,
        834
      ]
    ],
    "8130": [
      [
        8052,
        837
      ]
    ],
    "8131": [
      [
        951,
        837
      ]
    ],
    "8132": [
      [
        942,
        837
      ]
    ],
    "8134": [
      [
        951,
        834
      ],
      null,
      {
        "837": 8135
      }
    ],
    "8135": [
      [
        8134,
        837
      ]
    ],
    "8136": [
      [
        917,
        768
      ]
    ],
    "8137": [
      [
        904
      ]
    ],
    "8138": [
      [
        919,
        768
      ]
    ],
    "8139": [
      [
        905
      ]
    ],
    "8140": [
      [
        919,
        837
      ]
    ],
    "8141": [
      [
        8127,
        768
      ]
    ],
    "8142": [
      [
        8127,
        769
      ]
    ],
    "8143": [
      [
        8127,
        834
      ]
    ],
    "8144": [
      [
        953,
        774
      ]
    ],
    "8145": [
      [
        953,
        772
      ]
    ],
    "8146": [
      [
        970,
        768
      ]
    ],
    "8147": [
      [
        912
      ]
    ],
    "8150": [
      [
        953,
        834
      ]
    ],
    "8151": [
      [
        970,
        834
      ]
    ],
    "8152": [
      [
        921,
        774
      ]
    ],
    "8153": [
      [
        921,
        772
      ]
    ],
    "8154": [
      [
        921,
        768
      ]
    ],
    "8155": [
      [
        906
      ]
    ],
    "8157": [
      [
        8190,
        768
      ]
    ],
    "8158": [
      [
        8190,
        769
      ]
    ],
    "8159": [
      [
        8190,
        834
      ]
    ],
    "8160": [
      [
        965,
        774
      ]
    ],
    "8161": [
      [
        965,
        772
      ]
    ],
    "8162": [
      [
        971,
        768
      ]
    ],
    "8163": [
      [
        944
      ]
    ],
    "8164": [
      [
        961,
        787
      ]
    ],
    "8165": [
      [
        961,
        788
      ]
    ],
    "8166": [
      [
        965,
        834
      ]
    ],
    "8167": [
      [
        971,
        834
      ]
    ],
    "8168": [
      [
        933,
        774
      ]
    ],
    "8169": [
      [
        933,
        772
      ]
    ],
    "8170": [
      [
        933,
        768
      ]
    ],
    "8171": [
      [
        910
      ]
    ],
    "8172": [
      [
        929,
        788
      ]
    ],
    "8173": [
      [
        168,
        768
      ]
    ],
    "8174": [
      [
        901
      ]
    ],
    "8175": [
      [
        96
      ]
    ],
    "8178": [
      [
        8060,
        837
      ]
    ],
    "8179": [
      [
        969,
        837
      ]
    ],
    "8180": [
      [
        974,
        837
      ]
    ],
    "8182": [
      [
        969,
        834
      ],
      null,
      {
        "837": 8183
      }
    ],
    "8183": [
      [
        8182,
        837
      ]
    ],
    "8184": [
      [
        927,
        768
      ]
    ],
    "8185": [
      [
        908
      ]
    ],
    "8186": [
      [
        937,
        768
      ]
    ],
    "8187": [
      [
        911
      ]
    ],
    "8188": [
      [
        937,
        837
      ]
    ],
    "8189": [
      [
        180
      ]
    ],
    "8190": [
      [
        32,
        788
      ],
      256,
      {
        "768": 8157,
        "769": 8158,
        "834": 8159
      }
    ]
  },
  "8192": {
    "8192": [
      [
        8194
      ]
    ],
    "8193": [
      [
        8195
      ]
    ],
    "8194": [
      [
        32
      ],
      256
    ],
    "8195": [
      [
        32
      ],
      256
    ],
    "8196": [
      [
        32
      ],
      256
    ],
    "8197": [
      [
        32
      ],
      256
    ],
    "8198": [
      [
        32
      ],
      256
    ],
    "8199": [
      [
        32
      ],
      256
    ],
    "8200": [
      [
        32
      ],
      256
    ],
    "8201": [
      [
        32
      ],
      256
    ],
    "8202": [
      [
        32
      ],
      256
    ],
    "8209": [
      [
        8208
      ],
      256
    ],
    "8215": [
      [
        32,
        819
      ],
      256
    ],
    "8228": [
      [
        46
      ],
      256
    ],
    "8229": [
      [
        46,
        46
      ],
      256
    ],
    "8230": [
      [
        46,
        46,
        46
      ],
      256
    ],
    "8239": [
      [
        32
      ],
      256
    ],
    "8243": [
      [
        8242,
        8242
      ],
      256
    ],
    "8244": [
      [
        8242,
        8242,
        8242
      ],
      256
    ],
    "8246": [
      [
        8245,
        8245
      ],
      256
    ],
    "8247": [
      [
        8245,
        8245,
        8245
      ],
      256
    ],
    "8252": [
      [
        33,
        33
      ],
      256
    ],
    "8254": [
      [
        32,
        773
      ],
      256
    ],
    "8263": [
      [
        63,
        63
      ],
      256
    ],
    "8264": [
      [
        63,
        33
      ],
      256
    ],
    "8265": [
      [
        33,
        63
      ],
      256
    ],
    "8279": [
      [
        8242,
        8242,
        8242,
        8242
      ],
      256
    ],
    "8287": [
      [
        32
      ],
      256
    ],
    "8304": [
      [
        48
      ],
      256
    ],
    "8305": [
      [
        105
      ],
      256
    ],
    "8308": [
      [
        52
      ],
      256
    ],
    "8309": [
      [
        53
      ],
      256
    ],
    "8310": [
      [
        54
      ],
      256
    ],
    "8311": [
      [
        55
      ],
      256
    ],
    "8312": [
      [
        56
      ],
      256
    ],
    "8313": [
      [
        57
      ],
      256
    ],
    "8314": [
      [
        43
      ],
      256
    ],
    "8315": [
      [
        8722
      ],
      256
    ],
    "8316": [
      [
        61
      ],
      256
    ],
    "8317": [
      [
        40
      ],
      256
    ],
    "8318": [
      [
        41
      ],
      256
    ],
    "8319": [
      [
        110
      ],
      256
    ],
    "8320": [
      [
        48
      ],
      256
    ],
    "8321": [
      [
        49
      ],
      256
    ],
    "8322": [
      [
        50
      ],
      256
    ],
    "8323": [
      [
        51
      ],
      256
    ],
    "8324": [
      [
        52
      ],
      256
    ],
    "8325": [
      [
        53
      ],
      256
    ],
    "8326": [
      [
        54
      ],
      256
    ],
    "8327": [
      [
        55
      ],
      256
    ],
    "8328": [
      [
        56
      ],
      256
    ],
    "8329": [
      [
        57
      ],
      256
    ],
    "8330": [
      [
        43
      ],
      256
    ],
    "8331": [
      [
        8722
      ],
      256
    ],
    "8332": [
      [
        61
      ],
      256
    ],
    "8333": [
      [
        40
      ],
      256
    ],
    "8334": [
      [
        41
      ],
      256
    ],
    "8336": [
      [
        97
      ],
      256
    ],
    "8337": [
      [
        101
      ],
      256
    ],
    "8338": [
      [
        111
      ],
      256
    ],
    "8339": [
      [
        120
      ],
      256
    ],
    "8340": [
      [
        601
      ],
      256
    ],
    "8341": [
      [
        104
      ],
      256
    ],
    "8342": [
      [
        107
      ],
      256
    ],
    "8343": [
      [
        108
      ],
      256
    ],
    "8344": [
      [
        109
      ],
      256
    ],
    "8345": [
      [
        110
      ],
      256
    ],
    "8346": [
      [
        112
      ],
      256
    ],
    "8347": [
      [
        115
      ],
      256
    ],
    "8348": [
      [
        116
      ],
      256
    ],
    "8360": [
      [
        82,
        115
      ],
      256
    ],
    "8400": [
      null,
      230
    ],
    "8401": [
      null,
      230
    ],
    "8402": [
      null,
      1
    ],
    "8403": [
      null,
      1
    ],
    "8404": [
      null,
      230
    ],
    "8405": [
      null,
      230
    ],
    "8406": [
      null,
      230
    ],
    "8407": [
      null,
      230
    ],
    "8408": [
      null,
      1
    ],
    "8409": [
      null,
      1
    ],
    "8410": [
      null,
      1
    ],
    "8411": [
      null,
      230
    ],
    "8412": [
      null,
      230
    ],
    "8417": [
      null,
      230
    ],
    "8421": [
      null,
      1
    ],
    "8422": [
      null,
      1
    ],
    "8423": [
      null,
      230
    ],
    "8424": [
      null,
      220
    ],
    "8425": [
      null,
      230
    ],
    "8426": [
      null,
      1
    ],
    "8427": [
      null,
      1
    ],
    "8428": [
      null,
      220
    ],
    "8429": [
      null,
      220
    ],
    "8430": [
      null,
      220
    ],
    "8431": [
      null,
      220
    ],
    "8432": [
      null,
      230
    ]
  },
  "8448": {
    "8448": [
      [
        97,
        47,
        99
      ],
      256
    ],
    "8449": [
      [
        97,
        47,
        115
      ],
      256
    ],
    "8450": [
      [
        67
      ],
      256
    ],
    "8451": [
      [
        176,
        67
      ],
      256
    ],
    "8453": [
      [
        99,
        47,
        111
      ],
      256
    ],
    "8454": [
      [
        99,
        47,
        117
      ],
      256
    ],
    "8455": [
      [
        400
      ],
      256
    ],
    "8457": [
      [
        176,
        70
      ],
      256
    ],
    "8458": [
      [
        103
      ],
      256
    ],
    "8459": [
      [
        72
      ],
      256
    ],
    "8460": [
      [
        72
      ],
      256
    ],
    "8461": [
      [
        72
      ],
      256
    ],
    "8462": [
      [
        104
      ],
      256
    ],
    "8463": [
      [
        295
      ],
      256
    ],
    "8464": [
      [
        73
      ],
      256
    ],
    "8465": [
      [
        73
      ],
      256
    ],
    "8466": [
      [
        76
      ],
      256
    ],
    "8467": [
      [
        108
      ],
      256
    ],
    "8469": [
      [
        78
      ],
      256
    ],
    "8470": [
      [
        78,
        111
      ],
      256
    ],
    "8473": [
      [
        80
      ],
      256
    ],
    "8474": [
      [
        81
      ],
      256
    ],
    "8475": [
      [
        82
      ],
      256
    ],
    "8476": [
      [
        82
      ],
      256
    ],
    "8477": [
      [
        82
      ],
      256
    ],
    "8480": [
      [
        83,
        77
      ],
      256
    ],
    "8481": [
      [
        84,
        69,
        76
      ],
      256
    ],
    "8482": [
      [
        84,
        77
      ],
      256
    ],
    "8484": [
      [
        90
      ],
      256
    ],
    "8486": [
      [
        937
      ]
    ],
    "8488": [
      [
        90
      ],
      256
    ],
    "8490": [
      [
        75
      ]
    ],
    "8491": [
      [
        197
      ]
    ],
    "8492": [
      [
        66
      ],
      256
    ],
    "8493": [
      [
        67
      ],
      256
    ],
    "8495": [
      [
        101
      ],
      256
    ],
    "8496": [
      [
        69
      ],
      256
    ],
    "8497": [
      [
        70
      ],
      256
    ],
    "8499": [
      [
        77
      ],
      256
    ],
    "8500": [
      [
        111
      ],
      256
    ],
    "8501": [
      [
        1488
      ],
      256
    ],
    "8502": [
      [
        1489
      ],
      256
    ],
    "8503": [
      [
        1490
      ],
      256
    ],
    "8504": [
      [
        1491
      ],
      256
    ],
    "8505": [
      [
        105
      ],
      256
    ],
    "8507": [
      [
        70,
        65,
        88
      ],
      256
    ],
    "8508": [
      [
        960
      ],
      256
    ],
    "8509": [
      [
        947
      ],
      256
    ],
    "8510": [
      [
        915
      ],
      256
    ],
    "8511": [
      [
        928
      ],
      256
    ],
    "8512": [
      [
        8721
      ],
      256
    ],
    "8517": [
      [
        68
      ],
      256
    ],
    "8518": [
      [
        100
      ],
      256
    ],
    "8519": [
      [
        101
      ],
      256
    ],
    "8520": [
      [
        105
      ],
      256
    ],
    "8521": [
      [
        106
      ],
      256
    ],
    "8528": [
      [
        49,
        8260,
        55
      ],
      256
    ],
    "8529": [
      [
        49,
        8260,
        57
      ],
      256
    ],
    "8530": [
      [
        49,
        8260,
        49,
        48
      ],
      256
    ],
    "8531": [
      [
        49,
        8260,
        51
      ],
      256
    ],
    "8532": [
      [
        50,
        8260,
        51
      ],
      256
    ],
    "8533": [
      [
        49,
        8260,
        53
      ],
      256
    ],
    "8534": [
      [
        50,
        8260,
        53
      ],
      256
    ],
    "8535": [
      [
        51,
        8260,
        53
      ],
      256
    ],
    "8536": [
      [
        52,
        8260,
        53
      ],
      256
    ],
    "8537": [
      [
        49,
        8260,
        54
      ],
      256
    ],
    "8538": [
      [
        53,
        8260,
        54
      ],
      256
    ],
    "8539": [
      [
        49,
        8260,
        56
      ],
      256
    ],
    "8540": [
      [
        51,
        8260,
        56
      ],
      256
    ],
    "8541": [
      [
        53,
        8260,
        56
      ],
      256
    ],
    "8542": [
      [
        55,
        8260,
        56
      ],
      256
    ],
    "8543": [
      [
        49,
        8260
      ],
      256
    ],
    "8544": [
      [
        73
      ],
      256
    ],
    "8545": [
      [
        73,
        73
      ],
      256
    ],
    "8546": [
      [
        73,
        73,
        73
      ],
      256
    ],
    "8547": [
      [
        73,
        86
      ],
      256
    ],
    "8548": [
      [
        86
      ],
      256
    ],
    "8549": [
      [
        86,
        73
      ],
      256
    ],
    "8550": [
      [
        86,
        73,
        73
      ],
      256
    ],
    "8551": [
      [
        86,
        73,
        73,
        73
      ],
      256
    ],
    "8552": [
      [
        73,
        88
      ],
      256
    ],
    "8553": [
      [
        88
      ],
      256
    ],
    "8554": [
      [
        88,
        73
      ],
      256
    ],
    "8555": [
      [
        88,
        73,
        73
      ],
      256
    ],
    "8556": [
      [
        76
      ],
      256
    ],
    "8557": [
      [
        67
      ],
      256
    ],
    "8558": [
      [
        68
      ],
      256
    ],
    "8559": [
      [
        77
      ],
      256
    ],
    "8560": [
      [
        105
      ],
      256
    ],
    "8561": [
      [
        105,
        105
      ],
      256
    ],
    "8562": [
      [
        105,
        105,
        105
      ],
      256
    ],
    "8563": [
      [
        105,
        118
      ],
      256
    ],
    "8564": [
      [
        118
      ],
      256
    ],
    "8565": [
      [
        118,
        105
      ],
      256
    ],
    "8566": [
      [
        118,
        105,
        105
      ],
      256
    ],
    "8567": [
      [
        118,
        105,
        105,
        105
      ],
      256
    ],
    "8568": [
      [
        105,
        120
      ],
      256
    ],
    "8569": [
      [
        120
      ],
      256
    ],
    "8570": [
      [
        120,
        105
      ],
      256
    ],
    "8571": [
      [
        120,
        105,
        105
      ],
      256
    ],
    "8572": [
      [
        108
      ],
      256
    ],
    "8573": [
      [
        99
      ],
      256
    ],
    "8574": [
      [
        100
      ],
      256
    ],
    "8575": [
      [
        109
      ],
      256
    ],
    "8585": [
      [
        48,
        8260,
        51
      ],
      256
    ],
    "8592": [
      null,
      null,
      {
        "824": 8602
      }
    ],
    "8594": [
      null,
      null,
      {
        "824": 8603
      }
    ],
    "8596": [
      null,
      null,
      {
        "824": 8622
      }
    ],
    "8602": [
      [
        8592,
        824
      ]
    ],
    "8603": [
      [
        8594,
        824
      ]
    ],
    "8622": [
      [
        8596,
        824
      ]
    ],
    "8653": [
      [
        8656,
        824
      ]
    ],
    "8654": [
      [
        8660,
        824
      ]
    ],
    "8655": [
      [
        8658,
        824
      ]
    ],
    "8656": [
      null,
      null,
      {
        "824": 8653
      }
    ],
    "8658": [
      null,
      null,
      {
        "824": 8655
      }
    ],
    "8660": [
      null,
      null,
      {
        "824": 8654
      }
    ]
  },
  "8704": {
    "8707": [
      null,
      null,
      {
        "824": 8708
      }
    ],
    "8708": [
      [
        8707,
        824
      ]
    ],
    "8712": [
      null,
      null,
      {
        "824": 8713
      }
    ],
    "8713": [
      [
        8712,
        824
      ]
    ],
    "8715": [
      null,
      null,
      {
        "824": 8716
      }
    ],
    "8716": [
      [
        8715,
        824
      ]
    ],
    "8739": [
      null,
      null,
      {
        "824": 8740
      }
    ],
    "8740": [
      [
        8739,
        824
      ]
    ],
    "8741": [
      null,
      null,
      {
        "824": 8742
      }
    ],
    "8742": [
      [
        8741,
        824
      ]
    ],
    "8748": [
      [
        8747,
        8747
      ],
      256
    ],
    "8749": [
      [
        8747,
        8747,
        8747
      ],
      256
    ],
    "8751": [
      [
        8750,
        8750
      ],
      256
    ],
    "8752": [
      [
        8750,
        8750,
        8750
      ],
      256
    ],
    "8764": [
      null,
      null,
      {
        "824": 8769
      }
    ],
    "8769": [
      [
        8764,
        824
      ]
    ],
    "8771": [
      null,
      null,
      {
        "824": 8772
      }
    ],
    "8772": [
      [
        8771,
        824
      ]
    ],
    "8773": [
      null,
      null,
      {
        "824": 8775
      }
    ],
    "8775": [
      [
        8773,
        824
      ]
    ],
    "8776": [
      null,
      null,
      {
        "824": 8777
      }
    ],
    "8777": [
      [
        8776,
        824
      ]
    ],
    "8781": [
      null,
      null,
      {
        "824": 8813
      }
    ],
    "8800": [
      [
        61,
        824
      ]
    ],
    "8801": [
      null,
      null,
      {
        "824": 8802
      }
    ],
    "8802": [
      [
        8801,
        824
      ]
    ],
    "8804": [
      null,
      null,
      {
        "824": 8816
      }
    ],
    "8805": [
      null,
      null,
      {
        "824": 8817
      }
    ],
    "8813": [
      [
        8781,
        824
      ]
    ],
    "8814": [
      [
        60,
        824
      ]
    ],
    "8815": [
      [
        62,
        824
      ]
    ],
    "8816": [
      [
        8804,
        824
      ]
    ],
    "8817": [
      [
        8805,
        824
      ]
    ],
    "8818": [
      null,
      null,
      {
        "824": 8820
      }
    ],
    "8819": [
      null,
      null,
      {
        "824": 8821
      }
    ],
    "8820": [
      [
        8818,
        824
      ]
    ],
    "8821": [
      [
        8819,
        824
      ]
    ],
    "8822": [
      null,
      null,
      {
        "824": 8824
      }
    ],
    "8823": [
      null,
      null,
      {
        "824": 8825
      }
    ],
    "8824": [
      [
        8822,
        824
      ]
    ],
    "8825": [
      [
        8823,
        824
      ]
    ],
    "8826": [
      null,
      null,
      {
        "824": 8832
      }
    ],
    "8827": [
      null,
      null,
      {
        "824": 8833
      }
    ],
    "8828": [
      null,
      null,
      {
        "824": 8928
      }
    ],
    "8829": [
      null,
      null,
      {
        "824": 8929
      }
    ],
    "8832": [
      [
        8826,
        824
      ]
    ],
    "8833": [
      [
        8827,
        824
      ]
    ],
    "8834": [
      null,
      null,
      {
        "824": 8836
      }
    ],
    "8835": [
      null,
      null,
      {
        "824": 8837
      }
    ],
    "8836": [
      [
        8834,
        824
      ]
    ],
    "8837": [
      [
        8835,
        824
      ]
    ],
    "8838": [
      null,
      null,
      {
        "824": 8840
      }
    ],
    "8839": [
      null,
      null,
      {
        "824": 8841
      }
    ],
    "8840": [
      [
        8838,
        824
      ]
    ],
    "8841": [
      [
        8839,
        824
      ]
    ],
    "8849": [
      null,
      null,
      {
        "824": 8930
      }
    ],
    "8850": [
      null,
      null,
      {
        "824": 8931
      }
    ],
    "8866": [
      null,
      null,
      {
        "824": 8876
      }
    ],
    "8872": [
      null,
      null,
      {
        "824": 8877
      }
    ],
    "8873": [
      null,
      null,
      {
        "824": 8878
      }
    ],
    "8875": [
      null,
      null,
      {
        "824": 8879
      }
    ],
    "8876": [
      [
        8866,
        824
      ]
    ],
    "8877": [
      [
        8872,
        824
      ]
    ],
    "8878": [
      [
        8873,
        824
      ]
    ],
    "8879": [
      [
        8875,
        824
      ]
    ],
    "8882": [
      null,
      null,
      {
        "824": 8938
      }
    ],
    "8883": [
      null,
      null,
      {
        "824": 8939
      }
    ],
    "8884": [
      null,
      null,
      {
        "824": 8940
      }
    ],
    "8885": [
      null,
      null,
      {
        "824": 8941
      }
    ],
    "8928": [
      [
        8828,
        824
      ]
    ],
    "8929": [
      [
        8829,
        824
      ]
    ],
    "8930": [
      [
        8849,
        824
      ]
    ],
    "8931": [
      [
        8850,
        824
      ]
    ],
    "8938": [
      [
        8882,
        824
      ]
    ],
    "8939": [
      [
        8883,
        824
      ]
    ],
    "8940": [
      [
        8884,
        824
      ]
    ],
    "8941": [
      [
        8885,
        824
      ]
    ]
  },
  "8960": {
    "9001": [
      [
        12296
      ]
    ],
    "9002": [
      [
        12297
      ]
    ]
  },
  "9216": {
    "9312": [
      [
        49
      ],
      256
    ],
    "9313": [
      [
        50
      ],
      256
    ],
    "9314": [
      [
        51
      ],
      256
    ],
    "9315": [
      [
        52
      ],
      256
    ],
    "9316": [
      [
        53
      ],
      256
    ],
    "9317": [
      [
        54
      ],
      256
    ],
    "9318": [
      [
        55
      ],
      256
    ],
    "9319": [
      [
        56
      ],
      256
    ],
    "9320": [
      [
        57
      ],
      256
    ],
    "9321": [
      [
        49,
        48
      ],
      256
    ],
    "9322": [
      [
        49,
        49
      ],
      256
    ],
    "9323": [
      [
        49,
        50
      ],
      256
    ],
    "9324": [
      [
        49,
        51
      ],
      256
    ],
    "9325": [
      [
        49,
        52
      ],
      256
    ],
    "9326": [
      [
        49,
        53
      ],
      256
    ],
    "9327": [
      [
        49,
        54
      ],
      256
    ],
    "9328": [
      [
        49,
        55
      ],
      256
    ],
    "9329": [
      [
        49,
        56
      ],
      256
    ],
    "9330": [
      [
        49,
        57
      ],
      256
    ],
    "9331": [
      [
        50,
        48
      ],
      256
    ],
    "9332": [
      [
        40,
        49,
        41
      ],
      256
    ],
    "9333": [
      [
        40,
        50,
        41
      ],
      256
    ],
    "9334": [
      [
        40,
        51,
        41
      ],
      256
    ],
    "9335": [
      [
        40,
        52,
        41
      ],
      256
    ],
    "9336": [
      [
        40,
        53,
        41
      ],
      256
    ],
    "9337": [
      [
        40,
        54,
        41
      ],
      256
    ],
    "9338": [
      [
        40,
        55,
        41
      ],
      256
    ],
    "9339": [
      [
        40,
        56,
        41
      ],
      256
    ],
    "9340": [
      [
        40,
        57,
        41
      ],
      256
    ],
    "9341": [
      [
        40,
        49,
        48,
        41
      ],
      256
    ],
    "9342": [
      [
        40,
        49,
        49,
        41
      ],
      256
    ],
    "9343": [
      [
        40,
        49,
        50,
        41
      ],
      256
    ],
    "9344": [
      [
        40,
        49,
        51,
        41
      ],
      256
    ],
    "9345": [
      [
        40,
        49,
        52,
        41
      ],
      256
    ],
    "9346": [
      [
        40,
        49,
        53,
        41
      ],
      256
    ],
    "9347": [
      [
        40,
        49,
        54,
        41
      ],
      256
    ],
    "9348": [
      [
        40,
        49,
        55,
        41
      ],
      256
    ],
    "9349": [
      [
        40,
        49,
        56,
        41
      ],
      256
    ],
    "9350": [
      [
        40,
        49,
        57,
        41
      ],
      256
    ],
    "9351": [
      [
        40,
        50,
        48,
        41
      ],
      256
    ],
    "9352": [
      [
        49,
        46
      ],
      256
    ],
    "9353": [
      [
        50,
        46
      ],
      256
    ],
    "9354": [
      [
        51,
        46
      ],
      256
    ],
    "9355": [
      [
        52,
        46
      ],
      256
    ],
    "9356": [
      [
        53,
        46
      ],
      256
    ],
    "9357": [
      [
        54,
        46
      ],
      256
    ],
    "9358": [
      [
        55,
        46
      ],
      256
    ],
    "9359": [
      [
        56,
        46
      ],
      256
    ],
    "9360": [
      [
        57,
        46
      ],
      256
    ],
    "9361": [
      [
        49,
        48,
        46
      ],
      256
    ],
    "9362": [
      [
        49,
        49,
        46
      ],
      256
    ],
    "9363": [
      [
        49,
        50,
        46
      ],
      256
    ],
    "9364": [
      [
        49,
        51,
        46
      ],
      256
    ],
    "9365": [
      [
        49,
        52,
        46
      ],
      256
    ],
    "9366": [
      [
        49,
        53,
        46
      ],
      256
    ],
    "9367": [
      [
        49,
        54,
        46
      ],
      256
    ],
    "9368": [
      [
        49,
        55,
        46
      ],
      256
    ],
    "9369": [
      [
        49,
        56,
        46
      ],
      256
    ],
    "9370": [
      [
        49,
        57,
        46
      ],
      256
    ],
    "9371": [
      [
        50,
        48,
        46
      ],
      256
    ],
    "9372": [
      [
        40,
        97,
        41
      ],
      256
    ],
    "9373": [
      [
        40,
        98,
        41
      ],
      256
    ],
    "9374": [
      [
        40,
        99,
        41
      ],
      256
    ],
    "9375": [
      [
        40,
        100,
        41
      ],
      256
    ],
    "9376": [
      [
        40,
        101,
        41
      ],
      256
    ],
    "9377": [
      [
        40,
        102,
        41
      ],
      256
    ],
    "9378": [
      [
        40,
        103,
        41
      ],
      256
    ],
    "9379": [
      [
        40,
        104,
        41
      ],
      256
    ],
    "9380": [
      [
        40,
        105,
        41
      ],
      256
    ],
    "9381": [
      [
        40,
        106,
        41
      ],
      256
    ],
    "9382": [
      [
        40,
        107,
        41
      ],
      256
    ],
    "9383": [
      [
        40,
        108,
        41
      ],
      256
    ],
    "9384": [
      [
        40,
        109,
        41
      ],
      256
    ],
    "9385": [
      [
        40,
        110,
        41
      ],
      256
    ],
    "9386": [
      [
        40,
        111,
        41
      ],
      256
    ],
    "9387": [
      [
        40,
        112,
        41
      ],
      256
    ],
    "9388": [
      [
        40,
        113,
        41
      ],
      256
    ],
    "9389": [
      [
        40,
        114,
        41
      ],
      256
    ],
    "9390": [
      [
        40,
        115,
        41
      ],
      256
    ],
    "9391": [
      [
        40,
        116,
        41
      ],
      256
    ],
    "9392": [
      [
        40,
        117,
        41
      ],
      256
    ],
    "9393": [
      [
        40,
        118,
        41
      ],
      256
    ],
    "9394": [
      [
        40,
        119,
        41
      ],
      256
    ],
    "9395": [
      [
        40,
        120,
        41
      ],
      256
    ],
    "9396": [
      [
        40,
        121,
        41
      ],
      256
    ],
    "9397": [
      [
        40,
        122,
        41
      ],
      256
    ],
    "9398": [
      [
        65
      ],
      256
    ],
    "9399": [
      [
        66
      ],
      256
    ],
    "9400": [
      [
        67
      ],
      256
    ],
    "9401": [
      [
        68
      ],
      256
    ],
    "9402": [
      [
        69
      ],
      256
    ],
    "9403": [
      [
        70
      ],
      256
    ],
    "9404": [
      [
        71
      ],
      256
    ],
    "9405": [
      [
        72
      ],
      256
    ],
    "9406": [
      [
        73
      ],
      256
    ],
    "9407": [
      [
        74
      ],
      256
    ],
    "9408": [
      [
        75
      ],
      256
    ],
    "9409": [
      [
        76
      ],
      256
    ],
    "9410": [
      [
        77
      ],
      256
    ],
    "9411": [
      [
        78
      ],
      256
    ],
    "9412": [
      [
        79
      ],
      256
    ],
    "9413": [
      [
        80
      ],
      256
    ],
    "9414": [
      [
        81
      ],
      256
    ],
    "9415": [
      [
        82
      ],
      256
    ],
    "9416": [
      [
        83
      ],
      256
    ],
    "9417": [
      [
        84
      ],
      256
    ],
    "9418": [
      [
        85
      ],
      256
    ],
    "9419": [
      [
        86
      ],
      256
    ],
    "9420": [
      [
        87
      ],
      256
    ],
    "9421": [
      [
        88
      ],
      256
    ],
    "9422": [
      [
        89
      ],
      256
    ],
    "9423": [
      [
        90
      ],
      256
    ],
    "9424": [
      [
        97
      ],
      256
    ],
    "9425": [
      [
        98
      ],
      256
    ],
    "9426": [
      [
        99
      ],
      256
    ],
    "9427": [
      [
        100
      ],
      256
    ],
    "9428": [
      [
        101
      ],
      256
    ],
    "9429": [
      [
        102
      ],
      256
    ],
    "9430": [
      [
        103
      ],
      256
    ],
    "9431": [
      [
        104
      ],
      256
    ],
    "9432": [
      [
        105
      ],
      256
    ],
    "9433": [
      [
        106
      ],
      256
    ],
    "9434": [
      [
        107
      ],
      256
    ],
    "9435": [
      [
        108
      ],
      256
    ],
    "9436": [
      [
        109
      ],
      256
    ],
    "9437": [
      [
        110
      ],
      256
    ],
    "9438": [
      [
        111
      ],
      256
    ],
    "9439": [
      [
        112
      ],
      256
    ],
    "9440": [
      [
        113
      ],
      256
    ],
    "9441": [
      [
        114
      ],
      256
    ],
    "9442": [
      [
        115
      ],
      256
    ],
    "9443": [
      [
        116
      ],
      256
    ],
    "9444": [
      [
        117
      ],
      256
    ],
    "9445": [
      [
        118
      ],
      256
    ],
    "9446": [
      [
        119
      ],
      256
    ],
    "9447": [
      [
        120
      ],
      256
    ],
    "9448": [
      [
        121
      ],
      256
    ],
    "9449": [
      [
        122
      ],
      256
    ],
    "9450": [
      [
        48
      ],
      256
    ]
  },
  "10752": {
    "10764": [
      [
        8747,
        8747,
        8747,
        8747
      ],
      256
    ],
    "10868": [
      [
        58,
        58,
        61
      ],
      256
    ],
    "10869": [
      [
        61,
        61
      ],
      256
    ],
    "10870": [
      [
        61,
        61,
        61
      ],
      256
    ],
    "10972": [
      [
        10973,
        824
      ],
      512
    ]
  },
  "11264": {
    "11388": [
      [
        106
      ],
      256
    ],
    "11389": [
      [
        86
      ],
      256
    ],
    "11503": [
      null,
      230
    ],
    "11504": [
      null,
      230
    ],
    "11505": [
      null,
      230
    ]
  },
  "11520": {
    "11631": [
      [
        11617
      ],
      256
    ],
    "11647": [
      null,
      9
    ],
    "11744": [
      null,
      230
    ],
    "11745": [
      null,
      230
    ],
    "11746": [
      null,
      230
    ],
    "11747": [
      null,
      230
    ],
    "11748": [
      null,
      230
    ],
    "11749": [
      null,
      230
    ],
    "11750": [
      null,
      230
    ],
    "11751": [
      null,
      230
    ],
    "11752": [
      null,
      230
    ],
    "11753": [
      null,
      230
    ],
    "11754": [
      null,
      230
    ],
    "11755": [
      null,
      230
    ],
    "11756": [
      null,
      230
    ],
    "11757": [
      null,
      230
    ],
    "11758": [
      null,
      230
    ],
    "11759": [
      null,
      230
    ],
    "11760": [
      null,
      230
    ],
    "11761": [
      null,
      230
    ],
    "11762": [
      null,
      230
    ],
    "11763": [
      null,
      230
    ],
    "11764": [
      null,
      230
    ],
    "11765": [
      null,
      230
    ],
    "11766": [
      null,
      230
    ],
    "11767": [
      null,
      230
    ],
    "11768": [
      null,
      230
    ],
    "11769": [
      null,
      230
    ],
    "11770": [
      null,
      230
    ],
    "11771": [
      null,
      230
    ],
    "11772": [
      null,
      230
    ],
    "11773": [
      null,
      230
    ],
    "11774": [
      null,
      230
    ],
    "11775": [
      null,
      230
    ]
  },
  "11776": {
    "11935": [
      [
        27597
      ],
      256
    ],
    "12019": [
      [
        40863
      ],
      256
    ]
  },
  "12032": {
    "12032": [
      [
        19968
      ],
      256
    ],
    "12033": [
      [
        20008
      ],
      256
    ],
    "12034": [
      [
        20022
      ],
      256
    ],
    "12035": [
      [
        20031
      ],
      256
    ],
    "12036": [
      [
        20057
      ],
      256
    ],
    "12037": [
      [
        20101
      ],
      256
    ],
    "12038": [
      [
        20108
      ],
      256
    ],
    "12039": [
      [
        20128
      ],
      256
    ],
    "12040": [
      [
        20154
      ],
      256
    ],
    "12041": [
      [
        20799
      ],
      256
    ],
    "12042": [
      [
        20837
      ],
      256
    ],
    "12043": [
      [
        20843
      ],
      256
    ],
    "12044": [
      [
        20866
      ],
      256
    ],
    "12045": [
      [
        20886
      ],
      256
    ],
    "12046": [
      [
        20907
      ],
      256
    ],
    "12047": [
      [
        20960
      ],
      256
    ],
    "12048": [
      [
        20981
      ],
      256
    ],
    "12049": [
      [
        20992
      ],
      256
    ],
    "12050": [
      [
        21147
      ],
      256
    ],
    "12051": [
      [
        21241
      ],
      256
    ],
    "12052": [
      [
        21269
      ],
      256
    ],
    "12053": [
      [
        21274
      ],
      256
    ],
    "12054": [
      [
        21304
      ],
      256
    ],
    "12055": [
      [
        21313
      ],
      256
    ],
    "12056": [
      [
        21340
      ],
      256
    ],
    "12057": [
      [
        21353
      ],
      256
    ],
    "12058": [
      [
        21378
      ],
      256
    ],
    "12059": [
      [
        21430
      ],
      256
    ],
    "12060": [
      [
        21448
      ],
      256
    ],
    "12061": [
      [
        21475
      ],
      256
    ],
    "12062": [
      [
        22231
      ],
      256
    ],
    "12063": [
      [
        22303
      ],
      256
    ],
    "12064": [
      [
        22763
      ],
      256
    ],
    "12065": [
      [
        22786
      ],
      256
    ],
    "12066": [
      [
        22794
      ],
      256
    ],
    "12067": [
      [
        22805
      ],
      256
    ],
    "12068": [
      [
        22823
      ],
      256
    ],
    "12069": [
      [
        22899
      ],
      256
    ],
    "12070": [
      [
        23376
      ],
      256
    ],
    "12071": [
      [
        23424
      ],
      256
    ],
    "12072": [
      [
        23544
      ],
      256
    ],
    "12073": [
      [
        23567
      ],
      256
    ],
    "12074": [
      [
        23586
      ],
      256
    ],
    "12075": [
      [
        23608
      ],
      256
    ],
    "12076": [
      [
        23662
      ],
      256
    ],
    "12077": [
      [
        23665
      ],
      256
    ],
    "12078": [
      [
        24027
      ],
      256
    ],
    "12079": [
      [
        24037
      ],
      256
    ],
    "12080": [
      [
        24049
      ],
      256
    ],
    "12081": [
      [
        24062
      ],
      256
    ],
    "12082": [
      [
        24178
      ],
      256
    ],
    "12083": [
      [
        24186
      ],
      256
    ],
    "12084": [
      [
        24191
      ],
      256
    ],
    "12085": [
      [
        24308
      ],
      256
    ],
    "12086": [
      [
        24318
      ],
      256
    ],
    "12087": [
      [
        24331
      ],
      256
    ],
    "12088": [
      [
        24339
      ],
      256
    ],
    "12089": [
      [
        24400
      ],
      256
    ],
    "12090": [
      [
        24417
      ],
      256
    ],
    "12091": [
      [
        24435
      ],
      256
    ],
    "12092": [
      [
        24515
      ],
      256
    ],
    "12093": [
      [
        25096
      ],
      256
    ],
    "12094": [
      [
        25142
      ],
      256
    ],
    "12095": [
      [
        25163
      ],
      256
    ],
    "12096": [
      [
        25903
      ],
      256
    ],
    "12097": [
      [
        25908
      ],
      256
    ],
    "12098": [
      [
        25991
      ],
      256
    ],
    "12099": [
      [
        26007
      ],
      256
    ],
    "12100": [
      [
        26020
      ],
      256
    ],
    "12101": [
      [
        26041
      ],
      256
    ],
    "12102": [
      [
        26080
      ],
      256
    ],
    "12103": [
      [
        26085
      ],
      256
    ],
    "12104": [
      [
        26352
      ],
      256
    ],
    "12105": [
      [
        26376
      ],
      256
    ],
    "12106": [
      [
        26408
      ],
      256
    ],
    "12107": [
      [
        27424
      ],
      256
    ],
    "12108": [
      [
        27490
      ],
      256
    ],
    "12109": [
      [
        27513
      ],
      256
    ],
    "12110": [
      [
        27571
      ],
      256
    ],
    "12111": [
      [
        27595
      ],
      256
    ],
    "12112": [
      [
        27604
      ],
      256
    ],
    "12113": [
      [
        27611
      ],
      256
    ],
    "12114": [
      [
        27663
      ],
      256
    ],
    "12115": [
      [
        27668
      ],
      256
    ],
    "12116": [
      [
        27700
      ],
      256
    ],
    "12117": [
      [
        28779
      ],
      256
    ],
    "12118": [
      [
        29226
      ],
      256
    ],
    "12119": [
      [
        29238
      ],
      256
    ],
    "12120": [
      [
        29243
      ],
      256
    ],
    "12121": [
      [
        29247
      ],
      256
    ],
    "12122": [
      [
        29255
      ],
      256
    ],
    "12123": [
      [
        29273
      ],
      256
    ],
    "12124": [
      [
        29275
      ],
      256
    ],
    "12125": [
      [
        29356
      ],
      256
    ],
    "12126": [
      [
        29572
      ],
      256
    ],
    "12127": [
      [
        29577
      ],
      256
    ],
    "12128": [
      [
        29916
      ],
      256
    ],
    "12129": [
      [
        29926
      ],
      256
    ],
    "12130": [
      [
        29976
      ],
      256
    ],
    "12131": [
      [
        29983
      ],
      256
    ],
    "12132": [
      [
        29992
      ],
      256
    ],
    "12133": [
      [
        30000
      ],
      256
    ],
    "12134": [
      [
        30091
      ],
      256
    ],
    "12135": [
      [
        30098
      ],
      256
    ],
    "12136": [
      [
        30326
      ],
      256
    ],
    "12137": [
      [
        30333
      ],
      256
    ],
    "12138": [
      [
        30382
      ],
      256
    ],
    "12139": [
      [
        30399
      ],
      256
    ],
    "12140": [
      [
        30446
      ],
      256
    ],
    "12141": [
      [
        30683
      ],
      256
    ],
    "12142": [
      [
        30690
      ],
      256
    ],
    "12143": [
      [
        30707
      ],
      256
    ],
    "12144": [
      [
        31034
      ],
      256
    ],
    "12145": [
      [
        31160
      ],
      256
    ],
    "12146": [
      [
        31166
      ],
      256
    ],
    "12147": [
      [
        31348
      ],
      256
    ],
    "12148": [
      [
        31435
      ],
      256
    ],
    "12149": [
      [
        31481
      ],
      256
    ],
    "12150": [
      [
        31859
      ],
      256
    ],
    "12151": [
      [
        31992
      ],
      256
    ],
    "12152": [
      [
        32566
      ],
      256
    ],
    "12153": [
      [
        32593
      ],
      256
    ],
    "12154": [
      [
        32650
      ],
      256
    ],
    "12155": [
      [
        32701
      ],
      256
    ],
    "12156": [
      [
        32769
      ],
      256
    ],
    "12157": [
      [
        32780
      ],
      256
    ],
    "12158": [
      [
        32786
      ],
      256
    ],
    "12159": [
      [
        32819
      ],
      256
    ],
    "12160": [
      [
        32895
      ],
      256
    ],
    "12161": [
      [
        32905
      ],
      256
    ],
    "12162": [
      [
        33251
      ],
      256
    ],
    "12163": [
      [
        33258
      ],
      256
    ],
    "12164": [
      [
        33267
      ],
      256
    ],
    "12165": [
      [
        33276
      ],
      256
    ],
    "12166": [
      [
        33292
      ],
      256
    ],
    "12167": [
      [
        33307
      ],
      256
    ],
    "12168": [
      [
        33311
      ],
      256
    ],
    "12169": [
      [
        33390
      ],
      256
    ],
    "12170": [
      [
        33394
      ],
      256
    ],
    "12171": [
      [
        33400
      ],
      256
    ],
    "12172": [
      [
        34381
      ],
      256
    ],
    "12173": [
      [
        34411
      ],
      256
    ],
    "12174": [
      [
        34880
      ],
      256
    ],
    "12175": [
      [
        34892
      ],
      256
    ],
    "12176": [
      [
        34915
      ],
      256
    ],
    "12177": [
      [
        35198
      ],
      256
    ],
    "12178": [
      [
        35211
      ],
      256
    ],
    "12179": [
      [
        35282
      ],
      256
    ],
    "12180": [
      [
        35328
      ],
      256
    ],
    "12181": [
      [
        35895
      ],
      256
    ],
    "12182": [
      [
        35910
      ],
      256
    ],
    "12183": [
      [
        35925
      ],
      256
    ],
    "12184": [
      [
        35960
      ],
      256
    ],
    "12185": [
      [
        35997
      ],
      256
    ],
    "12186": [
      [
        36196
      ],
      256
    ],
    "12187": [
      [
        36208
      ],
      256
    ],
    "12188": [
      [
        36275
      ],
      256
    ],
    "12189": [
      [
        36523
      ],
      256
    ],
    "12190": [
      [
        36554
      ],
      256
    ],
    "12191": [
      [
        36763
      ],
      256
    ],
    "12192": [
      [
        36784
      ],
      256
    ],
    "12193": [
      [
        36789
      ],
      256
    ],
    "12194": [
      [
        37009
      ],
      256
    ],
    "12195": [
      [
        37193
      ],
      256
    ],
    "12196": [
      [
        37318
      ],
      256
    ],
    "12197": [
      [
        37324
      ],
      256
    ],
    "12198": [
      [
        37329
      ],
      256
    ],
    "12199": [
      [
        38263
      ],
      256
    ],
    "12200": [
      [
        38272
      ],
      256
    ],
    "12201": [
      [
        38428
      ],
      256
    ],
    "12202": [
      [
        38582
      ],
      256
    ],
    "12203": [
      [
        38585
      ],
      256
    ],
    "12204": [
      [
        38632
      ],
      256
    ],
    "12205": [
      [
        38737
      ],
      256
    ],
    "12206": [
      [
        38750
      ],
      256
    ],
    "12207": [
      [
        38754
      ],
      256
    ],
    "12208": [
      [
        38761
      ],
      256
    ],
    "12209": [
      [
        38859
      ],
      256
    ],
    "12210": [
      [
        38893
      ],
      256
    ],
    "12211": [
      [
        38899
      ],
      256
    ],
    "12212": [
      [
        38913
      ],
      256
    ],
    "12213": [
      [
        39080
      ],
      256
    ],
    "12214": [
      [
        39131
      ],
      256
    ],
    "12215": [
      [
        39135
      ],
      256
    ],
    "12216": [
      [
        39318
      ],
      256
    ],
    "12217": [
      [
        39321
      ],
      256
    ],
    "12218": [
      [
        39340
      ],
      256
    ],
    "12219": [
      [
        39592
      ],
      256
    ],
    "12220": [
      [
        39640
      ],
      256
    ],
    "12221": [
      [
        39647
      ],
      256
    ],
    "12222": [
      [
        39717
      ],
      256
    ],
    "12223": [
      [
        39727
      ],
      256
    ],
    "12224": [
      [
        39730
      ],
      256
    ],
    "12225": [
      [
        39740
      ],
      256
    ],
    "12226": [
      [
        39770
      ],
      256
    ],
    "12227": [
      [
        40165
      ],
      256
    ],
    "12228": [
      [
        40565
      ],
      256
    ],
    "12229": [
      [
        40575
      ],
      256
    ],
    "12230": [
      [
        40613
      ],
      256
    ],
    "12231": [
      [
        40635
      ],
      256
    ],
    "12232": [
      [
        40643
      ],
      256
    ],
    "12233": [
      [
        40653
      ],
      256
    ],
    "12234": [
      [
        40657
      ],
      256
    ],
    "12235": [
      [
        40697
      ],
      256
    ],
    "12236": [
      [
        40701
      ],
      256
    ],
    "12237": [
      [
        40718
      ],
      256
    ],
    "12238": [
      [
        40723
      ],
      256
    ],
    "12239": [
      [
        40736
      ],
      256
    ],
    "12240": [
      [
        40763
      ],
      256
    ],
    "12241": [
      [
        40778
      ],
      256
    ],
    "12242": [
      [
        40786
      ],
      256
    ],
    "12243": [
      [
        40845
      ],
      256
    ],
    "12244": [
      [
        40860
      ],
      256
    ],
    "12245": [
      [
        40864
      ],
      256
    ]
  },
  "12288": {
    "12288": [
      [
        32
      ],
      256
    ],
    "12330": [
      null,
      218
    ],
    "12331": [
      null,
      228
    ],
    "12332": [
      null,
      232
    ],
    "12333": [
      null,
      222
    ],
    "12334": [
      null,
      224
    ],
    "12335": [
      null,
      224
    ],
    "12342": [
      [
        12306
      ],
      256
    ],
    "12344": [
      [
        21313
      ],
      256
    ],
    "12345": [
      [
        21316
      ],
      256
    ],
    "12346": [
      [
        21317
      ],
      256
    ],
    "12358": [
      null,
      null,
      {
        "12441": 12436
      }
    ],
    "12363": [
      null,
      null,
      {
        "12441": 12364
      }
    ],
    "12364": [
      [
        12363,
        12441
      ]
    ],
    "12365": [
      null,
      null,
      {
        "12441": 12366
      }
    ],
    "12366": [
      [
        12365,
        12441
      ]
    ],
    "12367": [
      null,
      null,
      {
        "12441": 12368
      }
    ],
    "12368": [
      [
        12367,
        12441
      ]
    ],
    "12369": [
      null,
      null,
      {
        "12441": 12370
      }
    ],
    "12370": [
      [
        12369,
        12441
      ]
    ],
    "12371": [
      null,
      null,
      {
        "12441": 12372
      }
    ],
    "12372": [
      [
        12371,
        12441
      ]
    ],
    "12373": [
      null,
      null,
      {
        "12441": 12374
      }
    ],
    "12374": [
      [
        12373,
        12441
      ]
    ],
    "12375": [
      null,
      null,
      {
        "12441": 12376
      }
    ],
    "12376": [
      [
        12375,
        12441
      ]
    ],
    "12377": [
      null,
      null,
      {
        "12441": 12378
      }
    ],
    "12378": [
      [
        12377,
        12441
      ]
    ],
    "12379": [
      null,
      null,
      {
        "12441": 12380
      }
    ],
    "12380": [
      [
        12379,
        12441
      ]
    ],
    "12381": [
      null,
      null,
      {
        "12441": 12382
      }
    ],
    "12382": [
      [
        12381,
        12441
      ]
    ],
    "12383": [
      null,
      null,
      {
        "12441": 12384
      }
    ],
    "12384": [
      [
        12383,
        12441
      ]
    ],
    "12385": [
      null,
      null,
      {
        "12441": 12386
      }
    ],
    "12386": [
      [
        12385,
        12441
      ]
    ],
    "12388": [
      null,
      null,
      {
        "12441": 12389
      }
    ],
    "12389": [
      [
        12388,
        12441
      ]
    ],
    "12390": [
      null,
      null,
      {
        "12441": 12391
      }
    ],
    "12391": [
      [
        12390,
        12441
      ]
    ],
    "12392": [
      null,
      null,
      {
        "12441": 12393
      }
    ],
    "12393": [
      [
        12392,
        12441
      ]
    ],
    "12399": [
      null,
      null,
      {
        "12441": 12400,
        "12442": 12401
      }
    ],
    "12400": [
      [
        12399,
        12441
      ]
    ],
    "12401": [
      [
        12399,
        12442
      ]
    ],
    "12402": [
      null,
      null,
      {
        "12441": 12403,
        "12442": 12404
      }
    ],
    "12403": [
      [
        12402,
        12441
      ]
    ],
    "12404": [
      [
        12402,
        12442
      ]
    ],
    "12405": [
      null,
      null,
      {
        "12441": 12406,
        "12442": 12407
      }
    ],
    "12406": [
      [
        12405,
        12441
      ]
    ],
    "12407": [
      [
        12405,
        12442
      ]
    ],
    "12408": [
      null,
      null,
      {
        "12441": 12409,
        "12442": 12410
      }
    ],
    "12409": [
      [
        12408,
        12441
      ]
    ],
    "12410": [
      [
        12408,
        12442
      ]
    ],
    "12411": [
      null,
      null,
      {
        "12441": 12412,
        "12442": 12413
      }
    ],
    "12412": [
      [
        12411,
        12441
      ]
    ],
    "12413": [
      [
        12411,
        12442
      ]
    ],
    "12436": [
      [
        12358,
        12441
      ]
    ],
    "12441": [
      null,
      8
    ],
    "12442": [
      null,
      8
    ],
    "12443": [
      [
        32,
        12441
      ],
      256
    ],
    "12444": [
      [
        32,
        12442
      ],
      256
    ],
    "12445": [
      null,
      null,
      {
        "12441": 12446
      }
    ],
    "12446": [
      [
        12445,
        12441
      ]
    ],
    "12447": [
      [
        12424,
        12426
      ],
      256
    ],
    "12454": [
      null,
      null,
      {
        "12441": 12532
      }
    ],
    "12459": [
      null,
      null,
      {
        "12441": 12460
      }
    ],
    "12460": [
      [
        12459,
        12441
      ]
    ],
    "12461": [
      null,
      null,
      {
        "12441": 12462
      }
    ],
    "12462": [
      [
        12461,
        12441
      ]
    ],
    "12463": [
      null,
      null,
      {
        "12441": 12464
      }
    ],
    "12464": [
      [
        12463,
        12441
      ]
    ],
    "12465": [
      null,
      null,
      {
        "12441": 12466
      }
    ],
    "12466": [
      [
        12465,
        12441
      ]
    ],
    "12467": [
      null,
      null,
      {
        "12441": 12468
      }
    ],
    "12468": [
      [
        12467,
        12441
      ]
    ],
    "12469": [
      null,
      null,
      {
        "12441": 12470
      }
    ],
    "12470": [
      [
        12469,
        12441
      ]
    ],
    "12471": [
      null,
      null,
      {
        "12441": 12472
      }
    ],
    "12472": [
      [
        12471,
        12441
      ]
    ],
    "12473": [
      null,
      null,
      {
        "12441": 12474
      }
    ],
    "12474": [
      [
        12473,
        12441
      ]
    ],
    "12475": [
      null,
      null,
      {
        "12441": 12476
      }
    ],
    "12476": [
      [
        12475,
        12441
      ]
    ],
    "12477": [
      null,
      null,
      {
        "12441": 12478
      }
    ],
    "12478": [
      [
        12477,
        12441
      ]
    ],
    "12479": [
      null,
      null,
      {
        "12441": 12480
      }
    ],
    "12480": [
      [
        12479,
        12441
      ]
    ],
    "12481": [
      null,
      null,
      {
        "12441": 12482
      }
    ],
    "12482": [
      [
        12481,
        12441
      ]
    ],
    "12484": [
      null,
      null,
      {
        "12441": 12485
      }
    ],
    "12485": [
      [
        12484,
        12441
      ]
    ],
    "12486": [
      null,
      null,
      {
        "12441": 12487
      }
    ],
    "12487": [
      [
        12486,
        12441
      ]
    ],
    "12488": [
      null,
      null,
      {
        "12441": 12489
      }
    ],
    "12489": [
      [
        12488,
        12441
      ]
    ],
    "12495": [
      null,
      null,
      {
        "12441": 12496,
        "12442": 12497
      }
    ],
    "12496": [
      [
        12495,
        12441
      ]
    ],
    "12497": [
      [
        12495,
        12442
      ]
    ],
    "12498": [
      null,
      null,
      {
        "12441": 12499,
        "12442": 12500
      }
    ],
    "12499": [
      [
        12498,
        12441
      ]
    ],
    "12500": [
      [
        12498,
        12442
      ]
    ],
    "12501": [
      null,
      null,
      {
        "12441": 12502,
        "12442": 12503
      }
    ],
    "12502": [
      [
        12501,
        12441
      ]
    ],
    "12503": [
      [
        12501,
        12442
      ]
    ],
    "12504": [
      null,
      null,
      {
        "12441": 12505,
        "12442": 12506
      }
    ],
    "12505": [
      [
        12504,
        12441
      ]
    ],
    "12506": [
      [
        12504,
        12442
      ]
    ],
    "12507": [
      null,
      null,
      {
        "12441": 12508,
        "12442": 12509
      }
    ],
    "12508": [
      [
        12507,
        12441
      ]
    ],
    "12509": [
      [
        12507,
        12442
      ]
    ],
    "12527": [
      null,
      null,
      {
        "12441": 12535
      }
    ],
    "12528": [
      null,
      null,
      {
        "12441": 12536
      }
    ],
    "12529": [
      null,
      null,
      {
        "12441": 12537
      }
    ],
    "12530": [
      null,
      null,
      {
        "12441": 12538
      }
    ],
    "12532": [
      [
        12454,
        12441
      ]
    ],
    "12535": [
      [
        12527,
        12441
      ]
    ],
    "12536": [
      [
        12528,
        12441
      ]
    ],
    "12537": [
      [
        12529,
        12441
      ]
    ],
    "12538": [
      [
        12530,
        12441
      ]
    ],
    "12541": [
      null,
      null,
      {
        "12441": 12542
      }
    ],
    "12542": [
      [
        12541,
        12441
      ]
    ],
    "12543": [
      [
        12467,
        12488
      ],
      256
    ]
  },
  "12544": {
    "12593": [
      [
        4352
      ],
      256
    ],
    "12594": [
      [
        4353
      ],
      256
    ],
    "12595": [
      [
        4522
      ],
      256
    ],
    "12596": [
      [
        4354
      ],
      256
    ],
    "12597": [
      [
        4524
      ],
      256
    ],
    "12598": [
      [
        4525
      ],
      256
    ],
    "12599": [
      [
        4355
      ],
      256
    ],
    "12600": [
      [
        4356
      ],
      256
    ],
    "12601": [
      [
        4357
      ],
      256
    ],
    "12602": [
      [
        4528
      ],
      256
    ],
    "12603": [
      [
        4529
      ],
      256
    ],
    "12604": [
      [
        4530
      ],
      256
    ],
    "12605": [
      [
        4531
      ],
      256
    ],
    "12606": [
      [
        4532
      ],
      256
    ],
    "12607": [
      [
        4533
      ],
      256
    ],
    "12608": [
      [
        4378
      ],
      256
    ],
    "12609": [
      [
        4358
      ],
      256
    ],
    "12610": [
      [
        4359
      ],
      256
    ],
    "12611": [
      [
        4360
      ],
      256
    ],
    "12612": [
      [
        4385
      ],
      256
    ],
    "12613": [
      [
        4361
      ],
      256
    ],
    "12614": [
      [
        4362
      ],
      256
    ],
    "12615": [
      [
        4363
      ],
      256
    ],
    "12616": [
      [
        4364
      ],
      256
    ],
    "12617": [
      [
        4365
      ],
      256
    ],
    "12618": [
      [
        4366
      ],
      256
    ],
    "12619": [
      [
        4367
      ],
      256
    ],
    "12620": [
      [
        4368
      ],
      256
    ],
    "12621": [
      [
        4369
      ],
      256
    ],
    "12622": [
      [
        4370
      ],
      256
    ],
    "12623": [
      [
        4449
      ],
      256
    ],
    "12624": [
      [
        4450
      ],
      256
    ],
    "12625": [
      [
        4451
      ],
      256
    ],
    "12626": [
      [
        4452
      ],
      256
    ],
    "12627": [
      [
        4453
      ],
      256
    ],
    "12628": [
      [
        4454
      ],
      256
    ],
    "12629": [
      [
        4455
      ],
      256
    ],
    "12630": [
      [
        4456
      ],
      256
    ],
    "12631": [
      [
        4457
      ],
      256
    ],
    "12632": [
      [
        4458
      ],
      256
    ],
    "12633": [
      [
        4459
      ],
      256
    ],
    "12634": [
      [
        4460
      ],
      256
    ],
    "12635": [
      [
        4461
      ],
      256
    ],
    "12636": [
      [
        4462
      ],
      256
    ],
    "12637": [
      [
        4463
      ],
      256
    ],
    "12638": [
      [
        4464
      ],
      256
    ],
    "12639": [
      [
        4465
      ],
      256
    ],
    "12640": [
      [
        4466
      ],
      256
    ],
    "12641": [
      [
        4467
      ],
      256
    ],
    "12642": [
      [
        4468
      ],
      256
    ],
    "12643": [
      [
        4469
      ],
      256
    ],
    "12644": [
      [
        4448
      ],
      256
    ],
    "12645": [
      [
        4372
      ],
      256
    ],
    "12646": [
      [
        4373
      ],
      256
    ],
    "12647": [
      [
        4551
      ],
      256
    ],
    "12648": [
      [
        4552
      ],
      256
    ],
    "12649": [
      [
        4556
      ],
      256
    ],
    "12650": [
      [
        4558
      ],
      256
    ],
    "12651": [
      [
        4563
      ],
      256
    ],
    "12652": [
      [
        4567
      ],
      256
    ],
    "12653": [
      [
        4569
      ],
      256
    ],
    "12654": [
      [
        4380
      ],
      256
    ],
    "12655": [
      [
        4573
      ],
      256
    ],
    "12656": [
      [
        4575
      ],
      256
    ],
    "12657": [
      [
        4381
      ],
      256
    ],
    "12658": [
      [
        4382
      ],
      256
    ],
    "12659": [
      [
        4384
      ],
      256
    ],
    "12660": [
      [
        4386
      ],
      256
    ],
    "12661": [
      [
        4387
      ],
      256
    ],
    "12662": [
      [
        4391
      ],
      256
    ],
    "12663": [
      [
        4393
      ],
      256
    ],
    "12664": [
      [
        4395
      ],
      256
    ],
    "12665": [
      [
        4396
      ],
      256
    ],
    "12666": [
      [
        4397
      ],
      256
    ],
    "12667": [
      [
        4398
      ],
      256
    ],
    "12668": [
      [
        4399
      ],
      256
    ],
    "12669": [
      [
        4402
      ],
      256
    ],
    "12670": [
      [
        4406
      ],
      256
    ],
    "12671": [
      [
        4416
      ],
      256
    ],
    "12672": [
      [
        4423
      ],
      256
    ],
    "12673": [
      [
        4428
      ],
      256
    ],
    "12674": [
      [
        4593
      ],
      256
    ],
    "12675": [
      [
        4594
      ],
      256
    ],
    "12676": [
      [
        4439
      ],
      256
    ],
    "12677": [
      [
        4440
      ],
      256
    ],
    "12678": [
      [
        4441
      ],
      256
    ],
    "12679": [
      [
        4484
      ],
      256
    ],
    "12680": [
      [
        4485
      ],
      256
    ],
    "12681": [
      [
        4488
      ],
      256
    ],
    "12682": [
      [
        4497
      ],
      256
    ],
    "12683": [
      [
        4498
      ],
      256
    ],
    "12684": [
      [
        4500
      ],
      256
    ],
    "12685": [
      [
        4510
      ],
      256
    ],
    "12686": [
      [
        4513
      ],
      256
    ],
    "12690": [
      [
        19968
      ],
      256
    ],
    "12691": [
      [
        20108
      ],
      256
    ],
    "12692": [
      [
        19977
      ],
      256
    ],
    "12693": [
      [
        22235
      ],
      256
    ],
    "12694": [
      [
        19978
      ],
      256
    ],
    "12695": [
      [
        20013
      ],
      256
    ],
    "12696": [
      [
        19979
      ],
      256
    ],
    "12697": [
      [
        30002
      ],
      256
    ],
    "12698": [
      [
        20057
      ],
      256
    ],
    "12699": [
      [
        19993
      ],
      256
    ],
    "12700": [
      [
        19969
      ],
      256
    ],
    "12701": [
      [
        22825
      ],
      256
    ],
    "12702": [
      [
        22320
      ],
      256
    ],
    "12703": [
      [
        20154
      ],
      256
    ]
  },
  "12800": {
    "12800": [
      [
        40,
        4352,
        41
      ],
      256
    ],
    "12801": [
      [
        40,
        4354,
        41
      ],
      256
    ],
    "12802": [
      [
        40,
        4355,
        41
      ],
      256
    ],
    "12803": [
      [
        40,
        4357,
        41
      ],
      256
    ],
    "12804": [
      [
        40,
        4358,
        41
      ],
      256
    ],
    "12805": [
      [
        40,
        4359,
        41
      ],
      256
    ],
    "12806": [
      [
        40,
        4361,
        41
      ],
      256
    ],
    "12807": [
      [
        40,
        4363,
        41
      ],
      256
    ],
    "12808": [
      [
        40,
        4364,
        41
      ],
      256
    ],
    "12809": [
      [
        40,
        4366,
        41
      ],
      256
    ],
    "12810": [
      [
        40,
        4367,
        41
      ],
      256
    ],
    "12811": [
      [
        40,
        4368,
        41
      ],
      256
    ],
    "12812": [
      [
        40,
        4369,
        41
      ],
      256
    ],
    "12813": [
      [
        40,
        4370,
        41
      ],
      256
    ],
    "12814": [
      [
        40,
        4352,
        4449,
        41
      ],
      256
    ],
    "12815": [
      [
        40,
        4354,
        4449,
        41
      ],
      256
    ],
    "12816": [
      [
        40,
        4355,
        4449,
        41
      ],
      256
    ],
    "12817": [
      [
        40,
        4357,
        4449,
        41
      ],
      256
    ],
    "12818": [
      [
        40,
        4358,
        4449,
        41
      ],
      256
    ],
    "12819": [
      [
        40,
        4359,
        4449,
        41
      ],
      256
    ],
    "12820": [
      [
        40,
        4361,
        4449,
        41
      ],
      256
    ],
    "12821": [
      [
        40,
        4363,
        4449,
        41
      ],
      256
    ],
    "12822": [
      [
        40,
        4364,
        4449,
        41
      ],
      256
    ],
    "12823": [
      [
        40,
        4366,
        4449,
        41
      ],
      256
    ],
    "12824": [
      [
        40,
        4367,
        4449,
        41
      ],
      256
    ],
    "12825": [
      [
        40,
        4368,
        4449,
        41
      ],
      256
    ],
    "12826": [
      [
        40,
        4369,
        4449,
        41
      ],
      256
    ],
    "12827": [
      [
        40,
        4370,
        4449,
        41
      ],
      256
    ],
    "12828": [
      [
        40,
        4364,
        4462,
        41
      ],
      256
    ],
    "12829": [
      [
        40,
        4363,
        4457,
        4364,
        4453,
        4523,
        41
      ],
      256
    ],
    "12830": [
      [
        40,
        4363,
        4457,
        4370,
        4462,
        41
      ],
      256
    ],
    "12832": [
      [
        40,
        19968,
        41
      ],
      256
    ],
    "12833": [
      [
        40,
        20108,
        41
      ],
      256
    ],
    "12834": [
      [
        40,
        19977,
        41
      ],
      256
    ],
    "12835": [
      [
        40,
        22235,
        41
      ],
      256
    ],
    "12836": [
      [
        40,
        20116,
        41
      ],
      256
    ],
    "12837": [
      [
        40,
        20845,
        41
      ],
      256
    ],
    "12838": [
      [
        40,
        19971,
        41
      ],
      256
    ],
    "12839": [
      [
        40,
        20843,
        41
      ],
      256
    ],
    "12840": [
      [
        40,
        20061,
        41
      ],
      256
    ],
    "12841": [
      [
        40,
        21313,
        41
      ],
      256
    ],
    "12842": [
      [
        40,
        26376,
        41
      ],
      256
    ],
    "12843": [
      [
        40,
        28779,
        41
      ],
      256
    ],
    "12844": [
      [
        40,
        27700,
        41
      ],
      256
    ],
    "12845": [
      [
        40,
        26408,
        41
      ],
      256
    ],
    "12846": [
      [
        40,
        37329,
        41
      ],
      256
    ],
    "12847": [
      [
        40,
        22303,
        41
      ],
      256
    ],
    "12848": [
      [
        40,
        26085,
        41
      ],
      256
    ],
    "12849": [
      [
        40,
        26666,
        41
      ],
      256
    ],
    "12850": [
      [
        40,
        26377,
        41
      ],
      256
    ],
    "12851": [
      [
        40,
        31038,
        41
      ],
      256
    ],
    "12852": [
      [
        40,
        21517,
        41
      ],
      256
    ],
    "12853": [
      [
        40,
        29305,
        41
      ],
      256
    ],
    "12854": [
      [
        40,
        36001,
        41
      ],
      256
    ],
    "12855": [
      [
        40,
        31069,
        41
      ],
      256
    ],
    "12856": [
      [
        40,
        21172,
        41
      ],
      256
    ],
    "12857": [
      [
        40,
        20195,
        41
      ],
      256
    ],
    "12858": [
      [
        40,
        21628,
        41
      ],
      256
    ],
    "12859": [
      [
        40,
        23398,
        41
      ],
      256
    ],
    "12860": [
      [
        40,
        30435,
        41
      ],
      256
    ],
    "12861": [
      [
        40,
        20225,
        41
      ],
      256
    ],
    "12862": [
      [
        40,
        36039,
        41
      ],
      256
    ],
    "12863": [
      [
        40,
        21332,
        41
      ],
      256
    ],
    "12864": [
      [
        40,
        31085,
        41
      ],
      256
    ],
    "12865": [
      [
        40,
        20241,
        41
      ],
      256
    ],
    "12866": [
      [
        40,
        33258,
        41
      ],
      256
    ],
    "12867": [
      [
        40,
        33267,
        41
      ],
      256
    ],
    "12868": [
      [
        21839
      ],
      256
    ],
    "12869": [
      [
        24188
      ],
      256
    ],
    "12870": [
      [
        25991
      ],
      256
    ],
    "12871": [
      [
        31631
      ],
      256
    ],
    "12880": [
      [
        80,
        84,
        69
      ],
      256
    ],
    "12881": [
      [
        50,
        49
      ],
      256
    ],
    "12882": [
      [
        50,
        50
      ],
      256
    ],
    "12883": [
      [
        50,
        51
      ],
      256
    ],
    "12884": [
      [
        50,
        52
      ],
      256
    ],
    "12885": [
      [
        50,
        53
      ],
      256
    ],
    "12886": [
      [
        50,
        54
      ],
      256
    ],
    "12887": [
      [
        50,
        55
      ],
      256
    ],
    "12888": [
      [
        50,
        56
      ],
      256
    ],
    "12889": [
      [
        50,
        57
      ],
      256
    ],
    "12890": [
      [
        51,
        48
      ],
      256
    ],
    "12891": [
      [
        51,
        49
      ],
      256
    ],
    "12892": [
      [
        51,
        50
      ],
      256
    ],
    "12893": [
      [
        51,
        51
      ],
      256
    ],
    "12894": [
      [
        51,
        52
      ],
      256
    ],
    "12895": [
      [
        51,
        53
      ],
      256
    ],
    "12896": [
      [
        4352
      ],
      256
    ],
    "12897": [
      [
        4354
      ],
      256
    ],
    "12898": [
      [
        4355
      ],
      256
    ],
    "12899": [
      [
        4357
      ],
      256
    ],
    "12900": [
      [
        4358
      ],
      256
    ],
    "12901": [
      [
        4359
      ],
      256
    ],
    "12902": [
      [
        4361
      ],
      256
    ],
    "12903": [
      [
        4363
      ],
      256
    ],
    "12904": [
      [
        4364
      ],
      256
    ],
    "12905": [
      [
        4366
      ],
      256
    ],
    "12906": [
      [
        4367
      ],
      256
    ],
    "12907": [
      [
        4368
      ],
      256
    ],
    "12908": [
      [
        4369
      ],
      256
    ],
    "12909": [
      [
        4370
      ],
      256
    ],
    "12910": [
      [
        4352,
        4449
      ],
      256
    ],
    "12911": [
      [
        4354,
        4449
      ],
      256
    ],
    "12912": [
      [
        4355,
        4449
      ],
      256
    ],
    "12913": [
      [
        4357,
        4449
      ],
      256
    ],
    "12914": [
      [
        4358,
        4449
      ],
      256
    ],
    "12915": [
      [
        4359,
        4449
      ],
      256
    ],
    "12916": [
      [
        4361,
        4449
      ],
      256
    ],
    "12917": [
      [
        4363,
        4449
      ],
      256
    ],
    "12918": [
      [
        4364,
        4449
      ],
      256
    ],
    "12919": [
      [
        4366,
        4449
      ],
      256
    ],
    "12920": [
      [
        4367,
        4449
      ],
      256
    ],
    "12921": [
      [
        4368,
        4449
      ],
      256
    ],
    "12922": [
      [
        4369,
        4449
      ],
      256
    ],
    "12923": [
      [
        4370,
        4449
      ],
      256
    ],
    "12924": [
      [
        4366,
        4449,
        4535,
        4352,
        4457
      ],
      256
    ],
    "12925": [
      [
        4364,
        4462,
        4363,
        4468
      ],
      256
    ],
    "12926": [
      [
        4363,
        4462
      ],
      256
    ],
    "12928": [
      [
        19968
      ],
      256
    ],
    "12929": [
      [
        20108
      ],
      256
    ],
    "12930": [
      [
        19977
      ],
      256
    ],
    "12931": [
      [
        22235
      ],
      256
    ],
    "12932": [
      [
        20116
      ],
      256
    ],
    "12933": [
      [
        20845
      ],
      256
    ],
    "12934": [
      [
        19971
      ],
      256
    ],
    "12935": [
      [
        20843
      ],
      256
    ],
    "12936": [
      [
        20061
      ],
      256
    ],
    "12937": [
      [
        21313
      ],
      256
    ],
    "12938": [
      [
        26376
      ],
      256
    ],
    "12939": [
      [
        28779
      ],
      256
    ],
    "12940": [
      [
        27700
      ],
      256
    ],
    "12941": [
      [
        26408
      ],
      256
    ],
    "12942": [
      [
        37329
      ],
      256
    ],
    "12943": [
      [
        22303
      ],
      256
    ],
    "12944": [
      [
        26085
      ],
      256
    ],
    "12945": [
      [
        26666
      ],
      256
    ],
    "12946": [
      [
        26377
      ],
      256
    ],
    "12947": [
      [
        31038
      ],
      256
    ],
    "12948": [
      [
        21517
      ],
      256
    ],
    "12949": [
      [
        29305
      ],
      256
    ],
    "12950": [
      [
        36001
      ],
      256
    ],
    "12951": [
      [
        31069
      ],
      256
    ],
    "12952": [
      [
        21172
      ],
      256
    ],
    "12953": [
      [
        31192
      ],
      256
    ],
    "12954": [
      [
        30007
      ],
      256
    ],
    "12955": [
      [
        22899
      ],
      256
    ],
    "12956": [
      [
        36969
      ],
      256
    ],
    "12957": [
      [
        20778
      ],
      256
    ],
    "12958": [
      [
        21360
      ],
      256
    ],
    "12959": [
      [
        27880
      ],
      256
    ],
    "12960": [
      [
        38917
      ],
      256
    ],
    "12961": [
      [
        20241
      ],
      256
    ],
    "12962": [
      [
        20889
      ],
      256
    ],
    "12963": [
      [
        27491
      ],
      256
    ],
    "12964": [
      [
        19978
      ],
      256
    ],
    "12965": [
      [
        20013
      ],
      256
    ],
    "12966": [
      [
        19979
      ],
      256
    ],
    "12967": [
      [
        24038
      ],
      256
    ],
    "12968": [
      [
        21491
      ],
      256
    ],
    "12969": [
      [
        21307
      ],
      256
    ],
    "12970": [
      [
        23447
      ],
      256
    ],
    "12971": [
      [
        23398
      ],
      256
    ],
    "12972": [
      [
        30435
      ],
      256
    ],
    "12973": [
      [
        20225
      ],
      256
    ],
    "12974": [
      [
        36039
      ],
      256
    ],
    "12975": [
      [
        21332
      ],
      256
    ],
    "12976": [
      [
        22812
      ],
      256
    ],
    "12977": [
      [
        51,
        54
      ],
      256
    ],
    "12978": [
      [
        51,
        55
      ],
      256
    ],
    "12979": [
      [
        51,
        56
      ],
      256
    ],
    "12980": [
      [
        51,
        57
      ],
      256
    ],
    "12981": [
      [
        52,
        48
      ],
      256
    ],
    "12982": [
      [
        52,
        49
      ],
      256
    ],
    "12983": [
      [
        52,
        50
      ],
      256
    ],
    "12984": [
      [
        52,
        51
      ],
      256
    ],
    "12985": [
      [
        52,
        52
      ],
      256
    ],
    "12986": [
      [
        52,
        53
      ],
      256
    ],
    "12987": [
      [
        52,
        54
      ],
      256
    ],
    "12988": [
      [
        52,
        55
      ],
      256
    ],
    "12989": [
      [
        52,
        56
      ],
      256
    ],
    "12990": [
      [
        52,
        57
      ],
      256
    ],
    "12991": [
      [
        53,
        48
      ],
      256
    ],
    "12992": [
      [
        49,
        26376
      ],
      256
    ],
    "12993": [
      [
        50,
        26376
      ],
      256
    ],
    "12994": [
      [
        51,
        26376
      ],
      256
    ],
    "12995": [
      [
        52,
        26376
      ],
      256
    ],
    "12996": [
      [
        53,
        26376
      ],
      256
    ],
    "12997": [
      [
        54,
        26376
      ],
      256
    ],
    "12998": [
      [
        55,
        26376
      ],
      256
    ],
    "12999": [
      [
        56,
        26376
      ],
      256
    ],
    "13000": [
      [
        57,
        26376
      ],
      256
    ],
    "13001": [
      [
        49,
        48,
        26376
      ],
      256
    ],
    "13002": [
      [
        49,
        49,
        26376
      ],
      256
    ],
    "13003": [
      [
        49,
        50,
        26376
      ],
      256
    ],
    "13004": [
      [
        72,
        103
      ],
      256
    ],
    "13005": [
      [
        101,
        114,
        103
      ],
      256
    ],
    "13006": [
      [
        101,
        86
      ],
      256
    ],
    "13007": [
      [
        76,
        84,
        68
      ],
      256
    ],
    "13008": [
      [
        12450
      ],
      256
    ],
    "13009": [
      [
        12452
      ],
      256
    ],
    "13010": [
      [
        12454
      ],
      256
    ],
    "13011": [
      [
        12456
      ],
      256
    ],
    "13012": [
      [
        12458
      ],
      256
    ],
    "13013": [
      [
        12459
      ],
      256
    ],
    "13014": [
      [
        12461
      ],
      256
    ],
    "13015": [
      [
        12463
      ],
      256
    ],
    "13016": [
      [
        12465
      ],
      256
    ],
    "13017": [
      [
        12467
      ],
      256
    ],
    "13018": [
      [
        12469
      ],
      256
    ],
    "13019": [
      [
        12471
      ],
      256
    ],
    "13020": [
      [
        12473
      ],
      256
    ],
    "13021": [
      [
        12475
      ],
      256
    ],
    "13022": [
      [
        12477
      ],
      256
    ],
    "13023": [
      [
        12479
      ],
      256
    ],
    "13024": [
      [
        12481
      ],
      256
    ],
    "13025": [
      [
        12484
      ],
      256
    ],
    "13026": [
      [
        12486
      ],
      256
    ],
    "13027": [
      [
        12488
      ],
      256
    ],
    "13028": [
      [
        12490
      ],
      256
    ],
    "13029": [
      [
        12491
      ],
      256
    ],
    "13030": [
      [
        12492
      ],
      256
    ],
    "13031": [
      [
        12493
      ],
      256
    ],
    "13032": [
      [
        12494
      ],
      256
    ],
    "13033": [
      [
        12495
      ],
      256
    ],
    "13034": [
      [
        12498
      ],
      256
    ],
    "13035": [
      [
        12501
      ],
      256
    ],
    "13036": [
      [
        12504
      ],
      256
    ],
    "13037": [
      [
        12507
      ],
      256
    ],
    "13038": [
      [
        12510
      ],
      256
    ],
    "13039": [
      [
        12511
      ],
      256
    ],
    "13040": [
      [
        12512
      ],
      256
    ],
    "13041": [
      [
        12513
      ],
      256
    ],
    "13042": [
      [
        12514
      ],
      256
    ],
    "13043": [
      [
        12516
      ],
      256
    ],
    "13044": [
      [
        12518
      ],
      256
    ],
    "13045": [
      [
        12520
      ],
      256
    ],
    "13046": [
      [
        12521
      ],
      256
    ],
    "13047": [
      [
        12522
      ],
      256
    ],
    "13048": [
      [
        12523
      ],
      256
    ],
    "13049": [
      [
        12524
      ],
      256
    ],
    "13050": [
      [
        12525
      ],
      256
    ],
    "13051": [
      [
        12527
      ],
      256
    ],
    "13052": [
      [
        12528
      ],
      256
    ],
    "13053": [
      [
        12529
      ],
      256
    ],
    "13054": [
      [
        12530
      ],
      256
    ]
  },
  "13056": {
    "13056": [
      [
        12450,
        12497,
        12540,
        12488
      ],
      256
    ],
    "13057": [
      [
        12450,
        12523,
        12501,
        12449
      ],
      256
    ],
    "13058": [
      [
        12450,
        12531,
        12506,
        12450
      ],
      256
    ],
    "13059": [
      [
        12450,
        12540,
        12523
      ],
      256
    ],
    "13060": [
      [
        12452,
        12491,
        12531,
        12464
      ],
      256
    ],
    "13061": [
      [
        12452,
        12531,
        12481
      ],
      256
    ],
    "13062": [
      [
        12454,
        12457,
        12531
      ],
      256
    ],
    "13063": [
      [
        12456,
        12473,
        12463,
        12540,
        12489
      ],
      256
    ],
    "13064": [
      [
        12456,
        12540,
        12459,
        12540
      ],
      256
    ],
    "13065": [
      [
        12458,
        12531,
        12473
      ],
      256
    ],
    "13066": [
      [
        12458,
        12540,
        12512
      ],
      256
    ],
    "13067": [
      [
        12459,
        12452,
        12522
      ],
      256
    ],
    "13068": [
      [
        12459,
        12521,
        12483,
        12488
      ],
      256
    ],
    "13069": [
      [
        12459,
        12525,
        12522,
        12540
      ],
      256
    ],
    "13070": [
      [
        12460,
        12525,
        12531
      ],
      256
    ],
    "13071": [
      [
        12460,
        12531,
        12510
      ],
      256
    ],
    "13072": [
      [
        12462,
        12460
      ],
      256
    ],
    "13073": [
      [
        12462,
        12491,
        12540
      ],
      256
    ],
    "13074": [
      [
        12461,
        12517,
        12522,
        12540
      ],
      256
    ],
    "13075": [
      [
        12462,
        12523,
        12480,
        12540
      ],
      256
    ],
    "13076": [
      [
        12461,
        12525
      ],
      256
    ],
    "13077": [
      [
        12461,
        12525,
        12464,
        12521,
        12512
      ],
      256
    ],
    "13078": [
      [
        12461,
        12525,
        12513,
        12540,
        12488,
        12523
      ],
      256
    ],
    "13079": [
      [
        12461,
        12525,
        12527,
        12483,
        12488
      ],
      256
    ],
    "13080": [
      [
        12464,
        12521,
        12512
      ],
      256
    ],
    "13081": [
      [
        12464,
        12521,
        12512,
        12488,
        12531
      ],
      256
    ],
    "13082": [
      [
        12463,
        12523,
        12476,
        12452,
        12525
      ],
      256
    ],
    "13083": [
      [
        12463,
        12525,
        12540,
        12493
      ],
      256
    ],
    "13084": [
      [
        12465,
        12540,
        12473
      ],
      256
    ],
    "13085": [
      [
        12467,
        12523,
        12490
      ],
      256
    ],
    "13086": [
      [
        12467,
        12540,
        12509
      ],
      256
    ],
    "13087": [
      [
        12469,
        12452,
        12463,
        12523
      ],
      256
    ],
    "13088": [
      [
        12469,
        12531,
        12481,
        12540,
        12512
      ],
      256
    ],
    "13089": [
      [
        12471,
        12522,
        12531,
        12464
      ],
      256
    ],
    "13090": [
      [
        12475,
        12531,
        12481
      ],
      256
    ],
    "13091": [
      [
        12475,
        12531,
        12488
      ],
      256
    ],
    "13092": [
      [
        12480,
        12540,
        12473
      ],
      256
    ],
    "13093": [
      [
        12487,
        12471
      ],
      256
    ],
    "13094": [
      [
        12489,
        12523
      ],
      256
    ],
    "13095": [
      [
        12488,
        12531
      ],
      256
    ],
    "13096": [
      [
        12490,
        12494
      ],
      256
    ],
    "13097": [
      [
        12494,
        12483,
        12488
      ],
      256
    ],
    "13098": [
      [
        12495,
        12452,
        12484
      ],
      256
    ],
    "13099": [
      [
        12497,
        12540,
        12475,
        12531,
        12488
      ],
      256
    ],
    "13100": [
      [
        12497,
        12540,
        12484
      ],
      256
    ],
    "13101": [
      [
        12496,
        12540,
        12524,
        12523
      ],
      256
    ],
    "13102": [
      [
        12500,
        12450,
        12473,
        12488,
        12523
      ],
      256
    ],
    "13103": [
      [
        12500,
        12463,
        12523
      ],
      256
    ],
    "13104": [
      [
        12500,
        12467
      ],
      256
    ],
    "13105": [
      [
        12499,
        12523
      ],
      256
    ],
    "13106": [
      [
        12501,
        12449,
        12521,
        12483,
        12489
      ],
      256
    ],
    "13107": [
      [
        12501,
        12451,
        12540,
        12488
      ],
      256
    ],
    "13108": [
      [
        12502,
        12483,
        12471,
        12455,
        12523
      ],
      256
    ],
    "13109": [
      [
        12501,
        12521,
        12531
      ],
      256
    ],
    "13110": [
      [
        12504,
        12463,
        12479,
        12540,
        12523
      ],
      256
    ],
    "13111": [
      [
        12506,
        12477
      ],
      256
    ],
    "13112": [
      [
        12506,
        12491,
        12498
      ],
      256
    ],
    "13113": [
      [
        12504,
        12523,
        12484
      ],
      256
    ],
    "13114": [
      [
        12506,
        12531,
        12473
      ],
      256
    ],
    "13115": [
      [
        12506,
        12540,
        12472
      ],
      256
    ],
    "13116": [
      [
        12505,
        12540,
        12479
      ],
      256
    ],
    "13117": [
      [
        12509,
        12452,
        12531,
        12488
      ],
      256
    ],
    "13118": [
      [
        12508,
        12523,
        12488
      ],
      256
    ],
    "13119": [
      [
        12507,
        12531
      ],
      256
    ],
    "13120": [
      [
        12509,
        12531,
        12489
      ],
      256
    ],
    "13121": [
      [
        12507,
        12540,
        12523
      ],
      256
    ],
    "13122": [
      [
        12507,
        12540,
        12531
      ],
      256
    ],
    "13123": [
      [
        12510,
        12452,
        12463,
        12525
      ],
      256
    ],
    "13124": [
      [
        12510,
        12452,
        12523
      ],
      256
    ],
    "13125": [
      [
        12510,
        12483,
        12495
      ],
      256
    ],
    "13126": [
      [
        12510,
        12523,
        12463
      ],
      256
    ],
    "13127": [
      [
        12510,
        12531,
        12471,
        12519,
        12531
      ],
      256
    ],
    "13128": [
      [
        12511,
        12463,
        12525,
        12531
      ],
      256
    ],
    "13129": [
      [
        12511,
        12522
      ],
      256
    ],
    "13130": [
      [
        12511,
        12522,
        12496,
        12540,
        12523
      ],
      256
    ],
    "13131": [
      [
        12513,
        12460
      ],
      256
    ],
    "13132": [
      [
        12513,
        12460,
        12488,
        12531
      ],
      256
    ],
    "13133": [
      [
        12513,
        12540,
        12488,
        12523
      ],
      256
    ],
    "13134": [
      [
        12516,
        12540,
        12489
      ],
      256
    ],
    "13135": [
      [
        12516,
        12540,
        12523
      ],
      256
    ],
    "13136": [
      [
        12518,
        12450,
        12531
      ],
      256
    ],
    "13137": [
      [
        12522,
        12483,
        12488,
        12523
      ],
      256
    ],
    "13138": [
      [
        12522,
        12521
      ],
      256
    ],
    "13139": [
      [
        12523,
        12500,
        12540
      ],
      256
    ],
    "13140": [
      [
        12523,
        12540,
        12502,
        12523
      ],
      256
    ],
    "13141": [
      [
        12524,
        12512
      ],
      256
    ],
    "13142": [
      [
        12524,
        12531,
        12488,
        12466,
        12531
      ],
      256
    ],
    "13143": [
      [
        12527,
        12483,
        12488
      ],
      256
    ],
    "13144": [
      [
        48,
        28857
      ],
      256
    ],
    "13145": [
      [
        49,
        28857
      ],
      256
    ],
    "13146": [
      [
        50,
        28857
      ],
      256
    ],
    "13147": [
      [
        51,
        28857
      ],
      256
    ],
    "13148": [
      [
        52,
        28857
      ],
      256
    ],
    "13149": [
      [
        53,
        28857
      ],
      256
    ],
    "13150": [
      [
        54,
        28857
      ],
      256
    ],
    "13151": [
      [
        55,
        28857
      ],
      256
    ],
    "13152": [
      [
        56,
        28857
      ],
      256
    ],
    "13153": [
      [
        57,
        28857
      ],
      256
    ],
    "13154": [
      [
        49,
        48,
        28857
      ],
      256
    ],
    "13155": [
      [
        49,
        49,
        28857
      ],
      256
    ],
    "13156": [
      [
        49,
        50,
        28857
      ],
      256
    ],
    "13157": [
      [
        49,
        51,
        28857
      ],
      256
    ],
    "13158": [
      [
        49,
        52,
        28857
      ],
      256
    ],
    "13159": [
      [
        49,
        53,
        28857
      ],
      256
    ],
    "13160": [
      [
        49,
        54,
        28857
      ],
      256
    ],
    "13161": [
      [
        49,
        55,
        28857
      ],
      256
    ],
    "13162": [
      [
        49,
        56,
        28857
      ],
      256
    ],
    "13163": [
      [
        49,
        57,
        28857
      ],
      256
    ],
    "13164": [
      [
        50,
        48,
        28857
      ],
      256
    ],
    "13165": [
      [
        50,
        49,
        28857
      ],
      256
    ],
    "13166": [
      [
        50,
        50,
        28857
      ],
      256
    ],
    "13167": [
      [
        50,
        51,
        28857
      ],
      256
    ],
    "13168": [
      [
        50,
        52,
        28857
      ],
      256
    ],
    "13169": [
      [
        104,
        80,
        97
      ],
      256
    ],
    "13170": [
      [
        100,
        97
      ],
      256
    ],
    "13171": [
      [
        65,
        85
      ],
      256
    ],
    "13172": [
      [
        98,
        97,
        114
      ],
      256
    ],
    "13173": [
      [
        111,
        86
      ],
      256
    ],
    "13174": [
      [
        112,
        99
      ],
      256
    ],
    "13175": [
      [
        100,
        109
      ],
      256
    ],
    "13176": [
      [
        100,
        109,
        178
      ],
      256
    ],
    "13177": [
      [
        100,
        109,
        179
      ],
      256
    ],
    "13178": [
      [
        73,
        85
      ],
      256
    ],
    "13179": [
      [
        24179,
        25104
      ],
      256
    ],
    "13180": [
      [
        26157,
        21644
      ],
      256
    ],
    "13181": [
      [
        22823,
        27491
      ],
      256
    ],
    "13182": [
      [
        26126,
        27835
      ],
      256
    ],
    "13183": [
      [
        26666,
        24335,
        20250,
        31038
      ],
      256
    ],
    "13184": [
      [
        112,
        65
      ],
      256
    ],
    "13185": [
      [
        110,
        65
      ],
      256
    ],
    "13186": [
      [
        956,
        65
      ],
      256
    ],
    "13187": [
      [
        109,
        65
      ],
      256
    ],
    "13188": [
      [
        107,
        65
      ],
      256
    ],
    "13189": [
      [
        75,
        66
      ],
      256
    ],
    "13190": [
      [
        77,
        66
      ],
      256
    ],
    "13191": [
      [
        71,
        66
      ],
      256
    ],
    "13192": [
      [
        99,
        97,
        108
      ],
      256
    ],
    "13193": [
      [
        107,
        99,
        97,
        108
      ],
      256
    ],
    "13194": [
      [
        112,
        70
      ],
      256
    ],
    "13195": [
      [
        110,
        70
      ],
      256
    ],
    "13196": [
      [
        956,
        70
      ],
      256
    ],
    "13197": [
      [
        956,
        103
      ],
      256
    ],
    "13198": [
      [
        109,
        103
      ],
      256
    ],
    "13199": [
      [
        107,
        103
      ],
      256
    ],
    "13200": [
      [
        72,
        122
      ],
      256
    ],
    "13201": [
      [
        107,
        72,
        122
      ],
      256
    ],
    "13202": [
      [
        77,
        72,
        122
      ],
      256
    ],
    "13203": [
      [
        71,
        72,
        122
      ],
      256
    ],
    "13204": [
      [
        84,
        72,
        122
      ],
      256
    ],
    "13205": [
      [
        956,
        8467
      ],
      256
    ],
    "13206": [
      [
        109,
        8467
      ],
      256
    ],
    "13207": [
      [
        100,
        8467
      ],
      256
    ],
    "13208": [
      [
        107,
        8467
      ],
      256
    ],
    "13209": [
      [
        102,
        109
      ],
      256
    ],
    "13210": [
      [
        110,
        109
      ],
      256
    ],
    "13211": [
      [
        956,
        109
      ],
      256
    ],
    "13212": [
      [
        109,
        109
      ],
      256
    ],
    "13213": [
      [
        99,
        109
      ],
      256
    ],
    "13214": [
      [
        107,
        109
      ],
      256
    ],
    "13215": [
      [
        109,
        109,
        178
      ],
      256
    ],
    "13216": [
      [
        99,
        109,
        178
      ],
      256
    ],
    "13217": [
      [
        109,
        178
      ],
      256
    ],
    "13218": [
      [
        107,
        109,
        178
      ],
      256
    ],
    "13219": [
      [
        109,
        109,
        179
      ],
      256
    ],
    "13220": [
      [
        99,
        109,
        179
      ],
      256
    ],
    "13221": [
      [
        109,
        179
      ],
      256
    ],
    "13222": [
      [
        107,
        109,
        179
      ],
      256
    ],
    "13223": [
      [
        109,
        8725,
        115
      ],
      256
    ],
    "13224": [
      [
        109,
        8725,
        115,
        178
      ],
      256
    ],
    "13225": [
      [
        80,
        97
      ],
      256
    ],
    "13226": [
      [
        107,
        80,
        97
      ],
      256
    ],
    "13227": [
      [
        77,
        80,
        97
      ],
      256
    ],
    "13228": [
      [
        71,
        80,
        97
      ],
      256
    ],
    "13229": [
      [
        114,
        97,
        100
      ],
      256
    ],
    "13230": [
      [
        114,
        97,
        100,
        8725,
        115
      ],
      256
    ],
    "13231": [
      [
        114,
        97,
        100,
        8725,
        115,
        178
      ],
      256
    ],
    "13232": [
      [
        112,
        115
      ],
      256
    ],
    "13233": [
      [
        110,
        115
      ],
      256
    ],
    "13234": [
      [
        956,
        115
      ],
      256
    ],
    "13235": [
      [
        109,
        115
      ],
      256
    ],
    "13236": [
      [
        112,
        86
      ],
      256
    ],
    "13237": [
      [
        110,
        86
      ],
      256
    ],
    "13238": [
      [
        956,
        86
      ],
      256
    ],
    "13239": [
      [
        109,
        86
      ],
      256
    ],
    "13240": [
      [
        107,
        86
      ],
      256
    ],
    "13241": [
      [
        77,
        86
      ],
      256
    ],
    "13242": [
      [
        112,
        87
      ],
      256
    ],
    "13243": [
      [
        110,
        87
      ],
      256
    ],
    "13244": [
      [
        956,
        87
      ],
      256
    ],
    "13245": [
      [
        109,
        87
      ],
      256
    ],
    "13246": [
      [
        107,
        87
      ],
      256
    ],
    "13247": [
      [
        77,
        87
      ],
      256
    ],
    "13248": [
      [
        107,
        937
      ],
      256
    ],
    "13249": [
      [
        77,
        937
      ],
      256
    ],
    "13250": [
      [
        97,
        46,
        109,
        46
      ],
      256
    ],
    "13251": [
      [
        66,
        113
      ],
      256
    ],
    "13252": [
      [
        99,
        99
      ],
      256
    ],
    "13253": [
      [
        99,
        100
      ],
      256
    ],
    "13254": [
      [
        67,
        8725,
        107,
        103
      ],
      256
    ],
    "13255": [
      [
        67,
        111,
        46
      ],
      256
    ],
    "13256": [
      [
        100,
        66
      ],
      256
    ],
    "13257": [
      [
        71,
        121
      ],
      256
    ],
    "13258": [
      [
        104,
        97
      ],
      256
    ],
    "13259": [
      [
        72,
        80
      ],
      256
    ],
    "13260": [
      [
        105,
        110
      ],
      256
    ],
    "13261": [
      [
        75,
        75
      ],
      256
    ],
    "13262": [
      [
        75,
        77
      ],
      256
    ],
    "13263": [
      [
        107,
        116
      ],
      256
    ],
    "13264": [
      [
        108,
        109
      ],
      256
    ],
    "13265": [
      [
        108,
        110
      ],
      256
    ],
    "13266": [
      [
        108,
        111,
        103
      ],
      256
    ],
    "13267": [
      [
        108,
        120
      ],
      256
    ],
    "13268": [
      [
        109,
        98
      ],
      256
    ],
    "13269": [
      [
        109,
        105,
        108
      ],
      256
    ],
    "13270": [
      [
        109,
        111,
        108
      ],
      256
    ],
    "13271": [
      [
        80,
        72
      ],
      256
    ],
    "13272": [
      [
        112,
        46,
        109,
        46
      ],
      256
    ],
    "13273": [
      [
        80,
        80,
        77
      ],
      256
    ],
    "13274": [
      [
        80,
        82
      ],
      256
    ],
    "13275": [
      [
        115,
        114
      ],
      256
    ],
    "13276": [
      [
        83,
        118
      ],
      256
    ],
    "13277": [
      [
        87,
        98
      ],
      256
    ],
    "13278": [
      [
        86,
        8725,
        109
      ],
      256
    ],
    "13279": [
      [
        65,
        8725,
        109
      ],
      256
    ],
    "13280": [
      [
        49,
        26085
      ],
      256
    ],
    "13281": [
      [
        50,
        26085
      ],
      256
    ],
    "13282": [
      [
        51,
        26085
      ],
      256
    ],
    "13283": [
      [
        52,
        26085
      ],
      256
    ],
    "13284": [
      [
        53,
        26085
      ],
      256
    ],
    "13285": [
      [
        54,
        26085
      ],
      256
    ],
    "13286": [
      [
        55,
        26085
      ],
      256
    ],
    "13287": [
      [
        56,
        26085
      ],
      256
    ],
    "13288": [
      [
        57,
        26085
      ],
      256
    ],
    "13289": [
      [
        49,
        48,
        26085
      ],
      256
    ],
    "13290": [
      [
        49,
        49,
        26085
      ],
      256
    ],
    "13291": [
      [
        49,
        50,
        26085
      ],
      256
    ],
    "13292": [
      [
        49,
        51,
        26085
      ],
      256
    ],
    "13293": [
      [
        49,
        52,
        26085
      ],
      256
    ],
    "13294": [
      [
        49,
        53,
        26085
      ],
      256
    ],
    "13295": [
      [
        49,
        54,
        26085
      ],
      256
    ],
    "13296": [
      [
        49,
        55,
        26085
      ],
      256
    ],
    "13297": [
      [
        49,
        56,
        26085
      ],
      256
    ],
    "13298": [
      [
        49,
        57,
        26085
      ],
      256
    ],
    "13299": [
      [
        50,
        48,
        26085
      ],
      256
    ],
    "13300": [
      [
        50,
        49,
        26085
      ],
      256
    ],
    "13301": [
      [
        50,
        50,
        26085
      ],
      256
    ],
    "13302": [
      [
        50,
        51,
        26085
      ],
      256
    ],
    "13303": [
      [
        50,
        52,
        26085
      ],
      256
    ],
    "13304": [
      [
        50,
        53,
        26085
      ],
      256
    ],
    "13305": [
      [
        50,
        54,
        26085
      ],
      256
    ],
    "13306": [
      [
        50,
        55,
        26085
      ],
      256
    ],
    "13307": [
      [
        50,
        56,
        26085
      ],
      256
    ],
    "13308": [
      [
        50,
        57,
        26085
      ],
      256
    ],
    "13309": [
      [
        51,
        48,
        26085
      ],
      256
    ],
    "13310": [
      [
        51,
        49,
        26085
      ],
      256
    ],
    "13311": [
      [
        103,
        97,
        108
      ],
      256
    ]
  },
  "27136": {
    "92912": [
      null,
      1
    ],
    "92913": [
      null,
      1
    ],
    "92914": [
      null,
      1
    ],
    "92915": [
      null,
      1
    ],
    "92916": [
      null,
      1
    ]
  },
  "27392": {
    "92976": [
      null,
      230
    ],
    "92977": [
      null,
      230
    ],
    "92978": [
      null,
      230
    ],
    "92979": [
      null,
      230
    ],
    "92980": [
      null,
      230
    ],
    "92981": [
      null,
      230
    ],
    "92982": [
      null,
      230
    ]
  },
  "42496": {
    "42607": [
      null,
      230
    ],
    "42612": [
      null,
      230
    ],
    "42613": [
      null,
      230
    ],
    "42614": [
      null,
      230
    ],
    "42615": [
      null,
      230
    ],
    "42616": [
      null,
      230
    ],
    "42617": [
      null,
      230
    ],
    "42618": [
      null,
      230
    ],
    "42619": [
      null,
      230
    ],
    "42620": [
      null,
      230
    ],
    "42621": [
      null,
      230
    ],
    "42652": [
      [
        1098
      ],
      256
    ],
    "42653": [
      [
        1100
      ],
      256
    ],
    "42655": [
      null,
      230
    ],
    "42736": [
      null,
      230
    ],
    "42737": [
      null,
      230
    ]
  },
  "42752": {
    "42864": [
      [
        42863
      ],
      256
    ],
    "43000": [
      [
        294
      ],
      256
    ],
    "43001": [
      [
        339
      ],
      256
    ]
  },
  "43008": {
    "43014": [
      null,
      9
    ],
    "43204": [
      null,
      9
    ],
    "43232": [
      null,
      230
    ],
    "43233": [
      null,
      230
    ],
    "43234": [
      null,
      230
    ],
    "43235": [
      null,
      230
    ],
    "43236": [
      null,
      230
    ],
    "43237": [
      null,
      230
    ],
    "43238": [
      null,
      230
    ],
    "43239": [
      null,
      230
    ],
    "43240": [
      null,
      230
    ],
    "43241": [
      null,
      230
    ],
    "43242": [
      null,
      230
    ],
    "43243": [
      null,
      230
    ],
    "43244": [
      null,
      230
    ],
    "43245": [
      null,
      230
    ],
    "43246": [
      null,
      230
    ],
    "43247": [
      null,
      230
    ],
    "43248": [
      null,
      230
    ],
    "43249": [
      null,
      230
    ]
  },
  "43264": {
    "43307": [
      null,
      220
    ],
    "43308": [
      null,
      220
    ],
    "43309": [
      null,
      220
    ],
    "43347": [
      null,
      9
    ],
    "43443": [
      null,
      7
    ],
    "43456": [
      null,
      9
    ]
  },
  "43520": {
    "43696": [
      null,
      230
    ],
    "43698": [
      null,
      230
    ],
    "43699": [
      null,
      230
    ],
    "43700": [
      null,
      220
    ],
    "43703": [
      null,
      230
    ],
    "43704": [
      null,
      230
    ],
    "43710": [
      null,
      230
    ],
    "43711": [
      null,
      230
    ],
    "43713": [
      null,
      230
    ],
    "43766": [
      null,
      9
    ]
  },
  "43776": {
    "43868": [
      [
        42791
      ],
      256
    ],
    "43869": [
      [
        43831
      ],
      256
    ],
    "43870": [
      [
        619
      ],
      256
    ],
    "43871": [
      [
        43858
      ],
      256
    ],
    "44013": [
      null,
      9
    ]
  },
  "48128": {
    "113822": [
      null,
      1
    ]
  },
  "53504": {
    "119134": [
      [
        119127,
        119141
      ],
      512
    ],
    "119135": [
      [
        119128,
        119141
      ],
      512
    ],
    "119136": [
      [
        119135,
        119150
      ],
      512
    ],
    "119137": [
      [
        119135,
        119151
      ],
      512
    ],
    "119138": [
      [
        119135,
        119152
      ],
      512
    ],
    "119139": [
      [
        119135,
        119153
      ],
      512
    ],
    "119140": [
      [
        119135,
        119154
      ],
      512
    ],
    "119141": [
      null,
      216
    ],
    "119142": [
      null,
      216
    ],
    "119143": [
      null,
      1
    ],
    "119144": [
      null,
      1
    ],
    "119145": [
      null,
      1
    ],
    "119149": [
      null,
      226
    ],
    "119150": [
      null,
      216
    ],
    "119151": [
      null,
      216
    ],
    "119152": [
      null,
      216
    ],
    "119153": [
      null,
      216
    ],
    "119154": [
      null,
      216
    ],
    "119163": [
      null,
      220
    ],
    "119164": [
      null,
      220
    ],
    "119165": [
      null,
      220
    ],
    "119166": [
      null,
      220
    ],
    "119167": [
      null,
      220
    ],
    "119168": [
      null,
      220
    ],
    "119169": [
      null,
      220
    ],
    "119170": [
      null,
      220
    ],
    "119173": [
      null,
      230
    ],
    "119174": [
      null,
      230
    ],
    "119175": [
      null,
      230
    ],
    "119176": [
      null,
      230
    ],
    "119177": [
      null,
      230
    ],
    "119178": [
      null,
      220
    ],
    "119179": [
      null,
      220
    ],
    "119210": [
      null,
      230
    ],
    "119211": [
      null,
      230
    ],
    "119212": [
      null,
      230
    ],
    "119213": [
      null,
      230
    ],
    "119227": [
      [
        119225,
        119141
      ],
      512
    ],
    "119228": [
      [
        119226,
        119141
      ],
      512
    ],
    "119229": [
      [
        119227,
        119150
      ],
      512
    ],
    "119230": [
      [
        119228,
        119150
      ],
      512
    ],
    "119231": [
      [
        119227,
        119151
      ],
      512
    ],
    "119232": [
      [
        119228,
        119151
      ],
      512
    ]
  },
  "53760": {
    "119362": [
      null,
      230
    ],
    "119363": [
      null,
      230
    ],
    "119364": [
      null,
      230
    ]
  },
  "54272": {
    "119808": [
      [
        65
      ],
      256
    ],
    "119809": [
      [
        66
      ],
      256
    ],
    "119810": [
      [
        67
      ],
      256
    ],
    "119811": [
      [
        68
      ],
      256
    ],
    "119812": [
      [
        69
      ],
      256
    ],
    "119813": [
      [
        70
      ],
      256
    ],
    "119814": [
      [
        71
      ],
      256
    ],
    "119815": [
      [
        72
      ],
      256
    ],
    "119816": [
      [
        73
      ],
      256
    ],
    "119817": [
      [
        74
      ],
      256
    ],
    "119818": [
      [
        75
      ],
      256
    ],
    "119819": [
      [
        76
      ],
      256
    ],
    "119820": [
      [
        77
      ],
      256
    ],
    "119821": [
      [
        78
      ],
      256
    ],
    "119822": [
      [
        79
      ],
      256
    ],
    "119823": [
      [
        80
      ],
      256
    ],
    "119824": [
      [
        81
      ],
      256
    ],
    "119825": [
      [
        82
      ],
      256
    ],
    "119826": [
      [
        83
      ],
      256
    ],
    "119827": [
      [
        84
      ],
      256
    ],
    "119828": [
      [
        85
      ],
      256
    ],
    "119829": [
      [
        86
      ],
      256
    ],
    "119830": [
      [
        87
      ],
      256
    ],
    "119831": [
      [
        88
      ],
      256
    ],
    "119832": [
      [
        89
      ],
      256
    ],
    "119833": [
      [
        90
      ],
      256
    ],
    "119834": [
      [
        97
      ],
      256
    ],
    "119835": [
      [
        98
      ],
      256
    ],
    "119836": [
      [
        99
      ],
      256
    ],
    "119837": [
      [
        100
      ],
      256
    ],
    "119838": [
      [
        101
      ],
      256
    ],
    "119839": [
      [
        102
      ],
      256
    ],
    "119840": [
      [
        103
      ],
      256
    ],
    "119841": [
      [
        104
      ],
      256
    ],
    "119842": [
      [
        105
      ],
      256
    ],
    "119843": [
      [
        106
      ],
      256
    ],
    "119844": [
      [
        107
      ],
      256
    ],
    "119845": [
      [
        108
      ],
      256
    ],
    "119846": [
      [
        109
      ],
      256
    ],
    "119847": [
      [
        110
      ],
      256
    ],
    "119848": [
      [
        111
      ],
      256
    ],
    "119849": [
      [
        112
      ],
      256
    ],
    "119850": [
      [
        113
      ],
      256
    ],
    "119851": [
      [
        114
      ],
      256
    ],
    "119852": [
      [
        115
      ],
      256
    ],
    "119853": [
      [
        116
      ],
      256
    ],
    "119854": [
      [
        117
      ],
      256
    ],
    "119855": [
      [
        118
      ],
      256
    ],
    "119856": [
      [
        119
      ],
      256
    ],
    "119857": [
      [
        120
      ],
      256
    ],
    "119858": [
      [
        121
      ],
      256
    ],
    "119859": [
      [
        122
      ],
      256
    ],
    "119860": [
      [
        65
      ],
      256
    ],
    "119861": [
      [
        66
      ],
      256
    ],
    "119862": [
      [
        67
      ],
      256
    ],
    "119863": [
      [
        68
      ],
      256
    ],
    "119864": [
      [
        69
      ],
      256
    ],
    "119865": [
      [
        70
      ],
      256
    ],
    "119866": [
      [
        71
      ],
      256
    ],
    "119867": [
      [
        72
      ],
      256
    ],
    "119868": [
      [
        73
      ],
      256
    ],
    "119869": [
      [
        74
      ],
      256
    ],
    "119870": [
      [
        75
      ],
      256
    ],
    "119871": [
      [
        76
      ],
      256
    ],
    "119872": [
      [
        77
      ],
      256
    ],
    "119873": [
      [
        78
      ],
      256
    ],
    "119874": [
      [
        79
      ],
      256
    ],
    "119875": [
      [
        80
      ],
      256
    ],
    "119876": [
      [
        81
      ],
      256
    ],
    "119877": [
      [
        82
      ],
      256
    ],
    "119878": [
      [
        83
      ],
      256
    ],
    "119879": [
      [
        84
      ],
      256
    ],
    "119880": [
      [
        85
      ],
      256
    ],
    "119881": [
      [
        86
      ],
      256
    ],
    "119882": [
      [
        87
      ],
      256
    ],
    "119883": [
      [
        88
      ],
      256
    ],
    "119884": [
      [
        89
      ],
      256
    ],
    "119885": [
      [
        90
      ],
      256
    ],
    "119886": [
      [
        97
      ],
      256
    ],
    "119887": [
      [
        98
      ],
      256
    ],
    "119888": [
      [
        99
      ],
      256
    ],
    "119889": [
      [
        100
      ],
      256
    ],
    "119890": [
      [
        101
      ],
      256
    ],
    "119891": [
      [
        102
      ],
      256
    ],
    "119892": [
      [
        103
      ],
      256
    ],
    "119894": [
      [
        105
      ],
      256
    ],
    "119895": [
      [
        106
      ],
      256
    ],
    "119896": [
      [
        107
      ],
      256
    ],
    "119897": [
      [
        108
      ],
      256
    ],
    "119898": [
      [
        109
      ],
      256
    ],
    "119899": [
      [
        110
      ],
      256
    ],
    "119900": [
      [
        111
      ],
      256
    ],
    "119901": [
      [
        112
      ],
      256
    ],
    "119902": [
      [
        113
      ],
      256
    ],
    "119903": [
      [
        114
      ],
      256
    ],
    "119904": [
      [
        115
      ],
      256
    ],
    "119905": [
      [
        116
      ],
      256
    ],
    "119906": [
      [
        117
      ],
      256
    ],
    "119907": [
      [
        118
      ],
      256
    ],
    "119908": [
      [
        119
      ],
      256
    ],
    "119909": [
      [
        120
      ],
      256
    ],
    "119910": [
      [
        121
      ],
      256
    ],
    "119911": [
      [
        122
      ],
      256
    ],
    "119912": [
      [
        65
      ],
      256
    ],
    "119913": [
      [
        66
      ],
      256
    ],
    "119914": [
      [
        67
      ],
      256
    ],
    "119915": [
      [
        68
      ],
      256
    ],
    "119916": [
      [
        69
      ],
      256
    ],
    "119917": [
      [
        70
      ],
      256
    ],
    "119918": [
      [
        71
      ],
      256
    ],
    "119919": [
      [
        72
      ],
      256
    ],
    "119920": [
      [
        73
      ],
      256
    ],
    "119921": [
      [
        74
      ],
      256
    ],
    "119922": [
      [
        75
      ],
      256
    ],
    "119923": [
      [
        76
      ],
      256
    ],
    "119924": [
      [
        77
      ],
      256
    ],
    "119925": [
      [
        78
      ],
      256
    ],
    "119926": [
      [
        79
      ],
      256
    ],
    "119927": [
      [
        80
      ],
      256
    ],
    "119928": [
      [
        81
      ],
      256
    ],
    "119929": [
      [
        82
      ],
      256
    ],
    "119930": [
      [
        83
      ],
      256
    ],
    "119931": [
      [
        84
      ],
      256
    ],
    "119932": [
      [
        85
      ],
      256
    ],
    "119933": [
      [
        86
      ],
      256
    ],
    "119934": [
      [
        87
      ],
      256
    ],
    "119935": [
      [
        88
      ],
      256
    ],
    "119936": [
      [
        89
      ],
      256
    ],
    "119937": [
      [
        90
      ],
      256
    ],
    "119938": [
      [
        97
      ],
      256
    ],
    "119939": [
      [
        98
      ],
      256
    ],
    "119940": [
      [
        99
      ],
      256
    ],
    "119941": [
      [
        100
      ],
      256
    ],
    "119942": [
      [
        101
      ],
      256
    ],
    "119943": [
      [
        102
      ],
      256
    ],
    "119944": [
      [
        103
      ],
      256
    ],
    "119945": [
      [
        104
      ],
      256
    ],
    "119946": [
      [
        105
      ],
      256
    ],
    "119947": [
      [
        106
      ],
      256
    ],
    "119948": [
      [
        107
      ],
      256
    ],
    "119949": [
      [
        108
      ],
      256
    ],
    "119950": [
      [
        109
      ],
      256
    ],
    "119951": [
      [
        110
      ],
      256
    ],
    "119952": [
      [
        111
      ],
      256
    ],
    "119953": [
      [
        112
      ],
      256
    ],
    "119954": [
      [
        113
      ],
      256
    ],
    "119955": [
      [
        114
      ],
      256
    ],
    "119956": [
      [
        115
      ],
      256
    ],
    "119957": [
      [
        116
      ],
      256
    ],
    "119958": [
      [
        117
      ],
      256
    ],
    "119959": [
      [
        118
      ],
      256
    ],
    "119960": [
      [
        119
      ],
      256
    ],
    "119961": [
      [
        120
      ],
      256
    ],
    "119962": [
      [
        121
      ],
      256
    ],
    "119963": [
      [
        122
      ],
      256
    ],
    "119964": [
      [
        65
      ],
      256
    ],
    "119966": [
      [
        67
      ],
      256
    ],
    "119967": [
      [
        68
      ],
      256
    ],
    "119970": [
      [
        71
      ],
      256
    ],
    "119973": [
      [
        74
      ],
      256
    ],
    "119974": [
      [
        75
      ],
      256
    ],
    "119977": [
      [
        78
      ],
      256
    ],
    "119978": [
      [
        79
      ],
      256
    ],
    "119979": [
      [
        80
      ],
      256
    ],
    "119980": [
      [
        81
      ],
      256
    ],
    "119982": [
      [
        83
      ],
      256
    ],
    "119983": [
      [
        84
      ],
      256
    ],
    "119984": [
      [
        85
      ],
      256
    ],
    "119985": [
      [
        86
      ],
      256
    ],
    "119986": [
      [
        87
      ],
      256
    ],
    "119987": [
      [
        88
      ],
      256
    ],
    "119988": [
      [
        89
      ],
      256
    ],
    "119989": [
      [
        90
      ],
      256
    ],
    "119990": [
      [
        97
      ],
      256
    ],
    "119991": [
      [
        98
      ],
      256
    ],
    "119992": [
      [
        99
      ],
      256
    ],
    "119993": [
      [
        100
      ],
      256
    ],
    "119995": [
      [
        102
      ],
      256
    ],
    "119997": [
      [
        104
      ],
      256
    ],
    "119998": [
      [
        105
      ],
      256
    ],
    "119999": [
      [
        106
      ],
      256
    ],
    "120000": [
      [
        107
      ],
      256
    ],
    "120001": [
      [
        108
      ],
      256
    ],
    "120002": [
      [
        109
      ],
      256
    ],
    "120003": [
      [
        110
      ],
      256
    ],
    "120005": [
      [
        112
      ],
      256
    ],
    "120006": [
      [
        113
      ],
      256
    ],
    "120007": [
      [
        114
      ],
      256
    ],
    "120008": [
      [
        115
      ],
      256
    ],
    "120009": [
      [
        116
      ],
      256
    ],
    "120010": [
      [
        117
      ],
      256
    ],
    "120011": [
      [
        118
      ],
      256
    ],
    "120012": [
      [
        119
      ],
      256
    ],
    "120013": [
      [
        120
      ],
      256
    ],
    "120014": [
      [
        121
      ],
      256
    ],
    "120015": [
      [
        122
      ],
      256
    ],
    "120016": [
      [
        65
      ],
      256
    ],
    "120017": [
      [
        66
      ],
      256
    ],
    "120018": [
      [
        67
      ],
      256
    ],
    "120019": [
      [
        68
      ],
      256
    ],
    "120020": [
      [
        69
      ],
      256
    ],
    "120021": [
      [
        70
      ],
      256
    ],
    "120022": [
      [
        71
      ],
      256
    ],
    "120023": [
      [
        72
      ],
      256
    ],
    "120024": [
      [
        73
      ],
      256
    ],
    "120025": [
      [
        74
      ],
      256
    ],
    "120026": [
      [
        75
      ],
      256
    ],
    "120027": [
      [
        76
      ],
      256
    ],
    "120028": [
      [
        77
      ],
      256
    ],
    "120029": [
      [
        78
      ],
      256
    ],
    "120030": [
      [
        79
      ],
      256
    ],
    "120031": [
      [
        80
      ],
      256
    ],
    "120032": [
      [
        81
      ],
      256
    ],
    "120033": [
      [
        82
      ],
      256
    ],
    "120034": [
      [
        83
      ],
      256
    ],
    "120035": [
      [
        84
      ],
      256
    ],
    "120036": [
      [
        85
      ],
      256
    ],
    "120037": [
      [
        86
      ],
      256
    ],
    "120038": [
      [
        87
      ],
      256
    ],
    "120039": [
      [
        88
      ],
      256
    ],
    "120040": [
      [
        89
      ],
      256
    ],
    "120041": [
      [
        90
      ],
      256
    ],
    "120042": [
      [
        97
      ],
      256
    ],
    "120043": [
      [
        98
      ],
      256
    ],
    "120044": [
      [
        99
      ],
      256
    ],
    "120045": [
      [
        100
      ],
      256
    ],
    "120046": [
      [
        101
      ],
      256
    ],
    "120047": [
      [
        102
      ],
      256
    ],
    "120048": [
      [
        103
      ],
      256
    ],
    "120049": [
      [
        104
      ],
      256
    ],
    "120050": [
      [
        105
      ],
      256
    ],
    "120051": [
      [
        106
      ],
      256
    ],
    "120052": [
      [
        107
      ],
      256
    ],
    "120053": [
      [
        108
      ],
      256
    ],
    "120054": [
      [
        109
      ],
      256
    ],
    "120055": [
      [
        110
      ],
      256
    ],
    "120056": [
      [
        111
      ],
      256
    ],
    "120057": [
      [
        112
      ],
      256
    ],
    "120058": [
      [
        113
      ],
      256
    ],
    "120059": [
      [
        114
      ],
      256
    ],
    "120060": [
      [
        115
      ],
      256
    ],
    "120061": [
      [
        116
      ],
      256
    ],
    "120062": [
      [
        117
      ],
      256
    ],
    "120063": [
      [
        118
      ],
      256
    ]
  },
  "54528": {
    "120064": [
      [
        119
      ],
      256
    ],
    "120065": [
      [
        120
      ],
      256
    ],
    "120066": [
      [
        121
      ],
      256
    ],
    "120067": [
      [
        122
      ],
      256
    ],
    "120068": [
      [
        65
      ],
      256
    ],
    "120069": [
      [
        66
      ],
      256
    ],
    "120071": [
      [
        68
      ],
      256
    ],
    "120072": [
      [
        69
      ],
      256
    ],
    "120073": [
      [
        70
      ],
      256
    ],
    "120074": [
      [
        71
      ],
      256
    ],
    "120077": [
      [
        74
      ],
      256
    ],
    "120078": [
      [
        75
      ],
      256
    ],
    "120079": [
      [
        76
      ],
      256
    ],
    "120080": [
      [
        77
      ],
      256
    ],
    "120081": [
      [
        78
      ],
      256
    ],
    "120082": [
      [
        79
      ],
      256
    ],
    "120083": [
      [
        80
      ],
      256
    ],
    "120084": [
      [
        81
      ],
      256
    ],
    "120086": [
      [
        83
      ],
      256
    ],
    "120087": [
      [
        84
      ],
      256
    ],
    "120088": [
      [
        85
      ],
      256
    ],
    "120089": [
      [
        86
      ],
      256
    ],
    "120090": [
      [
        87
      ],
      256
    ],
    "120091": [
      [
        88
      ],
      256
    ],
    "120092": [
      [
        89
      ],
      256
    ],
    "120094": [
      [
        97
      ],
      256
    ],
    "120095": [
      [
        98
      ],
      256
    ],
    "120096": [
      [
        99
      ],
      256
    ],
    "120097": [
      [
        100
      ],
      256
    ],
    "120098": [
      [
        101
      ],
      256
    ],
    "120099": [
      [
        102
      ],
      256
    ],
    "120100": [
      [
        103
      ],
      256
    ],
    "120101": [
      [
        104
      ],
      256
    ],
    "120102": [
      [
        105
      ],
      256
    ],
    "120103": [
      [
        106
      ],
      256
    ],
    "120104": [
      [
        107
      ],
      256
    ],
    "120105": [
      [
        108
      ],
      256
    ],
    "120106": [
      [
        109
      ],
      256
    ],
    "120107": [
      [
        110
      ],
      256
    ],
    "120108": [
      [
        111
      ],
      256
    ],
    "120109": [
      [
        112
      ],
      256
    ],
    "120110": [
      [
        113
      ],
      256
    ],
    "120111": [
      [
        114
      ],
      256
    ],
    "120112": [
      [
        115
      ],
      256
    ],
    "120113": [
      [
        116
      ],
      256
    ],
    "120114": [
      [
        117
      ],
      256
    ],
    "120115": [
      [
        118
      ],
      256
    ],
    "120116": [
      [
        119
      ],
      256
    ],
    "120117": [
      [
        120
      ],
      256
    ],
    "120118": [
      [
        121
      ],
      256
    ],
    "120119": [
      [
        122
      ],
      256
    ],
    "120120": [
      [
        65
      ],
      256
    ],
    "120121": [
      [
        66
      ],
      256
    ],
    "120123": [
      [
        68
      ],
      256
    ],
    "120124": [
      [
        69
      ],
      256
    ],
    "120125": [
      [
        70
      ],
      256
    ],
    "120126": [
      [
        71
      ],
      256
    ],
    "120128": [
      [
        73
      ],
      256
    ],
    "120129": [
      [
        74
      ],
      256
    ],
    "120130": [
      [
        75
      ],
      256
    ],
    "120131": [
      [
        76
      ],
      256
    ],
    "120132": [
      [
        77
      ],
      256
    ],
    "120134": [
      [
        79
      ],
      256
    ],
    "120138": [
      [
        83
      ],
      256
    ],
    "120139": [
      [
        84
      ],
      256
    ],
    "120140": [
      [
        85
      ],
      256
    ],
    "120141": [
      [
        86
      ],
      256
    ],
    "120142": [
      [
        87
      ],
      256
    ],
    "120143": [
      [
        88
      ],
      256
    ],
    "120144": [
      [
        89
      ],
      256
    ],
    "120146": [
      [
        97
      ],
      256
    ],
    "120147": [
      [
        98
      ],
      256
    ],
    "120148": [
      [
        99
      ],
      256
    ],
    "120149": [
      [
        100
      ],
      256
    ],
    "120150": [
      [
        101
      ],
      256
    ],
    "120151": [
      [
        102
      ],
      256
    ],
    "120152": [
      [
        103
      ],
      256
    ],
    "120153": [
      [
        104
      ],
      256
    ],
    "120154": [
      [
        105
      ],
      256
    ],
    "120155": [
      [
        106
      ],
      256
    ],
    "120156": [
      [
        107
      ],
      256
    ],
    "120157": [
      [
        108
      ],
      256
    ],
    "120158": [
      [
        109
      ],
      256
    ],
    "120159": [
      [
        110
      ],
      256
    ],
    "120160": [
      [
        111
      ],
      256
    ],
    "120161": [
      [
        112
      ],
      256
    ],
    "120162": [
      [
        113
      ],
      256
    ],
    "120163": [
      [
        114
      ],
      256
    ],
    "120164": [
      [
        115
      ],
      256
    ],
    "120165": [
      [
        116
      ],
      256
    ],
    "120166": [
      [
        117
      ],
      256
    ],
    "120167": [
      [
        118
      ],
      256
    ],
    "120168": [
      [
        119
      ],
      256
    ],
    "120169": [
      [
        120
      ],
      256
    ],
    "120170": [
      [
        121
      ],
      256
    ],
    "120171": [
      [
        122
      ],
      256
    ],
    "120172": [
      [
        65
      ],
      256
    ],
    "120173": [
      [
        66
      ],
      256
    ],
    "120174": [
      [
        67
      ],
      256
    ],
    "120175": [
      [
        68
      ],
      256
    ],
    "120176": [
      [
        69
      ],
      256
    ],
    "120177": [
      [
        70
      ],
      256
    ],
    "120178": [
      [
        71
      ],
      256
    ],
    "120179": [
      [
        72
      ],
      256
    ],
    "120180": [
      [
        73
      ],
      256
    ],
    "120181": [
      [
        74
      ],
      256
    ],
    "120182": [
      [
        75
      ],
      256
    ],
    "120183": [
      [
        76
      ],
      256
    ],
    "120184": [
      [
        77
      ],
      256
    ],
    "120185": [
      [
        78
      ],
      256
    ],
    "120186": [
      [
        79
      ],
      256
    ],
    "120187": [
      [
        80
      ],
      256
    ],
    "120188": [
      [
        81
      ],
      256
    ],
    "120189": [
      [
        82
      ],
      256
    ],
    "120190": [
      [
        83
      ],
      256
    ],
    "120191": [
      [
        84
      ],
      256
    ],
    "120192": [
      [
        85
      ],
      256
    ],
    "120193": [
      [
        86
      ],
      256
    ],
    "120194": [
      [
        87
      ],
      256
    ],
    "120195": [
      [
        88
      ],
      256
    ],
    "120196": [
      [
        89
      ],
      256
    ],
    "120197": [
      [
        90
      ],
      256
    ],
    "120198": [
      [
        97
      ],
      256
    ],
    "120199": [
      [
        98
      ],
      256
    ],
    "120200": [
      [
        99
      ],
      256
    ],
    "120201": [
      [
        100
      ],
      256
    ],
    "120202": [
      [
        101
      ],
      256
    ],
    "120203": [
      [
        102
      ],
      256
    ],
    "120204": [
      [
        103
      ],
      256
    ],
    "120205": [
      [
        104
      ],
      256
    ],
    "120206": [
      [
        105
      ],
      256
    ],
    "120207": [
      [
        106
      ],
      256
    ],
    "120208": [
      [
        107
      ],
      256
    ],
    "120209": [
      [
        108
      ],
      256
    ],
    "120210": [
      [
        109
      ],
      256
    ],
    "120211": [
      [
        110
      ],
      256
    ],
    "120212": [
      [
        111
      ],
      256
    ],
    "120213": [
      [
        112
      ],
      256
    ],
    "120214": [
      [
        113
      ],
      256
    ],
    "120215": [
      [
        114
      ],
      256
    ],
    "120216": [
      [
        115
      ],
      256
    ],
    "120217": [
      [
        116
      ],
      256
    ],
    "120218": [
      [
        117
      ],
      256
    ],
    "120219": [
      [
        118
      ],
      256
    ],
    "120220": [
      [
        119
      ],
      256
    ],
    "120221": [
      [
        120
      ],
      256
    ],
    "120222": [
      [
        121
      ],
      256
    ],
    "120223": [
      [
        122
      ],
      256
    ],
    "120224": [
      [
        65
      ],
      256
    ],
    "120225": [
      [
        66
      ],
      256
    ],
    "120226": [
      [
        67
      ],
      256
    ],
    "120227": [
      [
        68
      ],
      256
    ],
    "120228": [
      [
        69
      ],
      256
    ],
    "120229": [
      [
        70
      ],
      256
    ],
    "120230": [
      [
        71
      ],
      256
    ],
    "120231": [
      [
        72
      ],
      256
    ],
    "120232": [
      [
        73
      ],
      256
    ],
    "120233": [
      [
        74
      ],
      256
    ],
    "120234": [
      [
        75
      ],
      256
    ],
    "120235": [
      [
        76
      ],
      256
    ],
    "120236": [
      [
        77
      ],
      256
    ],
    "120237": [
      [
        78
      ],
      256
    ],
    "120238": [
      [
        79
      ],
      256
    ],
    "120239": [
      [
        80
      ],
      256
    ],
    "120240": [
      [
        81
      ],
      256
    ],
    "120241": [
      [
        82
      ],
      256
    ],
    "120242": [
      [
        83
      ],
      256
    ],
    "120243": [
      [
        84
      ],
      256
    ],
    "120244": [
      [
        85
      ],
      256
    ],
    "120245": [
      [
        86
      ],
      256
    ],
    "120246": [
      [
        87
      ],
      256
    ],
    "120247": [
      [
        88
      ],
      256
    ],
    "120248": [
      [
        89
      ],
      256
    ],
    "120249": [
      [
        90
      ],
      256
    ],
    "120250": [
      [
        97
      ],
      256
    ],
    "120251": [
      [
        98
      ],
      256
    ],
    "120252": [
      [
        99
      ],
      256
    ],
    "120253": [
      [
        100
      ],
      256
    ],
    "120254": [
      [
        101
      ],
      256
    ],
    "120255": [
      [
        102
      ],
      256
    ],
    "120256": [
      [
        103
      ],
      256
    ],
    "120257": [
      [
        104
      ],
      256
    ],
    "120258": [
      [
        105
      ],
      256
    ],
    "120259": [
      [
        106
      ],
      256
    ],
    "120260": [
      [
        107
      ],
      256
    ],
    "120261": [
      [
        108
      ],
      256
    ],
    "120262": [
      [
        109
      ],
      256
    ],
    "120263": [
      [
        110
      ],
      256
    ],
    "120264": [
      [
        111
      ],
      256
    ],
    "120265": [
      [
        112
      ],
      256
    ],
    "120266": [
      [
        113
      ],
      256
    ],
    "120267": [
      [
        114
      ],
      256
    ],
    "120268": [
      [
        115
      ],
      256
    ],
    "120269": [
      [
        116
      ],
      256
    ],
    "120270": [
      [
        117
      ],
      256
    ],
    "120271": [
      [
        118
      ],
      256
    ],
    "120272": [
      [
        119
      ],
      256
    ],
    "120273": [
      [
        120
      ],
      256
    ],
    "120274": [
      [
        121
      ],
      256
    ],
    "120275": [
      [
        122
      ],
      256
    ],
    "120276": [
      [
        65
      ],
      256
    ],
    "120277": [
      [
        66
      ],
      256
    ],
    "120278": [
      [
        67
      ],
      256
    ],
    "120279": [
      [
        68
      ],
      256
    ],
    "120280": [
      [
        69
      ],
      256
    ],
    "120281": [
      [
        70
      ],
      256
    ],
    "120282": [
      [
        71
      ],
      256
    ],
    "120283": [
      [
        72
      ],
      256
    ],
    "120284": [
      [
        73
      ],
      256
    ],
    "120285": [
      [
        74
      ],
      256
    ],
    "120286": [
      [
        75
      ],
      256
    ],
    "120287": [
      [
        76
      ],
      256
    ],
    "120288": [
      [
        77
      ],
      256
    ],
    "120289": [
      [
        78
      ],
      256
    ],
    "120290": [
      [
        79
      ],
      256
    ],
    "120291": [
      [
        80
      ],
      256
    ],
    "120292": [
      [
        81
      ],
      256
    ],
    "120293": [
      [
        82
      ],
      256
    ],
    "120294": [
      [
        83
      ],
      256
    ],
    "120295": [
      [
        84
      ],
      256
    ],
    "120296": [
      [
        85
      ],
      256
    ],
    "120297": [
      [
        86
      ],
      256
    ],
    "120298": [
      [
        87
      ],
      256
    ],
    "120299": [
      [
        88
      ],
      256
    ],
    "120300": [
      [
        89
      ],
      256
    ],
    "120301": [
      [
        90
      ],
      256
    ],
    "120302": [
      [
        97
      ],
      256
    ],
    "120303": [
      [
        98
      ],
      256
    ],
    "120304": [
      [
        99
      ],
      256
    ],
    "120305": [
      [
        100
      ],
      256
    ],
    "120306": [
      [
        101
      ],
      256
    ],
    "120307": [
      [
        102
      ],
      256
    ],
    "120308": [
      [
        103
      ],
      256
    ],
    "120309": [
      [
        104
      ],
      256
    ],
    "120310": [
      [
        105
      ],
      256
    ],
    "120311": [
      [
        106
      ],
      256
    ],
    "120312": [
      [
        107
      ],
      256
    ],
    "120313": [
      [
        108
      ],
      256
    ],
    "120314": [
      [
        109
      ],
      256
    ],
    "120315": [
      [
        110
      ],
      256
    ],
    "120316": [
      [
        111
      ],
      256
    ],
    "120317": [
      [
        112
      ],
      256
    ],
    "120318": [
      [
        113
      ],
      256
    ],
    "120319": [
      [
        114
      ],
      256
    ]
  },
  "54784": {
    "120320": [
      [
        115
      ],
      256
    ],
    "120321": [
      [
        116
      ],
      256
    ],
    "120322": [
      [
        117
      ],
      256
    ],
    "120323": [
      [
        118
      ],
      256
    ],
    "120324": [
      [
        119
      ],
      256
    ],
    "120325": [
      [
        120
      ],
      256
    ],
    "120326": [
      [
        121
      ],
      256
    ],
    "120327": [
      [
        122
      ],
      256
    ],
    "120328": [
      [
        65
      ],
      256
    ],
    "120329": [
      [
        66
      ],
      256
    ],
    "120330": [
      [
        67
      ],
      256
    ],
    "120331": [
      [
        68
      ],
      256
    ],
    "120332": [
      [
        69
      ],
      256
    ],
    "120333": [
      [
        70
      ],
      256
    ],
    "120334": [
      [
        71
      ],
      256
    ],
    "120335": [
      [
        72
      ],
      256
    ],
    "120336": [
      [
        73
      ],
      256
    ],
    "120337": [
      [
        74
      ],
      256
    ],
    "120338": [
      [
        75
      ],
      256
    ],
    "120339": [
      [
        76
      ],
      256
    ],
    "120340": [
      [
        77
      ],
      256
    ],
    "120341": [
      [
        78
      ],
      256
    ],
    "120342": [
      [
        79
      ],
      256
    ],
    "120343": [
      [
        80
      ],
      256
    ],
    "120344": [
      [
        81
      ],
      256
    ],
    "120345": [
      [
        82
      ],
      256
    ],
    "120346": [
      [
        83
      ],
      256
    ],
    "120347": [
      [
        84
      ],
      256
    ],
    "120348": [
      [
        85
      ],
      256
    ],
    "120349": [
      [
        86
      ],
      256
    ],
    "120350": [
      [
        87
      ],
      256
    ],
    "120351": [
      [
        88
      ],
      256
    ],
    "120352": [
      [
        89
      ],
      256
    ],
    "120353": [
      [
        90
      ],
      256
    ],
    "120354": [
      [
        97
      ],
      256
    ],
    "120355": [
      [
        98
      ],
      256
    ],
    "120356": [
      [
        99
      ],
      256
    ],
    "120357": [
      [
        100
      ],
      256
    ],
    "120358": [
      [
        101
      ],
      256
    ],
    "120359": [
      [
        102
      ],
      256
    ],
    "120360": [
      [
        103
      ],
      256
    ],
    "120361": [
      [
        104
      ],
      256
    ],
    "120362": [
      [
        105
      ],
      256
    ],
    "120363": [
      [
        106
      ],
      256
    ],
    "120364": [
      [
        107
      ],
      256
    ],
    "120365": [
      [
        108
      ],
      256
    ],
    "120366": [
      [
        109
      ],
      256
    ],
    "120367": [
      [
        110
      ],
      256
    ],
    "120368": [
      [
        111
      ],
      256
    ],
    "120369": [
      [
        112
      ],
      256
    ],
    "120370": [
      [
        113
      ],
      256
    ],
    "120371": [
      [
        114
      ],
      256
    ],
    "120372": [
      [
        115
      ],
      256
    ],
    "120373": [
      [
        116
      ],
      256
    ],
    "120374": [
      [
        117
      ],
      256
    ],
    "120375": [
      [
        118
      ],
      256
    ],
    "120376": [
      [
        119
      ],
      256
    ],
    "120377": [
      [
        120
      ],
      256
    ],
    "120378": [
      [
        121
      ],
      256
    ],
    "120379": [
      [
        122
      ],
      256
    ],
    "120380": [
      [
        65
      ],
      256
    ],
    "120381": [
      [
        66
      ],
      256
    ],
    "120382": [
      [
        67
      ],
      256
    ],
    "120383": [
      [
        68
      ],
      256
    ],
    "120384": [
      [
        69
      ],
      256
    ],
    "120385": [
      [
        70
      ],
      256
    ],
    "120386": [
      [
        71
      ],
      256
    ],
    "120387": [
      [
        72
      ],
      256
    ],
    "120388": [
      [
        73
      ],
      256
    ],
    "120389": [
      [
        74
      ],
      256
    ],
    "120390": [
      [
        75
      ],
      256
    ],
    "120391": [
      [
        76
      ],
      256
    ],
    "120392": [
      [
        77
      ],
      256
    ],
    "120393": [
      [
        78
      ],
      256
    ],
    "120394": [
      [
        79
      ],
      256
    ],
    "120395": [
      [
        80
      ],
      256
    ],
    "120396": [
      [
        81
      ],
      256
    ],
    "120397": [
      [
        82
      ],
      256
    ],
    "120398": [
      [
        83
      ],
      256
    ],
    "120399": [
      [
        84
      ],
      256
    ],
    "120400": [
      [
        85
      ],
      256
    ],
    "120401": [
      [
        86
      ],
      256
    ],
    "120402": [
      [
        87
      ],
      256
    ],
    "120403": [
      [
        88
      ],
      256
    ],
    "120404": [
      [
        89
      ],
      256
    ],
    "120405": [
      [
        90
      ],
      256
    ],
    "120406": [
      [
        97
      ],
      256
    ],
    "120407": [
      [
        98
      ],
      256
    ],
    "120408": [
      [
        99
      ],
      256
    ],
    "120409": [
      [
        100
      ],
      256
    ],
    "120410": [
      [
        101
      ],
      256
    ],
    "120411": [
      [
        102
      ],
      256
    ],
    "120412": [
      [
        103
      ],
      256
    ],
    "120413": [
      [
        104
      ],
      256
    ],
    "120414": [
      [
        105
      ],
      256
    ],
    "120415": [
      [
        106
      ],
      256
    ],
    "120416": [
      [
        107
      ],
      256
    ],
    "120417": [
      [
        108
      ],
      256
    ],
    "120418": [
      [
        109
      ],
      256
    ],
    "120419": [
      [
        110
      ],
      256
    ],
    "120420": [
      [
        111
      ],
      256
    ],
    "120421": [
      [
        112
      ],
      256
    ],
    "120422": [
      [
        113
      ],
      256
    ],
    "120423": [
      [
        114
      ],
      256
    ],
    "120424": [
      [
        115
      ],
      256
    ],
    "120425": [
      [
        116
      ],
      256
    ],
    "120426": [
      [
        117
      ],
      256
    ],
    "120427": [
      [
        118
      ],
      256
    ],
    "120428": [
      [
        119
      ],
      256
    ],
    "120429": [
      [
        120
      ],
      256
    ],
    "120430": [
      [
        121
      ],
      256
    ],
    "120431": [
      [
        122
      ],
      256
    ],
    "120432": [
      [
        65
      ],
      256
    ],
    "120433": [
      [
        66
      ],
      256
    ],
    "120434": [
      [
        67
      ],
      256
    ],
    "120435": [
      [
        68
      ],
      256
    ],
    "120436": [
      [
        69
      ],
      256
    ],
    "120437": [
      [
        70
      ],
      256
    ],
    "120438": [
      [
        71
      ],
      256
    ],
    "120439": [
      [
        72
      ],
      256
    ],
    "120440": [
      [
        73
      ],
      256
    ],
    "120441": [
      [
        74
      ],
      256
    ],
    "120442": [
      [
        75
      ],
      256
    ],
    "120443": [
      [
        76
      ],
      256
    ],
    "120444": [
      [
        77
      ],
      256
    ],
    "120445": [
      [
        78
      ],
      256
    ],
    "120446": [
      [
        79
      ],
      256
    ],
    "120447": [
      [
        80
      ],
      256
    ],
    "120448": [
      [
        81
      ],
      256
    ],
    "120449": [
      [
        82
      ],
      256
    ],
    "120450": [
      [
        83
      ],
      256
    ],
    "120451": [
      [
        84
      ],
      256
    ],
    "120452": [
      [
        85
      ],
      256
    ],
    "120453": [
      [
        86
      ],
      256
    ],
    "120454": [
      [
        87
      ],
      256
    ],
    "120455": [
      [
        88
      ],
      256
    ],
    "120456": [
      [
        89
      ],
      256
    ],
    "120457": [
      [
        90
      ],
      256
    ],
    "120458": [
      [
        97
      ],
      256
    ],
    "120459": [
      [
        98
      ],
      256
    ],
    "120460": [
      [
        99
      ],
      256
    ],
    "120461": [
      [
        100
      ],
      256
    ],
    "120462": [
      [
        101
      ],
      256
    ],
    "120463": [
      [
        102
      ],
      256
    ],
    "120464": [
      [
        103
      ],
      256
    ],
    "120465": [
      [
        104
      ],
      256
    ],
    "120466": [
      [
        105
      ],
      256
    ],
    "120467": [
      [
        106
      ],
      256
    ],
    "120468": [
      [
        107
      ],
      256
    ],
    "120469": [
      [
        108
      ],
      256
    ],
    "120470": [
      [
        109
      ],
      256
    ],
    "120471": [
      [
        110
      ],
      256
    ],
    "120472": [
      [
        111
      ],
      256
    ],
    "120473": [
      [
        112
      ],
      256
    ],
    "120474": [
      [
        113
      ],
      256
    ],
    "120475": [
      [
        114
      ],
      256
    ],
    "120476": [
      [
        115
      ],
      256
    ],
    "120477": [
      [
        116
      ],
      256
    ],
    "120478": [
      [
        117
      ],
      256
    ],
    "120479": [
      [
        118
      ],
      256
    ],
    "120480": [
      [
        119
      ],
      256
    ],
    "120481": [
      [
        120
      ],
      256
    ],
    "120482": [
      [
        121
      ],
      256
    ],
    "120483": [
      [
        122
      ],
      256
    ],
    "120484": [
      [
        305
      ],
      256
    ],
    "120485": [
      [
        567
      ],
      256
    ],
    "120488": [
      [
        913
      ],
      256
    ],
    "120489": [
      [
        914
      ],
      256
    ],
    "120490": [
      [
        915
      ],
      256
    ],
    "120491": [
      [
        916
      ],
      256
    ],
    "120492": [
      [
        917
      ],
      256
    ],
    "120493": [
      [
        918
      ],
      256
    ],
    "120494": [
      [
        919
      ],
      256
    ],
    "120495": [
      [
        920
      ],
      256
    ],
    "120496": [
      [
        921
      ],
      256
    ],
    "120497": [
      [
        922
      ],
      256
    ],
    "120498": [
      [
        923
      ],
      256
    ],
    "120499": [
      [
        924
      ],
      256
    ],
    "120500": [
      [
        925
      ],
      256
    ],
    "120501": [
      [
        926
      ],
      256
    ],
    "120502": [
      [
        927
      ],
      256
    ],
    "120503": [
      [
        928
      ],
      256
    ],
    "120504": [
      [
        929
      ],
      256
    ],
    "120505": [
      [
        1012
      ],
      256
    ],
    "120506": [
      [
        931
      ],
      256
    ],
    "120507": [
      [
        932
      ],
      256
    ],
    "120508": [
      [
        933
      ],
      256
    ],
    "120509": [
      [
        934
      ],
      256
    ],
    "120510": [
      [
        935
      ],
      256
    ],
    "120511": [
      [
        936
      ],
      256
    ],
    "120512": [
      [
        937
      ],
      256
    ],
    "120513": [
      [
        8711
      ],
      256
    ],
    "120514": [
      [
        945
      ],
      256
    ],
    "120515": [
      [
        946
      ],
      256
    ],
    "120516": [
      [
        947
      ],
      256
    ],
    "120517": [
      [
        948
      ],
      256
    ],
    "120518": [
      [
        949
      ],
      256
    ],
    "120519": [
      [
        950
      ],
      256
    ],
    "120520": [
      [
        951
      ],
      256
    ],
    "120521": [
      [
        952
      ],
      256
    ],
    "120522": [
      [
        953
      ],
      256
    ],
    "120523": [
      [
        954
      ],
      256
    ],
    "120524": [
      [
        955
      ],
      256
    ],
    "120525": [
      [
        956
      ],
      256
    ],
    "120526": [
      [
        957
      ],
      256
    ],
    "120527": [
      [
        958
      ],
      256
    ],
    "120528": [
      [
        959
      ],
      256
    ],
    "120529": [
      [
        960
      ],
      256
    ],
    "120530": [
      [
        961
      ],
      256
    ],
    "120531": [
      [
        962
      ],
      256
    ],
    "120532": [
      [
        963
      ],
      256
    ],
    "120533": [
      [
        964
      ],
      256
    ],
    "120534": [
      [
        965
      ],
      256
    ],
    "120535": [
      [
        966
      ],
      256
    ],
    "120536": [
      [
        967
      ],
      256
    ],
    "120537": [
      [
        968
      ],
      256
    ],
    "120538": [
      [
        969
      ],
      256
    ],
    "120539": [
      [
        8706
      ],
      256
    ],
    "120540": [
      [
        1013
      ],
      256
    ],
    "120541": [
      [
        977
      ],
      256
    ],
    "120542": [
      [
        1008
      ],
      256
    ],
    "120543": [
      [
        981
      ],
      256
    ],
    "120544": [
      [
        1009
      ],
      256
    ],
    "120545": [
      [
        982
      ],
      256
    ],
    "120546": [
      [
        913
      ],
      256
    ],
    "120547": [
      [
        914
      ],
      256
    ],
    "120548": [
      [
        915
      ],
      256
    ],
    "120549": [
      [
        916
      ],
      256
    ],
    "120550": [
      [
        917
      ],
      256
    ],
    "120551": [
      [
        918
      ],
      256
    ],
    "120552": [
      [
        919
      ],
      256
    ],
    "120553": [
      [
        920
      ],
      256
    ],
    "120554": [
      [
        921
      ],
      256
    ],
    "120555": [
      [
        922
      ],
      256
    ],
    "120556": [
      [
        923
      ],
      256
    ],
    "120557": [
      [
        924
      ],
      256
    ],
    "120558": [
      [
        925
      ],
      256
    ],
    "120559": [
      [
        926
      ],
      256
    ],
    "120560": [
      [
        927
      ],
      256
    ],
    "120561": [
      [
        928
      ],
      256
    ],
    "120562": [
      [
        929
      ],
      256
    ],
    "120563": [
      [
        1012
      ],
      256
    ],
    "120564": [
      [
        931
      ],
      256
    ],
    "120565": [
      [
        932
      ],
      256
    ],
    "120566": [
      [
        933
      ],
      256
    ],
    "120567": [
      [
        934
      ],
      256
    ],
    "120568": [
      [
        935
      ],
      256
    ],
    "120569": [
      [
        936
      ],
      256
    ],
    "120570": [
      [
        937
      ],
      256
    ],
    "120571": [
      [
        8711
      ],
      256
    ],
    "120572": [
      [
        945
      ],
      256
    ],
    "120573": [
      [
        946
      ],
      256
    ],
    "120574": [
      [
        947
      ],
      256
    ],
    "120575": [
      [
        948
      ],
      256
    ]
  },
  "55040": {
    "120576": [
      [
        949
      ],
      256
    ],
    "120577": [
      [
        950
      ],
      256
    ],
    "120578": [
      [
        951
      ],
      256
    ],
    "120579": [
      [
        952
      ],
      256
    ],
    "120580": [
      [
        953
      ],
      256
    ],
    "120581": [
      [
        954
      ],
      256
    ],
    "120582": [
      [
        955
      ],
      256
    ],
    "120583": [
      [
        956
      ],
      256
    ],
    "120584": [
      [
        957
      ],
      256
    ],
    "120585": [
      [
        958
      ],
      256
    ],
    "120586": [
      [
        959
      ],
      256
    ],
    "120587": [
      [
        960
      ],
      256
    ],
    "120588": [
      [
        961
      ],
      256
    ],
    "120589": [
      [
        962
      ],
      256
    ],
    "120590": [
      [
        963
      ],
      256
    ],
    "120591": [
      [
        964
      ],
      256
    ],
    "120592": [
      [
        965
      ],
      256
    ],
    "120593": [
      [
        966
      ],
      256
    ],
    "120594": [
      [
        967
      ],
      256
    ],
    "120595": [
      [
        968
      ],
      256
    ],
    "120596": [
      [
        969
      ],
      256
    ],
    "120597": [
      [
        8706
      ],
      256
    ],
    "120598": [
      [
        1013
      ],
      256
    ],
    "120599": [
      [
        977
      ],
      256
    ],
    "120600": [
      [
        1008
      ],
      256
    ],
    "120601": [
      [
        981
      ],
      256
    ],
    "120602": [
      [
        1009
      ],
      256
    ],
    "120603": [
      [
        982
      ],
      256
    ],
    "120604": [
      [
        913
      ],
      256
    ],
    "120605": [
      [
        914
      ],
      256
    ],
    "120606": [
      [
        915
      ],
      256
    ],
    "120607": [
      [
        916
      ],
      256
    ],
    "120608": [
      [
        917
      ],
      256
    ],
    "120609": [
      [
        918
      ],
      256
    ],
    "120610": [
      [
        919
      ],
      256
    ],
    "120611": [
      [
        920
      ],
      256
    ],
    "120612": [
      [
        921
      ],
      256
    ],
    "120613": [
      [
        922
      ],
      256
    ],
    "120614": [
      [
        923
      ],
      256
    ],
    "120615": [
      [
        924
      ],
      256
    ],
    "120616": [
      [
        925
      ],
      256
    ],
    "120617": [
      [
        926
      ],
      256
    ],
    "120618": [
      [
        927
      ],
      256
    ],
    "120619": [
      [
        928
      ],
      256
    ],
    "120620": [
      [
        929
      ],
      256
    ],
    "120621": [
      [
        1012
      ],
      256
    ],
    "120622": [
      [
        931
      ],
      256
    ],
    "120623": [
      [
        932
      ],
      256
    ],
    "120624": [
      [
        933
      ],
      256
    ],
    "120625": [
      [
        934
      ],
      256
    ],
    "120626": [
      [
        935
      ],
      256
    ],
    "120627": [
      [
        936
      ],
      256
    ],
    "120628": [
      [
        937
      ],
      256
    ],
    "120629": [
      [
        8711
      ],
      256
    ],
    "120630": [
      [
        945
      ],
      256
    ],
    "120631": [
      [
        946
      ],
      256
    ],
    "120632": [
      [
        947
      ],
      256
    ],
    "120633": [
      [
        948
      ],
      256
    ],
    "120634": [
      [
        949
      ],
      256
    ],
    "120635": [
      [
        950
      ],
      256
    ],
    "120636": [
      [
        951
      ],
      256
    ],
    "120637": [
      [
        952
      ],
      256
    ],
    "120638": [
      [
        953
      ],
      256
    ],
    "120639": [
      [
        954
      ],
      256
    ],
    "120640": [
      [
        955
      ],
      256
    ],
    "120641": [
      [
        956
      ],
      256
    ],
    "120642": [
      [
        957
      ],
      256
    ],
    "120643": [
      [
        958
      ],
      256
    ],
    "120644": [
      [
        959
      ],
      256
    ],
    "120645": [
      [
        960
      ],
      256
    ],
    "120646": [
      [
        961
      ],
      256
    ],
    "120647": [
      [
        962
      ],
      256
    ],
    "120648": [
      [
        963
      ],
      256
    ],
    "120649": [
      [
        964
      ],
      256
    ],
    "120650": [
      [
        965
      ],
      256
    ],
    "120651": [
      [
        966
      ],
      256
    ],
    "120652": [
      [
        967
      ],
      256
    ],
    "120653": [
      [
        968
      ],
      256
    ],
    "120654": [
      [
        969
      ],
      256
    ],
    "120655": [
      [
        8706
      ],
      256
    ],
    "120656": [
      [
        1013
      ],
      256
    ],
    "120657": [
      [
        977
      ],
      256
    ],
    "120658": [
      [
        1008
      ],
      256
    ],
    "120659": [
      [
        981
      ],
      256
    ],
    "120660": [
      [
        1009
      ],
      256
    ],
    "120661": [
      [
        982
      ],
      256
    ],
    "120662": [
      [
        913
      ],
      256
    ],
    "120663": [
      [
        914
      ],
      256
    ],
    "120664": [
      [
        915
      ],
      256
    ],
    "120665": [
      [
        916
      ],
      256
    ],
    "120666": [
      [
        917
      ],
      256
    ],
    "120667": [
      [
        918
      ],
      256
    ],
    "120668": [
      [
        919
      ],
      256
    ],
    "120669": [
      [
        920
      ],
      256
    ],
    "120670": [
      [
        921
      ],
      256
    ],
    "120671": [
      [
        922
      ],
      256
    ],
    "120672": [
      [
        923
      ],
      256
    ],
    "120673": [
      [
        924
      ],
      256
    ],
    "120674": [
      [
        925
      ],
      256
    ],
    "120675": [
      [
        926
      ],
      256
    ],
    "120676": [
      [
        927
      ],
      256
    ],
    "120677": [
      [
        928
      ],
      256
    ],
    "120678": [
      [
        929
      ],
      256
    ],
    "120679": [
      [
        1012
      ],
      256
    ],
    "120680": [
      [
        931
      ],
      256
    ],
    "120681": [
      [
        932
      ],
      256
    ],
    "120682": [
      [
        933
      ],
      256
    ],
    "120683": [
      [
        934
      ],
      256
    ],
    "120684": [
      [
        935
      ],
      256
    ],
    "120685": [
      [
        936
      ],
      256
    ],
    "120686": [
      [
        937
      ],
      256
    ],
    "120687": [
      [
        8711
      ],
      256
    ],
    "120688": [
      [
        945
      ],
      256
    ],
    "120689": [
      [
        946
      ],
      256
    ],
    "120690": [
      [
        947
      ],
      256
    ],
    "120691": [
      [
        948
      ],
      256
    ],
    "120692": [
      [
        949
      ],
      256
    ],
    "120693": [
      [
        950
      ],
      256
    ],
    "120694": [
      [
        951
      ],
      256
    ],
    "120695": [
      [
        952
      ],
      256
    ],
    "120696": [
      [
        953
      ],
      256
    ],
    "120697": [
      [
        954
      ],
      256
    ],
    "120698": [
      [
        955
      ],
      256
    ],
    "120699": [
      [
        956
      ],
      256
    ],
    "120700": [
      [
        957
      ],
      256
    ],
    "120701": [
      [
        958
      ],
      256
    ],
    "120702": [
      [
        959
      ],
      256
    ],
    "120703": [
      [
        960
      ],
      256
    ],
    "120704": [
      [
        961
      ],
      256
    ],
    "120705": [
      [
        962
      ],
      256
    ],
    "120706": [
      [
        963
      ],
      256
    ],
    "120707": [
      [
        964
      ],
      256
    ],
    "120708": [
      [
        965
      ],
      256
    ],
    "120709": [
      [
        966
      ],
      256
    ],
    "120710": [
      [
        967
      ],
      256
    ],
    "120711": [
      [
        968
      ],
      256
    ],
    "120712": [
      [
        969
      ],
      256
    ],
    "120713": [
      [
        8706
      ],
      256
    ],
    "120714": [
      [
        1013
      ],
      256
    ],
    "120715": [
      [
        977
      ],
      256
    ],
    "120716": [
      [
        1008
      ],
      256
    ],
    "120717": [
      [
        981
      ],
      256
    ],
    "120718": [
      [
        1009
      ],
      256
    ],
    "120719": [
      [
        982
      ],
      256
    ],
    "120720": [
      [
        913
      ],
      256
    ],
    "120721": [
      [
        914
      ],
      256
    ],
    "120722": [
      [
        915
      ],
      256
    ],
    "120723": [
      [
        916
      ],
      256
    ],
    "120724": [
      [
        917
      ],
      256
    ],
    "120725": [
      [
        918
      ],
      256
    ],
    "120726": [
      [
        919
      ],
      256
    ],
    "120727": [
      [
        920
      ],
      256
    ],
    "120728": [
      [
        921
      ],
      256
    ],
    "120729": [
      [
        922
      ],
      256
    ],
    "120730": [
      [
        923
      ],
      256
    ],
    "120731": [
      [
        924
      ],
      256
    ],
    "120732": [
      [
        925
      ],
      256
    ],
    "120733": [
      [
        926
      ],
      256
    ],
    "120734": [
      [
        927
      ],
      256
    ],
    "120735": [
      [
        928
      ],
      256
    ],
    "120736": [
      [
        929
      ],
      256
    ],
    "120737": [
      [
        1012
      ],
      256
    ],
    "120738": [
      [
        931
      ],
      256
    ],
    "120739": [
      [
        932
      ],
      256
    ],
    "120740": [
      [
        933
      ],
      256
    ],
    "120741": [
      [
        934
      ],
      256
    ],
    "120742": [
      [
        935
      ],
      256
    ],
    "120743": [
      [
        936
      ],
      256
    ],
    "120744": [
      [
        937
      ],
      256
    ],
    "120745": [
      [
        8711
      ],
      256
    ],
    "120746": [
      [
        945
      ],
      256
    ],
    "120747": [
      [
        946
      ],
      256
    ],
    "120748": [
      [
        947
      ],
      256
    ],
    "120749": [
      [
        948
      ],
      256
    ],
    "120750": [
      [
        949
      ],
      256
    ],
    "120751": [
      [
        950
      ],
      256
    ],
    "120752": [
      [
        951
      ],
      256
    ],
    "120753": [
      [
        952
      ],
      256
    ],
    "120754": [
      [
        953
      ],
      256
    ],
    "120755": [
      [
        954
      ],
      256
    ],
    "120756": [
      [
        955
      ],
      256
    ],
    "120757": [
      [
        956
      ],
      256
    ],
    "120758": [
      [
        957
      ],
      256
    ],
    "120759": [
      [
        958
      ],
      256
    ],
    "120760": [
      [
        959
      ],
      256
    ],
    "120761": [
      [
        960
      ],
      256
    ],
    "120762": [
      [
        961
      ],
      256
    ],
    "120763": [
      [
        962
      ],
      256
    ],
    "120764": [
      [
        963
      ],
      256
    ],
    "120765": [
      [
        964
      ],
      256
    ],
    "120766": [
      [
        965
      ],
      256
    ],
    "120767": [
      [
        966
      ],
      256
    ],
    "120768": [
      [
        967
      ],
      256
    ],
    "120769": [
      [
        968
      ],
      256
    ],
    "120770": [
      [
        969
      ],
      256
    ],
    "120771": [
      [
        8706
      ],
      256
    ],
    "120772": [
      [
        1013
      ],
      256
    ],
    "120773": [
      [
        977
      ],
      256
    ],
    "120774": [
      [
        1008
      ],
      256
    ],
    "120775": [
      [
        981
      ],
      256
    ],
    "120776": [
      [
        1009
      ],
      256
    ],
    "120777": [
      [
        982
      ],
      256
    ],
    "120778": [
      [
        988
      ],
      256
    ],
    "120779": [
      [
        989
      ],
      256
    ],
    "120782": [
      [
        48
      ],
      256
    ],
    "120783": [
      [
        49
      ],
      256
    ],
    "120784": [
      [
        50
      ],
      256
    ],
    "120785": [
      [
        51
      ],
      256
    ],
    "120786": [
      [
        52
      ],
      256
    ],
    "120787": [
      [
        53
      ],
      256
    ],
    "120788": [
      [
        54
      ],
      256
    ],
    "120789": [
      [
        55
      ],
      256
    ],
    "120790": [
      [
        56
      ],
      256
    ],
    "120791": [
      [
        57
      ],
      256
    ],
    "120792": [
      [
        48
      ],
      256
    ],
    "120793": [
      [
        49
      ],
      256
    ],
    "120794": [
      [
        50
      ],
      256
    ],
    "120795": [
      [
        51
      ],
      256
    ],
    "120796": [
      [
        52
      ],
      256
    ],
    "120797": [
      [
        53
      ],
      256
    ],
    "120798": [
      [
        54
      ],
      256
    ],
    "120799": [
      [
        55
      ],
      256
    ],
    "120800": [
      [
        56
      ],
      256
    ],
    "120801": [
      [
        57
      ],
      256
    ],
    "120802": [
      [
        48
      ],
      256
    ],
    "120803": [
      [
        49
      ],
      256
    ],
    "120804": [
      [
        50
      ],
      256
    ],
    "120805": [
      [
        51
      ],
      256
    ],
    "120806": [
      [
        52
      ],
      256
    ],
    "120807": [
      [
        53
      ],
      256
    ],
    "120808": [
      [
        54
      ],
      256
    ],
    "120809": [
      [
        55
      ],
      256
    ],
    "120810": [
      [
        56
      ],
      256
    ],
    "120811": [
      [
        57
      ],
      256
    ],
    "120812": [
      [
        48
      ],
      256
    ],
    "120813": [
      [
        49
      ],
      256
    ],
    "120814": [
      [
        50
      ],
      256
    ],
    "120815": [
      [
        51
      ],
      256
    ],
    "120816": [
      [
        52
      ],
      256
    ],
    "120817": [
      [
        53
      ],
      256
    ],
    "120818": [
      [
        54
      ],
      256
    ],
    "120819": [
      [
        55
      ],
      256
    ],
    "120820": [
      [
        56
      ],
      256
    ],
    "120821": [
      [
        57
      ],
      256
    ],
    "120822": [
      [
        48
      ],
      256
    ],
    "120823": [
      [
        49
      ],
      256
    ],
    "120824": [
      [
        50
      ],
      256
    ],
    "120825": [
      [
        51
      ],
      256
    ],
    "120826": [
      [
        52
      ],
      256
    ],
    "120827": [
      [
        53
      ],
      256
    ],
    "120828": [
      [
        54
      ],
      256
    ],
    "120829": [
      [
        55
      ],
      256
    ],
    "120830": [
      [
        56
      ],
      256
    ],
    "120831": [
      [
        57
      ],
      256
    ]
  },
  "59392": {
    "125136": [
      null,
      220
    ],
    "125137": [
      null,
      220
    ],
    "125138": [
      null,
      220
    ],
    "125139": [
      null,
      220
    ],
    "125140": [
      null,
      220
    ],
    "125141": [
      null,
      220
    ],
    "125142": [
      null,
      220
    ]
  },
  "60928": {
    "126464": [
      [
        1575
      ],
      256
    ],
    "126465": [
      [
        1576
      ],
      256
    ],
    "126466": [
      [
        1580
      ],
      256
    ],
    "126467": [
      [
        1583
      ],
      256
    ],
    "126469": [
      [
        1608
      ],
      256
    ],
    "126470": [
      [
        1586
      ],
      256
    ],
    "126471": [
      [
        1581
      ],
      256
    ],
    "126472": [
      [
        1591
      ],
      256
    ],
    "126473": [
      [
        1610
      ],
      256
    ],
    "126474": [
      [
        1603
      ],
      256
    ],
    "126475": [
      [
        1604
      ],
      256
    ],
    "126476": [
      [
        1605
      ],
      256
    ],
    "126477": [
      [
        1606
      ],
      256
    ],
    "126478": [
      [
        1587
      ],
      256
    ],
    "126479": [
      [
        1593
      ],
      256
    ],
    "126480": [
      [
        1601
      ],
      256
    ],
    "126481": [
      [
        1589
      ],
      256
    ],
    "126482": [
      [
        1602
      ],
      256
    ],
    "126483": [
      [
        1585
      ],
      256
    ],
    "126484": [
      [
        1588
      ],
      256
    ],
    "126485": [
      [
        1578
      ],
      256
    ],
    "126486": [
      [
        1579
      ],
      256
    ],
    "126487": [
      [
        1582
      ],
      256
    ],
    "126488": [
      [
        1584
      ],
      256
    ],
    "126489": [
      [
        1590
      ],
      256
    ],
    "126490": [
      [
        1592
      ],
      256
    ],
    "126491": [
      [
        1594
      ],
      256
    ],
    "126492": [
      [
        1646
      ],
      256
    ],
    "126493": [
      [
        1722
      ],
      256
    ],
    "126494": [
      [
        1697
      ],
      256
    ],
    "126495": [
      [
        1647
      ],
      256
    ],
    "126497": [
      [
        1576
      ],
      256
    ],
    "126498": [
      [
        1580
      ],
      256
    ],
    "126500": [
      [
        1607
      ],
      256
    ],
    "126503": [
      [
        1581
      ],
      256
    ],
    "126505": [
      [
        1610
      ],
      256
    ],
    "126506": [
      [
        1603
      ],
      256
    ],
    "126507": [
      [
        1604
      ],
      256
    ],
    "126508": [
      [
        1605
      ],
      256
    ],
    "126509": [
      [
        1606
      ],
      256
    ],
    "126510": [
      [
        1587
      ],
      256
    ],
    "126511": [
      [
        1593
      ],
      256
    ],
    "126512": [
      [
        1601
      ],
      256
    ],
    "126513": [
      [
        1589
      ],
      256
    ],
    "126514": [
      [
        1602
      ],
      256
    ],
    "126516": [
      [
        1588
      ],
      256
    ],
    "126517": [
      [
        1578
      ],
      256
    ],
    "126518": [
      [
        1579
      ],
      256
    ],
    "126519": [
      [
        1582
      ],
      256
    ],
    "126521": [
      [
        1590
      ],
      256
    ],
    "126523": [
      [
        1594
      ],
      256
    ],
    "126530": [
      [
        1580
      ],
      256
    ],
    "126535": [
      [
        1581
      ],
      256
    ],
    "126537": [
      [
        1610
      ],
      256
    ],
    "126539": [
      [
        1604
      ],
      256
    ],
    "126541": [
      [
        1606
      ],
      256
    ],
    "126542": [
      [
        1587
      ],
      256
    ],
    "126543": [
      [
        1593
      ],
      256
    ],
    "126545": [
      [
        1589
      ],
      256
    ],
    "126546": [
      [
        1602
      ],
      256
    ],
    "126548": [
      [
        1588
      ],
      256
    ],
    "126551": [
      [
        1582
      ],
      256
    ],
    "126553": [
      [
        1590
      ],
      256
    ],
    "126555": [
      [
        1594
      ],
      256
    ],
    "126557": [
      [
        1722
      ],
      256
    ],
    "126559": [
      [
        1647
      ],
      256
    ],
    "126561": [
      [
        1576
      ],
      256
    ],
    "126562": [
      [
        1580
      ],
      256
    ],
    "126564": [
      [
        1607
      ],
      256
    ],
    "126567": [
      [
        1581
      ],
      256
    ],
    "126568": [
      [
        1591
      ],
      256
    ],
    "126569": [
      [
        1610
      ],
      256
    ],
    "126570": [
      [
        1603
      ],
      256
    ],
    "126572": [
      [
        1605
      ],
      256
    ],
    "126573": [
      [
        1606
      ],
      256
    ],
    "126574": [
      [
        1587
      ],
      256
    ],
    "126575": [
      [
        1593
      ],
      256
    ],
    "126576": [
      [
        1601
      ],
      256
    ],
    "126577": [
      [
        1589
      ],
      256
    ],
    "126578": [
      [
        1602
      ],
      256
    ],
    "126580": [
      [
        1588
      ],
      256
    ],
    "126581": [
      [
        1578
      ],
      256
    ],
    "126582": [
      [
        1579
      ],
      256
    ],
    "126583": [
      [
        1582
      ],
      256
    ],
    "126585": [
      [
        1590
      ],
      256
    ],
    "126586": [
      [
        1592
      ],
      256
    ],
    "126587": [
      [
        1594
      ],
      256
    ],
    "126588": [
      [
        1646
      ],
      256
    ],
    "126590": [
      [
        1697
      ],
      256
    ],
    "126592": [
      [
        1575
      ],
      256
    ],
    "126593": [
      [
        1576
      ],
      256
    ],
    "126594": [
      [
        1580
      ],
      256
    ],
    "126595": [
      [
        1583
      ],
      256
    ],
    "126596": [
      [
        1607
      ],
      256
    ],
    "126597": [
      [
        1608
      ],
      256
    ],
    "126598": [
      [
        1586
      ],
      256
    ],
    "126599": [
      [
        1581
      ],
      256
    ],
    "126600": [
      [
        1591
      ],
      256
    ],
    "126601": [
      [
        1610
      ],
      256
    ],
    "126603": [
      [
        1604
      ],
      256
    ],
    "126604": [
      [
        1605
      ],
      256
    ],
    "126605": [
      [
        1606
      ],
      256
    ],
    "126606": [
      [
        1587
      ],
      256
    ],
    "126607": [
      [
        1593
      ],
      256
    ],
    "126608": [
      [
        1601
      ],
      256
    ],
    "126609": [
      [
        1589
      ],
      256
    ],
    "126610": [
      [
        1602
      ],
      256
    ],
    "126611": [
      [
        1585
      ],
      256
    ],
    "126612": [
      [
        1588
      ],
      256
    ],
    "126613": [
      [
        1578
      ],
      256
    ],
    "126614": [
      [
        1579
      ],
      256
    ],
    "126615": [
      [
        1582
      ],
      256
    ],
    "126616": [
      [
        1584
      ],
      256
    ],
    "126617": [
      [
        1590
      ],
      256
    ],
    "126618": [
      [
        1592
      ],
      256
    ],
    "126619": [
      [
        1594
      ],
      256
    ],
    "126625": [
      [
        1576
      ],
      256
    ],
    "126626": [
      [
        1580
      ],
      256
    ],
    "126627": [
      [
        1583
      ],
      256
    ],
    "126629": [
      [
        1608
      ],
      256
    ],
    "126630": [
      [
        1586
      ],
      256
    ],
    "126631": [
      [
        1581
      ],
      256
    ],
    "126632": [
      [
        1591
      ],
      256
    ],
    "126633": [
      [
        1610
      ],
      256
    ],
    "126635": [
      [
        1604
      ],
      256
    ],
    "126636": [
      [
        1605
      ],
      256
    ],
    "126637": [
      [
        1606
      ],
      256
    ],
    "126638": [
      [
        1587
      ],
      256
    ],
    "126639": [
      [
        1593
      ],
      256
    ],
    "126640": [
      [
        1601
      ],
      256
    ],
    "126641": [
      [
        1589
      ],
      256
    ],
    "126642": [
      [
        1602
      ],
      256
    ],
    "126643": [
      [
        1585
      ],
      256
    ],
    "126644": [
      [
        1588
      ],
      256
    ],
    "126645": [
      [
        1578
      ],
      256
    ],
    "126646": [
      [
        1579
      ],
      256
    ],
    "126647": [
      [
        1582
      ],
      256
    ],
    "126648": [
      [
        1584
      ],
      256
    ],
    "126649": [
      [
        1590
      ],
      256
    ],
    "126650": [
      [
        1592
      ],
      256
    ],
    "126651": [
      [
        1594
      ],
      256
    ]
  },
  "61696": {
    "127232": [
      [
        48,
        46
      ],
      256
    ],
    "127233": [
      [
        48,
        44
      ],
      256
    ],
    "127234": [
      [
        49,
        44
      ],
      256
    ],
    "127235": [
      [
        50,
        44
      ],
      256
    ],
    "127236": [
      [
        51,
        44
      ],
      256
    ],
    "127237": [
      [
        52,
        44
      ],
      256
    ],
    "127238": [
      [
        53,
        44
      ],
      256
    ],
    "127239": [
      [
        54,
        44
      ],
      256
    ],
    "127240": [
      [
        55,
        44
      ],
      256
    ],
    "127241": [
      [
        56,
        44
      ],
      256
    ],
    "127242": [
      [
        57,
        44
      ],
      256
    ],
    "127248": [
      [
        40,
        65,
        41
      ],
      256
    ],
    "127249": [
      [
        40,
        66,
        41
      ],
      256
    ],
    "127250": [
      [
        40,
        67,
        41
      ],
      256
    ],
    "127251": [
      [
        40,
        68,
        41
      ],
      256
    ],
    "127252": [
      [
        40,
        69,
        41
      ],
      256
    ],
    "127253": [
      [
        40,
        70,
        41
      ],
      256
    ],
    "127254": [
      [
        40,
        71,
        41
      ],
      256
    ],
    "127255": [
      [
        40,
        72,
        41
      ],
      256
    ],
    "127256": [
      [
        40,
        73,
        41
      ],
      256
    ],
    "127257": [
      [
        40,
        74,
        41
      ],
      256
    ],
    "127258": [
      [
        40,
        75,
        41
      ],
      256
    ],
    "127259": [
      [
        40,
        76,
        41
      ],
      256
    ],
    "127260": [
      [
        40,
        77,
        41
      ],
      256
    ],
    "127261": [
      [
        40,
        78,
        41
      ],
      256
    ],
    "127262": [
      [
        40,
        79,
        41
      ],
      256
    ],
    "127263": [
      [
        40,
        80,
        41
      ],
      256
    ],
    "127264": [
      [
        40,
        81,
        41
      ],
      256
    ],
    "127265": [
      [
        40,
        82,
        41
      ],
      256
    ],
    "127266": [
      [
        40,
        83,
        41
      ],
      256
    ],
    "127267": [
      [
        40,
        84,
        41
      ],
      256
    ],
    "127268": [
      [
        40,
        85,
        41
      ],
      256
    ],
    "127269": [
      [
        40,
        86,
        41
      ],
      256
    ],
    "127270": [
      [
        40,
        87,
        41
      ],
      256
    ],
    "127271": [
      [
        40,
        88,
        41
      ],
      256
    ],
    "127272": [
      [
        40,
        89,
        41
      ],
      256
    ],
    "127273": [
      [
        40,
        90,
        41
      ],
      256
    ],
    "127274": [
      [
        12308,
        83,
        12309
      ],
      256
    ],
    "127275": [
      [
        67
      ],
      256
    ],
    "127276": [
      [
        82
      ],
      256
    ],
    "127277": [
      [
        67,
        68
      ],
      256
    ],
    "127278": [
      [
        87,
        90
      ],
      256
    ],
    "127280": [
      [
        65
      ],
      256
    ],
    "127281": [
      [
        66
      ],
      256
    ],
    "127282": [
      [
        67
      ],
      256
    ],
    "127283": [
      [
        68
      ],
      256
    ],
    "127284": [
      [
        69
      ],
      256
    ],
    "127285": [
      [
        70
      ],
      256
    ],
    "127286": [
      [
        71
      ],
      256
    ],
    "127287": [
      [
        72
      ],
      256
    ],
    "127288": [
      [
        73
      ],
      256
    ],
    "127289": [
      [
        74
      ],
      256
    ],
    "127290": [
      [
        75
      ],
      256
    ],
    "127291": [
      [
        76
      ],
      256
    ],
    "127292": [
      [
        77
      ],
      256
    ],
    "127293": [
      [
        78
      ],
      256
    ],
    "127294": [
      [
        79
      ],
      256
    ],
    "127295": [
      [
        80
      ],
      256
    ],
    "127296": [
      [
        81
      ],
      256
    ],
    "127297": [
      [
        82
      ],
      256
    ],
    "127298": [
      [
        83
      ],
      256
    ],
    "127299": [
      [
        84
      ],
      256
    ],
    "127300": [
      [
        85
      ],
      256
    ],
    "127301": [
      [
        86
      ],
      256
    ],
    "127302": [
      [
        87
      ],
      256
    ],
    "127303": [
      [
        88
      ],
      256
    ],
    "127304": [
      [
        89
      ],
      256
    ],
    "127305": [
      [
        90
      ],
      256
    ],
    "127306": [
      [
        72,
        86
      ],
      256
    ],
    "127307": [
      [
        77,
        86
      ],
      256
    ],
    "127308": [
      [
        83,
        68
      ],
      256
    ],
    "127309": [
      [
        83,
        83
      ],
      256
    ],
    "127310": [
      [
        80,
        80,
        86
      ],
      256
    ],
    "127311": [
      [
        87,
        67
      ],
      256
    ],
    "127338": [
      [
        77,
        67
      ],
      256
    ],
    "127339": [
      [
        77,
        68
      ],
      256
    ],
    "127376": [
      [
        68,
        74
      ],
      256
    ]
  },
  "61952": {
    "127488": [
      [
        12411,
        12363
      ],
      256
    ],
    "127489": [
      [
        12467,
        12467
      ],
      256
    ],
    "127490": [
      [
        12469
      ],
      256
    ],
    "127504": [
      [
        25163
      ],
      256
    ],
    "127505": [
      [
        23383
      ],
      256
    ],
    "127506": [
      [
        21452
      ],
      256
    ],
    "127507": [
      [
        12487
      ],
      256
    ],
    "127508": [
      [
        20108
      ],
      256
    ],
    "127509": [
      [
        22810
      ],
      256
    ],
    "127510": [
      [
        35299
      ],
      256
    ],
    "127511": [
      [
        22825
      ],
      256
    ],
    "127512": [
      [
        20132
      ],
      256
    ],
    "127513": [
      [
        26144
      ],
      256
    ],
    "127514": [
      [
        28961
      ],
      256
    ],
    "127515": [
      [
        26009
      ],
      256
    ],
    "127516": [
      [
        21069
      ],
      256
    ],
    "127517": [
      [
        24460
      ],
      256
    ],
    "127518": [
      [
        20877
      ],
      256
    ],
    "127519": [
      [
        26032
      ],
      256
    ],
    "127520": [
      [
        21021
      ],
      256
    ],
    "127521": [
      [
        32066
      ],
      256
    ],
    "127522": [
      [
        29983
      ],
      256
    ],
    "127523": [
      [
        36009
      ],
      256
    ],
    "127524": [
      [
        22768
      ],
      256
    ],
    "127525": [
      [
        21561
      ],
      256
    ],
    "127526": [
      [
        28436
      ],
      256
    ],
    "127527": [
      [
        25237
      ],
      256
    ],
    "127528": [
      [
        25429
      ],
      256
    ],
    "127529": [
      [
        19968
      ],
      256
    ],
    "127530": [
      [
        19977
      ],
      256
    ],
    "127531": [
      [
        36938
      ],
      256
    ],
    "127532": [
      [
        24038
      ],
      256
    ],
    "127533": [
      [
        20013
      ],
      256
    ],
    "127534": [
      [
        21491
      ],
      256
    ],
    "127535": [
      [
        25351
      ],
      256
    ],
    "127536": [
      [
        36208
      ],
      256
    ],
    "127537": [
      [
        25171
      ],
      256
    ],
    "127538": [
      [
        31105
      ],
      256
    ],
    "127539": [
      [
        31354
      ],
      256
    ],
    "127540": [
      [
        21512
      ],
      256
    ],
    "127541": [
      [
        28288
      ],
      256
    ],
    "127542": [
      [
        26377
      ],
      256
    ],
    "127543": [
      [
        26376
      ],
      256
    ],
    "127544": [
      [
        30003
      ],
      256
    ],
    "127545": [
      [
        21106
      ],
      256
    ],
    "127546": [
      [
        21942
      ],
      256
    ],
    "127552": [
      [
        12308,
        26412,
        12309
      ],
      256
    ],
    "127553": [
      [
        12308,
        19977,
        12309
      ],
      256
    ],
    "127554": [
      [
        12308,
        20108,
        12309
      ],
      256
    ],
    "127555": [
      [
        12308,
        23433,
        12309
      ],
      256
    ],
    "127556": [
      [
        12308,
        28857,
        12309
      ],
      256
    ],
    "127557": [
      [
        12308,
        25171,
        12309
      ],
      256
    ],
    "127558": [
      [
        12308,
        30423,
        12309
      ],
      256
    ],
    "127559": [
      [
        12308,
        21213,
        12309
      ],
      256
    ],
    "127560": [
      [
        12308,
        25943,
        12309
      ],
      256
    ],
    "127568": [
      [
        24471
      ],
      256
    ],
    "127569": [
      [
        21487
      ],
      256
    ]
  },
  "63488": {
    "194560": [
      [
        20029
      ]
    ],
    "194561": [
      [
        20024
      ]
    ],
    "194562": [
      [
        20033
      ]
    ],
    "194563": [
      [
        131362
      ]
    ],
    "194564": [
      [
        20320
      ]
    ],
    "194565": [
      [
        20398
      ]
    ],
    "194566": [
      [
        20411
      ]
    ],
    "194567": [
      [
        20482
      ]
    ],
    "194568": [
      [
        20602
      ]
    ],
    "194569": [
      [
        20633
      ]
    ],
    "194570": [
      [
        20711
      ]
    ],
    "194571": [
      [
        20687
      ]
    ],
    "194572": [
      [
        13470
      ]
    ],
    "194573": [
      [
        132666
      ]
    ],
    "194574": [
      [
        20813
      ]
    ],
    "194575": [
      [
        20820
      ]
    ],
    "194576": [
      [
        20836
      ]
    ],
    "194577": [
      [
        20855
      ]
    ],
    "194578": [
      [
        132380
      ]
    ],
    "194579": [
      [
        13497
      ]
    ],
    "194580": [
      [
        20839
      ]
    ],
    "194581": [
      [
        20877
      ]
    ],
    "194582": [
      [
        132427
      ]
    ],
    "194583": [
      [
        20887
      ]
    ],
    "194584": [
      [
        20900
      ]
    ],
    "194585": [
      [
        20172
      ]
    ],
    "194586": [
      [
        20908
      ]
    ],
    "194587": [
      [
        20917
      ]
    ],
    "194588": [
      [
        168415
      ]
    ],
    "194589": [
      [
        20981
      ]
    ],
    "194590": [
      [
        20995
      ]
    ],
    "194591": [
      [
        13535
      ]
    ],
    "194592": [
      [
        21051
      ]
    ],
    "194593": [
      [
        21062
      ]
    ],
    "194594": [
      [
        21106
      ]
    ],
    "194595": [
      [
        21111
      ]
    ],
    "194596": [
      [
        13589
      ]
    ],
    "194597": [
      [
        21191
      ]
    ],
    "194598": [
      [
        21193
      ]
    ],
    "194599": [
      [
        21220
      ]
    ],
    "194600": [
      [
        21242
      ]
    ],
    "194601": [
      [
        21253
      ]
    ],
    "194602": [
      [
        21254
      ]
    ],
    "194603": [
      [
        21271
      ]
    ],
    "194604": [
      [
        21321
      ]
    ],
    "194605": [
      [
        21329
      ]
    ],
    "194606": [
      [
        21338
      ]
    ],
    "194607": [
      [
        21363
      ]
    ],
    "194608": [
      [
        21373
      ]
    ],
    "194609": [
      [
        21375
      ]
    ],
    "194610": [
      [
        21375
      ]
    ],
    "194611": [
      [
        21375
      ]
    ],
    "194612": [
      [
        133676
      ]
    ],
    "194613": [
      [
        28784
      ]
    ],
    "194614": [
      [
        21450
      ]
    ],
    "194615": [
      [
        21471
      ]
    ],
    "194616": [
      [
        133987
      ]
    ],
    "194617": [
      [
        21483
      ]
    ],
    "194618": [
      [
        21489
      ]
    ],
    "194619": [
      [
        21510
      ]
    ],
    "194620": [
      [
        21662
      ]
    ],
    "194621": [
      [
        21560
      ]
    ],
    "194622": [
      [
        21576
      ]
    ],
    "194623": [
      [
        21608
      ]
    ],
    "194624": [
      [
        21666
      ]
    ],
    "194625": [
      [
        21750
      ]
    ],
    "194626": [
      [
        21776
      ]
    ],
    "194627": [
      [
        21843
      ]
    ],
    "194628": [
      [
        21859
      ]
    ],
    "194629": [
      [
        21892
      ]
    ],
    "194630": [
      [
        21892
      ]
    ],
    "194631": [
      [
        21913
      ]
    ],
    "194632": [
      [
        21931
      ]
    ],
    "194633": [
      [
        21939
      ]
    ],
    "194634": [
      [
        21954
      ]
    ],
    "194635": [
      [
        22294
      ]
    ],
    "194636": [
      [
        22022
      ]
    ],
    "194637": [
      [
        22295
      ]
    ],
    "194638": [
      [
        22097
      ]
    ],
    "194639": [
      [
        22132
      ]
    ],
    "194640": [
      [
        20999
      ]
    ],
    "194641": [
      [
        22766
      ]
    ],
    "194642": [
      [
        22478
      ]
    ],
    "194643": [
      [
        22516
      ]
    ],
    "194644": [
      [
        22541
      ]
    ],
    "194645": [
      [
        22411
      ]
    ],
    "194646": [
      [
        22578
      ]
    ],
    "194647": [
      [
        22577
      ]
    ],
    "194648": [
      [
        22700
      ]
    ],
    "194649": [
      [
        136420
      ]
    ],
    "194650": [
      [
        22770
      ]
    ],
    "194651": [
      [
        22775
      ]
    ],
    "194652": [
      [
        22790
      ]
    ],
    "194653": [
      [
        22810
      ]
    ],
    "194654": [
      [
        22818
      ]
    ],
    "194655": [
      [
        22882
      ]
    ],
    "194656": [
      [
        136872
      ]
    ],
    "194657": [
      [
        136938
      ]
    ],
    "194658": [
      [
        23020
      ]
    ],
    "194659": [
      [
        23067
      ]
    ],
    "194660": [
      [
        23079
      ]
    ],
    "194661": [
      [
        23000
      ]
    ],
    "194662": [
      [
        23142
      ]
    ],
    "194663": [
      [
        14062
      ]
    ],
    "194664": [
      [
        14076
      ]
    ],
    "194665": [
      [
        23304
      ]
    ],
    "194666": [
      [
        23358
      ]
    ],
    "194667": [
      [
        23358
      ]
    ],
    "194668": [
      [
        137672
      ]
    ],
    "194669": [
      [
        23491
      ]
    ],
    "194670": [
      [
        23512
      ]
    ],
    "194671": [
      [
        23527
      ]
    ],
    "194672": [
      [
        23539
      ]
    ],
    "194673": [
      [
        138008
      ]
    ],
    "194674": [
      [
        23551
      ]
    ],
    "194675": [
      [
        23558
      ]
    ],
    "194676": [
      [
        24403
      ]
    ],
    "194677": [
      [
        23586
      ]
    ],
    "194678": [
      [
        14209
      ]
    ],
    "194679": [
      [
        23648
      ]
    ],
    "194680": [
      [
        23662
      ]
    ],
    "194681": [
      [
        23744
      ]
    ],
    "194682": [
      [
        23693
      ]
    ],
    "194683": [
      [
        138724
      ]
    ],
    "194684": [
      [
        23875
      ]
    ],
    "194685": [
      [
        138726
      ]
    ],
    "194686": [
      [
        23918
      ]
    ],
    "194687": [
      [
        23915
      ]
    ],
    "194688": [
      [
        23932
      ]
    ],
    "194689": [
      [
        24033
      ]
    ],
    "194690": [
      [
        24034
      ]
    ],
    "194691": [
      [
        14383
      ]
    ],
    "194692": [
      [
        24061
      ]
    ],
    "194693": [
      [
        24104
      ]
    ],
    "194694": [
      [
        24125
      ]
    ],
    "194695": [
      [
        24169
      ]
    ],
    "194696": [
      [
        14434
      ]
    ],
    "194697": [
      [
        139651
      ]
    ],
    "194698": [
      [
        14460
      ]
    ],
    "194699": [
      [
        24240
      ]
    ],
    "194700": [
      [
        24243
      ]
    ],
    "194701": [
      [
        24246
      ]
    ],
    "194702": [
      [
        24266
      ]
    ],
    "194703": [
      [
        172946
      ]
    ],
    "194704": [
      [
        24318
      ]
    ],
    "194705": [
      [
        140081
      ]
    ],
    "194706": [
      [
        140081
      ]
    ],
    "194707": [
      [
        33281
      ]
    ],
    "194708": [
      [
        24354
      ]
    ],
    "194709": [
      [
        24354
      ]
    ],
    "194710": [
      [
        14535
      ]
    ],
    "194711": [
      [
        144056
      ]
    ],
    "194712": [
      [
        156122
      ]
    ],
    "194713": [
      [
        24418
      ]
    ],
    "194714": [
      [
        24427
      ]
    ],
    "194715": [
      [
        14563
      ]
    ],
    "194716": [
      [
        24474
      ]
    ],
    "194717": [
      [
        24525
      ]
    ],
    "194718": [
      [
        24535
      ]
    ],
    "194719": [
      [
        24569
      ]
    ],
    "194720": [
      [
        24705
      ]
    ],
    "194721": [
      [
        14650
      ]
    ],
    "194722": [
      [
        14620
      ]
    ],
    "194723": [
      [
        24724
      ]
    ],
    "194724": [
      [
        141012
      ]
    ],
    "194725": [
      [
        24775
      ]
    ],
    "194726": [
      [
        24904
      ]
    ],
    "194727": [
      [
        24908
      ]
    ],
    "194728": [
      [
        24910
      ]
    ],
    "194729": [
      [
        24908
      ]
    ],
    "194730": [
      [
        24954
      ]
    ],
    "194731": [
      [
        24974
      ]
    ],
    "194732": [
      [
        25010
      ]
    ],
    "194733": [
      [
        24996
      ]
    ],
    "194734": [
      [
        25007
      ]
    ],
    "194735": [
      [
        25054
      ]
    ],
    "194736": [
      [
        25074
      ]
    ],
    "194737": [
      [
        25078
      ]
    ],
    "194738": [
      [
        25104
      ]
    ],
    "194739": [
      [
        25115
      ]
    ],
    "194740": [
      [
        25181
      ]
    ],
    "194741": [
      [
        25265
      ]
    ],
    "194742": [
      [
        25300
      ]
    ],
    "194743": [
      [
        25424
      ]
    ],
    "194744": [
      [
        142092
      ]
    ],
    "194745": [
      [
        25405
      ]
    ],
    "194746": [
      [
        25340
      ]
    ],
    "194747": [
      [
        25448
      ]
    ],
    "194748": [
      [
        25475
      ]
    ],
    "194749": [
      [
        25572
      ]
    ],
    "194750": [
      [
        142321
      ]
    ],
    "194751": [
      [
        25634
      ]
    ],
    "194752": [
      [
        25541
      ]
    ],
    "194753": [
      [
        25513
      ]
    ],
    "194754": [
      [
        14894
      ]
    ],
    "194755": [
      [
        25705
      ]
    ],
    "194756": [
      [
        25726
      ]
    ],
    "194757": [
      [
        25757
      ]
    ],
    "194758": [
      [
        25719
      ]
    ],
    "194759": [
      [
        14956
      ]
    ],
    "194760": [
      [
        25935
      ]
    ],
    "194761": [
      [
        25964
      ]
    ],
    "194762": [
      [
        143370
      ]
    ],
    "194763": [
      [
        26083
      ]
    ],
    "194764": [
      [
        26360
      ]
    ],
    "194765": [
      [
        26185
      ]
    ],
    "194766": [
      [
        15129
      ]
    ],
    "194767": [
      [
        26257
      ]
    ],
    "194768": [
      [
        15112
      ]
    ],
    "194769": [
      [
        15076
      ]
    ],
    "194770": [
      [
        20882
      ]
    ],
    "194771": [
      [
        20885
      ]
    ],
    "194772": [
      [
        26368
      ]
    ],
    "194773": [
      [
        26268
      ]
    ],
    "194774": [
      [
        32941
      ]
    ],
    "194775": [
      [
        17369
      ]
    ],
    "194776": [
      [
        26391
      ]
    ],
    "194777": [
      [
        26395
      ]
    ],
    "194778": [
      [
        26401
      ]
    ],
    "194779": [
      [
        26462
      ]
    ],
    "194780": [
      [
        26451
      ]
    ],
    "194781": [
      [
        144323
      ]
    ],
    "194782": [
      [
        15177
      ]
    ],
    "194783": [
      [
        26618
      ]
    ],
    "194784": [
      [
        26501
      ]
    ],
    "194785": [
      [
        26706
      ]
    ],
    "194786": [
      [
        26757
      ]
    ],
    "194787": [
      [
        144493
      ]
    ],
    "194788": [
      [
        26766
      ]
    ],
    "194789": [
      [
        26655
      ]
    ],
    "194790": [
      [
        26900
      ]
    ],
    "194791": [
      [
        15261
      ]
    ],
    "194792": [
      [
        26946
      ]
    ],
    "194793": [
      [
        27043
      ]
    ],
    "194794": [
      [
        27114
      ]
    ],
    "194795": [
      [
        27304
      ]
    ],
    "194796": [
      [
        145059
      ]
    ],
    "194797": [
      [
        27355
      ]
    ],
    "194798": [
      [
        15384
      ]
    ],
    "194799": [
      [
        27425
      ]
    ],
    "194800": [
      [
        145575
      ]
    ],
    "194801": [
      [
        27476
      ]
    ],
    "194802": [
      [
        15438
      ]
    ],
    "194803": [
      [
        27506
      ]
    ],
    "194804": [
      [
        27551
      ]
    ],
    "194805": [
      [
        27578
      ]
    ],
    "194806": [
      [
        27579
      ]
    ],
    "194807": [
      [
        146061
      ]
    ],
    "194808": [
      [
        138507
      ]
    ],
    "194809": [
      [
        146170
      ]
    ],
    "194810": [
      [
        27726
      ]
    ],
    "194811": [
      [
        146620
      ]
    ],
    "194812": [
      [
        27839
      ]
    ],
    "194813": [
      [
        27853
      ]
    ],
    "194814": [
      [
        27751
      ]
    ],
    "194815": [
      [
        27926
      ]
    ]
  },
  "63744": {
    "63744": [
      [
        35912
      ]
    ],
    "63745": [
      [
        26356
      ]
    ],
    "63746": [
      [
        36554
      ]
    ],
    "63747": [
      [
        36040
      ]
    ],
    "63748": [
      [
        28369
      ]
    ],
    "63749": [
      [
        20018
      ]
    ],
    "63750": [
      [
        21477
      ]
    ],
    "63751": [
      [
        40860
      ]
    ],
    "63752": [
      [
        40860
      ]
    ],
    "63753": [
      [
        22865
      ]
    ],
    "63754": [
      [
        37329
      ]
    ],
    "63755": [
      [
        21895
      ]
    ],
    "63756": [
      [
        22856
      ]
    ],
    "63757": [
      [
        25078
      ]
    ],
    "63758": [
      [
        30313
      ]
    ],
    "63759": [
      [
        32645
      ]
    ],
    "63760": [
      [
        34367
      ]
    ],
    "63761": [
      [
        34746
      ]
    ],
    "63762": [
      [
        35064
      ]
    ],
    "63763": [
      [
        37007
      ]
    ],
    "63764": [
      [
        27138
      ]
    ],
    "63765": [
      [
        27931
      ]
    ],
    "63766": [
      [
        28889
      ]
    ],
    "63767": [
      [
        29662
      ]
    ],
    "63768": [
      [
        33853
      ]
    ],
    "63769": [
      [
        37226
      ]
    ],
    "63770": [
      [
        39409
      ]
    ],
    "63771": [
      [
        20098
      ]
    ],
    "63772": [
      [
        21365
      ]
    ],
    "63773": [
      [
        27396
      ]
    ],
    "63774": [
      [
        29211
      ]
    ],
    "63775": [
      [
        34349
      ]
    ],
    "63776": [
      [
        40478
      ]
    ],
    "63777": [
      [
        23888
      ]
    ],
    "63778": [
      [
        28651
      ]
    ],
    "63779": [
      [
        34253
      ]
    ],
    "63780": [
      [
        35172
      ]
    ],
    "63781": [
      [
        25289
      ]
    ],
    "63782": [
      [
        33240
      ]
    ],
    "63783": [
      [
        34847
      ]
    ],
    "63784": [
      [
        24266
      ]
    ],
    "63785": [
      [
        26391
      ]
    ],
    "63786": [
      [
        28010
      ]
    ],
    "63787": [
      [
        29436
      ]
    ],
    "63788": [
      [
        37070
      ]
    ],
    "63789": [
      [
        20358
      ]
    ],
    "63790": [
      [
        20919
      ]
    ],
    "63791": [
      [
        21214
      ]
    ],
    "63792": [
      [
        25796
      ]
    ],
    "63793": [
      [
        27347
      ]
    ],
    "63794": [
      [
        29200
      ]
    ],
    "63795": [
      [
        30439
      ]
    ],
    "63796": [
      [
        32769
      ]
    ],
    "63797": [
      [
        34310
      ]
    ],
    "63798": [
      [
        34396
      ]
    ],
    "63799": [
      [
        36335
      ]
    ],
    "63800": [
      [
        38706
      ]
    ],
    "63801": [
      [
        39791
      ]
    ],
    "63802": [
      [
        40442
      ]
    ],
    "63803": [
      [
        30860
      ]
    ],
    "63804": [
      [
        31103
      ]
    ],
    "63805": [
      [
        32160
      ]
    ],
    "63806": [
      [
        33737
      ]
    ],
    "63807": [
      [
        37636
      ]
    ],
    "63808": [
      [
        40575
      ]
    ],
    "63809": [
      [
        35542
      ]
    ],
    "63810": [
      [
        22751
      ]
    ],
    "63811": [
      [
        24324
      ]
    ],
    "63812": [
      [
        31840
      ]
    ],
    "63813": [
      [
        32894
      ]
    ],
    "63814": [
      [
        29282
      ]
    ],
    "63815": [
      [
        30922
      ]
    ],
    "63816": [
      [
        36034
      ]
    ],
    "63817": [
      [
        38647
      ]
    ],
    "63818": [
      [
        22744
      ]
    ],
    "63819": [
      [
        23650
      ]
    ],
    "63820": [
      [
        27155
      ]
    ],
    "63821": [
      [
        28122
      ]
    ],
    "63822": [
      [
        28431
      ]
    ],
    "63823": [
      [
        32047
      ]
    ],
    "63824": [
      [
        32311
      ]
    ],
    "63825": [
      [
        38475
      ]
    ],
    "63826": [
      [
        21202
      ]
    ],
    "63827": [
      [
        32907
      ]
    ],
    "63828": [
      [
        20956
      ]
    ],
    "63829": [
      [
        20940
      ]
    ],
    "63830": [
      [
        31260
      ]
    ],
    "63831": [
      [
        32190
      ]
    ],
    "63832": [
      [
        33777
      ]
    ],
    "63833": [
      [
        38517
      ]
    ],
    "63834": [
      [
        35712
      ]
    ],
    "63835": [
      [
        25295
      ]
    ],
    "63836": [
      [
        27138
      ]
    ],
    "63837": [
      [
        35582
      ]
    ],
    "63838": [
      [
        20025
      ]
    ],
    "63839": [
      [
        23527
      ]
    ],
    "63840": [
      [
        24594
      ]
    ],
    "63841": [
      [
        29575
      ]
    ],
    "63842": [
      [
        30064
      ]
    ],
    "63843": [
      [
        21271
      ]
    ],
    "63844": [
      [
        30971
      ]
    ],
    "63845": [
      [
        20415
      ]
    ],
    "63846": [
      [
        24489
      ]
    ],
    "63847": [
      [
        19981
      ]
    ],
    "63848": [
      [
        27852
      ]
    ],
    "63849": [
      [
        25976
      ]
    ],
    "63850": [
      [
        32034
      ]
    ],
    "63851": [
      [
        21443
      ]
    ],
    "63852": [
      [
        22622
      ]
    ],
    "63853": [
      [
        30465
      ]
    ],
    "63854": [
      [
        33865
      ]
    ],
    "63855": [
      [
        35498
      ]
    ],
    "63856": [
      [
        27578
      ]
    ],
    "63857": [
      [
        36784
      ]
    ],
    "63858": [
      [
        27784
      ]
    ],
    "63859": [
      [
        25342
      ]
    ],
    "63860": [
      [
        33509
      ]
    ],
    "63861": [
      [
        25504
      ]
    ],
    "63862": [
      [
        30053
      ]
    ],
    "63863": [
      [
        20142
      ]
    ],
    "63864": [
      [
        20841
      ]
    ],
    "63865": [
      [
        20937
      ]
    ],
    "63866": [
      [
        26753
      ]
    ],
    "63867": [
      [
        31975
      ]
    ],
    "63868": [
      [
        33391
      ]
    ],
    "63869": [
      [
        35538
      ]
    ],
    "63870": [
      [
        37327
      ]
    ],
    "63871": [
      [
        21237
      ]
    ],
    "63872": [
      [
        21570
      ]
    ],
    "63873": [
      [
        22899
      ]
    ],
    "63874": [
      [
        24300
      ]
    ],
    "63875": [
      [
        26053
      ]
    ],
    "63876": [
      [
        28670
      ]
    ],
    "63877": [
      [
        31018
      ]
    ],
    "63878": [
      [
        38317
      ]
    ],
    "63879": [
      [
        39530
      ]
    ],
    "63880": [
      [
        40599
      ]
    ],
    "63881": [
      [
        40654
      ]
    ],
    "63882": [
      [
        21147
      ]
    ],
    "63883": [
      [
        26310
      ]
    ],
    "63884": [
      [
        27511
      ]
    ],
    "63885": [
      [
        36706
      ]
    ],
    "63886": [
      [
        24180
      ]
    ],
    "63887": [
      [
        24976
      ]
    ],
    "63888": [
      [
        25088
      ]
    ],
    "63889": [
      [
        25754
      ]
    ],
    "63890": [
      [
        28451
      ]
    ],
    "63891": [
      [
        29001
      ]
    ],
    "63892": [
      [
        29833
      ]
    ],
    "63893": [
      [
        31178
      ]
    ],
    "63894": [
      [
        32244
      ]
    ],
    "63895": [
      [
        32879
      ]
    ],
    "63896": [
      [
        36646
      ]
    ],
    "63897": [
      [
        34030
      ]
    ],
    "63898": [
      [
        36899
      ]
    ],
    "63899": [
      [
        37706
      ]
    ],
    "63900": [
      [
        21015
      ]
    ],
    "63901": [
      [
        21155
      ]
    ],
    "63902": [
      [
        21693
      ]
    ],
    "63903": [
      [
        28872
      ]
    ],
    "63904": [
      [
        35010
      ]
    ],
    "63905": [
      [
        35498
      ]
    ],
    "63906": [
      [
        24265
      ]
    ],
    "63907": [
      [
        24565
      ]
    ],
    "63908": [
      [
        25467
      ]
    ],
    "63909": [
      [
        27566
      ]
    ],
    "63910": [
      [
        31806
      ]
    ],
    "63911": [
      [
        29557
      ]
    ],
    "63912": [
      [
        20196
      ]
    ],
    "63913": [
      [
        22265
      ]
    ],
    "63914": [
      [
        23527
      ]
    ],
    "63915": [
      [
        23994
      ]
    ],
    "63916": [
      [
        24604
      ]
    ],
    "63917": [
      [
        29618
      ]
    ],
    "63918": [
      [
        29801
      ]
    ],
    "63919": [
      [
        32666
      ]
    ],
    "63920": [
      [
        32838
      ]
    ],
    "63921": [
      [
        37428
      ]
    ],
    "63922": [
      [
        38646
      ]
    ],
    "63923": [
      [
        38728
      ]
    ],
    "63924": [
      [
        38936
      ]
    ],
    "63925": [
      [
        20363
      ]
    ],
    "63926": [
      [
        31150
      ]
    ],
    "63927": [
      [
        37300
      ]
    ],
    "63928": [
      [
        38584
      ]
    ],
    "63929": [
      [
        24801
      ]
    ],
    "63930": [
      [
        20102
      ]
    ],
    "63931": [
      [
        20698
      ]
    ],
    "63932": [
      [
        23534
      ]
    ],
    "63933": [
      [
        23615
      ]
    ],
    "63934": [
      [
        26009
      ]
    ],
    "63935": [
      [
        27138
      ]
    ],
    "63936": [
      [
        29134
      ]
    ],
    "63937": [
      [
        30274
      ]
    ],
    "63938": [
      [
        34044
      ]
    ],
    "63939": [
      [
        36988
      ]
    ],
    "63940": [
      [
        40845
      ]
    ],
    "63941": [
      [
        26248
      ]
    ],
    "63942": [
      [
        38446
      ]
    ],
    "63943": [
      [
        21129
      ]
    ],
    "63944": [
      [
        26491
      ]
    ],
    "63945": [
      [
        26611
      ]
    ],
    "63946": [
      [
        27969
      ]
    ],
    "63947": [
      [
        28316
      ]
    ],
    "63948": [
      [
        29705
      ]
    ],
    "63949": [
      [
        30041
      ]
    ],
    "63950": [
      [
        30827
      ]
    ],
    "63951": [
      [
        32016
      ]
    ],
    "63952": [
      [
        39006
      ]
    ],
    "63953": [
      [
        20845
      ]
    ],
    "63954": [
      [
        25134
      ]
    ],
    "63955": [
      [
        38520
      ]
    ],
    "63956": [
      [
        20523
      ]
    ],
    "63957": [
      [
        23833
      ]
    ],
    "63958": [
      [
        28138
      ]
    ],
    "63959": [
      [
        36650
      ]
    ],
    "63960": [
      [
        24459
      ]
    ],
    "63961": [
      [
        24900
      ]
    ],
    "63962": [
      [
        26647
      ]
    ],
    "63963": [
      [
        29575
      ]
    ],
    "63964": [
      [
        38534
      ]
    ],
    "63965": [
      [
        21033
      ]
    ],
    "63966": [
      [
        21519
      ]
    ],
    "63967": [
      [
        23653
      ]
    ],
    "63968": [
      [
        26131
      ]
    ],
    "63969": [
      [
        26446
      ]
    ],
    "63970": [
      [
        26792
      ]
    ],
    "63971": [
      [
        27877
      ]
    ],
    "63972": [
      [
        29702
      ]
    ],
    "63973": [
      [
        30178
      ]
    ],
    "63974": [
      [
        32633
      ]
    ],
    "63975": [
      [
        35023
      ]
    ],
    "63976": [
      [
        35041
      ]
    ],
    "63977": [
      [
        37324
      ]
    ],
    "63978": [
      [
        38626
      ]
    ],
    "63979": [
      [
        21311
      ]
    ],
    "63980": [
      [
        28346
      ]
    ],
    "63981": [
      [
        21533
      ]
    ],
    "63982": [
      [
        29136
      ]
    ],
    "63983": [
      [
        29848
      ]
    ],
    "63984": [
      [
        34298
      ]
    ],
    "63985": [
      [
        38563
      ]
    ],
    "63986": [
      [
        40023
      ]
    ],
    "63987": [
      [
        40607
      ]
    ],
    "63988": [
      [
        26519
      ]
    ],
    "63989": [
      [
        28107
      ]
    ],
    "63990": [
      [
        33256
      ]
    ],
    "63991": [
      [
        31435
      ]
    ],
    "63992": [
      [
        31520
      ]
    ],
    "63993": [
      [
        31890
      ]
    ],
    "63994": [
      [
        29376
      ]
    ],
    "63995": [
      [
        28825
      ]
    ],
    "63996": [
      [
        35672
      ]
    ],
    "63997": [
      [
        20160
      ]
    ],
    "63998": [
      [
        33590
      ]
    ],
    "63999": [
      [
        21050
      ]
    ],
    "194816": [
      [
        27966
      ]
    ],
    "194817": [
      [
        28023
      ]
    ],
    "194818": [
      [
        27969
      ]
    ],
    "194819": [
      [
        28009
      ]
    ],
    "194820": [
      [
        28024
      ]
    ],
    "194821": [
      [
        28037
      ]
    ],
    "194822": [
      [
        146718
      ]
    ],
    "194823": [
      [
        27956
      ]
    ],
    "194824": [
      [
        28207
      ]
    ],
    "194825": [
      [
        28270
      ]
    ],
    "194826": [
      [
        15667
      ]
    ],
    "194827": [
      [
        28363
      ]
    ],
    "194828": [
      [
        28359
      ]
    ],
    "194829": [
      [
        147153
      ]
    ],
    "194830": [
      [
        28153
      ]
    ],
    "194831": [
      [
        28526
      ]
    ],
    "194832": [
      [
        147294
      ]
    ],
    "194833": [
      [
        147342
      ]
    ],
    "194834": [
      [
        28614
      ]
    ],
    "194835": [
      [
        28729
      ]
    ],
    "194836": [
      [
        28702
      ]
    ],
    "194837": [
      [
        28699
      ]
    ],
    "194838": [
      [
        15766
      ]
    ],
    "194839": [
      [
        28746
      ]
    ],
    "194840": [
      [
        28797
      ]
    ],
    "194841": [
      [
        28791
      ]
    ],
    "194842": [
      [
        28845
      ]
    ],
    "194843": [
      [
        132389
      ]
    ],
    "194844": [
      [
        28997
      ]
    ],
    "194845": [
      [
        148067
      ]
    ],
    "194846": [
      [
        29084
      ]
    ],
    "194847": [
      [
        148395
      ]
    ],
    "194848": [
      [
        29224
      ]
    ],
    "194849": [
      [
        29237
      ]
    ],
    "194850": [
      [
        29264
      ]
    ],
    "194851": [
      [
        149000
      ]
    ],
    "194852": [
      [
        29312
      ]
    ],
    "194853": [
      [
        29333
      ]
    ],
    "194854": [
      [
        149301
      ]
    ],
    "194855": [
      [
        149524
      ]
    ],
    "194856": [
      [
        29562
      ]
    ],
    "194857": [
      [
        29579
      ]
    ],
    "194858": [
      [
        16044
      ]
    ],
    "194859": [
      [
        29605
      ]
    ],
    "194860": [
      [
        16056
      ]
    ],
    "194861": [
      [
        16056
      ]
    ],
    "194862": [
      [
        29767
      ]
    ],
    "194863": [
      [
        29788
      ]
    ],
    "194864": [
      [
        29809
      ]
    ],
    "194865": [
      [
        29829
      ]
    ],
    "194866": [
      [
        29898
      ]
    ],
    "194867": [
      [
        16155
      ]
    ],
    "194868": [
      [
        29988
      ]
    ],
    "194869": [
      [
        150582
      ]
    ],
    "194870": [
      [
        30014
      ]
    ],
    "194871": [
      [
        150674
      ]
    ],
    "194872": [
      [
        30064
      ]
    ],
    "194873": [
      [
        139679
      ]
    ],
    "194874": [
      [
        30224
      ]
    ],
    "194875": [
      [
        151457
      ]
    ],
    "194876": [
      [
        151480
      ]
    ],
    "194877": [
      [
        151620
      ]
    ],
    "194878": [
      [
        16380
      ]
    ],
    "194879": [
      [
        16392
      ]
    ],
    "194880": [
      [
        30452
      ]
    ],
    "194881": [
      [
        151795
      ]
    ],
    "194882": [
      [
        151794
      ]
    ],
    "194883": [
      [
        151833
      ]
    ],
    "194884": [
      [
        151859
      ]
    ],
    "194885": [
      [
        30494
      ]
    ],
    "194886": [
      [
        30495
      ]
    ],
    "194887": [
      [
        30495
      ]
    ],
    "194888": [
      [
        30538
      ]
    ],
    "194889": [
      [
        16441
      ]
    ],
    "194890": [
      [
        30603
      ]
    ],
    "194891": [
      [
        16454
      ]
    ],
    "194892": [
      [
        16534
      ]
    ],
    "194893": [
      [
        152605
      ]
    ],
    "194894": [
      [
        30798
      ]
    ],
    "194895": [
      [
        30860
      ]
    ],
    "194896": [
      [
        30924
      ]
    ],
    "194897": [
      [
        16611
      ]
    ],
    "194898": [
      [
        153126
      ]
    ],
    "194899": [
      [
        31062
      ]
    ],
    "194900": [
      [
        153242
      ]
    ],
    "194901": [
      [
        153285
      ]
    ],
    "194902": [
      [
        31119
      ]
    ],
    "194903": [
      [
        31211
      ]
    ],
    "194904": [
      [
        16687
      ]
    ],
    "194905": [
      [
        31296
      ]
    ],
    "194906": [
      [
        31306
      ]
    ],
    "194907": [
      [
        31311
      ]
    ],
    "194908": [
      [
        153980
      ]
    ],
    "194909": [
      [
        154279
      ]
    ],
    "194910": [
      [
        154279
      ]
    ],
    "194911": [
      [
        31470
      ]
    ],
    "194912": [
      [
        16898
      ]
    ],
    "194913": [
      [
        154539
      ]
    ],
    "194914": [
      [
        31686
      ]
    ],
    "194915": [
      [
        31689
      ]
    ],
    "194916": [
      [
        16935
      ]
    ],
    "194917": [
      [
        154752
      ]
    ],
    "194918": [
      [
        31954
      ]
    ],
    "194919": [
      [
        17056
      ]
    ],
    "194920": [
      [
        31976
      ]
    ],
    "194921": [
      [
        31971
      ]
    ],
    "194922": [
      [
        32000
      ]
    ],
    "194923": [
      [
        155526
      ]
    ],
    "194924": [
      [
        32099
      ]
    ],
    "194925": [
      [
        17153
      ]
    ],
    "194926": [
      [
        32199
      ]
    ],
    "194927": [
      [
        32258
      ]
    ],
    "194928": [
      [
        32325
      ]
    ],
    "194929": [
      [
        17204
      ]
    ],
    "194930": [
      [
        156200
      ]
    ],
    "194931": [
      [
        156231
      ]
    ],
    "194932": [
      [
        17241
      ]
    ],
    "194933": [
      [
        156377
      ]
    ],
    "194934": [
      [
        32634
      ]
    ],
    "194935": [
      [
        156478
      ]
    ],
    "194936": [
      [
        32661
      ]
    ],
    "194937": [
      [
        32762
      ]
    ],
    "194938": [
      [
        32773
      ]
    ],
    "194939": [
      [
        156890
      ]
    ],
    "194940": [
      [
        156963
      ]
    ],
    "194941": [
      [
        32864
      ]
    ],
    "194942": [
      [
        157096
      ]
    ],
    "194943": [
      [
        32880
      ]
    ],
    "194944": [
      [
        144223
      ]
    ],
    "194945": [
      [
        17365
      ]
    ],
    "194946": [
      [
        32946
      ]
    ],
    "194947": [
      [
        33027
      ]
    ],
    "194948": [
      [
        17419
      ]
    ],
    "194949": [
      [
        33086
      ]
    ],
    "194950": [
      [
        23221
      ]
    ],
    "194951": [
      [
        157607
      ]
    ],
    "194952": [
      [
        157621
      ]
    ],
    "194953": [
      [
        144275
      ]
    ],
    "194954": [
      [
        144284
      ]
    ],
    "194955": [
      [
        33281
      ]
    ],
    "194956": [
      [
        33284
      ]
    ],
    "194957": [
      [
        36766
      ]
    ],
    "194958": [
      [
        17515
      ]
    ],
    "194959": [
      [
        33425
      ]
    ],
    "194960": [
      [
        33419
      ]
    ],
    "194961": [
      [
        33437
      ]
    ],
    "194962": [
      [
        21171
      ]
    ],
    "194963": [
      [
        33457
      ]
    ],
    "194964": [
      [
        33459
      ]
    ],
    "194965": [
      [
        33469
      ]
    ],
    "194966": [
      [
        33510
      ]
    ],
    "194967": [
      [
        158524
      ]
    ],
    "194968": [
      [
        33509
      ]
    ],
    "194969": [
      [
        33565
      ]
    ],
    "194970": [
      [
        33635
      ]
    ],
    "194971": [
      [
        33709
      ]
    ],
    "194972": [
      [
        33571
      ]
    ],
    "194973": [
      [
        33725
      ]
    ],
    "194974": [
      [
        33767
      ]
    ],
    "194975": [
      [
        33879
      ]
    ],
    "194976": [
      [
        33619
      ]
    ],
    "194977": [
      [
        33738
      ]
    ],
    "194978": [
      [
        33740
      ]
    ],
    "194979": [
      [
        33756
      ]
    ],
    "194980": [
      [
        158774
      ]
    ],
    "194981": [
      [
        159083
      ]
    ],
    "194982": [
      [
        158933
      ]
    ],
    "194983": [
      [
        17707
      ]
    ],
    "194984": [
      [
        34033
      ]
    ],
    "194985": [
      [
        34035
      ]
    ],
    "194986": [
      [
        34070
      ]
    ],
    "194987": [
      [
        160714
      ]
    ],
    "194988": [
      [
        34148
      ]
    ],
    "194989": [
      [
        159532
      ]
    ],
    "194990": [
      [
        17757
      ]
    ],
    "194991": [
      [
        17761
      ]
    ],
    "194992": [
      [
        159665
      ]
    ],
    "194993": [
      [
        159954
      ]
    ],
    "194994": [
      [
        17771
      ]
    ],
    "194995": [
      [
        34384
      ]
    ],
    "194996": [
      [
        34396
      ]
    ],
    "194997": [
      [
        34407
      ]
    ],
    "194998": [
      [
        34409
      ]
    ],
    "194999": [
      [
        34473
      ]
    ],
    "195000": [
      [
        34440
      ]
    ],
    "195001": [
      [
        34574
      ]
    ],
    "195002": [
      [
        34530
      ]
    ],
    "195003": [
      [
        34681
      ]
    ],
    "195004": [
      [
        34600
      ]
    ],
    "195005": [
      [
        34667
      ]
    ],
    "195006": [
      [
        34694
      ]
    ],
    "195007": [
      [
        17879
      ]
    ],
    "195008": [
      [
        34785
      ]
    ],
    "195009": [
      [
        34817
      ]
    ],
    "195010": [
      [
        17913
      ]
    ],
    "195011": [
      [
        34912
      ]
    ],
    "195012": [
      [
        34915
      ]
    ],
    "195013": [
      [
        161383
      ]
    ],
    "195014": [
      [
        35031
      ]
    ],
    "195015": [
      [
        35038
      ]
    ],
    "195016": [
      [
        17973
      ]
    ],
    "195017": [
      [
        35066
      ]
    ],
    "195018": [
      [
        13499
      ]
    ],
    "195019": [
      [
        161966
      ]
    ],
    "195020": [
      [
        162150
      ]
    ],
    "195021": [
      [
        18110
      ]
    ],
    "195022": [
      [
        18119
      ]
    ],
    "195023": [
      [
        35488
      ]
    ],
    "195024": [
      [
        35565
      ]
    ],
    "195025": [
      [
        35722
      ]
    ],
    "195026": [
      [
        35925
      ]
    ],
    "195027": [
      [
        162984
      ]
    ],
    "195028": [
      [
        36011
      ]
    ],
    "195029": [
      [
        36033
      ]
    ],
    "195030": [
      [
        36123
      ]
    ],
    "195031": [
      [
        36215
      ]
    ],
    "195032": [
      [
        163631
      ]
    ],
    "195033": [
      [
        133124
      ]
    ],
    "195034": [
      [
        36299
      ]
    ],
    "195035": [
      [
        36284
      ]
    ],
    "195036": [
      [
        36336
      ]
    ],
    "195037": [
      [
        133342
      ]
    ],
    "195038": [
      [
        36564
      ]
    ],
    "195039": [
      [
        36664
      ]
    ],
    "195040": [
      [
        165330
      ]
    ],
    "195041": [
      [
        165357
      ]
    ],
    "195042": [
      [
        37012
      ]
    ],
    "195043": [
      [
        37105
      ]
    ],
    "195044": [
      [
        37137
      ]
    ],
    "195045": [
      [
        165678
      ]
    ],
    "195046": [
      [
        37147
      ]
    ],
    "195047": [
      [
        37432
      ]
    ],
    "195048": [
      [
        37591
      ]
    ],
    "195049": [
      [
        37592
      ]
    ],
    "195050": [
      [
        37500
      ]
    ],
    "195051": [
      [
        37881
      ]
    ],
    "195052": [
      [
        37909
      ]
    ],
    "195053": [
      [
        166906
      ]
    ],
    "195054": [
      [
        38283
      ]
    ],
    "195055": [
      [
        18837
      ]
    ],
    "195056": [
      [
        38327
      ]
    ],
    "195057": [
      [
        167287
      ]
    ],
    "195058": [
      [
        18918
      ]
    ],
    "195059": [
      [
        38595
      ]
    ],
    "195060": [
      [
        23986
      ]
    ],
    "195061": [
      [
        38691
      ]
    ],
    "195062": [
      [
        168261
      ]
    ],
    "195063": [
      [
        168474
      ]
    ],
    "195064": [
      [
        19054
      ]
    ],
    "195065": [
      [
        19062
      ]
    ],
    "195066": [
      [
        38880
      ]
    ],
    "195067": [
      [
        168970
      ]
    ],
    "195068": [
      [
        19122
      ]
    ],
    "195069": [
      [
        169110
      ]
    ],
    "195070": [
      [
        38923
      ]
    ],
    "195071": [
      [
        38923
      ]
    ]
  },
  "64000": {
    "64000": [
      [
        20999
      ]
    ],
    "64001": [
      [
        24230
      ]
    ],
    "64002": [
      [
        25299
      ]
    ],
    "64003": [
      [
        31958
      ]
    ],
    "64004": [
      [
        23429
      ]
    ],
    "64005": [
      [
        27934
      ]
    ],
    "64006": [
      [
        26292
      ]
    ],
    "64007": [
      [
        36667
      ]
    ],
    "64008": [
      [
        34892
      ]
    ],
    "64009": [
      [
        38477
      ]
    ],
    "64010": [
      [
        35211
      ]
    ],
    "64011": [
      [
        24275
      ]
    ],
    "64012": [
      [
        20800
      ]
    ],
    "64013": [
      [
        21952
      ]
    ],
    "64016": [
      [
        22618
      ]
    ],
    "64018": [
      [
        26228
      ]
    ],
    "64021": [
      [
        20958
      ]
    ],
    "64022": [
      [
        29482
      ]
    ],
    "64023": [
      [
        30410
      ]
    ],
    "64024": [
      [
        31036
      ]
    ],
    "64025": [
      [
        31070
      ]
    ],
    "64026": [
      [
        31077
      ]
    ],
    "64027": [
      [
        31119
      ]
    ],
    "64028": [
      [
        38742
      ]
    ],
    "64029": [
      [
        31934
      ]
    ],
    "64030": [
      [
        32701
      ]
    ],
    "64032": [
      [
        34322
      ]
    ],
    "64034": [
      [
        35576
      ]
    ],
    "64037": [
      [
        36920
      ]
    ],
    "64038": [
      [
        37117
      ]
    ],
    "64042": [
      [
        39151
      ]
    ],
    "64043": [
      [
        39164
      ]
    ],
    "64044": [
      [
        39208
      ]
    ],
    "64045": [
      [
        40372
      ]
    ],
    "64046": [
      [
        37086
      ]
    ],
    "64047": [
      [
        38583
      ]
    ],
    "64048": [
      [
        20398
      ]
    ],
    "64049": [
      [
        20711
      ]
    ],
    "64050": [
      [
        20813
      ]
    ],
    "64051": [
      [
        21193
      ]
    ],
    "64052": [
      [
        21220
      ]
    ],
    "64053": [
      [
        21329
      ]
    ],
    "64054": [
      [
        21917
      ]
    ],
    "64055": [
      [
        22022
      ]
    ],
    "64056": [
      [
        22120
      ]
    ],
    "64057": [
      [
        22592
      ]
    ],
    "64058": [
      [
        22696
      ]
    ],
    "64059": [
      [
        23652
      ]
    ],
    "64060": [
      [
        23662
      ]
    ],
    "64061": [
      [
        24724
      ]
    ],
    "64062": [
      [
        24936
      ]
    ],
    "64063": [
      [
        24974
      ]
    ],
    "64064": [
      [
        25074
      ]
    ],
    "64065": [
      [
        25935
      ]
    ],
    "64066": [
      [
        26082
      ]
    ],
    "64067": [
      [
        26257
      ]
    ],
    "64068": [
      [
        26757
      ]
    ],
    "64069": [
      [
        28023
      ]
    ],
    "64070": [
      [
        28186
      ]
    ],
    "64071": [
      [
        28450
      ]
    ],
    "64072": [
      [
        29038
      ]
    ],
    "64073": [
      [
        29227
      ]
    ],
    "64074": [
      [
        29730
      ]
    ],
    "64075": [
      [
        30865
      ]
    ],
    "64076": [
      [
        31038
      ]
    ],
    "64077": [
      [
        31049
      ]
    ],
    "64078": [
      [
        31048
      ]
    ],
    "64079": [
      [
        31056
      ]
    ],
    "64080": [
      [
        31062
      ]
    ],
    "64081": [
      [
        31069
      ]
    ],
    "64082": [
      [
        31117
      ]
    ],
    "64083": [
      [
        31118
      ]
    ],
    "64084": [
      [
        31296
      ]
    ],
    "64085": [
      [
        31361
      ]
    ],
    "64086": [
      [
        31680
      ]
    ],
    "64087": [
      [
        32244
      ]
    ],
    "64088": [
      [
        32265
      ]
    ],
    "64089": [
      [
        32321
      ]
    ],
    "64090": [
      [
        32626
      ]
    ],
    "64091": [
      [
        32773
      ]
    ],
    "64092": [
      [
        33261
      ]
    ],
    "64093": [
      [
        33401
      ]
    ],
    "64094": [
      [
        33401
      ]
    ],
    "64095": [
      [
        33879
      ]
    ],
    "64096": [
      [
        35088
      ]
    ],
    "64097": [
      [
        35222
      ]
    ],
    "64098": [
      [
        35585
      ]
    ],
    "64099": [
      [
        35641
      ]
    ],
    "64100": [
      [
        36051
      ]
    ],
    "64101": [
      [
        36104
      ]
    ],
    "64102": [
      [
        36790
      ]
    ],
    "64103": [
      [
        36920
      ]
    ],
    "64104": [
      [
        38627
      ]
    ],
    "64105": [
      [
        38911
      ]
    ],
    "64106": [
      [
        38971
      ]
    ],
    "64107": [
      [
        24693
      ]
    ],
    "64108": [
      [
        148206
      ]
    ],
    "64109": [
      [
        33304
      ]
    ],
    "64112": [
      [
        20006
      ]
    ],
    "64113": [
      [
        20917
      ]
    ],
    "64114": [
      [
        20840
      ]
    ],
    "64115": [
      [
        20352
      ]
    ],
    "64116": [
      [
        20805
      ]
    ],
    "64117": [
      [
        20864
      ]
    ],
    "64118": [
      [
        21191
      ]
    ],
    "64119": [
      [
        21242
      ]
    ],
    "64120": [
      [
        21917
      ]
    ],
    "64121": [
      [
        21845
      ]
    ],
    "64122": [
      [
        21913
      ]
    ],
    "64123": [
      [
        21986
      ]
    ],
    "64124": [
      [
        22618
      ]
    ],
    "64125": [
      [
        22707
      ]
    ],
    "64126": [
      [
        22852
      ]
    ],
    "64127": [
      [
        22868
      ]
    ],
    "64128": [
      [
        23138
      ]
    ],
    "64129": [
      [
        23336
      ]
    ],
    "64130": [
      [
        24274
      ]
    ],
    "64131": [
      [
        24281
      ]
    ],
    "64132": [
      [
        24425
      ]
    ],
    "64133": [
      [
        24493
      ]
    ],
    "64134": [
      [
        24792
      ]
    ],
    "64135": [
      [
        24910
      ]
    ],
    "64136": [
      [
        24840
      ]
    ],
    "64137": [
      [
        24974
      ]
    ],
    "64138": [
      [
        24928
      ]
    ],
    "64139": [
      [
        25074
      ]
    ],
    "64140": [
      [
        25140
      ]
    ],
    "64141": [
      [
        25540
      ]
    ],
    "64142": [
      [
        25628
      ]
    ],
    "64143": [
      [
        25682
      ]
    ],
    "64144": [
      [
        25942
      ]
    ],
    "64145": [
      [
        26228
      ]
    ],
    "64146": [
      [
        26391
      ]
    ],
    "64147": [
      [
        26395
      ]
    ],
    "64148": [
      [
        26454
      ]
    ],
    "64149": [
      [
        27513
      ]
    ],
    "64150": [
      [
        27578
      ]
    ],
    "64151": [
      [
        27969
      ]
    ],
    "64152": [
      [
        28379
      ]
    ],
    "64153": [
      [
        28363
      ]
    ],
    "64154": [
      [
        28450
      ]
    ],
    "64155": [
      [
        28702
      ]
    ],
    "64156": [
      [
        29038
      ]
    ],
    "64157": [
      [
        30631
      ]
    ],
    "64158": [
      [
        29237
      ]
    ],
    "64159": [
      [
        29359
      ]
    ],
    "64160": [
      [
        29482
      ]
    ],
    "64161": [
      [
        29809
      ]
    ],
    "64162": [
      [
        29958
      ]
    ],
    "64163": [
      [
        30011
      ]
    ],
    "64164": [
      [
        30237
      ]
    ],
    "64165": [
      [
        30239
      ]
    ],
    "64166": [
      [
        30410
      ]
    ],
    "64167": [
      [
        30427
      ]
    ],
    "64168": [
      [
        30452
      ]
    ],
    "64169": [
      [
        30538
      ]
    ],
    "64170": [
      [
        30528
      ]
    ],
    "64171": [
      [
        30924
      ]
    ],
    "64172": [
      [
        31409
      ]
    ],
    "64173": [
      [
        31680
      ]
    ],
    "64174": [
      [
        31867
      ]
    ],
    "64175": [
      [
        32091
      ]
    ],
    "64176": [
      [
        32244
      ]
    ],
    "64177": [
      [
        32574
      ]
    ],
    "64178": [
      [
        32773
      ]
    ],
    "64179": [
      [
        33618
      ]
    ],
    "64180": [
      [
        33775
      ]
    ],
    "64181": [
      [
        34681
      ]
    ],
    "64182": [
      [
        35137
      ]
    ],
    "64183": [
      [
        35206
      ]
    ],
    "64184": [
      [
        35222
      ]
    ],
    "64185": [
      [
        35519
      ]
    ],
    "64186": [
      [
        35576
      ]
    ],
    "64187": [
      [
        35531
      ]
    ],
    "64188": [
      [
        35585
      ]
    ],
    "64189": [
      [
        35582
      ]
    ],
    "64190": [
      [
        35565
      ]
    ],
    "64191": [
      [
        35641
      ]
    ],
    "64192": [
      [
        35722
      ]
    ],
    "64193": [
      [
        36104
      ]
    ],
    "64194": [
      [
        36664
      ]
    ],
    "64195": [
      [
        36978
      ]
    ],
    "64196": [
      [
        37273
      ]
    ],
    "64197": [
      [
        37494
      ]
    ],
    "64198": [
      [
        38524
      ]
    ],
    "64199": [
      [
        38627
      ]
    ],
    "64200": [
      [
        38742
      ]
    ],
    "64201": [
      [
        38875
      ]
    ],
    "64202": [
      [
        38911
      ]
    ],
    "64203": [
      [
        38923
      ]
    ],
    "64204": [
      [
        38971
      ]
    ],
    "64205": [
      [
        39698
      ]
    ],
    "64206": [
      [
        40860
      ]
    ],
    "64207": [
      [
        141386
      ]
    ],
    "64208": [
      [
        141380
      ]
    ],
    "64209": [
      [
        144341
      ]
    ],
    "64210": [
      [
        15261
      ]
    ],
    "64211": [
      [
        16408
      ]
    ],
    "64212": [
      [
        16441
      ]
    ],
    "64213": [
      [
        152137
      ]
    ],
    "64214": [
      [
        154832
      ]
    ],
    "64215": [
      [
        163539
      ]
    ],
    "64216": [
      [
        40771
      ]
    ],
    "64217": [
      [
        40846
      ]
    ],
    "195072": [
      [
        38953
      ]
    ],
    "195073": [
      [
        169398
      ]
    ],
    "195074": [
      [
        39138
      ]
    ],
    "195075": [
      [
        19251
      ]
    ],
    "195076": [
      [
        39209
      ]
    ],
    "195077": [
      [
        39335
      ]
    ],
    "195078": [
      [
        39362
      ]
    ],
    "195079": [
      [
        39422
      ]
    ],
    "195080": [
      [
        19406
      ]
    ],
    "195081": [
      [
        170800
      ]
    ],
    "195082": [
      [
        39698
      ]
    ],
    "195083": [
      [
        40000
      ]
    ],
    "195084": [
      [
        40189
      ]
    ],
    "195085": [
      [
        19662
      ]
    ],
    "195086": [
      [
        19693
      ]
    ],
    "195087": [
      [
        40295
      ]
    ],
    "195088": [
      [
        172238
      ]
    ],
    "195089": [
      [
        19704
      ]
    ],
    "195090": [
      [
        172293
      ]
    ],
    "195091": [
      [
        172558
      ]
    ],
    "195092": [
      [
        172689
      ]
    ],
    "195093": [
      [
        40635
      ]
    ],
    "195094": [
      [
        19798
      ]
    ],
    "195095": [
      [
        40697
      ]
    ],
    "195096": [
      [
        40702
      ]
    ],
    "195097": [
      [
        40709
      ]
    ],
    "195098": [
      [
        40719
      ]
    ],
    "195099": [
      [
        40726
      ]
    ],
    "195100": [
      [
        40763
      ]
    ],
    "195101": [
      [
        173568
      ]
    ]
  },
  "64256": {
    "64256": [
      [
        102,
        102
      ],
      256
    ],
    "64257": [
      [
        102,
        105
      ],
      256
    ],
    "64258": [
      [
        102,
        108
      ],
      256
    ],
    "64259": [
      [
        102,
        102,
        105
      ],
      256
    ],
    "64260": [
      [
        102,
        102,
        108
      ],
      256
    ],
    "64261": [
      [
        383,
        116
      ],
      256
    ],
    "64262": [
      [
        115,
        116
      ],
      256
    ],
    "64275": [
      [
        1396,
        1398
      ],
      256
    ],
    "64276": [
      [
        1396,
        1381
      ],
      256
    ],
    "64277": [
      [
        1396,
        1387
      ],
      256
    ],
    "64278": [
      [
        1406,
        1398
      ],
      256
    ],
    "64279": [
      [
        1396,
        1389
      ],
      256
    ],
    "64285": [
      [
        1497,
        1460
      ],
      512
    ],
    "64286": [
      null,
      26
    ],
    "64287": [
      [
        1522,
        1463
      ],
      512
    ],
    "64288": [
      [
        1506
      ],
      256
    ],
    "64289": [
      [
        1488
      ],
      256
    ],
    "64290": [
      [
        1491
      ],
      256
    ],
    "64291": [
      [
        1492
      ],
      256
    ],
    "64292": [
      [
        1499
      ],
      256
    ],
    "64293": [
      [
        1500
      ],
      256
    ],
    "64294": [
      [
        1501
      ],
      256
    ],
    "64295": [
      [
        1512
      ],
      256
    ],
    "64296": [
      [
        1514
      ],
      256
    ],
    "64297": [
      [
        43
      ],
      256
    ],
    "64298": [
      [
        1513,
        1473
      ],
      512
    ],
    "64299": [
      [
        1513,
        1474
      ],
      512
    ],
    "64300": [
      [
        64329,
        1473
      ],
      512
    ],
    "64301": [
      [
        64329,
        1474
      ],
      512
    ],
    "64302": [
      [
        1488,
        1463
      ],
      512
    ],
    "64303": [
      [
        1488,
        1464
      ],
      512
    ],
    "64304": [
      [
        1488,
        1468
      ],
      512
    ],
    "64305": [
      [
        1489,
        1468
      ],
      512
    ],
    "64306": [
      [
        1490,
        1468
      ],
      512
    ],
    "64307": [
      [
        1491,
        1468
      ],
      512
    ],
    "64308": [
      [
        1492,
        1468
      ],
      512
    ],
    "64309": [
      [
        1493,
        1468
      ],
      512
    ],
    "64310": [
      [
        1494,
        1468
      ],
      512
    ],
    "64312": [
      [
        1496,
        1468
      ],
      512
    ],
    "64313": [
      [
        1497,
        1468
      ],
      512
    ],
    "64314": [
      [
        1498,
        1468
      ],
      512
    ],
    "64315": [
      [
        1499,
        1468
      ],
      512
    ],
    "64316": [
      [
        1500,
        1468
      ],
      512
    ],
    "64318": [
      [
        1502,
        1468
      ],
      512
    ],
    "64320": [
      [
        1504,
        1468
      ],
      512
    ],
    "64321": [
      [
        1505,
        1468
      ],
      512
    ],
    "64323": [
      [
        1507,
        1468
      ],
      512
    ],
    "64324": [
      [
        1508,
        1468
      ],
      512
    ],
    "64326": [
      [
        1510,
        1468
      ],
      512
    ],
    "64327": [
      [
        1511,
        1468
      ],
      512
    ],
    "64328": [
      [
        1512,
        1468
      ],
      512
    ],
    "64329": [
      [
        1513,
        1468
      ],
      512
    ],
    "64330": [
      [
        1514,
        1468
      ],
      512
    ],
    "64331": [
      [
        1493,
        1465
      ],
      512
    ],
    "64332": [
      [
        1489,
        1471
      ],
      512
    ],
    "64333": [
      [
        1499,
        1471
      ],
      512
    ],
    "64334": [
      [
        1508,
        1471
      ],
      512
    ],
    "64335": [
      [
        1488,
        1500
      ],
      256
    ],
    "64336": [
      [
        1649
      ],
      256
    ],
    "64337": [
      [
        1649
      ],
      256
    ],
    "64338": [
      [
        1659
      ],
      256
    ],
    "64339": [
      [
        1659
      ],
      256
    ],
    "64340": [
      [
        1659
      ],
      256
    ],
    "64341": [
      [
        1659
      ],
      256
    ],
    "64342": [
      [
        1662
      ],
      256
    ],
    "64343": [
      [
        1662
      ],
      256
    ],
    "64344": [
      [
        1662
      ],
      256
    ],
    "64345": [
      [
        1662
      ],
      256
    ],
    "64346": [
      [
        1664
      ],
      256
    ],
    "64347": [
      [
        1664
      ],
      256
    ],
    "64348": [
      [
        1664
      ],
      256
    ],
    "64349": [
      [
        1664
      ],
      256
    ],
    "64350": [
      [
        1658
      ],
      256
    ],
    "64351": [
      [
        1658
      ],
      256
    ],
    "64352": [
      [
        1658
      ],
      256
    ],
    "64353": [
      [
        1658
      ],
      256
    ],
    "64354": [
      [
        1663
      ],
      256
    ],
    "64355": [
      [
        1663
      ],
      256
    ],
    "64356": [
      [
        1663
      ],
      256
    ],
    "64357": [
      [
        1663
      ],
      256
    ],
    "64358": [
      [
        1657
      ],
      256
    ],
    "64359": [
      [
        1657
      ],
      256
    ],
    "64360": [
      [
        1657
      ],
      256
    ],
    "64361": [
      [
        1657
      ],
      256
    ],
    "64362": [
      [
        1700
      ],
      256
    ],
    "64363": [
      [
        1700
      ],
      256
    ],
    "64364": [
      [
        1700
      ],
      256
    ],
    "64365": [
      [
        1700
      ],
      256
    ],
    "64366": [
      [
        1702
      ],
      256
    ],
    "64367": [
      [
        1702
      ],
      256
    ],
    "64368": [
      [
        1702
      ],
      256
    ],
    "64369": [
      [
        1702
      ],
      256
    ],
    "64370": [
      [
        1668
      ],
      256
    ],
    "64371": [
      [
        1668
      ],
      256
    ],
    "64372": [
      [
        1668
      ],
      256
    ],
    "64373": [
      [
        1668
      ],
      256
    ],
    "64374": [
      [
        1667
      ],
      256
    ],
    "64375": [
      [
        1667
      ],
      256
    ],
    "64376": [
      [
        1667
      ],
      256
    ],
    "64377": [
      [
        1667
      ],
      256
    ],
    "64378": [
      [
        1670
      ],
      256
    ],
    "64379": [
      [
        1670
      ],
      256
    ],
    "64380": [
      [
        1670
      ],
      256
    ],
    "64381": [
      [
        1670
      ],
      256
    ],
    "64382": [
      [
        1671
      ],
      256
    ],
    "64383": [
      [
        1671
      ],
      256
    ],
    "64384": [
      [
        1671
      ],
      256
    ],
    "64385": [
      [
        1671
      ],
      256
    ],
    "64386": [
      [
        1677
      ],
      256
    ],
    "64387": [
      [
        1677
      ],
      256
    ],
    "64388": [
      [
        1676
      ],
      256
    ],
    "64389": [
      [
        1676
      ],
      256
    ],
    "64390": [
      [
        1678
      ],
      256
    ],
    "64391": [
      [
        1678
      ],
      256
    ],
    "64392": [
      [
        1672
      ],
      256
    ],
    "64393": [
      [
        1672
      ],
      256
    ],
    "64394": [
      [
        1688
      ],
      256
    ],
    "64395": [
      [
        1688
      ],
      256
    ],
    "64396": [
      [
        1681
      ],
      256
    ],
    "64397": [
      [
        1681
      ],
      256
    ],
    "64398": [
      [
        1705
      ],
      256
    ],
    "64399": [
      [
        1705
      ],
      256
    ],
    "64400": [
      [
        1705
      ],
      256
    ],
    "64401": [
      [
        1705
      ],
      256
    ],
    "64402": [
      [
        1711
      ],
      256
    ],
    "64403": [
      [
        1711
      ],
      256
    ],
    "64404": [
      [
        1711
      ],
      256
    ],
    "64405": [
      [
        1711
      ],
      256
    ],
    "64406": [
      [
        1715
      ],
      256
    ],
    "64407": [
      [
        1715
      ],
      256
    ],
    "64408": [
      [
        1715
      ],
      256
    ],
    "64409": [
      [
        1715
      ],
      256
    ],
    "64410": [
      [
        1713
      ],
      256
    ],
    "64411": [
      [
        1713
      ],
      256
    ],
    "64412": [
      [
        1713
      ],
      256
    ],
    "64413": [
      [
        1713
      ],
      256
    ],
    "64414": [
      [
        1722
      ],
      256
    ],
    "64415": [
      [
        1722
      ],
      256
    ],
    "64416": [
      [
        1723
      ],
      256
    ],
    "64417": [
      [
        1723
      ],
      256
    ],
    "64418": [
      [
        1723
      ],
      256
    ],
    "64419": [
      [
        1723
      ],
      256
    ],
    "64420": [
      [
        1728
      ],
      256
    ],
    "64421": [
      [
        1728
      ],
      256
    ],
    "64422": [
      [
        1729
      ],
      256
    ],
    "64423": [
      [
        1729
      ],
      256
    ],
    "64424": [
      [
        1729
      ],
      256
    ],
    "64425": [
      [
        1729
      ],
      256
    ],
    "64426": [
      [
        1726
      ],
      256
    ],
    "64427": [
      [
        1726
      ],
      256
    ],
    "64428": [
      [
        1726
      ],
      256
    ],
    "64429": [
      [
        1726
      ],
      256
    ],
    "64430": [
      [
        1746
      ],
      256
    ],
    "64431": [
      [
        1746
      ],
      256
    ],
    "64432": [
      [
        1747
      ],
      256
    ],
    "64433": [
      [
        1747
      ],
      256
    ],
    "64467": [
      [
        1709
      ],
      256
    ],
    "64468": [
      [
        1709
      ],
      256
    ],
    "64469": [
      [
        1709
      ],
      256
    ],
    "64470": [
      [
        1709
      ],
      256
    ],
    "64471": [
      [
        1735
      ],
      256
    ],
    "64472": [
      [
        1735
      ],
      256
    ],
    "64473": [
      [
        1734
      ],
      256
    ],
    "64474": [
      [
        1734
      ],
      256
    ],
    "64475": [
      [
        1736
      ],
      256
    ],
    "64476": [
      [
        1736
      ],
      256
    ],
    "64477": [
      [
        1655
      ],
      256
    ],
    "64478": [
      [
        1739
      ],
      256
    ],
    "64479": [
      [
        1739
      ],
      256
    ],
    "64480": [
      [
        1733
      ],
      256
    ],
    "64481": [
      [
        1733
      ],
      256
    ],
    "64482": [
      [
        1737
      ],
      256
    ],
    "64483": [
      [
        1737
      ],
      256
    ],
    "64484": [
      [
        1744
      ],
      256
    ],
    "64485": [
      [
        1744
      ],
      256
    ],
    "64486": [
      [
        1744
      ],
      256
    ],
    "64487": [
      [
        1744
      ],
      256
    ],
    "64488": [
      [
        1609
      ],
      256
    ],
    "64489": [
      [
        1609
      ],
      256
    ],
    "64490": [
      [
        1574,
        1575
      ],
      256
    ],
    "64491": [
      [
        1574,
        1575
      ],
      256
    ],
    "64492": [
      [
        1574,
        1749
      ],
      256
    ],
    "64493": [
      [
        1574,
        1749
      ],
      256
    ],
    "64494": [
      [
        1574,
        1608
      ],
      256
    ],
    "64495": [
      [
        1574,
        1608
      ],
      256
    ],
    "64496": [
      [
        1574,
        1735
      ],
      256
    ],
    "64497": [
      [
        1574,
        1735
      ],
      256
    ],
    "64498": [
      [
        1574,
        1734
      ],
      256
    ],
    "64499": [
      [
        1574,
        1734
      ],
      256
    ],
    "64500": [
      [
        1574,
        1736
      ],
      256
    ],
    "64501": [
      [
        1574,
        1736
      ],
      256
    ],
    "64502": [
      [
        1574,
        1744
      ],
      256
    ],
    "64503": [
      [
        1574,
        1744
      ],
      256
    ],
    "64504": [
      [
        1574,
        1744
      ],
      256
    ],
    "64505": [
      [
        1574,
        1609
      ],
      256
    ],
    "64506": [
      [
        1574,
        1609
      ],
      256
    ],
    "64507": [
      [
        1574,
        1609
      ],
      256
    ],
    "64508": [
      [
        1740
      ],
      256
    ],
    "64509": [
      [
        1740
      ],
      256
    ],
    "64510": [
      [
        1740
      ],
      256
    ],
    "64511": [
      [
        1740
      ],
      256
    ]
  },
  "64512": {
    "64512": [
      [
        1574,
        1580
      ],
      256
    ],
    "64513": [
      [
        1574,
        1581
      ],
      256
    ],
    "64514": [
      [
        1574,
        1605
      ],
      256
    ],
    "64515": [
      [
        1574,
        1609
      ],
      256
    ],
    "64516": [
      [
        1574,
        1610
      ],
      256
    ],
    "64517": [
      [
        1576,
        1580
      ],
      256
    ],
    "64518": [
      [
        1576,
        1581
      ],
      256
    ],
    "64519": [
      [
        1576,
        1582
      ],
      256
    ],
    "64520": [
      [
        1576,
        1605
      ],
      256
    ],
    "64521": [
      [
        1576,
        1609
      ],
      256
    ],
    "64522": [
      [
        1576,
        1610
      ],
      256
    ],
    "64523": [
      [
        1578,
        1580
      ],
      256
    ],
    "64524": [
      [
        1578,
        1581
      ],
      256
    ],
    "64525": [
      [
        1578,
        1582
      ],
      256
    ],
    "64526": [
      [
        1578,
        1605
      ],
      256
    ],
    "64527": [
      [
        1578,
        1609
      ],
      256
    ],
    "64528": [
      [
        1578,
        1610
      ],
      256
    ],
    "64529": [
      [
        1579,
        1580
      ],
      256
    ],
    "64530": [
      [
        1579,
        1605
      ],
      256
    ],
    "64531": [
      [
        1579,
        1609
      ],
      256
    ],
    "64532": [
      [
        1579,
        1610
      ],
      256
    ],
    "64533": [
      [
        1580,
        1581
      ],
      256
    ],
    "64534": [
      [
        1580,
        1605
      ],
      256
    ],
    "64535": [
      [
        1581,
        1580
      ],
      256
    ],
    "64536": [
      [
        1581,
        1605
      ],
      256
    ],
    "64537": [
      [
        1582,
        1580
      ],
      256
    ],
    "64538": [
      [
        1582,
        1581
      ],
      256
    ],
    "64539": [
      [
        1582,
        1605
      ],
      256
    ],
    "64540": [
      [
        1587,
        1580
      ],
      256
    ],
    "64541": [
      [
        1587,
        1581
      ],
      256
    ],
    "64542": [
      [
        1587,
        1582
      ],
      256
    ],
    "64543": [
      [
        1587,
        1605
      ],
      256
    ],
    "64544": [
      [
        1589,
        1581
      ],
      256
    ],
    "64545": [
      [
        1589,
        1605
      ],
      256
    ],
    "64546": [
      [
        1590,
        1580
      ],
      256
    ],
    "64547": [
      [
        1590,
        1581
      ],
      256
    ],
    "64548": [
      [
        1590,
        1582
      ],
      256
    ],
    "64549": [
      [
        1590,
        1605
      ],
      256
    ],
    "64550": [
      [
        1591,
        1581
      ],
      256
    ],
    "64551": [
      [
        1591,
        1605
      ],
      256
    ],
    "64552": [
      [
        1592,
        1605
      ],
      256
    ],
    "64553": [
      [
        1593,
        1580
      ],
      256
    ],
    "64554": [
      [
        1593,
        1605
      ],
      256
    ],
    "64555": [
      [
        1594,
        1580
      ],
      256
    ],
    "64556": [
      [
        1594,
        1605
      ],
      256
    ],
    "64557": [
      [
        1601,
        1580
      ],
      256
    ],
    "64558": [
      [
        1601,
        1581
      ],
      256
    ],
    "64559": [
      [
        1601,
        1582
      ],
      256
    ],
    "64560": [
      [
        1601,
        1605
      ],
      256
    ],
    "64561": [
      [
        1601,
        1609
      ],
      256
    ],
    "64562": [
      [
        1601,
        1610
      ],
      256
    ],
    "64563": [
      [
        1602,
        1581
      ],
      256
    ],
    "64564": [
      [
        1602,
        1605
      ],
      256
    ],
    "64565": [
      [
        1602,
        1609
      ],
      256
    ],
    "64566": [
      [
        1602,
        1610
      ],
      256
    ],
    "64567": [
      [
        1603,
        1575
      ],
      256
    ],
    "64568": [
      [
        1603,
        1580
      ],
      256
    ],
    "64569": [
      [
        1603,
        1581
      ],
      256
    ],
    "64570": [
      [
        1603,
        1582
      ],
      256
    ],
    "64571": [
      [
        1603,
        1604
      ],
      256
    ],
    "64572": [
      [
        1603,
        1605
      ],
      256
    ],
    "64573": [
      [
        1603,
        1609
      ],
      256
    ],
    "64574": [
      [
        1603,
        1610
      ],
      256
    ],
    "64575": [
      [
        1604,
        1580
      ],
      256
    ],
    "64576": [
      [
        1604,
        1581
      ],
      256
    ],
    "64577": [
      [
        1604,
        1582
      ],
      256
    ],
    "64578": [
      [
        1604,
        1605
      ],
      256
    ],
    "64579": [
      [
        1604,
        1609
      ],
      256
    ],
    "64580": [
      [
        1604,
        1610
      ],
      256
    ],
    "64581": [
      [
        1605,
        1580
      ],
      256
    ],
    "64582": [
      [
        1605,
        1581
      ],
      256
    ],
    "64583": [
      [
        1605,
        1582
      ],
      256
    ],
    "64584": [
      [
        1605,
        1605
      ],
      256
    ],
    "64585": [
      [
        1605,
        1609
      ],
      256
    ],
    "64586": [
      [
        1605,
        1610
      ],
      256
    ],
    "64587": [
      [
        1606,
        1580
      ],
      256
    ],
    "64588": [
      [
        1606,
        1581
      ],
      256
    ],
    "64589": [
      [
        1606,
        1582
      ],
      256
    ],
    "64590": [
      [
        1606,
        1605
      ],
      256
    ],
    "64591": [
      [
        1606,
        1609
      ],
      256
    ],
    "64592": [
      [
        1606,
        1610
      ],
      256
    ],
    "64593": [
      [
        1607,
        1580
      ],
      256
    ],
    "64594": [
      [
        1607,
        1605
      ],
      256
    ],
    "64595": [
      [
        1607,
        1609
      ],
      256
    ],
    "64596": [
      [
        1607,
        1610
      ],
      256
    ],
    "64597": [
      [
        1610,
        1580
      ],
      256
    ],
    "64598": [
      [
        1610,
        1581
      ],
      256
    ],
    "64599": [
      [
        1610,
        1582
      ],
      256
    ],
    "64600": [
      [
        1610,
        1605
      ],
      256
    ],
    "64601": [
      [
        1610,
        1609
      ],
      256
    ],
    "64602": [
      [
        1610,
        1610
      ],
      256
    ],
    "64603": [
      [
        1584,
        1648
      ],
      256
    ],
    "64604": [
      [
        1585,
        1648
      ],
      256
    ],
    "64605": [
      [
        1609,
        1648
      ],
      256
    ],
    "64606": [
      [
        32,
        1612,
        1617
      ],
      256
    ],
    "64607": [
      [
        32,
        1613,
        1617
      ],
      256
    ],
    "64608": [
      [
        32,
        1614,
        1617
      ],
      256
    ],
    "64609": [
      [
        32,
        1615,
        1617
      ],
      256
    ],
    "64610": [
      [
        32,
        1616,
        1617
      ],
      256
    ],
    "64611": [
      [
        32,
        1617,
        1648
      ],
      256
    ],
    "64612": [
      [
        1574,
        1585
      ],
      256
    ],
    "64613": [
      [
        1574,
        1586
      ],
      256
    ],
    "64614": [
      [
        1574,
        1605
      ],
      256
    ],
    "64615": [
      [
        1574,
        1606
      ],
      256
    ],
    "64616": [
      [
        1574,
        1609
      ],
      256
    ],
    "64617": [
      [
        1574,
        1610
      ],
      256
    ],
    "64618": [
      [
        1576,
        1585
      ],
      256
    ],
    "64619": [
      [
        1576,
        1586
      ],
      256
    ],
    "64620": [
      [
        1576,
        1605
      ],
      256
    ],
    "64621": [
      [
        1576,
        1606
      ],
      256
    ],
    "64622": [
      [
        1576,
        1609
      ],
      256
    ],
    "64623": [
      [
        1576,
        1610
      ],
      256
    ],
    "64624": [
      [
        1578,
        1585
      ],
      256
    ],
    "64625": [
      [
        1578,
        1586
      ],
      256
    ],
    "64626": [
      [
        1578,
        1605
      ],
      256
    ],
    "64627": [
      [
        1578,
        1606
      ],
      256
    ],
    "64628": [
      [
        1578,
        1609
      ],
      256
    ],
    "64629": [
      [
        1578,
        1610
      ],
      256
    ],
    "64630": [
      [
        1579,
        1585
      ],
      256
    ],
    "64631": [
      [
        1579,
        1586
      ],
      256
    ],
    "64632": [
      [
        1579,
        1605
      ],
      256
    ],
    "64633": [
      [
        1579,
        1606
      ],
      256
    ],
    "64634": [
      [
        1579,
        1609
      ],
      256
    ],
    "64635": [
      [
        1579,
        1610
      ],
      256
    ],
    "64636": [
      [
        1601,
        1609
      ],
      256
    ],
    "64637": [
      [
        1601,
        1610
      ],
      256
    ],
    "64638": [
      [
        1602,
        1609
      ],
      256
    ],
    "64639": [
      [
        1602,
        1610
      ],
      256
    ],
    "64640": [
      [
        1603,
        1575
      ],
      256
    ],
    "64641": [
      [
        1603,
        1604
      ],
      256
    ],
    "64642": [
      [
        1603,
        1605
      ],
      256
    ],
    "64643": [
      [
        1603,
        1609
      ],
      256
    ],
    "64644": [
      [
        1603,
        1610
      ],
      256
    ],
    "64645": [
      [
        1604,
        1605
      ],
      256
    ],
    "64646": [
      [
        1604,
        1609
      ],
      256
    ],
    "64647": [
      [
        1604,
        1610
      ],
      256
    ],
    "64648": [
      [
        1605,
        1575
      ],
      256
    ],
    "64649": [
      [
        1605,
        1605
      ],
      256
    ],
    "64650": [
      [
        1606,
        1585
      ],
      256
    ],
    "64651": [
      [
        1606,
        1586
      ],
      256
    ],
    "64652": [
      [
        1606,
        1605
      ],
      256
    ],
    "64653": [
      [
        1606,
        1606
      ],
      256
    ],
    "64654": [
      [
        1606,
        1609
      ],
      256
    ],
    "64655": [
      [
        1606,
        1610
      ],
      256
    ],
    "64656": [
      [
        1609,
        1648
      ],
      256
    ],
    "64657": [
      [
        1610,
        1585
      ],
      256
    ],
    "64658": [
      [
        1610,
        1586
      ],
      256
    ],
    "64659": [
      [
        1610,
        1605
      ],
      256
    ],
    "64660": [
      [
        1610,
        1606
      ],
      256
    ],
    "64661": [
      [
        1610,
        1609
      ],
      256
    ],
    "64662": [
      [
        1610,
        1610
      ],
      256
    ],
    "64663": [
      [
        1574,
        1580
      ],
      256
    ],
    "64664": [
      [
        1574,
        1581
      ],
      256
    ],
    "64665": [
      [
        1574,
        1582
      ],
      256
    ],
    "64666": [
      [
        1574,
        1605
      ],
      256
    ],
    "64667": [
      [
        1574,
        1607
      ],
      256
    ],
    "64668": [
      [
        1576,
        1580
      ],
      256
    ],
    "64669": [
      [
        1576,
        1581
      ],
      256
    ],
    "64670": [
      [
        1576,
        1582
      ],
      256
    ],
    "64671": [
      [
        1576,
        1605
      ],
      256
    ],
    "64672": [
      [
        1576,
        1607
      ],
      256
    ],
    "64673": [
      [
        1578,
        1580
      ],
      256
    ],
    "64674": [
      [
        1578,
        1581
      ],
      256
    ],
    "64675": [
      [
        1578,
        1582
      ],
      256
    ],
    "64676": [
      [
        1578,
        1605
      ],
      256
    ],
    "64677": [
      [
        1578,
        1607
      ],
      256
    ],
    "64678": [
      [
        1579,
        1605
      ],
      256
    ],
    "64679": [
      [
        1580,
        1581
      ],
      256
    ],
    "64680": [
      [
        1580,
        1605
      ],
      256
    ],
    "64681": [
      [
        1581,
        1580
      ],
      256
    ],
    "64682": [
      [
        1581,
        1605
      ],
      256
    ],
    "64683": [
      [
        1582,
        1580
      ],
      256
    ],
    "64684": [
      [
        1582,
        1605
      ],
      256
    ],
    "64685": [
      [
        1587,
        1580
      ],
      256
    ],
    "64686": [
      [
        1587,
        1581
      ],
      256
    ],
    "64687": [
      [
        1587,
        1582
      ],
      256
    ],
    "64688": [
      [
        1587,
        1605
      ],
      256
    ],
    "64689": [
      [
        1589,
        1581
      ],
      256
    ],
    "64690": [
      [
        1589,
        1582
      ],
      256
    ],
    "64691": [
      [
        1589,
        1605
      ],
      256
    ],
    "64692": [
      [
        1590,
        1580
      ],
      256
    ],
    "64693": [
      [
        1590,
        1581
      ],
      256
    ],
    "64694": [
      [
        1590,
        1582
      ],
      256
    ],
    "64695": [
      [
        1590,
        1605
      ],
      256
    ],
    "64696": [
      [
        1591,
        1581
      ],
      256
    ],
    "64697": [
      [
        1592,
        1605
      ],
      256
    ],
    "64698": [
      [
        1593,
        1580
      ],
      256
    ],
    "64699": [
      [
        1593,
        1605
      ],
      256
    ],
    "64700": [
      [
        1594,
        1580
      ],
      256
    ],
    "64701": [
      [
        1594,
        1605
      ],
      256
    ],
    "64702": [
      [
        1601,
        1580
      ],
      256
    ],
    "64703": [
      [
        1601,
        1581
      ],
      256
    ],
    "64704": [
      [
        1601,
        1582
      ],
      256
    ],
    "64705": [
      [
        1601,
        1605
      ],
      256
    ],
    "64706": [
      [
        1602,
        1581
      ],
      256
    ],
    "64707": [
      [
        1602,
        1605
      ],
      256
    ],
    "64708": [
      [
        1603,
        1580
      ],
      256
    ],
    "64709": [
      [
        1603,
        1581
      ],
      256
    ],
    "64710": [
      [
        1603,
        1582
      ],
      256
    ],
    "64711": [
      [
        1603,
        1604
      ],
      256
    ],
    "64712": [
      [
        1603,
        1605
      ],
      256
    ],
    "64713": [
      [
        1604,
        1580
      ],
      256
    ],
    "64714": [
      [
        1604,
        1581
      ],
      256
    ],
    "64715": [
      [
        1604,
        1582
      ],
      256
    ],
    "64716": [
      [
        1604,
        1605
      ],
      256
    ],
    "64717": [
      [
        1604,
        1607
      ],
      256
    ],
    "64718": [
      [
        1605,
        1580
      ],
      256
    ],
    "64719": [
      [
        1605,
        1581
      ],
      256
    ],
    "64720": [
      [
        1605,
        1582
      ],
      256
    ],
    "64721": [
      [
        1605,
        1605
      ],
      256
    ],
    "64722": [
      [
        1606,
        1580
      ],
      256
    ],
    "64723": [
      [
        1606,
        1581
      ],
      256
    ],
    "64724": [
      [
        1606,
        1582
      ],
      256
    ],
    "64725": [
      [
        1606,
        1605
      ],
      256
    ],
    "64726": [
      [
        1606,
        1607
      ],
      256
    ],
    "64727": [
      [
        1607,
        1580
      ],
      256
    ],
    "64728": [
      [
        1607,
        1605
      ],
      256
    ],
    "64729": [
      [
        1607,
        1648
      ],
      256
    ],
    "64730": [
      [
        1610,
        1580
      ],
      256
    ],
    "64731": [
      [
        1610,
        1581
      ],
      256
    ],
    "64732": [
      [
        1610,
        1582
      ],
      256
    ],
    "64733": [
      [
        1610,
        1605
      ],
      256
    ],
    "64734": [
      [
        1610,
        1607
      ],
      256
    ],
    "64735": [
      [
        1574,
        1605
      ],
      256
    ],
    "64736": [
      [
        1574,
        1607
      ],
      256
    ],
    "64737": [
      [
        1576,
        1605
      ],
      256
    ],
    "64738": [
      [
        1576,
        1607
      ],
      256
    ],
    "64739": [
      [
        1578,
        1605
      ],
      256
    ],
    "64740": [
      [
        1578,
        1607
      ],
      256
    ],
    "64741": [
      [
        1579,
        1605
      ],
      256
    ],
    "64742": [
      [
        1579,
        1607
      ],
      256
    ],
    "64743": [
      [
        1587,
        1605
      ],
      256
    ],
    "64744": [
      [
        1587,
        1607
      ],
      256
    ],
    "64745": [
      [
        1588,
        1605
      ],
      256
    ],
    "64746": [
      [
        1588,
        1607
      ],
      256
    ],
    "64747": [
      [
        1603,
        1604
      ],
      256
    ],
    "64748": [
      [
        1603,
        1605
      ],
      256
    ],
    "64749": [
      [
        1604,
        1605
      ],
      256
    ],
    "64750": [
      [
        1606,
        1605
      ],
      256
    ],
    "64751": [
      [
        1606,
        1607
      ],
      256
    ],
    "64752": [
      [
        1610,
        1605
      ],
      256
    ],
    "64753": [
      [
        1610,
        1607
      ],
      256
    ],
    "64754": [
      [
        1600,
        1614,
        1617
      ],
      256
    ],
    "64755": [
      [
        1600,
        1615,
        1617
      ],
      256
    ],
    "64756": [
      [
        1600,
        1616,
        1617
      ],
      256
    ],
    "64757": [
      [
        1591,
        1609
      ],
      256
    ],
    "64758": [
      [
        1591,
        1610
      ],
      256
    ],
    "64759": [
      [
        1593,
        1609
      ],
      256
    ],
    "64760": [
      [
        1593,
        1610
      ],
      256
    ],
    "64761": [
      [
        1594,
        1609
      ],
      256
    ],
    "64762": [
      [
        1594,
        1610
      ],
      256
    ],
    "64763": [
      [
        1587,
        1609
      ],
      256
    ],
    "64764": [
      [
        1587,
        1610
      ],
      256
    ],
    "64765": [
      [
        1588,
        1609
      ],
      256
    ],
    "64766": [
      [
        1588,
        1610
      ],
      256
    ],
    "64767": [
      [
        1581,
        1609
      ],
      256
    ]
  },
  "64768": {
    "64768": [
      [
        1581,
        1610
      ],
      256
    ],
    "64769": [
      [
        1580,
        1609
      ],
      256
    ],
    "64770": [
      [
        1580,
        1610
      ],
      256
    ],
    "64771": [
      [
        1582,
        1609
      ],
      256
    ],
    "64772": [
      [
        1582,
        1610
      ],
      256
    ],
    "64773": [
      [
        1589,
        1609
      ],
      256
    ],
    "64774": [
      [
        1589,
        1610
      ],
      256
    ],
    "64775": [
      [
        1590,
        1609
      ],
      256
    ],
    "64776": [
      [
        1590,
        1610
      ],
      256
    ],
    "64777": [
      [
        1588,
        1580
      ],
      256
    ],
    "64778": [
      [
        1588,
        1581
      ],
      256
    ],
    "64779": [
      [
        1588,
        1582
      ],
      256
    ],
    "64780": [
      [
        1588,
        1605
      ],
      256
    ],
    "64781": [
      [
        1588,
        1585
      ],
      256
    ],
    "64782": [
      [
        1587,
        1585
      ],
      256
    ],
    "64783": [
      [
        1589,
        1585
      ],
      256
    ],
    "64784": [
      [
        1590,
        1585
      ],
      256
    ],
    "64785": [
      [
        1591,
        1609
      ],
      256
    ],
    "64786": [
      [
        1591,
        1610
      ],
      256
    ],
    "64787": [
      [
        1593,
        1609
      ],
      256
    ],
    "64788": [
      [
        1593,
        1610
      ],
      256
    ],
    "64789": [
      [
        1594,
        1609
      ],
      256
    ],
    "64790": [
      [
        1594,
        1610
      ],
      256
    ],
    "64791": [
      [
        1587,
        1609
      ],
      256
    ],
    "64792": [
      [
        1587,
        1610
      ],
      256
    ],
    "64793": [
      [
        1588,
        1609
      ],
      256
    ],
    "64794": [
      [
        1588,
        1610
      ],
      256
    ],
    "64795": [
      [
        1581,
        1609
      ],
      256
    ],
    "64796": [
      [
        1581,
        1610
      ],
      256
    ],
    "64797": [
      [
        1580,
        1609
      ],
      256
    ],
    "64798": [
      [
        1580,
        1610
      ],
      256
    ],
    "64799": [
      [
        1582,
        1609
      ],
      256
    ],
    "64800": [
      [
        1582,
        1610
      ],
      256
    ],
    "64801": [
      [
        1589,
        1609
      ],
      256
    ],
    "64802": [
      [
        1589,
        1610
      ],
      256
    ],
    "64803": [
      [
        1590,
        1609
      ],
      256
    ],
    "64804": [
      [
        1590,
        1610
      ],
      256
    ],
    "64805": [
      [
        1588,
        1580
      ],
      256
    ],
    "64806": [
      [
        1588,
        1581
      ],
      256
    ],
    "64807": [
      [
        1588,
        1582
      ],
      256
    ],
    "64808": [
      [
        1588,
        1605
      ],
      256
    ],
    "64809": [
      [
        1588,
        1585
      ],
      256
    ],
    "64810": [
      [
        1587,
        1585
      ],
      256
    ],
    "64811": [
      [
        1589,
        1585
      ],
      256
    ],
    "64812": [
      [
        1590,
        1585
      ],
      256
    ],
    "64813": [
      [
        1588,
        1580
      ],
      256
    ],
    "64814": [
      [
        1588,
        1581
      ],
      256
    ],
    "64815": [
      [
        1588,
        1582
      ],
      256
    ],
    "64816": [
      [
        1588,
        1605
      ],
      256
    ],
    "64817": [
      [
        1587,
        1607
      ],
      256
    ],
    "64818": [
      [
        1588,
        1607
      ],
      256
    ],
    "64819": [
      [
        1591,
        1605
      ],
      256
    ],
    "64820": [
      [
        1587,
        1580
      ],
      256
    ],
    "64821": [
      [
        1587,
        1581
      ],
      256
    ],
    "64822": [
      [
        1587,
        1582
      ],
      256
    ],
    "64823": [
      [
        1588,
        1580
      ],
      256
    ],
    "64824": [
      [
        1588,
        1581
      ],
      256
    ],
    "64825": [
      [
        1588,
        1582
      ],
      256
    ],
    "64826": [
      [
        1591,
        1605
      ],
      256
    ],
    "64827": [
      [
        1592,
        1605
      ],
      256
    ],
    "64828": [
      [
        1575,
        1611
      ],
      256
    ],
    "64829": [
      [
        1575,
        1611
      ],
      256
    ],
    "64848": [
      [
        1578,
        1580,
        1605
      ],
      256
    ],
    "64849": [
      [
        1578,
        1581,
        1580
      ],
      256
    ],
    "64850": [
      [
        1578,
        1581,
        1580
      ],
      256
    ],
    "64851": [
      [
        1578,
        1581,
        1605
      ],
      256
    ],
    "64852": [
      [
        1578,
        1582,
        1605
      ],
      256
    ],
    "64853": [
      [
        1578,
        1605,
        1580
      ],
      256
    ],
    "64854": [
      [
        1578,
        1605,
        1581
      ],
      256
    ],
    "64855": [
      [
        1578,
        1605,
        1582
      ],
      256
    ],
    "64856": [
      [
        1580,
        1605,
        1581
      ],
      256
    ],
    "64857": [
      [
        1580,
        1605,
        1581
      ],
      256
    ],
    "64858": [
      [
        1581,
        1605,
        1610
      ],
      256
    ],
    "64859": [
      [
        1581,
        1605,
        1609
      ],
      256
    ],
    "64860": [
      [
        1587,
        1581,
        1580
      ],
      256
    ],
    "64861": [
      [
        1587,
        1580,
        1581
      ],
      256
    ],
    "64862": [
      [
        1587,
        1580,
        1609
      ],
      256
    ],
    "64863": [
      [
        1587,
        1605,
        1581
      ],
      256
    ],
    "64864": [
      [
        1587,
        1605,
        1581
      ],
      256
    ],
    "64865": [
      [
        1587,
        1605,
        1580
      ],
      256
    ],
    "64866": [
      [
        1587,
        1605,
        1605
      ],
      256
    ],
    "64867": [
      [
        1587,
        1605,
        1605
      ],
      256
    ],
    "64868": [
      [
        1589,
        1581,
        1581
      ],
      256
    ],
    "64869": [
      [
        1589,
        1581,
        1581
      ],
      256
    ],
    "64870": [
      [
        1589,
        1605,
        1605
      ],
      256
    ],
    "64871": [
      [
        1588,
        1581,
        1605
      ],
      256
    ],
    "64872": [
      [
        1588,
        1581,
        1605
      ],
      256
    ],
    "64873": [
      [
        1588,
        1580,
        1610
      ],
      256
    ],
    "64874": [
      [
        1588,
        1605,
        1582
      ],
      256
    ],
    "64875": [
      [
        1588,
        1605,
        1582
      ],
      256
    ],
    "64876": [
      [
        1588,
        1605,
        1605
      ],
      256
    ],
    "64877": [
      [
        1588,
        1605,
        1605
      ],
      256
    ],
    "64878": [
      [
        1590,
        1581,
        1609
      ],
      256
    ],
    "64879": [
      [
        1590,
        1582,
        1605
      ],
      256
    ],
    "64880": [
      [
        1590,
        1582,
        1605
      ],
      256
    ],
    "64881": [
      [
        1591,
        1605,
        1581
      ],
      256
    ],
    "64882": [
      [
        1591,
        1605,
        1581
      ],
      256
    ],
    "64883": [
      [
        1591,
        1605,
        1605
      ],
      256
    ],
    "64884": [
      [
        1591,
        1605,
        1610
      ],
      256
    ],
    "64885": [
      [
        1593,
        1580,
        1605
      ],
      256
    ],
    "64886": [
      [
        1593,
        1605,
        1605
      ],
      256
    ],
    "64887": [
      [
        1593,
        1605,
        1605
      ],
      256
    ],
    "64888": [
      [
        1593,
        1605,
        1609
      ],
      256
    ],
    "64889": [
      [
        1594,
        1605,
        1605
      ],
      256
    ],
    "64890": [
      [
        1594,
        1605,
        1610
      ],
      256
    ],
    "64891": [
      [
        1594,
        1605,
        1609
      ],
      256
    ],
    "64892": [
      [
        1601,
        1582,
        1605
      ],
      256
    ],
    "64893": [
      [
        1601,
        1582,
        1605
      ],
      256
    ],
    "64894": [
      [
        1602,
        1605,
        1581
      ],
      256
    ],
    "64895": [
      [
        1602,
        1605,
        1605
      ],
      256
    ],
    "64896": [
      [
        1604,
        1581,
        1605
      ],
      256
    ],
    "64897": [
      [
        1604,
        1581,
        1610
      ],
      256
    ],
    "64898": [
      [
        1604,
        1581,
        1609
      ],
      256
    ],
    "64899": [
      [
        1604,
        1580,
        1580
      ],
      256
    ],
    "64900": [
      [
        1604,
        1580,
        1580
      ],
      256
    ],
    "64901": [
      [
        1604,
        1582,
        1605
      ],
      256
    ],
    "64902": [
      [
        1604,
        1582,
        1605
      ],
      256
    ],
    "64903": [
      [
        1604,
        1605,
        1581
      ],
      256
    ],
    "64904": [
      [
        1604,
        1605,
        1581
      ],
      256
    ],
    "64905": [
      [
        1605,
        1581,
        1580
      ],
      256
    ],
    "64906": [
      [
        1605,
        1581,
        1605
      ],
      256
    ],
    "64907": [
      [
        1605,
        1581,
        1610
      ],
      256
    ],
    "64908": [
      [
        1605,
        1580,
        1581
      ],
      256
    ],
    "64909": [
      [
        1605,
        1580,
        1605
      ],
      256
    ],
    "64910": [
      [
        1605,
        1582,
        1580
      ],
      256
    ],
    "64911": [
      [
        1605,
        1582,
        1605
      ],
      256
    ],
    "64914": [
      [
        1605,
        1580,
        1582
      ],
      256
    ],
    "64915": [
      [
        1607,
        1605,
        1580
      ],
      256
    ],
    "64916": [
      [
        1607,
        1605,
        1605
      ],
      256
    ],
    "64917": [
      [
        1606,
        1581,
        1605
      ],
      256
    ],
    "64918": [
      [
        1606,
        1581,
        1609
      ],
      256
    ],
    "64919": [
      [
        1606,
        1580,
        1605
      ],
      256
    ],
    "64920": [
      [
        1606,
        1580,
        1605
      ],
      256
    ],
    "64921": [
      [
        1606,
        1580,
        1609
      ],
      256
    ],
    "64922": [
      [
        1606,
        1605,
        1610
      ],
      256
    ],
    "64923": [
      [
        1606,
        1605,
        1609
      ],
      256
    ],
    "64924": [
      [
        1610,
        1605,
        1605
      ],
      256
    ],
    "64925": [
      [
        1610,
        1605,
        1605
      ],
      256
    ],
    "64926": [
      [
        1576,
        1582,
        1610
      ],
      256
    ],
    "64927": [
      [
        1578,
        1580,
        1610
      ],
      256
    ],
    "64928": [
      [
        1578,
        1580,
        1609
      ],
      256
    ],
    "64929": [
      [
        1578,
        1582,
        1610
      ],
      256
    ],
    "64930": [
      [
        1578,
        1582,
        1609
      ],
      256
    ],
    "64931": [
      [
        1578,
        1605,
        1610
      ],
      256
    ],
    "64932": [
      [
        1578,
        1605,
        1609
      ],
      256
    ],
    "64933": [
      [
        1580,
        1605,
        1610
      ],
      256
    ],
    "64934": [
      [
        1580,
        1581,
        1609
      ],
      256
    ],
    "64935": [
      [
        1580,
        1605,
        1609
      ],
      256
    ],
    "64936": [
      [
        1587,
        1582,
        1609
      ],
      256
    ],
    "64937": [
      [
        1589,
        1581,
        1610
      ],
      256
    ],
    "64938": [
      [
        1588,
        1581,
        1610
      ],
      256
    ],
    "64939": [
      [
        1590,
        1581,
        1610
      ],
      256
    ],
    "64940": [
      [
        1604,
        1580,
        1610
      ],
      256
    ],
    "64941": [
      [
        1604,
        1605,
        1610
      ],
      256
    ],
    "64942": [
      [
        1610,
        1581,
        1610
      ],
      256
    ],
    "64943": [
      [
        1610,
        1580,
        1610
      ],
      256
    ],
    "64944": [
      [
        1610,
        1605,
        1610
      ],
      256
    ],
    "64945": [
      [
        1605,
        1605,
        1610
      ],
      256
    ],
    "64946": [
      [
        1602,
        1605,
        1610
      ],
      256
    ],
    "64947": [
      [
        1606,
        1581,
        1610
      ],
      256
    ],
    "64948": [
      [
        1602,
        1605,
        1581
      ],
      256
    ],
    "64949": [
      [
        1604,
        1581,
        1605
      ],
      256
    ],
    "64950": [
      [
        1593,
        1605,
        1610
      ],
      256
    ],
    "64951": [
      [
        1603,
        1605,
        1610
      ],
      256
    ],
    "64952": [
      [
        1606,
        1580,
        1581
      ],
      256
    ],
    "64953": [
      [
        1605,
        1582,
        1610
      ],
      256
    ],
    "64954": [
      [
        1604,
        1580,
        1605
      ],
      256
    ],
    "64955": [
      [
        1603,
        1605,
        1605
      ],
      256
    ],
    "64956": [
      [
        1604,
        1580,
        1605
      ],
      256
    ],
    "64957": [
      [
        1606,
        1580,
        1581
      ],
      256
    ],
    "64958": [
      [
        1580,
        1581,
        1610
      ],
      256
    ],
    "64959": [
      [
        1581,
        1580,
        1610
      ],
      256
    ],
    "64960": [
      [
        1605,
        1580,
        1610
      ],
      256
    ],
    "64961": [
      [
        1601,
        1605,
        1610
      ],
      256
    ],
    "64962": [
      [
        1576,
        1581,
        1610
      ],
      256
    ],
    "64963": [
      [
        1603,
        1605,
        1605
      ],
      256
    ],
    "64964": [
      [
        1593,
        1580,
        1605
      ],
      256
    ],
    "64965": [
      [
        1589,
        1605,
        1605
      ],
      256
    ],
    "64966": [
      [
        1587,
        1582,
        1610
      ],
      256
    ],
    "64967": [
      [
        1606,
        1580,
        1610
      ],
      256
    ],
    "65008": [
      [
        1589,
        1604,
        1746
      ],
      256
    ],
    "65009": [
      [
        1602,
        1604,
        1746
      ],
      256
    ],
    "65010": [
      [
        1575,
        1604,
        1604,
        1607
      ],
      256
    ],
    "65011": [
      [
        1575,
        1603,
        1576,
        1585
      ],
      256
    ],
    "65012": [
      [
        1605,
        1581,
        1605,
        1583
      ],
      256
    ],
    "65013": [
      [
        1589,
        1604,
        1593,
        1605
      ],
      256
    ],
    "65014": [
      [
        1585,
        1587,
        1608,
        1604
      ],
      256
    ],
    "65015": [
      [
        1593,
        1604,
        1610,
        1607
      ],
      256
    ],
    "65016": [
      [
        1608,
        1587,
        1604,
        1605
      ],
      256
    ],
    "65017": [
      [
        1589,
        1604,
        1609
      ],
      256
    ],
    "65018": [
      [
        1589,
        1604,
        1609,
        32,
        1575,
        1604,
        1604,
        1607,
        32,
        1593,
        1604,
        1610,
        1607,
        32,
        1608,
        1587,
        1604,
        1605
      ],
      256
    ],
    "65019": [
      [
        1580,
        1604,
        32,
        1580,
        1604,
        1575,
        1604,
        1607
      ],
      256
    ],
    "65020": [
      [
        1585,
        1740,
        1575,
        1604
      ],
      256
    ]
  },
  "65024": {
    "65040": [
      [
        44
      ],
      256
    ],
    "65041": [
      [
        12289
      ],
      256
    ],
    "65042": [
      [
        12290
      ],
      256
    ],
    "65043": [
      [
        58
      ],
      256
    ],
    "65044": [
      [
        59
      ],
      256
    ],
    "65045": [
      [
        33
      ],
      256
    ],
    "65046": [
      [
        63
      ],
      256
    ],
    "65047": [
      [
        12310
      ],
      256
    ],
    "65048": [
      [
        12311
      ],
      256
    ],
    "65049": [
      [
        8230
      ],
      256
    ],
    "65056": [
      null,
      230
    ],
    "65057": [
      null,
      230
    ],
    "65058": [
      null,
      230
    ],
    "65059": [
      null,
      230
    ],
    "65060": [
      null,
      230
    ],
    "65061": [
      null,
      230
    ],
    "65062": [
      null,
      230
    ],
    "65063": [
      null,
      220
    ],
    "65064": [
      null,
      220
    ],
    "65065": [
      null,
      220
    ],
    "65066": [
      null,
      220
    ],
    "65067": [
      null,
      220
    ],
    "65068": [
      null,
      220
    ],
    "65069": [
      null,
      220
    ],
    "65072": [
      [
        8229
      ],
      256
    ],
    "65073": [
      [
        8212
      ],
      256
    ],
    "65074": [
      [
        8211
      ],
      256
    ],
    "65075": [
      [
        95
      ],
      256
    ],
    "65076": [
      [
        95
      ],
      256
    ],
    "65077": [
      [
        40
      ],
      256
    ],
    "65078": [
      [
        41
      ],
      256
    ],
    "65079": [
      [
        123
      ],
      256
    ],
    "65080": [
      [
        125
      ],
      256
    ],
    "65081": [
      [
        12308
      ],
      256
    ],
    "65082": [
      [
        12309
      ],
      256
    ],
    "65083": [
      [
        12304
      ],
      256
    ],
    "65084": [
      [
        12305
      ],
      256
    ],
    "65085": [
      [
        12298
      ],
      256
    ],
    "65086": [
      [
        12299
      ],
      256
    ],
    "65087": [
      [
        12296
      ],
      256
    ],
    "65088": [
      [
        12297
      ],
      256
    ],
    "65089": [
      [
        12300
      ],
      256
    ],
    "65090": [
      [
        12301
      ],
      256
    ],
    "65091": [
      [
        12302
      ],
      256
    ],
    "65092": [
      [
        12303
      ],
      256
    ],
    "65095": [
      [
        91
      ],
      256
    ],
    "65096": [
      [
        93
      ],
      256
    ],
    "65097": [
      [
        8254
      ],
      256
    ],
    "65098": [
      [
        8254
      ],
      256
    ],
    "65099": [
      [
        8254
      ],
      256
    ],
    "65100": [
      [
        8254
      ],
      256
    ],
    "65101": [
      [
        95
      ],
      256
    ],
    "65102": [
      [
        95
      ],
      256
    ],
    "65103": [
      [
        95
      ],
      256
    ],
    "65104": [
      [
        44
      ],
      256
    ],
    "65105": [
      [
        12289
      ],
      256
    ],
    "65106": [
      [
        46
      ],
      256
    ],
    "65108": [
      [
        59
      ],
      256
    ],
    "65109": [
      [
        58
      ],
      256
    ],
    "65110": [
      [
        63
      ],
      256
    ],
    "65111": [
      [
        33
      ],
      256
    ],
    "65112": [
      [
        8212
      ],
      256
    ],
    "65113": [
      [
        40
      ],
      256
    ],
    "65114": [
      [
        41
      ],
      256
    ],
    "65115": [
      [
        123
      ],
      256
    ],
    "65116": [
      [
        125
      ],
      256
    ],
    "65117": [
      [
        12308
      ],
      256
    ],
    "65118": [
      [
        12309
      ],
      256
    ],
    "65119": [
      [
        35
      ],
      256
    ],
    "65120": [
      [
        38
      ],
      256
    ],
    "65121": [
      [
        42
      ],
      256
    ],
    "65122": [
      [
        43
      ],
      256
    ],
    "65123": [
      [
        45
      ],
      256
    ],
    "65124": [
      [
        60
      ],
      256
    ],
    "65125": [
      [
        62
      ],
      256
    ],
    "65126": [
      [
        61
      ],
      256
    ],
    "65128": [
      [
        92
      ],
      256
    ],
    "65129": [
      [
        36
      ],
      256
    ],
    "65130": [
      [
        37
      ],
      256
    ],
    "65131": [
      [
        64
      ],
      256
    ],
    "65136": [
      [
        32,
        1611
      ],
      256
    ],
    "65137": [
      [
        1600,
        1611
      ],
      256
    ],
    "65138": [
      [
        32,
        1612
      ],
      256
    ],
    "65140": [
      [
        32,
        1613
      ],
      256
    ],
    "65142": [
      [
        32,
        1614
      ],
      256
    ],
    "65143": [
      [
        1600,
        1614
      ],
      256
    ],
    "65144": [
      [
        32,
        1615
      ],
      256
    ],
    "65145": [
      [
        1600,
        1615
      ],
      256
    ],
    "65146": [
      [
        32,
        1616
      ],
      256
    ],
    "65147": [
      [
        1600,
        1616
      ],
      256
    ],
    "65148": [
      [
        32,
        1617
      ],
      256
    ],
    "65149": [
      [
        1600,
        1617
      ],
      256
    ],
    "65150": [
      [
        32,
        1618
      ],
      256
    ],
    "65151": [
      [
        1600,
        1618
      ],
      256
    ],
    "65152": [
      [
        1569
      ],
      256
    ],
    "65153": [
      [
        1570
      ],
      256
    ],
    "65154": [
      [
        1570
      ],
      256
    ],
    "65155": [
      [
        1571
      ],
      256
    ],
    "65156": [
      [
        1571
      ],
      256
    ],
    "65157": [
      [
        1572
      ],
      256
    ],
    "65158": [
      [
        1572
      ],
      256
    ],
    "65159": [
      [
        1573
      ],
      256
    ],
    "65160": [
      [
        1573
      ],
      256
    ],
    "65161": [
      [
        1574
      ],
      256
    ],
    "65162": [
      [
        1574
      ],
      256
    ],
    "65163": [
      [
        1574
      ],
      256
    ],
    "65164": [
      [
        1574
      ],
      256
    ],
    "65165": [
      [
        1575
      ],
      256
    ],
    "65166": [
      [
        1575
      ],
      256
    ],
    "65167": [
      [
        1576
      ],
      256
    ],
    "65168": [
      [
        1576
      ],
      256
    ],
    "65169": [
      [
        1576
      ],
      256
    ],
    "65170": [
      [
        1576
      ],
      256
    ],
    "65171": [
      [
        1577
      ],
      256
    ],
    "65172": [
      [
        1577
      ],
      256
    ],
    "65173": [
      [
        1578
      ],
      256
    ],
    "65174": [
      [
        1578
      ],
      256
    ],
    "65175": [
      [
        1578
      ],
      256
    ],
    "65176": [
      [
        1578
      ],
      256
    ],
    "65177": [
      [
        1579
      ],
      256
    ],
    "65178": [
      [
        1579
      ],
      256
    ],
    "65179": [
      [
        1579
      ],
      256
    ],
    "65180": [
      [
        1579
      ],
      256
    ],
    "65181": [
      [
        1580
      ],
      256
    ],
    "65182": [
      [
        1580
      ],
      256
    ],
    "65183": [
      [
        1580
      ],
      256
    ],
    "65184": [
      [
        1580
      ],
      256
    ],
    "65185": [
      [
        1581
      ],
      256
    ],
    "65186": [
      [
        1581
      ],
      256
    ],
    "65187": [
      [
        1581
      ],
      256
    ],
    "65188": [
      [
        1581
      ],
      256
    ],
    "65189": [
      [
        1582
      ],
      256
    ],
    "65190": [
      [
        1582
      ],
      256
    ],
    "65191": [
      [
        1582
      ],
      256
    ],
    "65192": [
      [
        1582
      ],
      256
    ],
    "65193": [
      [
        1583
      ],
      256
    ],
    "65194": [
      [
        1583
      ],
      256
    ],
    "65195": [
      [
        1584
      ],
      256
    ],
    "65196": [
      [
        1584
      ],
      256
    ],
    "65197": [
      [
        1585
      ],
      256
    ],
    "65198": [
      [
        1585
      ],
      256
    ],
    "65199": [
      [
        1586
      ],
      256
    ],
    "65200": [
      [
        1586
      ],
      256
    ],
    "65201": [
      [
        1587
      ],
      256
    ],
    "65202": [
      [
        1587
      ],
      256
    ],
    "65203": [
      [
        1587
      ],
      256
    ],
    "65204": [
      [
        1587
      ],
      256
    ],
    "65205": [
      [
        1588
      ],
      256
    ],
    "65206": [
      [
        1588
      ],
      256
    ],
    "65207": [
      [
        1588
      ],
      256
    ],
    "65208": [
      [
        1588
      ],
      256
    ],
    "65209": [
      [
        1589
      ],
      256
    ],
    "65210": [
      [
        1589
      ],
      256
    ],
    "65211": [
      [
        1589
      ],
      256
    ],
    "65212": [
      [
        1589
      ],
      256
    ],
    "65213": [
      [
        1590
      ],
      256
    ],
    "65214": [
      [
        1590
      ],
      256
    ],
    "65215": [
      [
        1590
      ],
      256
    ],
    "65216": [
      [
        1590
      ],
      256
    ],
    "65217": [
      [
        1591
      ],
      256
    ],
    "65218": [
      [
        1591
      ],
      256
    ],
    "65219": [
      [
        1591
      ],
      256
    ],
    "65220": [
      [
        1591
      ],
      256
    ],
    "65221": [
      [
        1592
      ],
      256
    ],
    "65222": [
      [
        1592
      ],
      256
    ],
    "65223": [
      [
        1592
      ],
      256
    ],
    "65224": [
      [
        1592
      ],
      256
    ],
    "65225": [
      [
        1593
      ],
      256
    ],
    "65226": [
      [
        1593
      ],
      256
    ],
    "65227": [
      [
        1593
      ],
      256
    ],
    "65228": [
      [
        1593
      ],
      256
    ],
    "65229": [
      [
        1594
      ],
      256
    ],
    "65230": [
      [
        1594
      ],
      256
    ],
    "65231": [
      [
        1594
      ],
      256
    ],
    "65232": [
      [
        1594
      ],
      256
    ],
    "65233": [
      [
        1601
      ],
      256
    ],
    "65234": [
      [
        1601
      ],
      256
    ],
    "65235": [
      [
        1601
      ],
      256
    ],
    "65236": [
      [
        1601
      ],
      256
    ],
    "65237": [
      [
        1602
      ],
      256
    ],
    "65238": [
      [
        1602
      ],
      256
    ],
    "65239": [
      [
        1602
      ],
      256
    ],
    "65240": [
      [
        1602
      ],
      256
    ],
    "65241": [
      [
        1603
      ],
      256
    ],
    "65242": [
      [
        1603
      ],
      256
    ],
    "65243": [
      [
        1603
      ],
      256
    ],
    "65244": [
      [
        1603
      ],
      256
    ],
    "65245": [
      [
        1604
      ],
      256
    ],
    "65246": [
      [
        1604
      ],
      256
    ],
    "65247": [
      [
        1604
      ],
      256
    ],
    "65248": [
      [
        1604
      ],
      256
    ],
    "65249": [
      [
        1605
      ],
      256
    ],
    "65250": [
      [
        1605
      ],
      256
    ],
    "65251": [
      [
        1605
      ],
      256
    ],
    "65252": [
      [
        1605
      ],
      256
    ],
    "65253": [
      [
        1606
      ],
      256
    ],
    "65254": [
      [
        1606
      ],
      256
    ],
    "65255": [
      [
        1606
      ],
      256
    ],
    "65256": [
      [
        1606
      ],
      256
    ],
    "65257": [
      [
        1607
      ],
      256
    ],
    "65258": [
      [
        1607
      ],
      256
    ],
    "65259": [
      [
        1607
      ],
      256
    ],
    "65260": [
      [
        1607
      ],
      256
    ],
    "65261": [
      [
        1608
      ],
      256
    ],
    "65262": [
      [
        1608
      ],
      256
    ],
    "65263": [
      [
        1609
      ],
      256
    ],
    "65264": [
      [
        1609
      ],
      256
    ],
    "65265": [
      [
        1610
      ],
      256
    ],
    "65266": [
      [
        1610
      ],
      256
    ],
    "65267": [
      [
        1610
      ],
      256
    ],
    "65268": [
      [
        1610
      ],
      256
    ],
    "65269": [
      [
        1604,
        1570
      ],
      256
    ],
    "65270": [
      [
        1604,
        1570
      ],
      256
    ],
    "65271": [
      [
        1604,
        1571
      ],
      256
    ],
    "65272": [
      [
        1604,
        1571
      ],
      256
    ],
    "65273": [
      [
        1604,
        1573
      ],
      256
    ],
    "65274": [
      [
        1604,
        1573
      ],
      256
    ],
    "65275": [
      [
        1604,
        1575
      ],
      256
    ],
    "65276": [
      [
        1604,
        1575
      ],
      256
    ]
  },
  "65280": {
    "65281": [
      [
        33
      ],
      256
    ],
    "65282": [
      [
        34
      ],
      256
    ],
    "65283": [
      [
        35
      ],
      256
    ],
    "65284": [
      [
        36
      ],
      256
    ],
    "65285": [
      [
        37
      ],
      256
    ],
    "65286": [
      [
        38
      ],
      256
    ],
    "65287": [
      [
        39
      ],
      256
    ],
    "65288": [
      [
        40
      ],
      256
    ],
    "65289": [
      [
        41
      ],
      256
    ],
    "65290": [
      [
        42
      ],
      256
    ],
    "65291": [
      [
        43
      ],
      256
    ],
    "65292": [
      [
        44
      ],
      256
    ],
    "65293": [
      [
        45
      ],
      256
    ],
    "65294": [
      [
        46
      ],
      256
    ],
    "65295": [
      [
        47
      ],
      256
    ],
    "65296": [
      [
        48
      ],
      256
    ],
    "65297": [
      [
        49
      ],
      256
    ],
    "65298": [
      [
        50
      ],
      256
    ],
    "65299": [
      [
        51
      ],
      256
    ],
    "65300": [
      [
        52
      ],
      256
    ],
    "65301": [
      [
        53
      ],
      256
    ],
    "65302": [
      [
        54
      ],
      256
    ],
    "65303": [
      [
        55
      ],
      256
    ],
    "65304": [
      [
        56
      ],
      256
    ],
    "65305": [
      [
        57
      ],
      256
    ],
    "65306": [
      [
        58
      ],
      256
    ],
    "65307": [
      [
        59
      ],
      256
    ],
    "65308": [
      [
        60
      ],
      256
    ],
    "65309": [
      [
        61
      ],
      256
    ],
    "65310": [
      [
        62
      ],
      256
    ],
    "65311": [
      [
        63
      ],
      256
    ],
    "65312": [
      [
        64
      ],
      256
    ],
    "65313": [
      [
        65
      ],
      256
    ],
    "65314": [
      [
        66
      ],
      256
    ],
    "65315": [
      [
        67
      ],
      256
    ],
    "65316": [
      [
        68
      ],
      256
    ],
    "65317": [
      [
        69
      ],
      256
    ],
    "65318": [
      [
        70
      ],
      256
    ],
    "65319": [
      [
        71
      ],
      256
    ],
    "65320": [
      [
        72
      ],
      256
    ],
    "65321": [
      [
        73
      ],
      256
    ],
    "65322": [
      [
        74
      ],
      256
    ],
    "65323": [
      [
        75
      ],
      256
    ],
    "65324": [
      [
        76
      ],
      256
    ],
    "65325": [
      [
        77
      ],
      256
    ],
    "65326": [
      [
        78
      ],
      256
    ],
    "65327": [
      [
        79
      ],
      256
    ],
    "65328": [
      [
        80
      ],
      256
    ],
    "65329": [
      [
        81
      ],
      256
    ],
    "65330": [
      [
        82
      ],
      256
    ],
    "65331": [
      [
        83
      ],
      256
    ],
    "65332": [
      [
        84
      ],
      256
    ],
    "65333": [
      [
        85
      ],
      256
    ],
    "65334": [
      [
        86
      ],
      256
    ],
    "65335": [
      [
        87
      ],
      256
    ],
    "65336": [
      [
        88
      ],
      256
    ],
    "65337": [
      [
        89
      ],
      256
    ],
    "65338": [
      [
        90
      ],
      256
    ],
    "65339": [
      [
        91
      ],
      256
    ],
    "65340": [
      [
        92
      ],
      256
    ],
    "65341": [
      [
        93
      ],
      256
    ],
    "65342": [
      [
        94
      ],
      256
    ],
    "65343": [
      [
        95
      ],
      256
    ],
    "65344": [
      [
        96
      ],
      256
    ],
    "65345": [
      [
        97
      ],
      256
    ],
    "65346": [
      [
        98
      ],
      256
    ],
    "65347": [
      [
        99
      ],
      256
    ],
    "65348": [
      [
        100
      ],
      256
    ],
    "65349": [
      [
        101
      ],
      256
    ],
    "65350": [
      [
        102
      ],
      256
    ],
    "65351": [
      [
        103
      ],
      256
    ],
    "65352": [
      [
        104
      ],
      256
    ],
    "65353": [
      [
        105
      ],
      256
    ],
    "65354": [
      [
        106
      ],
      256
    ],
    "65355": [
      [
        107
      ],
      256
    ],
    "65356": [
      [
        108
      ],
      256
    ],
    "65357": [
      [
        109
      ],
      256
    ],
    "65358": [
      [
        110
      ],
      256
    ],
    "65359": [
      [
        111
      ],
      256
    ],
    "65360": [
      [
        112
      ],
      256
    ],
    "65361": [
      [
        113
      ],
      256
    ],
    "65362": [
      [
        114
      ],
      256
    ],
    "65363": [
      [
        115
      ],
      256
    ],
    "65364": [
      [
        116
      ],
      256
    ],
    "65365": [
      [
        117
      ],
      256
    ],
    "65366": [
      [
        118
      ],
      256
    ],
    "65367": [
      [
        119
      ],
      256
    ],
    "65368": [
      [
        120
      ],
      256
    ],
    "65369": [
      [
        121
      ],
      256
    ],
    "65370": [
      [
        122
      ],
      256
    ],
    "65371": [
      [
        123
      ],
      256
    ],
    "65372": [
      [
        124
      ],
      256
    ],
    "65373": [
      [
        125
      ],
      256
    ],
    "65374": [
      [
        126
      ],
      256
    ],
    "65375": [
      [
        10629
      ],
      256
    ],
    "65376": [
      [
        10630
      ],
      256
    ],
    "65377": [
      [
        12290
      ],
      256
    ],
    "65378": [
      [
        12300
      ],
      256
    ],
    "65379": [
      [
        12301
      ],
      256
    ],
    "65380": [
      [
        12289
      ],
      256
    ],
    "65381": [
      [
        12539
      ],
      256
    ],
    "65382": [
      [
        12530
      ],
      256
    ],
    "65383": [
      [
        12449
      ],
      256
    ],
    "65384": [
      [
        12451
      ],
      256
    ],
    "65385": [
      [
        12453
      ],
      256
    ],
    "65386": [
      [
        12455
      ],
      256
    ],
    "65387": [
      [
        12457
      ],
      256
    ],
    "65388": [
      [
        12515
      ],
      256
    ],
    "65389": [
      [
        12517
      ],
      256
    ],
    "65390": [
      [
        12519
      ],
      256
    ],
    "65391": [
      [
        12483
      ],
      256
    ],
    "65392": [
      [
        12540
      ],
      256
    ],
    "65393": [
      [
        12450
      ],
      256
    ],
    "65394": [
      [
        12452
      ],
      256
    ],
    "65395": [
      [
        12454
      ],
      256
    ],
    "65396": [
      [
        12456
      ],
      256
    ],
    "65397": [
      [
        12458
      ],
      256
    ],
    "65398": [
      [
        12459
      ],
      256
    ],
    "65399": [
      [
        12461
      ],
      256
    ],
    "65400": [
      [
        12463
      ],
      256
    ],
    "65401": [
      [
        12465
      ],
      256
    ],
    "65402": [
      [
        12467
      ],
      256
    ],
    "65403": [
      [
        12469
      ],
      256
    ],
    "65404": [
      [
        12471
      ],
      256
    ],
    "65405": [
      [
        12473
      ],
      256
    ],
    "65406": [
      [
        12475
      ],
      256
    ],
    "65407": [
      [
        12477
      ],
      256
    ],
    "65408": [
      [
        12479
      ],
      256
    ],
    "65409": [
      [
        12481
      ],
      256
    ],
    "65410": [
      [
        12484
      ],
      256
    ],
    "65411": [
      [
        12486
      ],
      256
    ],
    "65412": [
      [
        12488
      ],
      256
    ],
    "65413": [
      [
        12490
      ],
      256
    ],
    "65414": [
      [
        12491
      ],
      256
    ],
    "65415": [
      [
        12492
      ],
      256
    ],
    "65416": [
      [
        12493
      ],
      256
    ],
    "65417": [
      [
        12494
      ],
      256
    ],
    "65418": [
      [
        12495
      ],
      256
    ],
    "65419": [
      [
        12498
      ],
      256
    ],
    "65420": [
      [
        12501
      ],
      256
    ],
    "65421": [
      [
        12504
      ],
      256
    ],
    "65422": [
      [
        12507
      ],
      256
    ],
    "65423": [
      [
        12510
      ],
      256
    ],
    "65424": [
      [
        12511
      ],
      256
    ],
    "65425": [
      [
        12512
      ],
      256
    ],
    "65426": [
      [
        12513
      ],
      256
    ],
    "65427": [
      [
        12514
      ],
      256
    ],
    "65428": [
      [
        12516
      ],
      256
    ],
    "65429": [
      [
        12518
      ],
      256
    ],
    "65430": [
      [
        12520
      ],
      256
    ],
    "65431": [
      [
        12521
      ],
      256
    ],
    "65432": [
      [
        12522
      ],
      256
    ],
    "65433": [
      [
        12523
      ],
      256
    ],
    "65434": [
      [
        12524
      ],
      256
    ],
    "65435": [
      [
        12525
      ],
      256
    ],
    "65436": [
      [
        12527
      ],
      256
    ],
    "65437": [
      [
        12531
      ],
      256
    ],
    "65438": [
      [
        12441
      ],
      256
    ],
    "65439": [
      [
        12442
      ],
      256
    ],
    "65440": [
      [
        12644
      ],
      256
    ],
    "65441": [
      [
        12593
      ],
      256
    ],
    "65442": [
      [
        12594
      ],
      256
    ],
    "65443": [
      [
        12595
      ],
      256
    ],
    "65444": [
      [
        12596
      ],
      256
    ],
    "65445": [
      [
        12597
      ],
      256
    ],
    "65446": [
      [
        12598
      ],
      256
    ],
    "65447": [
      [
        12599
      ],
      256
    ],
    "65448": [
      [
        12600
      ],
      256
    ],
    "65449": [
      [
        12601
      ],
      256
    ],
    "65450": [
      [
        12602
      ],
      256
    ],
    "65451": [
      [
        12603
      ],
      256
    ],
    "65452": [
      [
        12604
      ],
      256
    ],
    "65453": [
      [
        12605
      ],
      256
    ],
    "65454": [
      [
        12606
      ],
      256
    ],
    "65455": [
      [
        12607
      ],
      256
    ],
    "65456": [
      [
        12608
      ],
      256
    ],
    "65457": [
      [
        12609
      ],
      256
    ],
    "65458": [
      [
        12610
      ],
      256
    ],
    "65459": [
      [
        12611
      ],
      256
    ],
    "65460": [
      [
        12612
      ],
      256
    ],
    "65461": [
      [
        12613
      ],
      256
    ],
    "65462": [
      [
        12614
      ],
      256
    ],
    "65463": [
      [
        12615
      ],
      256
    ],
    "65464": [
      [
        12616
      ],
      256
    ],
    "65465": [
      [
        12617
      ],
      256
    ],
    "65466": [
      [
        12618
      ],
      256
    ],
    "65467": [
      [
        12619
      ],
      256
    ],
    "65468": [
      [
        12620
      ],
      256
    ],
    "65469": [
      [
        12621
      ],
      256
    ],
    "65470": [
      [
        12622
      ],
      256
    ],
    "65474": [
      [
        12623
      ],
      256
    ],
    "65475": [
      [
        12624
      ],
      256
    ],
    "65476": [
      [
        12625
      ],
      256
    ],
    "65477": [
      [
        12626
      ],
      256
    ],
    "65478": [
      [
        12627
      ],
      256
    ],
    "65479": [
      [
        12628
      ],
      256
    ],
    "65482": [
      [
        12629
      ],
      256
    ],
    "65483": [
      [
        12630
      ],
      256
    ],
    "65484": [
      [
        12631
      ],
      256
    ],
    "65485": [
      [
        12632
      ],
      256
    ],
    "65486": [
      [
        12633
      ],
      256
    ],
    "65487": [
      [
        12634
      ],
      256
    ],
    "65490": [
      [
        12635
      ],
      256
    ],
    "65491": [
      [
        12636
      ],
      256
    ],
    "65492": [
      [
        12637
      ],
      256
    ],
    "65493": [
      [
        12638
      ],
      256
    ],
    "65494": [
      [
        12639
      ],
      256
    ],
    "65495": [
      [
        12640
      ],
      256
    ],
    "65498": [
      [
        12641
      ],
      256
    ],
    "65499": [
      [
        12642
      ],
      256
    ],
    "65500": [
      [
        12643
      ],
      256
    ],
    "65504": [
      [
        162
      ],
      256
    ],
    "65505": [
      [
        163
      ],
      256
    ],
    "65506": [
      [
        172
      ],
      256
    ],
    "65507": [
      [
        175
      ],
      256
    ],
    "65508": [
      [
        166
      ],
      256
    ],
    "65509": [
      [
        165
      ],
      256
    ],
    "65510": [
      [
        8361
      ],
      256
    ],
    "65512": [
      [
        9474
      ],
      256
    ],
    "65513": [
      [
        8592
      ],
      256
    ],
    "65514": [
      [
        8593
      ],
      256
    ],
    "65515": [
      [
        8594
      ],
      256
    ],
    "65516": [
      [
        8595
      ],
      256
    ],
    "65517": [
      [
        9632
      ],
      256
    ],
    "65518": [
      [
        9675
      ],
      256
    ]
  }
};
}],
[/* 40 */ 'bcoin', '/lib/utils/index.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * utils/index.js - utils for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

/**
 * @module utils
 */

exports.binary = __browser_require__(41 /* './binary' */, module);
exports.fixed = __browser_require__(42 /* './fixed' */, module);
exports.util = __browser_require__(43 /* './util' */, module);
exports.message = __browser_require__(44 /* './message' */, module);

const {inspect: {custom}} = __browser_require__(65 /* 'util' */, module);
exports.inspectSymbol = custom || 'inspect';
}],
[/* 41 */ 'bcoin', '/lib/utils/binary.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * binary.js - binary search utils for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

/**
 * Perform a binary search on a sorted array.
 * @param {Array} items
 * @param {Object} key
 * @param {Function} compare
 * @param {Boolean?} insert
 * @returns {Number} Index.
 */

exports.search = function search(items, key, compare, insert) {
  let start = 0;
  let end = items.length - 1;

  while (start <= end) {
    const pos = (start + end) >>> 1;
    const cmp = compare(items[pos], key);

    if (cmp === 0)
      return pos;

    if (cmp < 0)
      start = pos + 1;
    else
      end = pos - 1;
  }

  if (!insert)
    return -1;

  return start;
};

/**
 * Perform a binary insert on a sorted array.
 * @param {Array} items
 * @param {Object} item
 * @param {Function} compare
 * @returns {Number} index
 */

exports.insert = function insert(items, item, compare, uniq) {
  const i = exports.search(items, item, compare, true);

  if (uniq && i < items.length) {
    if (compare(items[i], item) === 0)
      return -1;
  }

  if (i === 0)
    items.unshift(item);
  else if (i === items.length)
    items.push(item);
  else
    items.splice(i, 0, item);

  return i;
};

/**
 * Perform a binary removal on a sorted array.
 * @param {Array} items
 * @param {Object} item
 * @param {Function} compare
 * @returns {Boolean}
 */

exports.remove = function remove(items, item, compare) {
  const i = exports.search(items, item, compare, false);

  if (i === -1)
    return false;

  splice(items, i);

  return true;
};

/*
 * Helpers
 */

function splice(list, i) {
  if (i === 0) {
    list.shift();
    return;
  }

  let k = i + 1;

  while (k < list.length)
    list[i++] = list[k++];

  list.pop();
}
}],
[/* 42 */ 'bcoin', '/lib/utils/fixed.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * fixed.js - fixed number parsing
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const assert = __browser_require__(2 /* 'bsert' */, module);

/**
 * Convert int to fixed number string and reduce by a
 * power of ten (uses no floating point arithmetic).
 * @param {Number} num
 * @param {Number} exp - Number of decimal places.
 * @returns {String} Fixed number string.
 */

exports.encode = function encode(num, exp) {
  assert(Number.isSafeInteger(num), 'Invalid integer value.');

  let sign = '';

  if (num < 0) {
    num = -num;
    sign = '-';
  }

  const mult = pow10(exp);

  let lo = num % mult;
  let hi = (num - lo) / mult;

  lo = lo.toString(10);
  hi = hi.toString(10);

  while (lo.length < exp)
    lo = '0' + lo;

  lo = lo.replace(/0+$/, '');

  assert(lo.length <= exp, 'Invalid integer value.');

  if (lo.length === 0)
    lo = '0';

  if (exp === 0)
    return `${sign}${hi}`;

  return `${sign}${hi}.${lo}`;
};

/**
 * Parse a fixed number string and multiply by a
 * power of ten (uses no floating point arithmetic).
 * @param {String} str
 * @param {Number} exp - Number of decimal places.
 * @returns {Number} Integer.
 */

exports.decode = function decode(str, exp) {
  assert(typeof str === 'string');
  assert(str.length <= 32, 'Fixed number string too large.');

  let sign = 1;

  if (str.length > 0 && str[0] === '-') {
    str = str.substring(1);
    sign = -1;
  }

  let hi = str;
  let lo = '0';

  const index = str.indexOf('.');

  if (index !== -1) {
    hi = str.substring(0, index);
    lo = str.substring(index + 1);
  }

  hi = hi.replace(/^0+/, '');
  lo = lo.replace(/0+$/, '');

  assert(hi.length <= 16 - exp,
    'Fixed number string exceeds 2^53-1.');

  assert(lo.length <= exp,
    'Too many decimal places in fixed number string.');

  if (hi.length === 0)
    hi = '0';

  while (lo.length < exp)
    lo += '0';

  if (lo.length === 0)
    lo = '0';

  assert(/^\d+$/.test(hi) && /^\d+$/.test(lo),
    'Non-numeric characters in fixed number string.');

  hi = parseInt(hi, 10);
  lo = parseInt(lo, 10);

  const mult = pow10(exp);
  const maxLo = modSafe(mult);
  const maxHi = divSafe(mult);

  assert(hi < maxHi || (hi === maxHi && lo <= maxLo),
    'Fixed number string exceeds 2^53-1.');

  return sign * (hi * mult + lo);
};

/**
 * Convert int to float and reduce by a power
 * of ten (uses no floating point arithmetic).
 * @param {Number} num
 * @param {Number} exp - Number of decimal places.
 * @returns {Number} Double float.
 */

exports.toFloat = function toFloat(num, exp) {
  return parseFloat(exports.encode(num, exp));
};

/**
 * Parse a double float number and multiply by a
 * power of ten (uses no floating point arithmetic).
 * @param {Number} num
 * @param {Number} exp - Number of decimal places.
 * @returns {Number} Integer.
 */

exports.fromFloat = function fromFloat(num, exp) {
  assert(typeof num === 'number' && isFinite(num));
  assert(Number.isSafeInteger(exp));
  return exports.decode(num.toFixed(exp), exp);
};

/*
 * Helpers
 */

function pow10(exp) {
  switch (exp) {
    case 0:
      return 1;
    case 1:
      return 10;
    case 2:
      return 100;
    case 3:
      return 1000;
    case 4:
      return 10000;
    case 5:
      return 100000;
    case 6:
      return 1000000;
    case 7:
      return 10000000;
    case 8:
      return 100000000;
  }
  throw new Error('Exponent is too large.');
}

function modSafe(mod) {
  switch (mod) {
    case 1:
      return 0;
    case 10:
      return 1;
    case 100:
      return 91;
    case 1000:
      return 991;
    case 10000:
      return 991;
    case 100000:
      return 40991;
    case 1000000:
      return 740991;
    case 10000000:
      return 4740991;
    case 100000000:
      return 54740991;
  }
  throw new Error('Exponent is too large.');
}

function divSafe(div) {
  switch (div) {
    case 1:
      return 9007199254740991;
    case 10:
      return 900719925474099;
    case 100:
      return 90071992547409;
    case 1000:
      return 9007199254740;
    case 10000:
      return 900719925474;
    case 100000:
      return 90071992547;
    case 1000000:
      return 9007199254;
    case 10000000:
      return 900719925;
    case 100000000:
      return 90071992;
  }
  throw new Error('Exponent is too large.');
}
}],
[/* 43 */ 'bcoin', '/lib/utils/util.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * util.js - utils for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const assert = __browser_require__(2 /* 'bsert' */, module);

/**
 * @exports utils/util
 */

const util = exports;

/**
 * Return hrtime (shim for browser).
 * @param {Array} time
 * @returns {Array} [seconds, nanoseconds]
 */

util.bench = function bench(time) {
  if (!process.hrtime) {
    const now = Date.now();

    if (time) {
      const [hi, lo] = time;
      const start = hi * 1000 + lo / 1e6;
      return now - start;
    }

    const ms = now % 1000;

    // Seconds
    const hi = (now - ms) / 1000;

    // Nanoseconds
    const lo = ms * 1e6;

    return [hi, lo];
  }

  if (time) {
    const [hi, lo] = process.hrtime(time);
    return hi * 1000 + lo / 1e6;
  }

  return process.hrtime();
};

/**
 * Get current time in unix time (seconds).
 * @returns {Number}
 */

util.now = function now() {
  return Math.floor(Date.now() / 1000);
};

/**
 * Get current time in unix time (milliseconds).
 * @returns {Number}
 */

util.ms = function ms() {
  return Date.now();
};

/**
 * Create a Date ISO string from time in unix time (seconds).
 * @param {Number?} time - Seconds in unix time.
 * @returns {String}
 */

util.date = function date(time) {
  if (time == null)
    time = util.now();

  return new Date(time * 1000).toISOString().slice(0, -5) + 'Z';
};

/**
 * Get unix seconds from a Date string.
 * @param {String?} date - Date ISO String.
 * @returns {Number}
 */

util.time = function time(date) {
  if (date == null)
    return util.now();

  return new Date(date) / 1000 | 0;
};

/**
 * Reverse a hex-string.
 * @param {Buffer}
 * @returns {String} Reversed hex string.
 */

util.revHex = function revHex(buf) {
  assert((buf != null && buf._isBuffer === true));

  return Buffer.from(buf).reverse().toString('hex');
};

util.fromRev = function fromRev(str) {
  assert(typeof str === 'string');
  assert((str.length & 1) === 0);

  return Buffer.from(str, 'hex').reverse();
};
}],
[/* 44 */ 'bcoin', '/lib/utils/message.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * message.js - message signing utilities.
 * Copyright (c) 2019, The Bcoin Developers (MIT License).
 */

'use strict';

const assert = __browser_require__(2 /* 'bsert' */, module);
const bufio = __browser_require__(7 /* 'bufio' */, module);
const hash256 = __browser_require__(45 /* 'bcrypto/lib/hash256' */, module);
const secp256k1 = __browser_require__(47 /* 'bcrypto/lib/secp256k1' */, module);

/**
 * @exports utils/message
 */

const message = exports;

/**
 * Bitcoin signing magic string.
 * @const {String}
 * @default
 */

message.MAGIC_STRING = 'Bitcoin Signed Message:\n';

/**
 * Hash message with magic string.
 * @param {String} message
 * @param {String} [prefix = message.MAGIC_STRING]
 * @returns {Hash}
 */

message.magicHash = (msg, prefix = message.MAGIC_STRING) => {
  assert(typeof prefix === 'string', 'prefix must be a string.');
  assert(typeof msg === 'string', 'message must be a string');

  const bw = bufio.write();

  bw.writeVarString(prefix);
  bw.writeVarString(msg, 'utf8');

  return hash256.digest(bw.render());
};

/**
 * Sign message with key.
 * @param {String} msg
 * @param {KeyRing} ring
 * @param {String} [prefix = message.MAGIC_STRING]
 * @returns {Buffer}
 */

message.sign = (msg, ring, prefix) => {
  assert(ring.getPrivateKey(), 'Cannot sign without private key.');

  const hash = message.magicHash(msg, prefix);
  const compress = 0x04 !== ring.getPublicKey().readInt8(0);
  const [
    signature,
    recovery
  ] = secp256k1.signRecoverable(hash, ring.getPrivateKey());

  const bw = bufio.write();

  bw.writeI8(recovery + 27 + (compress ? 4 : 0));
  bw.writeBytes(signature);

  return bw.render();
};

/**
 * Recover raw public key from message and signature.
 * @param {String} msg
 * @param {Buffer} signature
 * @param {String} [prefix = MAGIC_STRING]
 */

message.recover = (msg, signature, prefix) => {
  assert(typeof msg === 'string', 'msg must be a string');
  assert((signature != null && signature._isBuffer === true), 'sig must be a buffer');

  const hash = message.magicHash(msg, prefix);

  assert.strictEqual(signature.length, 65, 'Invalid signature length');

  const flagByte = signature.readUInt8(0) - 27;

  assert(flagByte < 8, 'Invalid signature parameter');

  const compressed = Boolean(flagByte & 4);
  const recovery = flagByte & 3;

  return secp256k1.recover(hash, signature.slice(1), recovery, compressed);
};
}],
[/* 45 */ 'bcrypto', '/lib/hash256-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * hash256.js - hash256 for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(46 /* './js/hash256' */, module);
}],
[/* 46 */ 'bcrypto', '/lib/js/hash256.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * hash256.js - Hash256 implementation for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Resources:
 *   https://github.com/bitcoin/bitcoin/blob/master/src/hash.h
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);
const SHA256 = __browser_require__(17 /* './sha256' */, module);
const HMAC = __browser_require__(19 /* '../internal/hmac' */, module);

/**
 * Hash256
 */

class Hash256 {
  constructor() {
    this.ctx = new SHA256();
  }

  init() {
    this.ctx.init();
    return this;
  }

  update(data) {
    this.ctx.update(data);
    return this;
  }

  final() {
    const out = Buffer.alloc(32);

    this.ctx._final(out);
    this.ctx.init();
    this.ctx.update(out);
    this.ctx._final(out);

    return out;
  }

  static hash() {
    return new Hash256();
  }

  static hmac() {
    return new HMAC(Hash256, 64);
  }

  static digest(data) {
    return Hash256.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert((left != null && left._isBuffer === true) && left.length === 32);
    assert((right != null && right._isBuffer === true) && right.length === 32);
    return Hash256.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    const {ctx} = Hash256;

    ctx.init();
    ctx.update(x);
    ctx.update(y);

    if (z)
      ctx.update(z);

    return ctx.final();
  }

  static mac(data, key) {
    return Hash256.hmac().init(key).update(data).final();
  }
}

/*
 * Static
 */

Hash256.native = 0;
Hash256.id = 'HASH256';
Hash256.size = 32;
Hash256.bits = 256;
Hash256.blockSize = 64;
Hash256.zero = Buffer.alloc(32, 0x00);
Hash256.ctx = new Hash256();

/*
 * Expose
 */

module.exports = Hash256;
}],
[/* 47 */ 'bcrypto', '/lib/secp256k1-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * secp256k1.js - secp256k1 for bcrypto
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(48 /* './js/secp256k1' */, module);
}],
[/* 48 */ 'bcrypto', '/lib/js/secp256k1.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * secp256k1.js - secp256k1 for bcrypto
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

const ECDSA = __browser_require__(49 /* './ecdsa' */, module);
const SHA256 = __browser_require__(16 /* '../sha256' */, module);
const pre = __browser_require__(64 /* './precomputed/secp256k1.json' */, module);

/*
 * Expose
 */

module.exports = new ECDSA('SECP256K1', SHA256, SHA256, pre);
}],
[/* 49 */ 'bcrypto', '/lib/js/ecdsa.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * ecdsa.js - ECDSA for bcrypto
 * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on indutny/elliptic:
 *   Copyright (c) 2014, Fedor Indutny (MIT License).
 *   https://github.com/indutny/elliptic
 *
 * References:
 *
 *   [SEC1] SEC 1: Elliptic Curve Cryptography, Version 2.0
 *     Certicom Research
 *     http://www.secg.org/sec1-v2.pdf
 *
 *   [FIPS186] Suite B Implementer's Guide to FIPS 186-3 (ECDSA)
 *     https://tinyurl.com/fips186-guide
 *
 *   [GECC] Guide to Elliptic Curve Cryptography
 *     D. Hankerson, A. Menezes, and S. Vanstone
 *     https://tinyurl.com/guide-to-ecc
 *
 *   [RFC6979] Deterministic Usage of the Digital Signature
 *             Algorithm (DSA) and Elliptic Curve Digital
 *             Signature Algorithm (ECDSA)
 *     T. Pornin
 *     https://tools.ietf.org/html/rfc6979
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);
const BN = __browser_require__(50 /* '../bn' */, module);
const rng = __browser_require__(22 /* '../random' */, module);
const asn1 = __browser_require__(53 /* '../internal/asn1' */, module);
const Schnorr = __browser_require__(57 /* './schnorr-legacy' */, module);
const HmacDRBG = __browser_require__(61 /* '../hmac-drbg' */, module);
const elliptic = __browser_require__(63 /* './elliptic' */, module);

/**
 * ECDSA
 */

class ECDSA {
  constructor(name, hash, xof, pre) {
    assert(typeof name === 'string');
    assert(hash);
    assert(xof);

    this.id = name;
    this.type = 'ecdsa';
    this.hash = hash;
    this.xof = xof;
    this.native = 0;

    this._pre = pre || null;
    this._curve = null;
    this._schnorr = null;
  }

  get curve() {
    if (!this._curve) {
      this._curve = elliptic.curve(this.id, this._pre);
      this._curve.precompute(rng);
      this._pre = null;
    }
    return this._curve;
  }

  get schnorr() {
    if (!this._schnorr)
      this._schnorr = new Schnorr(this.curve, this.xof);
    return this._schnorr;
  }

  get size() {
    return this.curve.fieldSize;
  }

  get bits() {
    return this.curve.fieldBits;
  }

  privateKeyGenerate() {
    const a = this.curve.randomScalar(rng);
    return this.curve.encodeScalar(a);
  }

  privateKeyVerify(key) {
    assert((key != null && key._isBuffer === true));

    let a;
    try {
      a = this.curve.decodeScalar(key);
    } catch (e) {
      return false;
    }

    return !a.isZero() && a.cmp(this.curve.n) < 0;
  }

  privateKeyExport(key) {
    const pub = this.publicKeyCreate(key, false);
    const {x, y} = this.publicKeyExport(pub);

    return {
      d: Buffer.from(key),
      x,
      y
    };
  }

  privateKeyImport(json) {
    assert(json && typeof json === 'object');

    const a = BN.decode(json.d, this.curve.endian);

    if (a.isZero() || a.cmp(this.curve.n) >= 0)
      throw new Error('Invalid private key.');

    return this.curve.encodeScalar(a);
  }

  privateKeyTweakAdd(key, tweak) {
    const t = this.curve.decodeScalar(tweak);

    if (t.cmp(this.curve.n) >= 0)
      throw new Error('Invalid scalar.');

    const a = this.curve.decodeScalar(key);

    if (a.isZero() || a.cmp(this.curve.n) >= 0)
      throw new Error('Invalid private key.');

    const k = a.add(t).imod(this.curve.n);

    if (k.isZero())
      throw new Error('Invalid private key.');

    return this.curve.encodeScalar(k);
  }

  privateKeyTweakMul(key, tweak) {
    const t = this.curve.decodeScalar(tweak);

    if (t.isZero() || t.cmp(this.curve.n) >= 0)
      throw new Error('Invalid scalar.');

    const a = this.curve.decodeScalar(key);

    if (a.isZero() || a.cmp(this.curve.n) >= 0)
      throw new Error('Invalid private key.');

    const k = a.mul(t).imod(this.curve.n);

    if (k.isZero())
      throw new Error('Invalid private key.');

    return this.curve.encodeScalar(k);
  }

  privateKeyNegate(key) {
    const a = this.curve.decodeScalar(key);

    if (a.isZero() || a.cmp(this.curve.n) >= 0)
      throw new Error('Invalid private key.');

    const k = a.neg().imod(this.curve.n);

    return this.curve.encodeScalar(k);
  }

  privateKeyInvert(key) {
    const a = this.curve.decodeScalar(key);

    if (a.isZero() || a.cmp(this.curve.n) >= 0)
      throw new Error('Invalid private key.');

    const k = a.invert(this.curve.n);

    return this.curve.encodeScalar(k);
  }

  publicKeyCreate(key, compress) {
    const a = this.curve.decodeScalar(key);

    if (a.isZero() || a.cmp(this.curve.n) >= 0)
      throw new Error('Invalid private key.');

    const A = this.curve.g.mulBlind(a);

    return A.encode(compress);
  }

  publicKeyConvert(key, compress) {
    const A = this.curve.decodePoint(key);
    return A.encode(compress);
  }

  publicKeyFromUniform(bytes, compress) {
    const u = this.curve.decodeUniform(bytes);
    const A = this.curve.pointFromUniform(u);

    return A.encode(compress);
  }

  publicKeyToUniform(key, hint = rng.randomInt()) {
    const A = this.curve.decodePoint(key);
    const u = this.curve.pointToUniform(A, hint);

    return this.curve.encodeUniform(u, hint >>> 8);
  }

  publicKeyFromHash(bytes, compress) {
    const A = this.curve.pointFromHash(bytes);
    return A.encode(compress);
  }

  publicKeyToHash(key) {
    const A = this.curve.decodePoint(key);
    return this.curve.pointToHash(A, 0, rng);
  }

  publicKeyVerify(key) {
    assert((key != null && key._isBuffer === true));

    try {
      this.curve.decodePoint(key);
    } catch (e) {
      return false;
    }

    return true;
  }

  publicKeyExport(key) {
    const {x, y} = this.curve.decodePoint(key);

    return {
      x: this.curve.encodeField(x.fromRed()),
      y: this.curve.encodeField(y.fromRed())
    };
  }

  publicKeyImport(json, compress) {
    assert(json && typeof json === 'object');

    const x = BN.decode(json.x, this.curve.endian);

    if (x.cmp(this.curve.p) >= 0)
      throw new Error('Invalid point.');

    if (json.y != null) {
      const y = BN.decode(json.y, this.curve.endian);

      if (y.cmp(this.curve.p) >= 0)
        throw new Error('Invalid point.');

      const A = this.curve.point(x, y);

      if (!A.validate())
        throw new Error('Invalid point.');

      return A.encode(compress);
    }

    const A = this.curve.pointFromX(x, json.sign);

    return A.encode(compress);
  }

  publicKeyTweakAdd(key, tweak, compress) {
    const t = this.curve.decodeScalar(tweak);

    if (t.cmp(this.curve.n) >= 0)
      throw new Error('Invalid scalar.');

    const A = this.curve.decodePoint(key);
    const T = this.curve.g.jmul(t);
    const P = T.add(A);

    return P.encode(compress);
  }

  publicKeyTweakMul(key, tweak, compress) {
    const t = this.curve.decodeScalar(tweak);

    if (t.isZero() || t.cmp(this.curve.n) >= 0)
      throw new Error('Invalid scalar.');

    const A = this.curve.decodePoint(key);
    const P = A.mul(t);

    return P.encode(compress);
  }

  publicKeyCombine(keys, compress) {
    assert(Array.isArray(keys));

    let P = this.curve.jpoint();

    for (const key of keys) {
      const A = this.curve.decodePoint(key);

      P = P.add(A);
    }

    return P.encode(compress);
  }

  publicKeyNegate(key, compress) {
    const A = this.curve.decodePoint(key);
    const P = A.neg();

    return P.encode(compress);
  }

  signatureNormalize(sig) {
    const [r, s] = this._decodeCompact(sig);

    if (s.cmp(this.curve.nh) > 0)
      s.ineg().imod(this.curve.n);

    return this._encodeCompact(r, s);
  }

  signatureNormalizeDER(sig) {
    const [r, s] = this._decodeDER(sig, false);

    if (s.cmp(this.curve.nh) > 0)
      s.ineg().imod(this.curve.n);

    return this._encodeDER(r, s);
  }

  signatureExport(sig) {
    const [r, s] = this._decodeCompact(sig);
    return this._encodeDER(r, s);
  }

  signatureImport(sig) {
    const [r, s] = this._decodeDER(sig, false);
    return this._encodeCompact(r, s);
  }

  isLowS(sig) {
    assert((sig != null && sig._isBuffer === true));

    let s;
    try {
      [, s] = this._decodeCompact(sig);
    } catch (e) {
      return false;
    }

    return s.cmp(this.curve.nh) <= 0;
  }

  isLowDER(sig) {
    assert((sig != null && sig._isBuffer === true));

    let s;
    try {
      [, s] = this._decodeDER(sig, false);
    } catch (e) {
      return false;
    }

    return s.cmp(this.curve.nh) <= 0;
  }

  sign(msg, key) {
    const [r, s] = this._sign(msg, key);
    return this._encodeCompact(r, s);
  }

  signRecoverable(msg, key) {
    const [r, s, param] = this._sign(msg, key);
    return [this._encodeCompact(r, s), param];
  }

  signDER(msg, key) {
    const [r, s] = this._sign(msg, key);
    return this._encodeDER(r, s);
  }

  signRecoverableDER(msg, key) {
    const [r, s, param] = this._sign(msg, key);
    return [this._encodeDER(r, s), param];
  }

  _sign(msg, key) {
    // ECDSA Signing.
    //
    // [SEC1] Page 44, Section 4.1.3.
    // [GECC] Algorithm 4.29, Page 184, Section 4.4.1.
    // [RFC6979] Page 9, Section 2.4.
    // [RFC6979] Page 10, Section 3.2.
    //
    // Assumptions:
    //
    //   - Let `m` be an integer reduced from bytes.
    //   - Let `a` be a secret non-zero scalar.
    //   - Let `k` be a random non-zero scalar.
    //   - R != O, r != 0, s != 0.
    //
    // Computation:
    //
    //   k = random integer in [1,n-1]
    //   R = G * k
    //   r = x(R) mod n
    //   s = (r * a + m) / k mod n
    //   s = -s mod n, if s > n / 2
    //   S = (r, s)
    //
    // We can blind the scalar arithmetic
    // with a random integer `b` like so:
    //
    //   b = random integer in [1,n-1]
    //   s = (r * (a * b) + m * b) / (k * b) mod n
    //
    // Note that `k` must remain secret,
    // otherwise an attacker can compute:
    //
    //   a = (s * k - m) / r mod n
    //
    // This means that if two signatures
    // share the same `r` value, an attacker
    // can compute:
    //
    //   k = (m1 - m2) / (+-s1 - +-s2) mod n
    //   a = (s1 * k - m1) / r mod n
    //
    // Assuming:
    //
    //   s1 = (r * a + m1) / k mod n
    //   s2 = (r * a + m2) / k mod n
    //
    // To mitigate this, `k` can be generated
    // deterministically using the HMAC-DRBG
    // construction described in [RFC6979].
    const {n, nh} = this.curve;
    const G = this.curve.g;
    const a = this.curve.decodeScalar(key);

    if (a.isZero() || a.cmp(n) >= 0)
      throw new Error('Invalid private key.');

    const m = this._reduce(msg);
    const nonce = this.curve.encodeScalar(m);
    const drbg = new HmacDRBG(this.hash, key, nonce);

    for (;;) {
      const bytes = drbg.generate(this.curve.scalarSize);
      const k = this._truncate(bytes);

      if (k.isZero() || k.cmp(n) >= 0)
        continue;

      const R = G.mulBlind(k);

      if (R.isInfinity())
        continue;

      const x = R.getX();
      const r = x.mod(n);

      if (r.isZero())
        continue;

      const b = this.curve.randomScalar(rng);
      const ki = k.mul(b).fermat(n);
      const ba = a.mul(b).imod(n);
      const bm = m.mul(b).imod(n);
      const sk = r.mul(ba).iadd(bm).imod(n);
      const s = sk.mul(ki).imod(n);

      if (s.isZero())
        continue;

      let param = R.isOdd() | (!x.eq(r) << 1);

      if (s.cmp(nh) > 0) {
        s.ineg().imod(n);
        param ^= 1;
      }

      return [r, s, param];
    }
  }

  verify(msg, sig, key) {
    assert((msg != null && msg._isBuffer === true));
    assert((sig != null && sig._isBuffer === true));
    assert((key != null && key._isBuffer === true));

    let r, s;
    try {
      [r, s] = this._decodeCompact(sig);
    } catch (e) {
      return false;
    }

    try {
      return this._verify(msg, r, s, key);
    } catch (e) {
      return false;
    }
  }

  verifyDER(msg, sig, key) {
    assert((msg != null && msg._isBuffer === true));
    assert((sig != null && sig._isBuffer === true));
    assert((key != null && key._isBuffer === true));

    let r, s;
    try {
      [r, s] = this._decodeDER(sig, false);
    } catch (e) {
      return false;
    }

    try {
      return this._verify(msg, r, s, key);
    } catch (e) {
      return false;
    }
  }

  _verify(msg, r, s, key) {
    // ECDSA Verification.
    //
    // [SEC1] Page 46, Section 4.1.4.
    // [GECC] Algorithm 4.30, Page 184, Section 4.4.1.
    //
    // Assumptions:
    //
    //   - Let `m` be an integer reduced from bytes.
    //   - Let `r` and `s` be signature elements.
    //   - Let `A` be a valid group element.
    //   - r != 0, r < n.
    //   - s != 0, s < n.
    //   - R != O.
    //
    // Computation:
    //
    //   u1 = m / s mod n
    //   u2 = r / s mod n
    //   R = G * u1 + A * u2
    //   r == x(R) mod n
    //
    // Note that the signer can verify their
    // own signatures more efficiently with:
    //
    //   R = G * ((u1 + u2 * a) mod n)
    //
    // Furthermore, we can avoid affinization
    // of `R` by scaling `r` by `z^2` and
    // repeatedly adding `n * z^2` to it up
    // to a certain threshold.
    const {n} = this.curve;
    const G = this.curve.g;
    const m = this._reduce(msg);
    const A = this.curve.decodePoint(key);

    if (r.isZero() || r.cmp(n) >= 0)
      return false;

    if (s.isZero() || s.cmp(n) >= 0)
      return false;

    const si = s.invert(n);
    const u1 = m.mul(si).imod(n);
    const u2 = r.mul(si).imod(n);
    const R = G.jmulAdd(u1, A, u2);

    return R.eqR(r);
  }

  recover(msg, sig, param, compress) {
    assert((msg != null && msg._isBuffer === true));
    assert((sig != null && sig._isBuffer === true));
    assert((param >>> 0) === param);
    assert((param & 3) === param, 'The recovery param is more than two bits.');

    let r, s;
    try {
      [r, s] = this._decodeCompact(sig);
    } catch (e) {
      return null;
    }

    let A;
    try {
      A = this._recover(msg, r, s, param);
    } catch (e) {
      return null;
    }

    return A.encode(compress);
  }

  recoverDER(msg, sig, param, compress) {
    assert((msg != null && msg._isBuffer === true));
    assert((sig != null && sig._isBuffer === true));
    assert((param >>> 0) === param);
    assert((param & 3) === param, 'The recovery param is more than two bits.');

    let r, s;
    try {
      [r, s] = this._decodeDER(sig, false);
    } catch (e) {
      return null;
    }

    let A;
    try {
      A = this._recover(msg, r, s, param);
    } catch (e) {
      return null;
    }

    return A.encode(compress);
  }

  _recover(msg, r, s, param) {
    // ECDSA Public Key Recovery.
    //
    // [SEC1] Page 47, Section 4.1.6.
    //
    // Assumptions:
    //
    //   - Let `m` be an integer reduced from bytes.
    //   - Let `r` and `s` be signature elements.
    //   - Let `i` be an integer in [0,3].
    //   - x^3 + a * x + b is square in F(p).
    //   - If i > 1 then r < (p mod n).
    //   - r != 0, r < n.
    //   - s != 0, s < n.
    //   - A != O.
    //
    // Computation:
    //
    //   x = r + n, if i > 1
    //     = r, otherwise
    //   R' = (x, sqrt(x^3 + a * x + b))
    //   R = -R', if i mod 2 == 1
    //     = +R', otherwise
    //   s1 = m / r mod n
    //   s2 = s / r mod n
    //   A = R * s2 - G * s1
    //
    // Note that this implementation will have
    // trouble on curves where `p / n > 1`.
    const {n, pmodn} = this.curve;
    const G = this.curve.g;
    const m = this._reduce(msg);

    if (r.isZero() || r.cmp(n) >= 0)
      throw new Error('Invalid R value.');

    if (s.isZero() || s.cmp(n) >= 0)
      throw new Error('Invalid S value.');

    const sign = (param & 1) !== 0;
    const high = param >>> 1;

    let x = r;

    if (high) {
      if (this.curve.highOrder)
        throw new Error('Invalid high bit.');

      if (x.cmp(pmodn) >= 0)
        throw new Error('Invalid R value.');

      x = x.add(n);
    }

    const R = this.curve.pointFromX(x, sign);
    const ri = r.invert(n);
    const s1 = m.mul(ri).ineg().imod(n);
    const s2 = s.mul(ri).imod(n);
    const A = G.mulAdd(s1, R, s2);

    if (A.isInfinity())
      throw new Error('Invalid point.');

    return A;
  }

  derive(pub, priv, compress) {
    const A = this.curve.decodePoint(pub);
    const a = this.curve.decodeScalar(priv);

    if (a.isZero() || a.cmp(this.curve.n) >= 0)
      throw new Error('Invalid private key.');

    if (this.curve.h.cmpn(1) > 0) {
      if (A.isSmall())
        throw new Error('Invalid point.');
    }

    const P = A.mulBlind(a, rng);

    return P.encode(compress);
  }

  /*
   * Schnorr
   */

  schnorrSign(msg, key) {
    return this.schnorr.sign(msg, key);
  }

  schnorrVerify(msg, sig, key) {
    return this.schnorr.verify(msg, sig, key);
  }

  schnorrVerifyBatch(batch) {
    return this.schnorr.verifyBatch(batch);
  }

  /*
   * Helpers
   */

  _encodeCompact(r, s) {
    return Buffer.concat([
      this.curve.encodeScalar(r),
      this.curve.encodeScalar(s)
    ]);
  }

  _decodeCompact(sig) {
    assert((sig != null && sig._isBuffer === true));

    const {n} = this.curve;
    const size = this.curve.scalarSize;

    if (sig.length !== size * 2)
      throw new Error('Invalid signature size.');

    const Rraw = sig.slice(0, size);
    const Sraw = sig.slice(size, size * 2);
    const r = this.curve.decodeScalar(Rraw);
    const s = this.curve.decodeScalar(Sraw);

    if (r.cmp(n) >= 0 || s.cmp(n) >= 0)
      throw new Error('Invalid signature.');

    return [r, s];
  }

  _encodeDER(r, s) {
    const size = asn1.sizeInt(r) + asn1.sizeInt(s);
    const out = Buffer.alloc(asn1.sizeSeq(size));

    let pos = 0;

    pos = asn1.writeSeq(out, pos, size);
    pos = asn1.writeInt(out, pos, r);
    pos = asn1.writeInt(out, pos, s);

    assert(pos === out.length);

    return out;
  }

  _decodeDER(sig, strict) {
    assert((sig != null && sig._isBuffer === true));
    assert(typeof strict === 'boolean');

    const {n} = this.curve;

    let pos = 0;
    let r, s;

    pos = asn1.readSeq(sig, pos, strict);
    [r, pos] = asn1.readInt(sig, pos, strict);
    [s, pos] = asn1.readInt(sig, pos, strict);

    if (strict && pos !== sig.length)
      throw new Error('Trailing bytes.');

    if (r.cmp(n) >= 0 || s.cmp(n) >= 0)
      throw new Error('Invalid signature.');

    return [r, s];
  }

  _truncate(msg) {
    // Byte array to integer conversion.
    //
    // [SEC1] Step 5, Page 45, Section 4.1.3.
    // [FIPS186] Page 25, Section B.2.
    //
    // The two sources above disagree on this.
    //
    // FIPS186 simply modulos the entire byte
    // array by the order, whereas SEC1 takes
    // the left-most ceil(log2(n+1)) bits modulo
    // the order (and maybe does other stuff).
    //
    // Instead of trying to decipher all of
    // this nonsense, we simply replicate the
    // OpenSSL behavior (which, in actuality,
    // is more similar to the SEC1 behavior).
    assert((msg != null && msg._isBuffer === true));

    const bits = this.curve.n.bitLength();
    const bytes = (bits + 7) >>> 3;

    if (msg.length > bytes)
      msg = msg.slice(0, bytes);

    const m = BN.decode(msg, this.curve.endian);
    const d = msg.length * 8 - bits;

    if (d > 0)
      m.iushrn(d);

    return m;
  }

  _reduce(msg) {
    return this._truncate(msg).imod(this.curve.n);
  }
}

/*
 * Expose
 */

module.exports = ECDSA;
}],
[/* 50 */ 'bcrypto', '/lib/bn-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * bn.js - big numbers for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(51 /* './js/bn' */, module);
}],
[/* 51 */ 'bcrypto', '/lib/js/bn.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * bn.js - big numbers for bcrypto
 * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on indutny/bn.js:
 *   Copyright (c) 2015, Fedor Indutny (MIT License).
 *   https://github.com/indutny/bn.js
 *
 * Parts of this software are based on golang/go:
 *   Copyright (c) 2009, The Go Authors. All rights reserved.
 *   https://github.com/golang/go
 *
 * Parts of this software are based on openssl/openssl:
 *   Copyright (c) 1998-2018, The OpenSSL Project (Apache License v2.0).
 *   Copyright (c) 1995-1998, Eric A. Young, Tim J. Hudson. All rights reserved.
 *   https://github.com/openssl/openssl
 *
 * Parts of this software are based on libgmp:
 *   Copyright (c) 1991-1997, 1999-2014, Free Software Foundation, Inc.
 *   https://gmplib.org/
 *
 * Parts of this software are based on v8/v8:
 *   Copyright (c) 2017, The V8 Project Authors (BSD-Style License).
 *   https://github.com/v8/v8
 *
 * Resources:
 *   https://github.com/indutny/bn.js/blob/master/lib/bn.js
 *   https://github.com/indutny/miller-rabin/blob/master/lib/mr.js
 *   https://github.com/golang/go/blob/master/src/math/big/int.go
 *   https://github.com/golang/go/blob/master/src/math/big/nat.go
 *   https://github.com/golang/go/blob/master/src/math/big/prime.go
 *   https://github.com/openssl/openssl/tree/master/crypto/bn
 *   https://github.com/openssl/openssl/blob/master/crypto/bn/bn_kron.c
 *   https://github.com/gnutls/nettle/blob/master/mini-gmp.c
 *   https://github.com/v8/v8/blob/master/src/objects/bigint.cc
 */

/* eslint valid-typeof: "off" */

'use strict';

const {custom} = __browser_require__(52 /* '../internal/custom' */, module);

/*
 * Constants
 */

const zeros = [
  '',
  '0',
  '00',
  '000',
  '0000',
  '00000',
  '000000',
  '0000000',
  '00000000',
  '000000000',
  '0000000000',
  '00000000000',
  '000000000000',
  '0000000000000',
  '00000000000000',
  '000000000000000',
  '0000000000000000',
  '00000000000000000',
  '000000000000000000',
  '0000000000000000000',
  '00000000000000000000',
  '000000000000000000000',
  '0000000000000000000000',
  '00000000000000000000000',
  '000000000000000000000000',
  '0000000000000000000000000'
];

const groupSizes = [
  0x00, 0x19, 0x10, 0x0c, 0x0b, 0x0a,
  0x09, 0x08, 0x08, 0x07, 0x07, 0x07,
  0x07, 0x06, 0x06, 0x06, 0x06, 0x06,
  0x06, 0x06, 0x05, 0x05, 0x05, 0x05,
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
  0x05, 0x05, 0x05, 0x05, 0x05, 0x05
];

const groupBases = [
  0x00000000, 0x02000000, 0x0290d741, 0x01000000,
  0x02e90edd, 0x039aa400, 0x0267bf47, 0x01000000,
  0x0290d741, 0x00989680, 0x012959c3, 0x0222c000,
  0x03bd7765, 0x0072e440, 0x00adcea1, 0x01000000,
  0x01704f61, 0x0206fc40, 0x02cddcf9, 0x03d09000,
  0x003e5185, 0x004ea360, 0x006235f7, 0x00798000,
  0x009502f9, 0x00b54ba0, 0x00daf26b, 0x01069c00,
  0x0138f9ad, 0x0172c9e0, 0x01b4d89f, 0x02000000,
  0x025528a1, 0x02b54a20, 0x03216b93, 0x039aa400
];

const primes = {
  p192: null,
  p224: null,
  p521: null,
  k256: null,
  p251: null,
  p25519: null,
  p448: null
};

const modes = {
  NONE: 0,
  QUO: 1,
  REM: 2,
  BOTH: 3,
  EUCLID: 4,
  ALL: 7
};

const WND_WIDTH = 4;
const WND_SIZE = 1 << (WND_WIDTH - 1);

const HAS_BIGINT = typeof BigInt === 'function';

/**
 * BN
 */

class BN {
  constructor(num, base, endian) {
    this.words = [0];
    this.length = 1;
    this.negative = 0;
    this.red = null;
    this.from(num, base, endian);
  }

  /*
   * Addition Engine
   */

  _iadd(a, b) {
    let carry = 0;
    let i = 0;

    // a.length > b.length
    if (a.length < b.length)
      [a, b] = [b, a];

    if (a !== this)
      this._alloc(a.length);

    for (; i < b.length; i++) {
      const r = (a.words[i] | 0) + (b.words[i] | 0) + carry;

      this.words[i] = r & 0x3ffffff;

      carry = r >>> 26;
    }

    for (; carry !== 0 && i < a.length; i++) {
      const r = (a.words[i] | 0) + carry;

      this.words[i] = r & 0x3ffffff;

      carry = r >>> 26;
    }

    this.length = a.length;

    if (carry !== 0) {
      this._alloc(this.length + 1);
      this.words[this.length++] = carry;
    } else if (a !== this) {
      // Copy the rest of the words.
      for (; i < a.length; i++)
        this.words[i] = a.words[i];
    }

    // Note: we shouldn't need to strip here.
    return this;
  }

  _iaddn(num) {
    this.words[0] += num;

    if (this.words[0] < 0x4000000)
      return this;

    // Carry.
    let i = 0;

    this._alloc(this.length + 1);

    this.words[this.length] = 0;

    for (; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      this.words[i + 1] += 1;
    }

    this.length = Math.max(this.length, i + 1);

    // Note: we shouldn't need to strip here.
    return this;
  }

  /*
   * Addition
   */

  iadd(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    if (this.negative === num.negative) {
      // x + y == x + y
      // (-x) + (-y) == -(x + y)
      this._iadd(this, num);
    } else {
      // x + (-y) == x - y == -(y - x)
      // (-x) + y == y - x == -(x - y)
      const cmp = this.ucmp(num);

      // x + (-x) == (-x) + x == 0
      if (cmp === 0) {
        this.words[0] = 0;
        this.length = 1;
        this.negative = 0;
        return this;
      }

      if (cmp < 0) {
        this._isub(num, this);
        this.negative ^= 1;
      } else {
        this._isub(this, num);
      }
    }

    return this;
  }

  iaddn(num) {
    enforce(isSMI(num), 'num', 'smi');

    const negative = (num < 0) | 0;

    if (negative)
      num = -num;

    if (this.negative === negative) {
      // x + y == x + y
      // (-x) + (-y) == -(x + y)
      this._iaddn(num);
    } else {
      // x + (-y) == x - y == -(y - x)
      // (-x) + y == y - x == -(x - y)
      if (this.length === 1 && this.words[0] < num) {
        this.words[0] = num - this.words[0];
        this.negative ^= 1;
      } else {
        this._isubn(num);
      }
    }

    return this;
  }

  add(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    if (num.length > this.length)
      return num.clone().iadd(this);

    return this.clone().iadd(num);
  }

  addn(num) {
    return this.clone().iaddn(num);
  }

  /*
   * Subtraction Engine
   */

  _isub(a, b) {
    let carry = 0;
    let i = 0;

    // a > b
    assert(a.length >= b.length);

    if (a !== this)
      this._alloc(a.length);

    for (; i < b.length; i++) {
      const r = (a.words[i] | 0) - (b.words[i] | 0) + carry;

      carry = r >> 26;

      this.words[i] = r & 0x3ffffff;
    }

    for (; carry !== 0 && i < a.length; i++) {
      const r = (a.words[i] | 0) + carry;

      carry = r >> 26;

      this.words[i] = r & 0x3ffffff;
    }

    assert(carry === 0);

    // Copy rest of the words.
    if (a !== this) {
      for (; i < a.length; i++)
        this.words[i] = a.words[i];
    }

    this.length = Math.max(this.length, i);

    return this._strip();
  }

  _isubn(num) {
    this.words[0] -= num;

    if (this.words[0] >= 0)
      return this._normalize();

    assert(this.length !== 1);

    // Carry.
    this._alloc(this.length + 1);

    for (let i = 0; i < this.length && this.words[i] < 0; i++) {
      this.words[i] += 0x4000000;
      this.words[i + 1] -= 1;
    }

    this.words[this.length] = 0;

    return this._strip();
  }

  /*
   * Subtraction
   */

  isub(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    if (this.negative !== num.negative) {
      // x - (-y) == x + y
      // (-x) - y == -(x + y)
      this._iadd(this, num);
    } else {
      // x - y == x - y == -(y - x)
      // (-x) - (-y) == y - x == -(x - y)
      const cmp = this.ucmp(num);

      // x - x == 0
      if (cmp === 0) {
        this.words[0] = 0;
        this.length = 1;
        this.negative = 0;
        return this;
      }

      if (cmp < 0) {
        this._isub(num, this);
        this.negative ^= 1;
      } else {
        this._isub(this, num);
      }
    }

    return this;
  }

  isubn(num) {
    enforce(isSMI(num), 'num', 'smi');

    const negative = (num < 0) | 0;

    if (negative)
      num = -num;

    if (this.negative !== negative) {
      // x - (-y) == x + y
      // (-x) - y == -(x + y)
      this._iaddn(num);
    } else {
      // x - y == x - y == -(y - x)
      // (-x) - (-y) == y - x == -(x - y)
      if (this.length === 1 && this.words[0] < num) {
        this.words[0] = num - this.words[0];
        this.negative ^= 1;
      } else {
        this._isubn(num);
      }
    }

    return this;
  }

  sub(num) {
    return this.clone().isub(num);
  }

  subn(num) {
    return this.clone().isubn(num);
  }

  /*
   * Multiplication Engine
   */

  _mul(num, out) {
    enforce(BN.isBN(num), 'num', 'bignum');
    enforce(BN.isBN(out), 'out', 'bignum');

    if (this.length === 10 && num.length === 10)
      return comb10MulTo(this, num, out);

    const len = this.length + num.length;

    if (len < 63)
      return smallMulTo(this, num, out);

    if (len < 1024)
      return bigMulTo(this, num, out);

    return jumboMulTo(this, num, out);
  }

  /*
   * Multiplication
   */

  imul(num) {
    return this.mul(num)._move(this);
  }

  imuln(num) {
    enforce(isSMI(num), 'num', 'smi');

    const neg = (num < 0) | 0;

    if (neg)
      num = -num;

    // Carry.
    let carry = 0;

    for (let i = 0; i < this.length; i++) {
      const w = this.words[i] * num;
      const lo = (w & 0x3ffffff) + (carry & 0x3ffffff);

      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      carry += lo >>> 26;

      this.words[i] = lo & 0x3ffffff;
    }

    this.negative ^= neg;

    if (carry !== 0) {
      this._alloc(this.length + 1);
      this.words[this.length++] = carry;
    } else {
      this._strip();
    }

    return this;
  }

  mul(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    const len = this.length + num.length;
    const out = new BN();

    out.words = new Array(len);

    for (let i = 0; i < len; i ++)
      out.words[i] = 0;

    return this._mul(num, out);
  }

  muln(num) {
    return this.clone().imuln(num);
  }

  /*
   * Multiplication + Shift
   */

  mulShift(num, bits) {
    enforce(BN.isBN(num), 'num', 'bignum');
    enforce((bits >>> 0) === bits, 'bits', 'uint32');

    const r = this.mul(num);
    const b = r.utestn(bits - 1);

    r.iushrn(bits);

    if (this.negative ^ num.negative)
      return r.isubn(b);

    return r.iaddn(b);
  }

  /*
   * Division Engine
   */

  _div(num, flags) {
    enforce(BN.isBN(num), 'num', 'bignum');
    assert((flags & modes.ALL) === flags);
    assert(flags !== modes.NONE);

    const a = this;
    const b = num;

    nonzero(!b.isZero());

    if (a.isZero())
      return [new BN(0), new BN(0)];

    const as = a.negative;
    const bs = b.negative;

    a.negative = 0;
    b.negative = 0;

    let q = null;
    let r = null;

    if (a.ucmp(b) < 0) {
      if (flags & modes.QUO)
        q = new BN(0);

      if (flags & modes.REM)
        r = a.clone();
    } else if (b.length === 1) {
      if (flags & modes.QUO)
        q = a.quon(b.words[0]);

      if (flags & modes.REM)
        r = a.remn(b.words[0]);
    } else {
      [q, r] = a._wordDiv(b, flags);
    }

    a.negative = as;
    b.negative = bs;

    if (flags & modes.QUO) {
      q.negative = a.negative ^ b.negative;
      q._normalize();
    }

    if (flags & modes.REM) {
      r.negative = a.negative;
      r._normalize();
    }

    if (flags & modes.EUCLID) {
      if (flags & modes.QUO) {
        assert((flags & modes.REM) !== 0);

        if (r.negative !== 0) {
          if (b.negative !== 0)
            q.iaddn(1);
          else
            q.isubn(1);
        }
      }

      if (flags & modes.REM) {
        if (r.negative !== 0) {
          if (b.negative !== 0)
            r.isub(b);
          else
            r.iadd(b);
        }
      }
    }

    return [q, r];
  }

  _wordDiv(num, flags) {
    let a = this.clone();
    let b = num;
    let q = null;
    let hi;

    // Normalize.
    const word = b.words[b.length - 1] | 0;
    const shift = 26 - countBits(word);

    if (shift !== 0) {
      b = b.clone();

      a.iushln(shift);
      b.iushln(shift);

      hi = b.words[b.length - 1] | 0;
    } else {
      hi = word;
    }

    // Initialize quotient.
    const m = a.length - b.length;

    assert(m >= 0);

    if (flags & modes.QUO) {
      q = new BN(0);
      q.length = m + 1;
      q.words = new Array(q.length);

      for (let i = 0; i < q.length; i++)
        q.words[i] = 0;
    }

    // Diff.
    const d = a.clone();

    d._ishlnsubmul(b, 1, m);

    if (d.negative === 0) {
      if (q)
        q.words[m] = 1;

      a = d;
    }

    // Divide.
    for (let j = m - 1; j >= 0; j--) {
      const ahi = a.words[b.length + j];
      const alo = a.words[b.length + j - 1];
      const quo = ((ahi * 0x4000000 + alo) / hi) | 0;

      let qj = Math.min(quo, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);

      while (a.negative !== 0) {
        qj -= 1;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        a.ineg();
      }

      if (q)
        q.words[j] = qj;
    }

    // Strip.
    if (q)
      q._strip();

    // Denormalize.
    // Note: we shouldn't need to strip `a` here.
    if ((flags & modes.REM) && shift !== 0)
      a.iushrn(shift);

    return [q, a];
  }

  _ishlnsubmul(num, mul, shift) {
    let carry = 0;
    let i = 0;

    this._expand(num.length + shift);

    for (; i < num.length; i++) {
      const k = (this.words[i + shift] | 0) + carry;
      const r = num.words[i] * mul;
      const w = k - (r & 0x3ffffff);

      carry = (w >> 26) - ((r / 0x4000000) | 0);

      this.words[i + shift] = w & 0x3ffffff;
    }

    for (; i < this.length - shift; i++) {
      const w = (this.words[i + shift] | 0) + carry;

      carry = w >> 26;

      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0)
      return this._strip();

    // Subtraction overflow.
    assert(carry === -1);

    carry = 0;

    for (let i = 0; i < this.length; i++) {
      const w = -(this.words[i] | 0) + carry;

      carry = w >> 26;

      this.words[i] = w & 0x3ffffff;
    }

    this.negative = 1;

    return this._strip();
  }

  /*
   * Truncation Division + Modulo
   */

  quorem(num) {
    return this._div(num, modes.BOTH);
  }

  /*
   * Truncation Division
   */

  iquo(num) {
    return this.quo(num)._move(this);
  }

  iquon(num) {
    enforce(isSMI(num), 'num', 'smi');
    nonzero(num !== 0);

    const neg = (num < 0) | 0;

    if (neg)
      num = -num;

    let carry = 0;

    for (let i = this.length - 1; i >= 0; i--) {
      const w = (this.words[i] | 0) + carry * 0x4000000;

      this.words[i] = (w / num) | 0;

      carry = w % num;
    }

    this.negative ^= neg;

    return this._strip();
  }

  quo(num) {
    return this._div(num, modes.QUO)[0];
  }

  quon(num) {
    return this.clone().iquon(num);
  }

  /*
   * Truncation Modulo
   */

  irem(num) {
    return this.rem(num)._move(this);
  }

  iremn(num) {
    let m = this.remrn(num);

    if (m < 0)
      m = -m;

    this.words[0] = m;
    this.length = 1;

    return this._normalize();
  }

  rem(num) {
    return this._div(num, modes.REM)[1];
  }

  remn(num) {
    return this.clone().iremn(num);
  }

  remrn(num) {
    enforce(isSMI(num), 'num', 'smi');
    nonzero(num !== 0);

    if (num < 0)
      num = -num;

    const p = (1 << 26) % num;

    let acc = 0;

    for (let i = this.length - 1; i >= 0; i--)
      acc = (p * acc + (this.words[i] | 0)) % num;

    return this.negative !== 0 ? (-acc | 0) : acc;
  }

  /*
   * Euclidean Division + Modulo
   */

  divmod(num) {
    return this._div(num, modes.BOTH | modes.EUCLID);
  }

  /*
   * Euclidean Division
   */

  idiv(num) {
    return this.div(num)._move(this);
  }

  idivn(num) {
    if (this.negative === 0)
      return this.iquon(num);

    const r = this.remrn(num);

    this.iquon(num);

    if (r < 0) {
      if (num < 0)
        this.iaddn(1);
      else
        this.isubn(1);
    }

    return this;
  }

  div(num) {
    return this._div(num, modes.BOTH | modes.EUCLID)[0];
  }

  divn(num) {
    return this.clone().idivn(num);
  }

  /*
   * Euclidean Modulo
   */

  imod(num) {
    if (this.ucmp(num) < 0) {
      if (this.negative !== 0) {
        this._isub(num, this);
        this.negative = 0;
      }
      return this;
    }

    return this.mod(num)._move(this);
  }

  imodn(num) {
    this.words[0] = this.modrn(num);
    this.length = 1;
    this.negative = 0;
    return this;
  }

  mod(num) {
    return this._div(num, modes.REM | modes.EUCLID)[1];
  }

  modn(num) {
    return this.clone().imodn(num);
  }

  modrn(num) {
    enforce(isSMI(num), 'num', 'smi');

    let r = this.remrn(num);

    if (r < 0) {
      if (num < 0)
        r -= num;
      else
        r += num;
    }

    return r;
  }

  /*
   * Round Division
   */

  divRound(num) {
    const [q, r] = this.quorem(num);

    // Fast case - exact division.
    if (r.isZero())
      return q;

    const bit = num.words[0] & 1;

    num.iushrn(1);

    const cmp = r.ucmp(num);

    num.iushln(1);

    num.words[0] |= bit;

    // Round down.
    if (cmp < 0 || (num.isOdd() && cmp === 0))
      return q;

    // Round up.
    if (this.negative ^ num.negative)
      return q.isubn(1);

    return q.iaddn(1);
  }

  /*
   * Exponentiation
   */

  ipow(num) {
    return this.pow(num)._move(this);
  }

  ipown(num) {
    return this.pown(num)._move(this);
  }

  pow(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    let b = countBits(num.words[num.length - 1]);
    let r = new BN(1);

    for (let i = num.length - 1; i >= 0; i--) {
      const word = num.words[i];

      for (let j = b - 1; j >= 0; j--) {
        r = r.sqr();

        if ((word >> j) & 1)
          r = r.mul(this);
      }

      b = 26;
    }

    return r;
  }

  pown(num) {
    enforce(isSMI(num), 'num', 'smi');

    if (num < 0)
      num = -num;

    if (num === 0)
      return new BN(1);

    if (num === 1)
      return this.clone();

    const bits = countBits(num);

    let r = this;

    for (let i = bits - 2; i >= 0; i--) {
      r = r.sqr();

      if ((num >> i) & 1)
        r = r.mul(this);
    }

    return r;
  }

  isqr() {
    return this.imul(this);
  }

  sqr() {
    return this.mul(this);
  }

  /*
   * Roots Engine
   */

  _rootrem(pow, rem) {
    enforce((pow >>> 0) === pow, 'num', 'uint32');

    if (pow === 0)
      throw new RangeError('Zeroth root.');

    if (~pow & this.negative)
      throw new RangeError('Negative with even root.');

    if (this.ucmpn(1) <= 0)
      return [this.clone(), new BN(0)];

    let u = new BN(0);
    let t = BN.shift(1, this.bitLength() / pow + 1 | 0);
    let v, r;

    if (this.negative !== 0)
      t.ineg();

    if (pow === 2) {
      do {
        u = t;
        t = this.quo(u);
        t.iadd(u);
        t.iushrn(1);
      } while (t.ucmp(u) < 0);
    } else {
      do {
        u = t;
        t = u.pown(pow - 1);
        t = this.quo(t);
        v = u.muln(pow - 1);
        t.iadd(v);
        t = t.quon(pow);
      } while (t.ucmp(u) < 0);
    }

    if (rem) {
      t = u.pown(pow);
      r = this.sub(t);
    }

    return [u, r];
  }

  /*
   * Roots
   */

  rootrem(pow) {
    return this._rootrem(pow, 1);
  }

  iroot(pow) {
    return this.root(pow)._move(this);
  }

  root(pow) {
    return this._rootrem(pow, 0)[0];
  }

  isPower(pow) {
    enforce((pow >>> 0) === pow, 'num', 'uint32');

    if (pow === 0 || (~pow & this.negative))
      return false;

    const [, r] = this.rootrem(pow);

    return r.sign() === 0;
  }

  sqrtrem() {
    return this.rootrem(2);
  }

  isqrt() {
    return this.sqrt()._move(this);
  }

  sqrt() {
    return this.root(2);
  }

  isSquare() {
    return this.isPower(2);
  }

  /*
   * AND
   */

  iand(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    let x = this;
    let y = num;

    if (x === y)
      return x;

    if ((x.negative | y.negative) === 0)
      return x.iuand(y);

    if ((x.negative & y.negative) === 1) {
      // (-x) & (-y) == ~(x-1) & ~(y-1)
      //             == ~((x-1) | (y-1))
      //             == -(((x-1) | (y-1)) + 1)
      x.iaddn(1);
      y.iaddn(1);
      x.iuor(y);
      x.isubn(1);
      y.isubn(1);
      return x;
    }

    // Assume x is the positive number.
    if (x.negative !== 0)
      [x, y] = [y.clone(), x];

    // x & (-y) == x & ~(y-1)
    //          == x & ~(y-1)
    const width = x.bitLength();

    y.iaddn(1);
    y.inotn(width);
    x.iuand(y);
    y.inotn(width);
    y.isubn(1);

    return x._move(this);
  }

  iandn(num) {
    enforce(isSMI(num), 'num', 'smi');

    if ((this.negative | (num < 0)) !== 0)
      return this.iand(new BN(num));

    this.words[0] &= num;
    this.length = 1;

    return this;
  }

  and(num) {
    return this.clone().iand(num);
  }

  andn(num) {
    return this.clone().iandn(num);
  }

  andrn(num) {
    enforce(isSMI(num), 'num', 'smi');

    if ((this.negative | (num < 0)) !== 0) {
      const n = this.iand(new BN(num));

      if (n.length > 1)
        throw new RangeError('Number exceeds 26 bits.');

      return n.negative !== 0 ? -n.words[0] : n.words[0];
    }

    return this.words[0] & num;
  }

  /*
   * Unsigned AND
   */

  iuand(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    this.length = Math.min(this.length, num.length);

    for (let i = 0; i < this.length; i++)
      this.words[i] &= num.words[i];

    return this._strip();
  }

  iuandn(num) {
    enforce(isSMI(num), 'num', 'smi');

    this.words[0] &= Math.abs(num);
    this.length = 1;

    return this._normalize();
  }

  uand(num) {
    return this.clone().iuand(num);
  }

  uandn(num) {
    return this.clone().iuandn(num);
  }

  uandrn(num) {
    enforce(isSMI(num), 'num', 'smi');

    const n = this.words[0] & Math.abs(num);

    return this.negative !== 0 ? (-n | 0) : n;
  }

  /*
   * OR
   */

  ior(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    let x = this;
    let y = num;

    if (x === y)
      return x;

    if ((x.negative | y.negative) === 0)
      return x.iuor(y);

    if ((x.negative & y.negative) === 1) {
      // (-x) | (-y) == ~(x-1) | ~(y-1)
      //             == ~((x-1) & (y-1))
      //             == -(((x-1) & (y-1)) + 1)
      x.iaddn(1);
      y.iaddn(1);
      x.iuand(y);
      x.isubn(1);
      y.isubn(1);
      return x;
    }

    // Assume x is the positive number.
    y = y.clone();

    if (x.negative !== 0)
      [x, y] = [y, x];

    // x | (-y) == x | ~(y-1)
    //          == ~((y-1) & ~x)
    //          == -(((y-1) & ~x) + 1)
    y.iaddn(1);
    x.inotn(y.bitLength());
    y.iuand(x);
    y.isubn(1);

    return y._move(this);
  }

  iorn(num) {
    enforce(isSMI(num), 'num', 'smi');

    if ((this.negative | (num < 0)) !== 0)
      return this.ior(new BN(num));

    this.words[0] |= num;

    return this;
  }

  or(num) {
    return this.clone().ior(num);
  }

  orn(num) {
    return this.clone().iorn(num);
  }

  /*
   * Unsigned OR
   */

  iuor(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    this._expand(num.length);

    for (let i = 0; i < num.length; i++)
      this.words[i] |= num.words[i];

    // Note: we shouldn't need to strip here.
    return this;
  }

  iuorn(num) {
    enforce(isSMI(num), 'num', 'smi');

    this.words[0] |= Math.abs(num);

    return this;
  }

  uor(num) {
    return this.clone().iuor(num);
  }

  uorn(num) {
    return this.clone().iuorn(num);
  }

  /*
   * XOR
   */

  ixor(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    let x = this;
    let y = num;

    if (x === y) {
      x.words[0] = 0;
      x.length = 1;
      x.negative = 0;
      return x;
    }

    if ((x.negative | y.negative) === 0)
      return x.iuxor(y);

    if ((x.negative & y.negative) === 1) {
      // (-x) ^ (-y) == ~(x-1) ^ ~(y-1)
      //             == (x-1) ^ (y-1)
      x.iaddn(1);
      y.iaddn(1);
      x.iuxor(y);
      x.ineg();
      y.isubn(1);
      return x;
    }

    // Assume x is the positive number.
    if (x.negative !== 0)
      [x, y] = [y.clone(), x];

    // x ^ (-y) == x ^ ~(y-1)
    //          == ~(x ^ (y-1))
    //          == -((x ^ (y-1)) + 1)
    y.iaddn(1);
    x.iuxor(y);
    x.iaddn(1);
    x.ineg();
    y.isubn(1);

    return x._move(this);
  }

  ixorn(num) {
    enforce(isSMI(num), 'num', 'smi');

    if ((this.negative | (num < 0)) !== 0)
      return this.ixor(new BN(num));

    this.words[0] ^= num;

    return this;
  }

  xor(num) {
    return this.clone().ixor(num);
  }

  xorn(num) {
    return this.clone().ixorn(num);
  }

  /*
   * Unsigned XOR
   */

  iuxor(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    let a = this;
    let b = num;

    if (a.length < b.length)
      [a, b] = [b, a];

    let i = 0;

    for (; i < b.length; i++)
      this.words[i] = a.words[i] ^ b.words[i];

    if (a !== this) {
      this._alloc(a.length);

      for (; i < a.length; i++)
        this.words[i] = a.words[i];
    }

    this.length = a.length;

    return this._strip();
  }

  iuxorn(num) {
    enforce(isSMI(num), 'num', 'smi');

    this.words[0] ^= Math.abs(num);

    return this._normalize();
  }

  uxor(num) {
    return this.clone().iuxor(num);
  }

  uxorn(num) {
    return this.clone().iuxorn(num);
  }

  /*
   * NOT
   */

  inot() {
    if (this.negative !== 0) {
      // ~(-x) == ~(~(x-1)) == x-1
      this.ineg().isubn(1);
    } else {
      // ~x == -x-1 == -(x+1)
      this.iaddn(1).ineg();
    }
    return this;
  }

  not() {
    return this.clone().inot();
  }

  inotn(width) {
    enforce((width >>> 0) === width, 'width', 'uint32');

    const r = width % 26;

    let s = Math.ceil(width / 26);
    let i = 0;

    // Extend the buffer with leading zeroes.
    this._expand(s);

    if (r > 0)
      s -= 1;

    // Handle complete words.
    for (; i < s; i++)
      this.words[i] ^= 0x3ffffff;

    // Handle the residue.
    if (r > 0)
      this.words[i] ^= (1 << r) - 1;

    // And remove leading zeroes.
    return this._strip();
  }

  notn(width) {
    return this.clone().inotn(width);
  }

  /*
   * Left Shift
   */

  ishl(num) {
    enforce(BN.isBN(num), 'bits', 'bignum');
    enforce(num.bitLength() <= 32, 'bits', 'uint32');
    return this.ishln(num.toNumber());
  }

  ishln(bits) {
    return this.iushln(bits);
  }

  shl(num) {
    return this.clone().ishl(num);
  }

  shln(bits) {
    return this.clone().ishln(bits);
  }

  /*
   * Unsigned Left Shift
   */

  iushl(num) {
    enforce(BN.isBN(num), 'bits', 'bignum');
    enforce(num.bitLength() <= 32, 'bits', 'uint32');
    return this.iushln(num.toNumber());
  }

  iushln(bits) {
    enforce((bits >>> 0) === bits, 'bits', 'uint32');

    const r = bits % 26;
    const s = (bits - r) / 26;
    const mask = ((1 << r) - 1) << (26 - r);

    if (r !== 0) {
      let carry = 0;

      for (let i = 0; i < this.length; i++) {
        const ncarry = this.words[i] & mask;
        const c = ((this.words[i] | 0) - ncarry) << r;

        this.words[i] = c | carry;

        carry = ncarry >>> (26 - r);
      }

      if (carry !== 0) {
        this._alloc(this.length + 1);
        this.words[this.length++] = carry;
      }
    }

    if (s !== 0) {
      this._alloc(this.length + s);

      for (let i = this.length - 1; i >= 0; i--)
        this.words[i + s] = this.words[i];

      for (let i = 0; i < s; i++)
        this.words[i] = 0;

      this.length += s;
    }

    return this._strip();
  }

  ushl(num) {
    return this.clone().iushl(num);
  }

  ushln(bits) {
    return this.clone().iushln(bits);
  }

  /*
   * Right Shift Engine
   */

  _split(bits, output) {
    const r = bits % 26;
    const s = Math.min((bits - r) / 26, this.length);
    const mask = (1 << r) - 1;

    // Extended mode, copy masked part.
    if (output) {
      output._alloc(s);

      for (let i = 0; i < s; i++)
        output.words[i] = this.words[i];

      output.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all.
    } else if (this.length > s) {
      this.length -= s;
      for (let i = 0; i < this.length; i++)
        this.words[i] = this.words[i + s];
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    let carry = 0;

    if (r !== 0) {
      for (let i = this.length - 1; i >= 0; i--) {
        const word = this.words[i] | 0;

        this.words[i] = (carry << (26 - r)) | (word >>> r);

        carry = word & mask;
      }
    }

    // Push carried bits as a mask.
    if (output) {
      if (carry !== 0) {
        output._alloc(output.length + 1);
        output.words[output.length++] = carry;
      } else {
        if (output.length === 0)
          output.words[output.length++] = 0;

        output._strip();
      }
    }

    return this._strip();
  }

  /*
   * Right Shift
   */

  ishr(num) {
    enforce(BN.isBN(num), 'bits', 'bignum');
    enforce(num.bitLength() <= 32, 'bits', 'uint32');
    return this.ishrn(num.toNumber());
  }

  ishrn(bits) {
    enforce((bits >>> 0) === bits, 'bits', 'uint32');

    if (this.negative !== 0) {
      // (-x) >> y == ~(x-1) >> y
      //           == ~((x-1) >> y)
      //           == -(((x-1) >> y) + 1)
      this.iaddn(1);
      this.iushrn(bits);
      this.isubn(1);
      return this;
    }

    return this.iushrn(bits);
  }

  shr(num) {
    return this.clone().ishr(num);
  }

  shrn(bits) {
    return this.clone().ishrn(bits);
  }

  /*
   * Unsigned Right Shift
   */

  iushr(num) {
    enforce(BN.isBN(num), 'bits', 'bignum');
    enforce(num.bitLength() <= 32, 'bits', 'uint32');
    return this.iushrn(num.toNumber());
  }

  iushrn(bits) {
    enforce((bits >>> 0) === bits, 'bits', 'uint32');
    return this._split(bits, null);
  }

  ushr(num) {
    return this.clone().iushr(num);
  }

  ushrn(bits) {
    return this.clone().iushrn(bits);
  }

  /*
   * Bit Manipulation
   */

  setn(bit, val) {
    enforce((bit >>> 0) === bit, 'bit', 'uint32');

    if (this.negative !== 0) {
      this.iaddn(1);
      this.usetn(bit, !val);
      this.isubn(1);
      return this;
    }

    return this.usetn(bit, val);
  }

  usetn(bit, val) {
    enforce((bit >>> 0) === bit, 'bit', 'uint32');

    const r = bit % 26;
    const s = (bit - r) / 26;

    this._expand(s + 1);

    if (val)
      this.words[s] |= (1 << r);
    else
      this.words[s] &= ~(1 << r);

    return this._strip();
  }

  testn(bit) {
    enforce((bit >>> 0) === bit, 'bit', 'uint32');

    const r = bit % 26;
    const s = (bit - r) / 26;

    // Fast case: bit is much higher than all existing words.
    if (this.length <= s)
      return this.negative;

    // Check bit and return.
    const w = this.words[s];
    const val = (w >> r) & 1;

    if (this.negative !== 0) {
      if (r > 0 && (w & ((1 << r) - 1)))
        return val ^ 1;

      let j = s;

      while (j--) {
        if (this.words[j] > 0)
          return val ^ 1;
      }
    }

    return val;
  }

  utestn(bit) {
    enforce((bit >>> 0) === bit, 'bit', 'uint32');

    const r = bit % 26;
    const s = (bit - r) / 26;

    // Fast case: bit is much higher than all existing words.
    if (this.length <= s)
      return 0;

    // Check bit and return.
    return (this.words[s] >> r) & 1;
  }

  imaskn(bits) {
    enforce((bits >>> 0) === bits, 'bits', 'uint32');

    if (this.negative !== 0) {
      this.iaddn(1);
      this.inotn(bits + 1);
      this.ineg();
    }

    return this.iumaskn(bits);
  }

  maskn(bits) {
    return this.clone().imaskn(bits);
  }

  iumaskn(bits) {
    enforce((bits >>> 0) === bits, 'bits', 'uint32');

    const r = bits % 26;

    let s = (bits - r) / 26;

    if (this.length <= s)
      return this;

    if (r !== 0)
      s += 1;

    this.length = Math.min(s, this.length);

    if (r !== 0)
      this.words[this.length - 1] &= (1 << r) - 1;

    if (this.length === 0)
      this.words[this.length++] = 0;

    return this._strip();
  }

  umaskn(bits) {
    return this.clone().iumaskn(bits);
  }

  andln(num) {
    return this.words[0] & num;
  }

  bit(pos) {
    return this.utestn(pos);
  }

  bits(pos, width) {
    enforce((pos >>> 0) === pos, 'pos', 'uint32');
    enforce((width >>> 0) === width, 'width', 'uint32');
    enforce(width <= 26, 'width', 'width');

    const shift = pos % 26;
    const index = (pos - shift) / 26;

    if (index >= this.length)
      return 0;

    let bits = (this.words[index] >> shift) & ((1 << width) - 1);

    if (shift + width > 26 && index + 1 < this.length) {
      const more = shift + width - 26;
      const next = this.words[index + 1] & ((1 << more) - 1);

      bits |= next << (26 - shift);
    }

    return bits;
  }

  /*
   * Negation
   */

  ineg() {
    if (!this.isZero())
      this.negative ^= 1;

    return this;
  }

  neg() {
    return this.clone().ineg();
  }

  iabs() {
    this.negative = 0;
    return this;
  }

  abs() {
    return this.clone().iabs();
  }

  /*
   * Comparison
   */

  cmp(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    if (this.negative !== num.negative)
      return num.negative - this.negative;

    const res = this.ucmp(num);

    if (this.negative !== 0)
      return -res | 0;

    return res;
  }

  cmpn(num) {
    enforce(isSMI(num), 'num', 'smi');

    const negative = (num < 0) | 0;

    if (this.negative !== negative)
      return negative - this.negative;

    const res = this.ucmpn(num);

    if (this.negative !== 0)
      return -res | 0;

    return res;
  }

  eq(num) {
    return this.cmp(num) === 0;
  }

  eqn(num) {
    return this.cmpn(num) === 0;
  }

  gt(num) {
    return this.cmp(num) > 0;
  }

  gtn(num) {
    return this.cmpn(num) > 0;
  }

  gte(num) {
    return this.cmp(num) >= 0;
  }

  gten(num) {
    return this.cmpn(num) >= 0;
  }

  lt(num) {
    return this.cmp(num) < 0;
  }

  ltn(num) {
    return this.cmpn(num) < 0;
  }

  lte(num) {
    return this.cmp(num) <= 0;
  }

  lten(num) {
    return this.cmpn(num) <= 0;
  }

  sign() {
    if (this.negative !== 0)
      return -1;

    if (this.length === 1 && this.words[0] === 0)
      return 0;

    return 1;
  }

  isZero() {
    return this.length === 1 && this.words[0] === 0;
  }

  isNeg() {
    return this.negative !== 0;
  }

  isPos() {
    return this.negative === 0;
  }

  isOdd() {
    return (this.words[0] & 1) === 1;
  }

  isEven() {
    return (this.words[0] & 1) === 0;
  }

  /*
   * Unsigned Comparison
   */

  ucmp(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    if (this.length < num.length)
      return -1;

    if (this.length > num.length)
      return 1;

    for (let i = this.length - 1; i >= 0; i--) {
      const a = this.words[i] | 0;
      const b = num.words[i] | 0;

      if (a === b)
        continue;

      return (a > b) - (a < b);
    }

    return 0;
  }

  ucmpn(num) {
    enforce(isSMI(num), 'num', 'smi');

    if (this.length > 1)
      return 1;

    const w = this.words[0] | 0;

    if (num < 0)
      num = -num;

    return (w > num) - (w < num);
  }

  /*
   * Number Theoretic Functions
   */

  legendre(num) {
    const red = HAS_BIGINT ? BN.red(num) : BN.mont(num);
    return this.toRed(red).redLegendre();
  }

  jacobi(num) {
    // See: A Binary Algorithm for the Jacobi Symbol
    //   J. Shallit, J. Sorenson
    //   Page 3, Section 3
    enforce(BN.isBN(num), 'num', 'bignum');

    if (num.isZero() || num.isEven())
      throw new Error('jacobi: `num` must be odd.');

    let a = this._cloneNormal();
    let b = num.clone();
    let j = 1;

    if (b.isNeg()) {
      if (a.isNeg())
        j = -1;
      b.ineg();
    }

    if (a.isNeg() || a.ucmp(b) >= 0)
      a.imod(b);

    while (!a.isZero()) {
      const bits = a._makeOdd();

      if (bits & 1) {
        const bmod8 = b.andln(7);

        if (bmod8 === 3 || bmod8 === 5)
          j = -j;
      }

      if (a.ucmp(b) < 0) {
        [a, b] = [b, a];

        if (a.andln(3) === 3 && b.andln(3) === 3)
          j = -j;
      }

      a._isub(a, b).iushrn(1);

      const bmod8 = b.andln(7);

      if (bmod8 === 3 || bmod8 === 5)
        j = -j;
    }

    if (b.cmpn(1) !== 0)
      return 0;

    return j;
  }

  kronecker(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    if (this.isZero())
      return num.ucmpn(1) === 0 ? 1 : 0;

    if (num.isZero())
      return this.ucmpn(1) === 0 ? 1 : 0;

    if (((this.words[0] | num.words[0]) & 1) === 0)
      return 0;

    const x = this;
    const y = num.clone();
    const bits = y._makeOdd();
    const table = [0, 1, 0, -1, 0, -1, 0, 1];

    let k = x.jacobi(y);

    if (bits & 1)
      k *= table[x.andln(7)];

    return k | 0;
  }

  igcd(num) {
    return this.gcd(num)._move(this);
  }

  gcd(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    if (this.isZero())
      return num.abs();

    if (num.isZero())
      return this.abs();

    let a = this.clone();
    let b = num.clone();

    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two.
    const shift = a._factor2(b);

    if (shift !== 0) {
      a.iushrn(shift);
      b.iushrn(shift);
    }

    for (;;) {
      a._makeOdd();
      b._makeOdd();

      const cmp = a.ucmp(b);

      if (cmp < 0) {
        // a > b
        [a, b] = [b, a];
      } else if (cmp === 0 || b.ucmpn(1) === 0) {
        // Break if a == b.
        // Break if b == 1 to avoid repeated subtraction.
        break;
      }

      a._isub(a, b);
    }

    return b.iushln(shift);
  }

  ilcm(num) {
    return this.lcm(num)._move(this);
  }

  lcm(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    if (this.isZero() || num.isZero())
      return new BN(0);

    return this.quo(this.gcd(num)).mul(num).iabs();
  }

  egcd(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    if (this.isZero()) {
      return [
        new BN(0),
        new BN(num.sign()),
        num.abs()
      ];
    }

    if (num.isZero()) {
      return [
        new BN(this.sign()),
        new BN(0),
        this.abs()
      ];
    }

    const x = this.clone();
    const y = num.clone();

    x.negative = 0;
    y.negative = 0;

    // A * x + B * y = x
    const A = new BN(1);
    const B = new BN(0);

    // C * x + D * y = y
    const C = new BN(0);
    const D = new BN(1);

    // Remove common factor of two.
    const g = x._factor2(y);

    if (g > 0) {
      x.iushrn(g);
      y.iushrn(g);
    }

    const xp = x.clone();
    const yp = y.clone();

    while (!x.isZero()) {
      let i = x._makeOdd();
      let j = y._makeOdd();

      while (i--) {
        if (A.isOdd() || B.isOdd()) {
          A.iadd(yp);
          B.isub(xp);
        }

        A.iushrn(1);
        B.iushrn(1);
      }

      while (j--) {
        if (C.isOdd() || D.isOdd()) {
          C.iadd(yp);
          D.isub(xp);
        }

        C.iushrn(1);
        D.iushrn(1);
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    if (this.negative !== 0)
      C.ineg();

    if (num.negative !== 0)
      D.ineg();

    return [C, D, y.iushln(g)];
  }

  iinvert(num) {
    return this.invert(num)._move(this);
  }

  invert(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    range(num.sign() > 0, 'invert');

    if (num.isOdd())
      return this._invertp(num);

    if (num.cmpn(1) === 0)
      throw new RangeError('Not invertible.');

    const [s,, g] = this.egcd(num);

    if (g.cmpn(1) !== 0)
      throw new RangeError('Not invertible.');

    return s.imod(num);
  }

  ifermat(num) {
    return this.fermat(num)._move(this);
  }

  fermat(num) {
    const red = HAS_BIGINT ? BN.red(num) : BN.mont(num);
    return this.toRed(red).redFermat().fromRed();
  }

  ipowm(y, m, mont) {
    return this.powm(y, m, mont)._move(this);
  }

  powm(y, m, mont) {
    const red = !HAS_BIGINT && mont ? BN.mont(m) : BN.red(m);
    return this.toRed(red).redPow(y).fromRed();
  }

  ipowmn(y, m, mont) {
    return this.powmn(y, m, mont)._move(this);
  }

  powmn(y, m, mont) {
    const red = mont ? BN.mont(m) : BN.red(m);
    return this.toRed(red).redPown(y).fromRed();
  }

  isqrtm(p) {
    return this.sqrtm(p)._move(this);
  }

  sqrtm(p) {
    enforce(BN.isBN(p), 'p', 'bignum');

    let red;

    if (p.andln(3) === 3 || p.andln(7) === 5) {
      // Probably not worth the setup.
      red = BN.red(p);
    } else {
      red = BN.mont(p);
    }

    return this.toRed(red).redSqrt().fromRed();
  }

  isqrtpq(p, q) {
    return this.sqrtpq(p, q)._move(this);
  }

  sqrtpq(p, q) {
    const sp = this.sqrtm(p);
    const sq = this.sqrtm(q);
    const [mp, mq] = p.egcd(q);
    const lhs = sq.mul(mp).mul(p);
    const rhs = sp.mul(mq).mul(q);
    const n = p.mul(q);

    return lhs.iadd(rhs).imod(n);
  }

  /*
   * Primality Testing
   */

  isPrime(rng, reps, limit) {
    enforce((reps >>> 0) === reps, 'reps', 'uint32');

    if (!this.isPrimeMR(rng, reps + 1, true))
      return false;

    if (!this.isPrimeLucas(limit))
      return false;

    return true;
  }

  isPrimeMR(rng, reps, force2 = false) {
    enforce((reps >>> 0) === reps, 'reps', 'uint32');
    enforce(reps > 0, 'reps', 'integer');
    enforce(typeof force2 === 'boolean', 'force2', 'boolean');

    const n = this;

    if (n.cmpn(7) < 0) {
      return n.cmpn(2) === 0
          || n.cmpn(3) === 0
          || n.cmpn(5) === 0;
    }

    if (n.isEven())
      return false;

    const nm1 = n.subn(1);
    const nm3 = nm1.subn(2);
    const k = nm1.zeroBits();
    const q = nm1.ushrn(k);

    const red = BN.red(n);
    const rnm1 = nm1.toRed(red);
    const rone = new BN(1).toRed(red);

next:
    for (let i = 0; i < reps; i++) {
      let x;

      if (i === reps - 1 && force2) {
        x = new BN(2);
      } else {
        x = BN.random(rng, 0, nm3);
        x.iaddn(2);
      }

      let y = x.toRed(red).redPow(q);

      if (y.cmp(rone) === 0 || y.cmp(rnm1) === 0)
        continue;

      for (let j = 1; j < k; j++) {
        y = y.redSqr();

        if (y.cmp(rnm1) === 0)
          continue next;

        if (y.cmp(rone) === 0)
          return false;
      }

      return false;
    }

    return true;
  }

  isPrimeLucas(limit = 0) {
    enforce((limit >>> 0) === limit, 'limit', 'uint32');

    const n = this;

    // Ignore 0 and 1.
    if (n.cmpn(1) <= 0)
      return false;

    // Two is the only even prime.
    if (n.isEven())
      return n.cmpn(2) === 0;

    let p = 3;

    for (;;) {
      if (p > 10000) {
        // Thought to be impossible.
        throw new Error(`Cannot find (D/n) = -1 for ${n.toString(10)}.`);
      }

      if (limit !== 0 && p > limit) {
        // Optional DoS limit.
        return false;
      }

      const d = new BN(p * p - 4);
      const j = d.jacobi(n);

      if (j === -1)
        break;

      if (j === 0)
        return n.cmpn(p + 2) === 0;

      if (p === 40) {
        if (n.isSquare())
          return false;
      }

      p += 1;
    }

    const s = n.addn(1);
    const r = s._makeOdd();

    let vk = new BN(2);
    let vk1 = new BN(p);

    for (let i = s.bitLength(); i >= 0; i--) {
      if (s.utestn(i)) {
        vk = vk.mul(vk1).isubn(p).imod(n);
        vk1 = vk1.sqr().isubn(2).imod(n);
      } else {
        vk1 = vk1.mul(vk).isubn(p).imod(n);
        vk = vk.sqr().isubn(2).imod(n);
      }
    }

    if (vk.cmpn(2) === 0 || vk.cmp(n.subn(2)) === 0) {
      const a = vk.muln(p).imod(n);
      const b = vk1.ushln(1).imod(n);

      if (a.cmp(b) === 0)
        return true;
    }

    for (let t = 0; t < r - 1; t++) {
      if (vk.isZero())
        return true;

      if (vk.cmpn(2) === 0)
        return false;

      vk = vk.sqr().isubn(2).imod(n);
    }

    return false;
  }

  /*
   * Twos Complement
   */

  toTwos(width) {
    if (this.negative !== 0)
      return this.abs().inotn(width).iaddn(1);

    return this.clone();
  }

  fromTwos(width) {
    enforce((width >>> 0) === width, 'width', 'uint32');
    range(width > 0, 'width');

    if (this.testn(width - 1))
      return this.notn(width).iaddn(1).ineg();

    return this.clone();
  }

  /*
   * Reduction Context
   */

  toRed(ctx) {
    enforce(ctx instanceof Red, 'ctx', 'reduction context');

    if (this.red)
      throw new Error('Already in reduction context.');

    return ctx.convertTo(this);
  }

  fromRed() {
    red(this.red, 'fromRed');
    return this.red.convertFrom(this);
  }

  forceRed(ctx) {
    enforce(ctx instanceof Red, 'ctx', 'reduction context');

    if (this.red) {
      if (!ctx.m.eq(this.red.m) || ctx.mont !== this.red.mont)
        throw new Error('Already in reduction context.');
    } else {
      range(this.negative === 0, 'red');
      range(this.ucmp(ctx.m) < 0, 'red');
    }

    return this.clone()._forceRed(ctx);
  }

  redIAdd(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redIAdd');
    return this.red.iadd(this, num);
  }

  redAdd(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redAdd');
    return this.red.add(this, num);
  }

  redIAddn(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redIAddn');
    return this.red.iaddn(this, num);
  }

  redAddn(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redAddn');
    return this.red.addn(this, num);
  }

  redISub(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redISub');
    return this.red.isub(this, num);
  }

  redSub(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redSub');
    return this.red.sub(this, num);
  }

  redISubn(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redISubn');
    return this.red.isubn(this, num);
  }

  redSubn(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redSubn');
    return this.red.subn(this, num);
  }

  redIMul(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redIMul');
    return this.red.imul(this, num);
  }

  redMul(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redMul');
    return this.red.mul(this, num);
  }

  redIMuln(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redIMuln');
    return this.red.imuln(this, num);
  }

  redMuln(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redMuln');
    return this.red.muln(this, num);
  }

  redIDiv(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redIDiv');
    return this.red.idiv(this, num);
  }

  redDiv(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redDiv');
    return this.red.div(this, num);
  }

  redIDivn(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redIDivn');
    return this.red.idivn(this, num);
  }

  redDivn(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redDivn');
    return this.red.divn(this, num);
  }

  redIPow(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redIPow');
    nonred(!num.red, 'redIPow');
    return this.red.ipow(this, num);
  }

  redPow(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redPow');
    nonred(!num.red, 'redPow');
    return this.red.pow(this, num);
  }

  redIPown(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redIPown');
    return this.red.ipown(this, num);
  }

  redPown(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redPown');
    return this.red.pown(this, num);
  }

  redISqr() {
    red(this.red, 'redISqr');
    return this.red.isqr(this);
  }

  redSqr() {
    red(this.red, 'redSqr');
    return this.red.sqr(this);
  }

  redISqrt() {
    red(this.red, 'redISqrt');
    return this.red.isqrt(this);
  }

  redSqrt() {
    red(this.red, 'redSqrt');
    return this.red.sqrt(this);
  }

  redIDivSqrt(v) {
    red(this.red, 'redIDivSqrt');
    return this.red.idivsqrt(this, v);
  }

  redDivSqrt(v) {
    red(this.red, 'redDivSqrt');
    return this.red.divsqrt(this, v);
  }

  redIsSquare() {
    red(this.red, 'redIsSquare');
    return this.red.isSquare(this);
  }

  redIShl(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redIShl');
    nonred(!num.red, 'redIShl');
    return this.red.ishl(this, num);
  }

  redShl(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redShl');
    nonred(!num.red, 'redShl');
    return this.red.shl(this, num);
  }

  redIShln(num) {
    enforce((num >>> 0) === num, 'num', 'uint32');
    red(this.red, 'redIShln');
    return this.red.ishln(this, num);
  }

  redShln(num) {
    enforce((num >>> 0) === num, 'num', 'uint32');
    red(this.red, 'redShln');
    return this.red.shln(this, num);
  }

  redINeg() {
    red(this.red, 'redINeg');
    return this.red.ineg(this);
  }

  redNeg() {
    red(this.red, 'redNeg');
    return this.red.neg(this);
  }

  redEq(num) {
    enforce(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redEq');
    return this.red.eq(this, num);
  }

  redEqn(num) {
    enforce(isSMI(num), 'num', 'smi');
    red(this.red, 'redEqn');
    return this.red.eqn(this, num);
  }

  redIsHigh() {
    red(this.red, 'redIsHigh');
    return this.red.isHigh(this);
  }

  redIsLow() {
    red(this.red, 'redIsLow');
    return this.red.isLow(this);
  }

  redIsOdd() {
    red(this.red, 'redIsOdd');
    return this.red.isOdd(this);
  }

  redIsEven() {
    red(this.red, 'redIsEven');
    return this.red.isEven(this);
  }

  redLegendre() {
    red(this.red, 'redLegendre');
    return this.red.legendre(this);
  }

  redJacobi() {
    red(this.red, 'redJacobi');
    return this.red.jacobi(this);
  }

  redKronecker() {
    red(this.red, 'redKronecker');
    return this.red.kronecker(this);
  }

  redIInvert() {
    red(this.red, 'redIInvert');
    return this.red.iinvert(this);
  }

  redInvert() {
    red(this.red, 'redInvert');
    return this.red.invert(this);
  }

  redIFermat() {
    red(this.red, 'redIFermat');
    return this.red.ifermat(this);
  }

  redFermat() {
    red(this.red, 'redFermat');
    return this.red.fermat(this);
  }

  /*
   * Internal
   */

  _move(dest) {
    dest.words = this.words;
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
    return dest;
  }

  _alloc(size) {
    while (this.words.length < size)
      this.words.push(0);

    return this;
  }

  _expand(size) {
    this._alloc(size);

    while (this.length < size)
      this.words[this.length++] = 0;

    return this;
  }

  _strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0)
      this.length -= 1;

    return this._normalize();
  }

  _normalize() {
    assert(this.length > 0);

    // -0 = 0
    if (this.length === 1 && this.words[0] === 0)
      this.negative = 0;

    return this;
  }

  _check() {
    // We never have a zero length number.
    assert(this.length > 0);

    // Cannot exceed array bounds.
    assert(this.length <= this.words.length);

    if (this.length === 1) {
      // Must be normalized.
      if (this.words[0] === 0)
        assert(this.negative === 0);
      return this;
    }

    // Must be stripped.
    assert(this.words[this.length - 1] !== 0);

    return this;
  }

  _invertp(p) {
    // Penk's right shift binary EGCD.
    //
    // See: The Art of Computer Programming,
    //      Volume 2, Seminumerical Algorithms
    //   Donald E. Knuth
    //   Exercise 4.5.2.39
    enforce(BN.isBN(p), 'p', 'bignum');
    range(p.sign() > 0, 'invert');
    assert(p.isOdd());

    if (p.cmpn(1) === 0)
      throw new RangeError('Not invertible.');

    const a = this.clone();
    const b = p.clone();
    const u = new BN(1);
    const v = new BN(0);

    if (a.isNeg() || a.ucmp(b) >= 0)
      a.imod(b);

    while (!a.isZero()) {
      let i = a._makeOdd();
      let j = b._makeOdd();

      while (i--) {
        if (u.isOdd())
          u._iadd(u, p);

        u.iushrn(1);
      }

      while (j--) {
        if (v.isOdd())
          v._iadd(v, p);

        v.iushrn(1);
      }

      if (a.ucmp(b) >= 0) {
        a._isub(a, b);
        if (u.ucmp(v) < 0) {
          u._isub(v, u);
          u._isub(p, u);
        } else {
          u._isub(u, v);
        }
      } else {
        b._isub(b, a);
        if (v.ucmp(u) < 0) {
          v._isub(u, v);
          v._isub(p, v);
        } else {
          v._isub(v, u);
        }
      }
    }

    if (b.cmpn(1) !== 0)
      throw new RangeError('Not invertible.');

    assert(v.negative === 0);
    assert(v.ucmp(p) < 0);

    return v;
  }

  _makeOdd() {
    const shift = this.zeroBits();

    if (shift > 0)
      this.iushrn(shift);

    return shift;
  }

  _factor2(num) {
    // Find common factor of two.
    // Expects inputs to be non-zero.
    if ((this.words[0] | num.words[0]) & 1)
      return 0;

    const len = Math.min(this.length, num.length);

    let r = 0;

    for (let i = 0; i < len; i++) {
      const b = zeroBits(this.words[i] | num.words[i]);

      r += b;

      if (b !== 26)
        break;
    }

    return r;
  }

  _cloneNormal() {
    return this.red ? this.fromRed() : this.clone();
  }

  _forceRed(ctx) {
    this.red = ctx;
    return this;
  }

  /*
   * Helpers
   */

  clone() {
    const copy = new BN();

    copy.words = new Array(this.length);

    for (let i = 0; i < this.length; i++)
      copy.words[i] = this.words[i];

    copy.length = this.length;
    copy.negative = this.negative;
    copy.red = this.red;

    return copy;
  }

  inject(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    this._alloc(num.length);

    for (let i = 0; i < num.length; i++)
      this.words[i] = num.words[i];

    this.length = num.length;
    this.negative = num.negative;
    this.red = num.red;

    return this;
  }

  set(num, endian) {
    return this.fromNumber(num, endian);
  }

  swap(num) {
    enforce(BN.isBN(num), 'num', 'bignum');

    const x = this;
    const y = num;

    [x.words, y.words] = [y.words, x.words];
    [x.length, y.length] = [y.length, x.length];
    [x.negative, y.negative] = [y.negative, x.negative];
    [x.red, y.red] = [y.red, x.red];

    return x;
  }

  reverse() {
    const neg = this.negative;

    this.fromBuffer(this.toBuffer('be'), 'le');
    this.negative = neg;

    return this;
  }

  byteLength() {
    return Math.ceil(this.bitLength() / 8);
  }

  bitLength() {
    const w = this.words[this.length - 1];
    const hi = countBits(w);
    return (this.length - 1) * 26 + hi;
  }

  zeroBits() {
    if (this.isZero())
      return 0;

    if (this.isOdd())
      return 0;

    let r = 0;

    for (let i = 0; i < this.length; i++) {
      const b = zeroBits(this.words[i]);

      r += b;

      if (b !== 26)
        break;
    }

    return r;
  }

  isSafe() {
    if (this.length <= 2)
      return true;

    if (this.length === 3 && this.words[2] === 0x01)
      return true;

    return false;
  }

  word(pos) {
    enforce((pos >>> 0) === pos, 'pos', 'uint32');

    if (pos >= this.length)
      return 0;

    return this.words[pos];
  }

  [custom]() {
    let prefix = 'BN';

    if (this.red)
      prefix = 'BN-R';

    return `<${prefix}: ${this.toString(10)}>`;
  }

  /*
   * Conversion
   */

  toNumber() {
    let num = this.words[0];

    if (this.length === 2) {
      num += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // Note: at this stage it is known that the top bit is set.
      num += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      throw new RangeError('Number can only safely store up to 53 bits.');
    }

    return this.negative !== 0 ? -num : num;
  }

  toDouble() {
    let num = 0;

    for (let i = this.length - 1; i >= 0; i--)
      num = (num * 0x4000000) + this.words[i];

    return this.negative !== 0 ? -num : num;
  }

  valueOf() {
    return this.toDouble();
  }

  toBigInt() {
    if (!HAS_BIGINT)
      throw new Error('BigInt is not supported!');

    const s52 = BigInt(52);
    const s26 = BigInt(26);

    let i = this.length - 1;
    let num = BigInt(0);

    for (; i >= 1; i -= 2) {
      const hi = this.words[i] * 0x4000000;
      const lo = this.words[i - 1];

      num = (num << s52) | BigInt(hi + lo);
    }

    if (i >= 0)
      num = (num << s26) | BigInt(this.words[0]);

    return this.negative !== 0 ? -num : num;
  }

  toBool() {
    return !this.isZero();
  }

  toString(base, padding) {
    base = getBase(base);

    if (padding == null)
      padding = 0;

    if (padding === 0)
      padding = 1;

    enforce((base >>> 0) === base, 'base', 'uint32');
    enforce((padding >>> 0) === padding, 'padding', 'uint32');

    if (base < 2 || base > 36)
      throw new RangeError('Base ranges between 2 and 36.');

    this._check();

    if (base === 16) {
      let out = '';
      let off = 0;
      let carry = 0;

      for (let i = 0; i < this.length; i++) {
        const w = this.words[i];
        const word = (((w << off) | carry) & 0xffffff).toString(16);

        carry = (w >>> (24 - off)) & 0xffffff;

        if (carry !== 0 || i !== this.length - 1)
          out = zeros[6 - word.length] + word + out;
        else
          out = word + out;

        off += 2;

        if (off >= 26) {
          off -= 26;
          i -= 1;
        }
      }

      if (carry !== 0)
        out = carry.toString(16) + out;

      while (out.length % padding !== 0)
        out = '0' + out;

      if (this.negative !== 0)
        out = '-' + out;

      return out;
    }

    const groupSize = groupSizes[base - 1];
    const groupBase = groupBases[base - 1];
    const c = this.clone();

    let out = '';

    c.negative = 0;

    while (!c.isZero()) {
      const r = c.remrn(groupBase).toString(base);

      c.iquon(groupBase);

      if (!c.isZero())
        out = zeros[groupSize - r.length] + r + out;
      else
        out = r + out;
    }

    if (this.isZero())
      out = '0';

    while (out.length % padding !== 0)
      out = '0' + out;

    if (this.negative !== 0)
      out = '-' + out;

    return out;
  }

  toJSON() {
    return this.toString(16, 2);
  }

  toArray(endian, length) {
    return this.toArrayLike(Array, endian, length);
  }

  toBuffer(endian, length) {
    return this.toArrayLike(Buffer, endian, length);
  }

  toArrayLike(ArrayType, endian, length) {
    if (endian == null)
      endian = 'be';

    if (length == null)
      length = 0;

    enforce(typeof ArrayType === 'function', 'ArrayType', 'function');
    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');
    enforce((length >>> 0) === length, 'length', 'uint32');

    this._check();

    const bytes = this.byteLength();
    const size = length || Math.max(1, bytes);

    if (bytes > size)
      throw new RangeError('Byte array longer than desired length.');

    const res = allocate(ArrayType, size);

    // See: https://github.com/indutny/bn.js/pull/222
    if (endian === 'be') {
      let pos = res.length - 1;
      let carry = 0;

      for (let i = 0; i < this.length; i++) {
        const shift = (i & 3) << 1;
        const word = (this.words[i] << shift) | carry;

        res[pos--] = word & 0xff;

        if (pos >= 0)
          res[pos--] = (word >>> 8) & 0xff;

        if (pos >= 0)
          res[pos--] = (word >>> 16) & 0xff;

        if (shift === 6) {
          if (pos >= 0)
            res[pos--] = (word >>> 24) & 0xff;

          carry = 0;
        } else {
          carry = word >>> 24;
        }
      }

      if (pos >= 0) {
        res[pos--] = carry;

        while (pos >= 0)
          res[pos--] = 0;

        carry = 0;
      }

      assert(carry === 0);
    } else {
      let pos = 0;
      let carry = 0;

      for (let i = 0; i < this.length; i++) {
        const shift = (i & 3) << 1;
        const word = (this.words[i] << shift) | carry;

        res[pos++] = word & 0xff;

        if (pos < res.length)
          res[pos++] = (word >>> 8) & 0xff;

        if (pos < res.length)
          res[pos++] = (word >>> 16) & 0xff;

        if (shift === 6) {
          if (pos < res.length)
            res[pos++] = (word >>> 24) & 0xff;

          carry = 0;
        } else {
          carry = word >>> 24;
        }
      }

      if (pos < res.length) {
        res[pos++] = carry;

        while (pos < res.length)
          res[pos++] = 0;

        carry = 0;
      }

      assert(carry === 0);
    }

    return res;
  }

  encode(endian, length) {
    return this.toBuffer(endian, length);
  }

  /*
   * Instantiation
   */

  of(num, endian) {
    return this.fromNumber(num, endian);
  }

  fromNumber(num, endian) {
    if (endian == null)
      endian = 'be';

    enforce(isInteger(num), 'num', 'integer');
    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');

    const neg = (num < 0) | 0;

    if (neg)
      num = -num;

    if (num < 0x4000000) {
      this.words[0] = num & 0x3ffffff;
      this.length = 1;
    } else if (num < 0x10000000000000) {
      this.words = [
        num & 0x3ffffff,
        (num / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      this.words = [
        num & 0x3ffffff,
        (num / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    this.negative = neg;

    if (endian === 'le')
      this.reverse();

    return this;
  }

  fromDouble(num, endian) {
    if (endian == null)
      endian = 'be';

    enforce(typeof num === 'number', 'num', 'double');
    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');

    if (!isFinite(num))
      num = 0;

    const neg = (num <= -1) | 0;

    if (num < 0)
      num = -num;

    num = Math.floor(num);

    this.words = [];

    while (num > 0) {
      const lo = num % 0x4000000;
      const hi = (num - lo) / 0x4000000;

      this.words.push(lo);

      num = hi;
    }

    if (this.words.length === 0)
      this.words.push(0);

    this.length = this.words.length;
    this.negative = neg;

    if (endian === 'le')
      this.reverse();

    return this;
  }

  fromBigInt(num, endian) {
    if (endian == null)
      endian = 'be';

    enforce(typeof num === 'bigint', 'num', 'bigint');
    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');

    if (!HAS_BIGINT)
      throw new Error('BigInt is not supported!');

    // You know the implementation has a
    // problem when strings are twice
    // as fast as bigints.
    const start = (num < BigInt(0)) | 0;

    this._fromHex(num.toString(16), start);
    this.negative = start;

    if (endian === 'le')
      this.reverse();

    return this;
  }

  fromBool(value) {
    enforce(typeof value === 'boolean', 'value', 'boolean');

    this.words[0] = value | 0;
    this.length = 1;
    this.negative = 0;

    return this;
  }

  fromString(str, base, endian) {
    if (base === 'le' || base === 'be')
      [base, endian] = [endian, base];

    base = getBase(base);

    if (endian == null)
      endian = 'be';

    enforce(typeof str === 'string', 'string', 'string');
    enforce((base >>> 0) === base, 'base', 'uint32');
    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');

    if (base < 2 || base > 36)
      throw new Error('Base ranges between 2 and 36.');

    str = str.replace(/\s+/g, '');

    let start = 0;

    if (str.length > 0 && str.charCodeAt(0) === 0x2d)
      start = 1;

    if (base === 16)
      this._fromHex(str, start);
    else
      this._fromBase(str, base, start);

    this.negative = start;

    this._normalize();

    if (endian === 'le')
      this.reverse();

    return this;
  }

  _fromHex(str, start) {
    this.length = Math.max(2, Math.ceil((str.length - start) / 6));
    this.words = new Array(this.length);

    for (let i = 0; i < this.length; i++)
      this.words[i] = 0;

    // Scan 24-bit chunks and add them to the number.
    let off = 0;
    let i = str.length - 6;
    let j = 0;

    for (; i >= start; i -= 6) {
      const w = parseHex(str, i, i + 6);

      this.words[j] |= (w << off) & 0x3ffffff;

      // `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb.
      this.words[j + 1] |= (w >>> (26 - off)) & 0x3fffff;

      off += 24;

      if (off >= 26) {
        off -= 26;
        j += 1;
      }
    }

    if (i + 6 !== start) {
      const w = parseHex(str, start, i + 6);

      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= (w >>> (26 - off)) & 0x3fffff;
    }

    return this._strip();
  }

  _fromBase(str, base, start) {
    // Initialize as zero.
    this.words[0] = 0;
    this.length = 1;
    this.negative = 0;

    // Find length of limb in base.
    let limbLen = 0;
    let limbPow = 1;

    for (; limbPow <= 0x3ffffff; limbPow *= base)
      limbLen += 1;

    limbLen -= 1;
    limbPow = (limbPow / base) | 0;

    const total = str.length - start;
    const mod = total % limbLen;
    const end = Math.min(total, total - mod) + start;

    let i = start;

    for (; i < end; i += limbLen) {
      const word = parseBase(str, i, i + limbLen, base);

      this.imuln(limbPow);
      this._iaddn(word);
    }

    if (mod !== 0) {
      const pow = Math.pow(base, mod);
      const word = parseBase(str, i, str.length, base);

      this.imuln(pow);
      this._iaddn(word);
    }

    return this;
  }

  fromJSON(json) {
    if (BN.isBN(json)) {
      if (json.red)
        return json.fromRed();

      return json.clone();
    }

    if (Array.isArray(json)) {
      for (const chunk of json)
        enforce(typeof chunk === 'string', 'chunk', 'string');

      json = json.join('');
    }

    return this.fromString(json, 16);
  }

  fromBN(num) {
    return this.inject(num);
  }

  fromArray(data, endian) {
    enforce(Array.isArray(data), 'data', 'array');
    return this.fromArrayLike(data, endian);
  }

  fromBuffer(data, endian) {
    enforce((data != null && data._isBuffer === true), 'data', 'buffer');
    return this.fromArrayLike(data, endian);
  }

  fromArrayLike(data, endian) {
    if (endian == null)
      endian = 'be';

    enforce(data && (data.length >>> 0) === data.length, 'data', 'array-like');
    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');

    if (data.length === 0) {
      this.words[0] = 0;
      this.length = 1;
      this.negative = 0;
      return this;
    }

    this.length = Math.max(2, Math.ceil(data.length / 3));
    this.words = new Array(this.length);
    this.negative = 0;

    for (let i = 0; i < this.length; i++)
      this.words[i] = 0;

    const left = data.length % 3;

    let off = 0;
    let j = 0;
    let w = 0;

    if (endian === 'be') {
      for (let i = data.length - 1; i >= 2; i -= 3) {
        const w = data[i] | (data[i - 1] << 8) | (data[i - 2] << 16);

        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;

        off += 24;

        if (off >= 26) {
          off -= 26;
          j += 1;
        }
      }

      switch (left) {
        case 2:
          w = data[1] | (data[0] << 8);
          break;
        case 1:
          w = data[0];
          break;
      }
    } else {
      const len = data.length - left;

      for (let i = 0; i < len; i += 3) {
        const w = data[i] | (data[i + 1] << 8) | (data[i + 2] << 16);

        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;

        off += 24;

        if (off >= 26) {
          off -= 26;
          j += 1;
        }
      }

      switch (left) {
        case 2:
          w = data[len] | (data[len + 1] << 8);
          break;
        case 1:
          w = data[len];
          break;
      }
    }

    if (left > 0) {
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
    }

    return this._strip();
  }

  decode(data, endian) {
    return this.fromBuffer(data, endian);
  }

  from(num, base, endian) {
    if (num == null)
      return this;

    if (base === 'le' || base === 'be')
      [base, endian] = [endian, base];

    if (typeof num === 'number')
      return this.fromNumber(num, endian);

    if (typeof num === 'bigint')
      return this.fromBigInt(num, endian);

    if (typeof num === 'string')
      return this.fromString(num, base, endian);

    if (typeof num === 'object') {
      if (BN.isBN(num))
        return this.fromBN(num, endian);

      if ((num.length >>> 0) === num.length)
        return this.fromArrayLike(num, endian);
    }

    if (typeof num === 'boolean')
      return this.fromBool(num);

    throw new TypeError('Non-numeric object passed to BN.');
  }

  /*
   * Static Methods
   */

  static min(...args) {
    let min = null;

    for (const num of args) {
      enforce(BN.isBN(num), 'num', 'bignum');

      if (!min || num.cmp(min) < 0)
        min = num;
    }

    return min || new BN(0);
  }

  static max(...args) {
    let max = null;

    for (const num of args) {
      enforce(BN.isBN(num), 'num', 'bignum');

      if (!max || num.cmp(max) > 0)
        max = num;
    }

    return max || new BN(0);
  }

  static cmp(a, b) {
    enforce(BN.isBN(a), 'a', 'bignum');
    return a.cmp(b);
  }

  static ucmp(a, b) {
    enforce(BN.isBN(a), 'a', 'bignum');
    return a.ucmp(b);
  }

  static red(num) {
    return new Red(num);
  }

  static barrett(num) {
    return new Barrett(num);
  }

  static mont(num) {
    return new Mont(num);
  }

  static _prime(name) {
    if (primes[name])
      return primes[name];

    let prime;

    if (name === 'p192')
      prime = new P192();
    else if (name === 'p224')
      prime = new P224();
    else if (name === 'p521')
      prime = new P521();
    else if (name === 'k256')
      prime = new K256();
    else if (name === 'p251')
      prime = new P251();
    else if (name === 'p25519')
      prime = new P25519();
    else if (name === 'p448')
      prime = new P448();
    else
      throw new Error(`Unknown prime: "${name}".`);

    primes[name] = prime;

    return prime;
  }

  static prime(name) {
    return BN._prime(name).p.clone();
  }

  static pow(num, exp) {
    if (num === 2)
      return BN.shift(1, exp);

    return new BN().fromNumber(num).pown(exp);
  }

  static shift(num, bits) {
    if (num === 1)
      return new BN(0).usetn(bits, 1);

    return new BN().fromNumber(num).ishln(bits);
  }

  static mask(bits) {
    return BN.shift(1, bits).isubn(1);
  }

  static randomBits(rng, bits) {
    enforce(rng != null, 'rng', 'rng');
    enforce((bits >>> 0) === bits, 'bits', 'uint32');

    if (typeof rng === 'object') {
      enforce(typeof rng.randomBytes === 'function', 'rng', 'rng');

      const size = (bits + 7) >>> 3;
      const total = size * 8;
      const bytes = rng.randomBytes(size);

      enforce((bytes != null && bytes._isBuffer === true), 'bytes', 'buffer');

      if (bytes.length !== size)
        throw new RangeError('Invalid number of bytes returned from RNG.');

      const num = BN.fromBuffer(bytes);

      if (total > bits)
        num.iushrn(total - bits);

      return num;
    }

    enforce(typeof rng === 'function', 'rng', 'rng');

    const num = rng(bits);

    enforce(BN.isBN(num), 'num', 'bignum');
    range(num.negative === 0, 'RNG');
    nonred(!num.red, 'RNG');

    if (num.bitLength() > bits)
      throw new RangeError('Invalid number of bits returned from RNG.');

    return num;
  }

  static random(rng, min, max) {
    min = BN.cast(min, 16);
    max = BN.cast(max, 16);

    if (min.cmp(max) > 0)
      throw new RangeError('Minimum cannot be greater than maximum.');

    const space = max.sub(min).iabs();
    const bits = space.bitLength();

    if (bits === 0)
      return min.clone();

    for (;;) {
      const num = BN.randomBits(rng, bits);

      // Maximum is _exclusive_!
      if (num.cmp(space) >= 0)
        continue;

      // Minimum is _inclusive_!
      num.iadd(min);

      return num;
    }
  }

  static of(num, endian) {
    return new BN().of(num, endian);
  }

  static fromNumber(num, endian) {
    return new BN().fromNumber(num, endian);
  }

  static fromDouble(num, endian) {
    return new BN().fromDouble(num, endian);
  }

  static fromBigInt(num, endian) {
    return new BN().fromBigInt(num, endian);
  }

  static fromBool(value) {
    return new BN().fromBool(value);
  }

  static fromString(str, base, endian) {
    return new BN().fromString(str, base, endian);
  }

  static fromJSON(json) {
    return new BN().fromJSON(json);
  }

  static fromBN(num) {
    return new BN().fromBN(num);
  }

  static fromArray(data, endian) {
    return new BN().fromArray(data, endian);
  }

  static fromBuffer(data, endian) {
    return new BN().fromBuffer(data, endian);
  }

  static fromArrayLike(data, endian) {
    return new BN().fromArrayLike(data, endian);
  }

  static decode(data, endian) {
    return new BN().decode(data, endian);
  }

  static from(num, base, endian) {
    return new BN().from(num, base, endian);
  }

  static cast(num, base, endian) {
    if (BN.isBN(num))
      return num;

    return new BN(num, base, endian);
  }

  static isBN(obj) {
    return obj instanceof BN;
  }
}

/*
 * Static
 */

BN.BN = BN;
BN.wordSize = 26;
BN.native = 0;

/**
 * Prime
 */

class Prime {
  constructor(name, p) {
    // P = 2^N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = BN.shift(1, this.n).isub(this.p);
    this.lo = this.p.clone();
    this.one = this.p.clone();
  }

  ireduce(num) {
    // Assumes that `num` is less than `P^2`:
    // num = HI * (2^N - K) + HI * K + LO = HI * K + LO (mod P)
    const neg = num.negative !== 0;

    // Track bits.
    let bits = num.bitLength();

    // Must be less than P^2.
    assert(bits <= this.n * 2);

    // Ensure positive.
    num.negative = 0;

    // Reduce.
    while (bits > this.n) {
      // lo = num & ((1 << n) - 1)
      // num = num >> n
      this.split(num, this.lo);

      // num = num * K
      this.imulK(num);

      // num = num + lo
      num._iadd(num, this.lo);

      // bits = bitlen(num)
      bits = num.bitLength();
    }

    // Final reduction.
    const cmp = bits < this.n ? -1 : num.ucmp(this.p);

    if (cmp === 0) {
      num.words[0] = 0;
      num.length = 1;
    } else if (cmp > 0) {
      num._isub(num, this.p);
    } else {
      // Note: we shouldn't need to strip here.
    }

    // Adjust sign.
    if (neg && !num.isZero())
      num._isub(this.p, num);

    return num;
  }

  split(input, out) {
    input._split(this.n, out);
  }

  imulK(num) {
    return num.imul(this.k);
  }

  pm2(x1) {
    // Exponent: p - 2
    throw new Error('Not implemented.');
  }

  fermat(x) {
    return this.pm2(x);
  }
}

/**
 * Prime (3 mod 4)
 */

class Prime34 extends Prime {
  constructor(name, p) {
    super(name, p);
  }

  pm3d4(x1) {
    // Exponent: (p - 3) / 4
    throw new Error('Not implemented.');
  }

  pp1d4(x1) {
    // Exponent: (p + 1) / 4
    throw new Error('Not implemented.');
  }

  sqrt(x) {
    // r = x^((p + 1) / 4) mod p
    const {red} = x;
    const r = this.pp1d4(x);

    if (!red.sqr(r).eq(x))
      throw new SquareRootError(r);

    return r;
  }

  divsqrt(u, v) {
    // x = u^3 * v * (u^5 * v^3)^((p - 3) / 4) mod p
    const {red} = u;
    const u2 = red.sqr(u);
    const u3 = red.mul(u2, u);
    const u5 = red.mul(u3, u2);
    const v3 = red.mul(red.sqr(v), v);
    const p = this.pm3d4(red.mul(u5, v3));
    const x = red.mul(red.mul(u3, v), p);
    const c = red.mul(v, red.sqr(x));

    if (c.eq(u))
      return x;

    throw new SquareRootError(x);
  }
}

/**
 * Prime (5 mod 8)
 */

class Prime58 extends Prime {
  constructor(name, p, sm1) {
    super(name, p);

    this.sm1 = new BN(sm1, 16);
  }

  pm5d8(x1) {
    // Exponent: (p - 5) / 8
    throw new Error('Not implemented.');
  }

  pp3d8(x1) {
    // Exponent: (p + 3) / 8
    throw new Error('Not implemented.');
  }

  sqrt(x) {
    // r = x^((p + 3) / 8) mod p
    const {red} = x;
    const sm1 = this.sm1._forceRed(red);
    const r = this.pp3d8(x);

    if (red.sqr(r).eq(x))
      return r;

    const c = red.mul(r, sm1);

    if (red.sqr(c).eq(x))
      return c;

    throw new SquareRootError(r);
  }

  divsqrt(u, v) {
    // x = u * v^3 * (u * v^7)^((p - 5) / 8) mod p
    const {red} = u;
    const sm1 = this.sm1._forceRed(red);
    const v3 = red.mul(red.sqr(v), v);
    const v7 = red.mul(red.sqr(v3), v);
    const p = this.pm5d8(red.mul(u, v7));
    const x = red.mul(red.mul(u, v3), p);
    const c = red.mul(v, red.sqr(x));

    if (c.eq(u))
      return x;

    const mc = red.ineg(c);

    if (mc.eq(u))
      return red.mul(x, sm1);

    if (mc.eq(red.mul(u, sm1)))
      throw new SquareRootError(red.mul(x, sm1));

    throw new SquareRootError(x);
  }
}

/**
 * Prime (1 mod 16)
 */

class Prime116 extends Prime {
  constructor(name, p, g) {
    super(name, p);

    this.g = new BN(g, 16);
    this.z = this.p.subn(1).zeroBits();
  }

  powS(x1) {
    // Exponent: (p - 1) / 2^k
    throw new Error('Not implemented.');
  }

  powE(x1) {
    // Exponent: (s + 1) / 2
    throw new Error('Not implemented.');
  }

  sqrt(x) {
    // Tonelli-Shanks (variable time).
    //
    // Constants:
    //
    //   k = factors of 2 for (p - 1)
    //   s = (p - 1) / 2^k
    //   e = (s + 1) / 2
    //   n = first non-square in F(p)
    //
    // Algorithm:
    //
    //   g = n^s mod p
    //   y = x^e mod p
    //   b = x^s mod p
    //
    //   loop:
    //     t = b
    //     m = 0
    //
    //     while t != 1:
    //       t = t^2 mod p
    //       m += 1
    //
    //     if m == 0:
    //       break
    //
    //     if m >= k:
    //       fail
    //
    //     t = g^(2^(k - m - 1)) mod p
    //     g = t^2 mod p
    //     y = y * t mod p
    //     b = b * g mod p
    //     k = m
    //
    //   return y
    //
    const {red} = x;

    switch (red.jacobi(x)) {
      case -1:
        throw new SquareRootError(x);
      case 0:
        return x.clone();
      case 1:
        break;
    }

    let g = this.g._forceRed(red);
    let y = this.powE(x);
    let b = this.powS(x);
    let k = this.z;

    for (;;) {
      let t = b;
      let m = 0;

      while (t.cmpn(1) !== 0 && m < k) {
        t = red.sqr(t);
        m += 1;
      }

      if (m === 0)
        break;

      assert(m < k);

      t = red.sqrn(g, k - m - 1);
      g = red.sqr(t);
      y = red.mul(y, t);
      b = red.mul(b, g);
      k = m;
    }

    return y;
  }

  divsqrt(u, v) {
    const {red} = u;

    if (v.isZero())
      throw new SquareRootError(v);

    return this.sqrt(red.div(u, v));
  }
}

/**
 * P192
 */

class P192 extends Prime34 {
  constructor() {
    // 2^192 - 2^64 - 1 (= 3 mod 4)
    super('p192', 'ffffffff ffffffff ffffffff fffffffe'
                + 'ffffffff ffffffff');
  }

  imulK(num) {
    // K = 0x10000000000000001
    // K = 2^64 + 1
    const one = this.one.inject(num);
    return num.iushln(64)._iadd(num, one);
  }

  core(x1) {
    // Exponent: (p - 3) / 4
    // Bits: 127x1 1x0 62x1
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const x3 = red.sqrnmul(x2, 1, x1);
    const x6 = red.sqrnmul(x3, 3, x3);
    const x12 = red.sqrnmul(x6, 6, x6);
    const x24 = red.sqrnmul(x12, 12, x12);
    const x30 = red.sqrnmul(x24, 6, x6);
    const x31 = red.sqrnmul(x30, 1, x1);
    const x62 = red.sqrnmul(x31, 31, x31);
    const x124 = red.sqrnmul(x62, 62, x62);
    const x127 = red.sqrnmul(x124, 3, x3);
    const r0 = red.sqrn(x127, 1);
    const r1 = red.sqrnmul(r0, 62, x62);

    return r1;
  }

  pm3d4(x1) {
    // Exponent: (p - 3) / 4
    // Bits: 127x1 1x0 62x1
    return this.core(x1);
  }

  pm2(x1) {
    // Exponent: p - 2
    // Bits: 127x1 1x0 62x1 1x0 1x1
    const {red} = x1;
    const r0 = this.core(x1);
    const r1 = red.sqrn(r0, 1);
    const r2 = red.sqrnmul(r1, 1, x1);

    return r2;
  }

  pp1d4(x1) {
    // Exponent: (p + 1) / 4
    // Bits: 128x1 62x0
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const x4 = red.sqrnmul(x2, 2, x2);
    const x8 = red.sqrnmul(x4, 4, x4);
    const x16 = red.sqrnmul(x8, 8, x8);
    const x32 = red.sqrnmul(x16, 16, x16);
    const x64 = red.sqrnmul(x32, 32, x32);
    const x128 = red.sqrnmul(x64, 64, x64);
    const r0 = red.sqrn(x128, 62);

    return r0;
  }
}

/**
 * P224
 */

class P224 extends Prime116 {
  constructor() {
    // 2^224 - 2^96 + 1 (1 mod 16)
    super('p224', 'ffffffff ffffffff ffffffff ffffffff'
                + '00000000 00000000 00000001',
                  '6a0fec67 8598a792 0c55b2d4 0b2d6ffb'
                + 'bea3d8ce f3fb3632 dc691b74');
  }

  imulK(num) {
    // K = 0xffffffffffffffffffffffff
    // K = 2^96 - 1
    const one = this.one.inject(num);
    return num.iushln(96)._isub(num, one);
  }

  powS(x1) {
    // Exponent: 2^128 - 1
    // Bits: 128x1
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const x4 = red.sqrnmul(x2, 2, x2);
    const x8 = red.sqrnmul(x4, 4, x4);
    const x16 = red.sqrnmul(x8, 8, x8);
    const x32 = red.sqrnmul(x16, 16, x16);
    const x64 = red.sqrnmul(x32, 32, x32);
    const x128 = red.sqrnmul(x64, 64, x64);

    return x128;
  }

  powE(x1) {
    // Exponent: 2^127
    // Bits: 1x1 127x0
    const {red} = x1;
    const r0 = red.sqrn(x1, 127);

    return r0;
  }

  pm2(x1) {
    // Exponent: p - 2
    // Bits: 127x1 1x0 96x1
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const x3 = red.sqrnmul(x2, 1, x1);
    const x6 = red.sqrnmul(x3, 3, x3);
    const x12 = red.sqrnmul(x6, 6, x6);
    const x24 = red.sqrnmul(x12, 12, x12);
    const x48 = red.sqrnmul(x24, 24, x24);
    const x96 = red.sqrnmul(x48, 48, x48);
    const x120 = red.sqrnmul(x96, 24, x24);
    const x126 = red.sqrnmul(x120, 6, x6);
    const x127 = red.sqrnmul(x126, 1, x1);
    const r0 = red.sqrn(x127, 1);
    const r1 = red.sqrnmul(r0, 96, x96);

    return r1;
  }
}

/**
 * P521
 */

class P521 extends Prime34 {
  constructor() {
    // 2^521 - 1 (= 3 mod 4)
    super('p521', '000001ff ffffffff ffffffff ffffffff'
                + 'ffffffff ffffffff ffffffff ffffffff'
                + 'ffffffff ffffffff ffffffff ffffffff'
                + 'ffffffff ffffffff ffffffff ffffffff'
                + 'ffffffff');
  }

  imulK(num) {
    // K = 0x01
    return num;
  }

  core(x1) {
    // Exponent: 2^519 - 1
    // Bits: 519x1
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const x3 = red.sqrnmul(x2, 1, x1);
    const x6 = red.sqrnmul(x3, 3, x3);
    const x7 = red.sqrnmul(x6, 1, x1);
    const x8 = red.sqrnmul(x7, 1, x1);
    const x16 = red.sqrnmul(x8, 8, x8);
    const x32 = red.sqrnmul(x16, 16, x16);
    const x64 = red.sqrnmul(x32, 32, x32);
    const x128 = red.sqrnmul(x64, 64, x64);
    const x256 = red.sqrnmul(x128, 128, x128);
    const x512 = red.sqrnmul(x256, 256, x256);
    const x519 = red.sqrnmul(x512, 7, x7);

    return x519;
  }

  pm3d4(x1) {
    // Exponent: 2^519 - 1
    // Bits: 519x1
    return this.core(x1);
  }

  pm2(x1) {
    // Exponent: p - 2
    // Bits: 519x1 1x0 1x1
    const {red} = x1;
    const r0 = this.core(x1);
    const r1 = red.sqrn(r0, 1);
    const r2 = red.sqrnmul(r1, 1, x1);

    return r2;
  }

  pp1d4(x1) {
    // Exponent: (p + 1) / 4
    // Bits: 1x1 519x0
    const {red} = x1;
    const r0 = red.sqrn(x1, 519);

    return r0;
  }
}

/**
 * K256
 */

class K256 extends Prime34 {
  constructor() {
    // 2^256 - 2^32 - 977 (= 3 mod 4)
    super('k256', 'ffffffff ffffffff ffffffff ffffffff'
                + 'ffffffff ffffffff fffffffe fffffc2f');
  }

  split(input, output) {
    // 256 = 9 * 26 + 22
    const mask = 0x3fffff;
    const len = Math.min(input.length, 9);

    output._alloc(len + 1);

    for (let i = 0; i < len; i++)
      output.words[i] = input.words[i];

    output.length = len;

    if (input.length <= 9) {
      output._strip();
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs.
    let prev = input.words[9];
    let i = 10;

    output.words[output.length++] = prev & mask;
    output._strip();

    for (; i < input.length; i++) {
      const next = input.words[i] | 0;

      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);

      prev = next;
    }

    prev >>>= 22;

    input.words[i - 10] = prev;

    if (prev === 0 && input.length > 10)
      input.length -= 10;
    else
      input.length -= 9;

    input._strip(); // Unsure if we need this.
  }

  imulK(num) {
    // K = 0x1000003d1 = [0x40, 0x3d1]
    // K = 2^32 + 977
    num._expand(num.length + 2);

    // Bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    let lo = 0;

    for (let i = 0; i < num.length; i++) {
      const w = num.words[i];

      lo += w * 0x3d1;

      num.words[i] = lo & 0x3ffffff;

      lo = w * 0x40 + Math.floor(lo / 0x4000000);
    }

    // Fast length reduction.
    if (num.words[num.length - 1] === 0) {
      num.length -= 1;
      if (num.words[num.length - 1] === 0)
        num.length -= 1;
    }

    // Note: we shouldn't need to strip here.
    return num;
  }

  core(x1, x2) {
    // Exponent: (p - 47) / 64
    // Bits: 223x1 1x0 22x1 4x0
    const {red} = x1;
    const x3 = red.sqrnmul(x2, 1, x1);
    const x6 = red.sqrnmul(x3, 3, x3);
    const x9 = red.sqrnmul(x6, 3, x3);
    const x11 = red.sqrnmul(x9, 2, x2);
    const x22 = red.sqrnmul(x11, 11, x11);
    const x44 = red.sqrnmul(x22, 22, x22);
    const x88 = red.sqrnmul(x44, 44, x44);
    const x176 = red.sqrnmul(x88, 88, x88);
    const x220 = red.sqrnmul(x176, 44, x44);
    const x223 = red.sqrnmul(x220, 3, x3);
    const r0 = red.sqrn(x223, 1);
    const r1 = red.sqrnmul(r0, 22, x22);
    const r2 = red.sqrn(r1, 4);

    return r2;
  }

  pm3d4(x1) {
    // Exponent: (p - 3) / 4
    // Bits: 223x1 1x0 22x1 4x0 1x1 1x0 2x1
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const r2 = this.core(x1, x2);
    const r3 = red.sqrnmul(r2, 1, x1);
    const r4 = red.sqrn(r3, 1);
    const r5 = red.sqrnmul(r4, 2, x2);

    return r5;
  }

  pm2(x1) {
    // Exponent: p - 2
    // Bits: 223x1 1x0 22x1 4x0 1x1 1x0 2x1 1x0 1x1
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const r2 = this.core(x1, x2);
    const r3 = red.sqrnmul(r2, 1, x1);
    const r4 = red.sqrn(r3, 1);
    const r5 = red.sqrnmul(r4, 2, x2);
    const r6 = red.sqrn(r5, 1);
    const r7 = red.sqrnmul(r6, 1, x1);

    return r7;
  }

  pp1d4(x1) {
    // Exponent: (p + 1) / 4
    // Bits: 223x1 1x0 22x1 4x0 2x1 2x0
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const r2 = this.core(x1, x2);
    const r3 = red.sqrnmul(r2, 2, x2);
    const r4 = red.sqrn(r3, 2);

    return r4;
  }
}

/**
 * P251
 */

class P251 extends Prime34 {
  constructor() {
    // 2^251 - 9
    super('p251', '07ffffff ffffffff ffffffff ffffffff'
                + 'ffffffff ffffffff ffffffff fffffff7');
  }

  imulK(num) {
    // K = 0x09
    if (num.isZero())
      return num;

    let carry = 0;

    for (let i = 0; i < num.length; i++) {
      const w = num.words[i] * 0x09 + carry;

      carry = w >>> 26;

      num.words[i] = w & 0x3ffffff;
    }

    if (carry !== 0) {
      num._alloc(num.length + 1);
      num.words[num.length++] = carry;
    }

    // Note: we shouldn't need to strip here.
    return num;
  }

  core(x1) {
    // Exponent: 2^247 - 1
    // Bits: 247x1
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const x3 = red.sqrnmul(x2, 1, x1);
    const x6 = red.sqrnmul(x3, 3, x3);
    const x12 = red.sqrnmul(x6, 6, x6);
    const x24 = red.sqrnmul(x12, 12, x12);
    const x48 = red.sqrnmul(x24, 24, x24);
    const x96 = red.sqrnmul(x48, 48, x48);
    const x192 = red.sqrnmul(x96, 96, x96);
    const x240 = red.sqrnmul(x192, 48, x48);
    const x246 = red.sqrnmul(x240, 6, x6);
    const x247 = red.sqrnmul(x246, 1, x1);

    return x247;
  }

  pm3d4(x1) {
    // Exponent: (p - 3) / 4
    // Bits: 247x1 1x0 1x1
    const {red} = x1;
    const r0 = this.core(x1);
    const r1 = red.sqrn(r0, 1);
    const r2 = red.sqrnmul(r1, 1, x1);

    return r2;
  }

  pm2(x1) {
    // Exponent: p - 2
    // Bits: 247x1 1x0 1x1 1x0 1x1
    const {red} = x1;
    const r0 = this.core(x1);
    const r1 = red.sqrn(r0, 1);
    const r2 = red.sqrnmul(r1, 1, x1);
    const r3 = red.sqrn(r2, 1);
    const r4 = red.sqrnmul(r3, 1, x1);

    return r4;
  }

  pp1d4(x1) {
    // Exponent: (p + 1) / 4
    // Bits: 248x1 1x0
    const {red} = x1;
    const r0 = this.core(x1);
    const r1 = red.sqrnmul(r0, 1, x1);
    const r2 = red.sqrn(r1, 1);

    return r2;
  }
}

/**
 * P25519
 */

class P25519 extends Prime58 {
  constructor() {
    // 2^255 - 19 (= 5 mod 8)
    super('p25519', '7fffffff ffffffff ffffffff ffffffff'
                  + 'ffffffff ffffffff ffffffff ffffffed',
                    '2b832480 4fc1df0b 2b4d0099 3dfbd7a7'
                  + '2f431806 ad2fe478 c4ee1b27 4a0ea0b0');
  }

  imulK(num) {
    // K = 0x13
    let carry = 0;

    for (let i = 0; i < num.length; i++) {
      const w = num.words[i] * 0x13 + carry;

      carry = w >>> 26;

      num.words[i] = w & 0x3ffffff;
    }

    if (carry !== 0) {
      num._alloc(num.length + 1);
      num.words[num.length++] = carry;
    }

    // Note: we shouldn't need to strip here.
    return num;
  }

  core(x1, x2) {
    // Exponent: 2^250 - 1
    // Bits: 250x1
    const {red} = x1;
    const x4 = red.sqrnmul(x2, 2, x2);
    const x5 = red.sqrnmul(x4, 1, x1);
    const x10 = red.sqrnmul(x5, 5, x5);
    const x20 = red.sqrnmul(x10, 10, x10);
    const x40 = red.sqrnmul(x20, 20, x20);
    const x50 = red.sqrnmul(x40, 10, x10);
    const x100 = red.sqrnmul(x50, 50, x50);
    const x200 = red.sqrnmul(x100, 100, x100);
    const x250 = red.sqrnmul(x200, 50, x50);

    return x250;
  }

  pm5d8(x1) {
    // Exponent: (p - 5) / 8
    // Bits: 250x1 1x0 1x1
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const r0 = this.core(x1, x2);
    const r1 = red.sqrn(r0, 1);
    const r2 = red.sqrnmul(r1, 1, x1);

    return r2;
  }

  pm2(x1) {
    // Exponent: p - 2
    // Bits: 250x1 1x0 1x1 1x0 2x1
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const r0 = this.core(x1, x2);
    const r1 = red.sqrn(r0, 1);
    const r2 = red.sqrnmul(r1, 1, x1);
    const r3 = red.sqrn(r2, 1);
    const r4 = red.sqrnmul(r3, 2, x2);

    return r4;
  }

  pp3d8(x1) {
    // Exponent: (p + 3) / 8
    // Bits: 251x1 1x0
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const r0 = this.core(x1, x2);
    const r1 = red.sqrnmul(r0, 1, x1);
    const r2 = red.sqrn(r1, 1);

    return r2;
  }
}

/**
 * P448
 */

class P448 extends Prime34 {
  constructor() {
    // 2^448 - 2^224 - 1 (= 3 mod 4)
    super('p448', 'ffffffff ffffffff ffffffff ffffffff'
                + 'ffffffff ffffffff fffffffe ffffffff'
                + 'ffffffff ffffffff ffffffff ffffffff'
                + 'ffffffff ffffffff');
  }

  imulK(num) {
    // K = 0x100000000000000000000000000000000000000000000000000000001
    // K = 2^224 + 1
    const one = this.one.inject(num);
    return num.iushln(224)._iadd(num, one);
  }

  core(x1, x2) {
    // Exponent: 2^222 - 1
    // Bits: 222x1
    const {red} = x1;
    const x3 = red.sqrnmul(x2, 1, x1);
    const x6 = red.sqrnmul(x3, 3, x3);
    const x9 = red.sqrnmul(x6, 3, x3);
    const x11 = red.sqrnmul(x9, 2, x2);
    const x22 = red.sqrnmul(x11, 11, x11);
    const x44 = red.sqrnmul(x22, 22, x22);
    const x88 = red.sqrnmul(x44, 44, x44);
    const x176 = red.sqrnmul(x88, 88, x88);
    const x220 = red.sqrnmul(x176, 44, x44);
    const x222 = red.sqrnmul(x220, 2, x2);

    return x222;
  }

  pm3d4(x1) {
    // Exponent: (p - 3) / 4
    // Bits: 223x1 1x0 222x1
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const x222 = this.core(x1, x2);
    const r0 = red.sqrnmul(x222, 1, x1);
    const r1 = red.sqrn(r0, 1);
    const r2 = red.sqrnmul(r1, 222, x222);

    return r2;
  }

  pm2(x1) {
    // Exponent: p - 2
    // Bits: 223x1 1x0 222x1 1x0 1x1
    const {red} = x1;
    const r0 = this.pm3d4(x1);
    const r1 = red.sqrn(r0, 1);
    const r2 = red.sqrnmul(r1, 1, x1);

    return r2;
  }

  pp1d4(x1) {
    // Exponent: (p + 1) / 4
    // Bits: 224x1 222x0
    const {red} = x1;
    const x2 = red.sqrnmul(x1, 1, x1);
    const r0 = this.core(x1, x2);
    const r1 = red.sqrnmul(r0, 2, x2);
    const r2 = red.sqrn(r1, 222);

    return r2;
  }
}

/**
 * Reduction Engine
 */

class Red {
  constructor(m) {
    let prime = null;

    if (typeof m === 'string') {
      prime = BN._prime(m);
      m = prime.p;
    }

    enforce(BN.isBN(m), 'm', 'bignum');
    nonred(!m.red, 'reduction');
    range(m.sign() > 0, 'reduction');

    this.m = m;
    this.prime = prime;
    this.mb = null;
    this.sm1 = null;
  }

  _verify1(a) {
    range(a.negative === 0, 'red');
    red(a.red != null, 'red');
  }

  _verify2(a, b) {
    range((a.negative | b.negative) === 0, 'red');
    red(a.red != null && a.red === b.red, 'red');
  }

  get mont() {
    return false;
  }

  precompute() {
    // Precompute `sqrt(-1)` for primes congruent to 5 mod 8.
    if (this.sm1 === null && this.m.andln(7) === 5) {
      if (this.prime) {
        this.sm1 = this.prime.sm1.clone()._forceRed(this);
      } else {
        const x = new BN(2).toRed(this);
        const e = this.m.subn(1).iushrn(2);

        // sqrt(-1) = 2^((p - 1) / 4) mod p
        this.sm1 = this.pow(x, e);
      }
    }

    return this;
  }

  convertTo(num) {
    const res = num.mod(this.m);
    res.red = this;
    return res;
  }

  convertFrom(num) {
    const res = num.clone();
    res.red = null;
    return res;
  }

  intTo(a) {
    return a;
  }

  intFrom(a) {
    return a;
  }

  imod(a) {
    if (this.prime)
      return this.prime.ireduce(a)._forceRed(this);

    return a.imod(this.m)._forceRed(this);
  }

  iadd(a, b) {
    this._verify2(a, b);

    a._iadd(a, b);

    if (a.ucmp(this.m) >= 0)
      a._isub(a, this.m);

    return a;
  }

  add(a, b) {
    if (a.length < b.length)
      return this.iadd(b.clone(), a);

    return this.iadd(a.clone(), b);
  }

  iaddn(a, num) {
    this._verify1(a);

    if (num < 0)
      return this.isubn(a, -num);

    if (this.m.length === 1)
      num %= this.m.words[0];

    a._iaddn(num);

    if (a.ucmp(this.m) >= 0)
      a._isub(a, this.m);

    return a;
  }

  addn(a, num) {
    return this.iaddn(a.clone(), num);
  }

  isub(a, b) {
    this._verify2(a, b);

    //  0: a - a mod m == 0
    // -1: a - b mod m == m - (b - a)
    // +1: a - b mod m == a - b
    const cmp = a.ucmp(b);

    if (cmp === 0) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    if (cmp < 0) {
      a._isub(b, a);
      a._isub(this.m, a);
    } else {
      a._isub(a, b);
    }

    return a;
  }

  sub(a, b) {
    return this.isub(a.clone(), b);
  }

  isubn(a, num) {
    this._verify1(a);

    if (num < 0)
      return this.iaddn(a, -num);

    if (this.m.length === 1)
      num %= this.m.words[0];

    //  <: a - b mod m == m - (b - a)
    // >=: a - b mod m == a - b
    if (a.length === 1 && a.words[0] < num) {
      a.words[0] = num - a.words[0];
      a._isub(this.m, a);
    } else {
      a._isubn(num);
    }

    return a;
  }

  subn(a, num) {
    return this.isubn(a.clone(), num);
  }

  imul(a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  }

  mul(a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  }

  imuln(a, num) {
    this._verify1(a);

    if (a.isZero())
      return a;

    if (num === 0) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    const neg = num < 0;

    if (neg)
      num = -num;

    if (this.m.length === 1)
      num %= this.m.words[0];

    a.imuln(num);

    if (num <= 16) {
      // Quick reduction.
      while (a.ucmp(this.m) >= 0)
        a._isub(a, this.m);
    } else {
      this.imod(a);
    }

    if (neg)
      this.ineg(a);

    return a;
  }

  muln(a, num) {
    return this.imuln(a.clone(), num);
  }

  idiv(a, b) {
    return this.div(a, b)._move(a);
  }

  div(a, b) {
    return this.mul(a, this.invert(b));
  }

  idivn(a, num) {
    return this.divn(a, num)._move(a);
  }

  divn(a, num) {
    return this.div(a, this.convertTo(new BN(num)));
  }

  ipow(a, num) {
    return this.pow(a, num)._move(a);
  }

  pow(a, num) {
    this._verify1(a);

    if (num.isNeg())
      a = this.invert(a);

    // Small exponent.
    if (num.length === 1)
      return this.pown(a, num.words[0]);

    // Call out to BigInt.
    if (HAS_BIGINT && !this.prime)
      return this.powInt(a, num);

    // Otherwise, a BN implementation.
    return this.powNum(a, num);
  }

  powNum(a, num) {
    // Sliding window (odd multiples only).
    const one = new BN(1).toRed(this);
    const wnd = new Array(WND_SIZE);
    const a2 = this.sqr(a);

    wnd[0] = a;

    for (let i = 1; i < WND_SIZE; i++)
      wnd[i] = this.mul(wnd[i - 1], a2);

    let i = num.bitLength();
    let r = one;

    while (i >= WND_WIDTH) {
      let width = WND_WIDTH;
      let bits = num.bits(i - width, width);

      if (bits < WND_SIZE) {
        r = this.sqr(r);
        i -= 1;
        continue;
      }

      while ((bits & 1) === 0) {
        width -= 1;
        bits >>= 1;
      }

      if (r === one) {
        r = wnd[bits >> 1].clone();
      } else {
        r = this.sqrn(r, width);
        r = this.mul(r, wnd[bits >> 1]);
      }

      i -= width;
    }

    if (i > 0) {
      const bits = num.bits(0, i);

      while (i--) {
        r = this.sqr(r);

        if ((bits >> i) & 1)
          r = this.mul(r, a);
      }
    }

    return r;
  }

  powInt(a, num) {
    if (this.mb === null)
      this.mb = this.m.toBigInt();

    const x = this.intFrom(a.toBigInt());
    const y = powInt(x, num, this.mb);
    const z = this.intTo(y);

    return BN.fromBigInt(z)._forceRed(this);
  }

  sqrn(a, n) {
    while (n--)
      a = this.sqr(a);

    return a;
  }

  sqrnmul(a, n, b) {
    return this.mul(this.sqrn(a, n), b);
  }

  ipown(a, num) {
    return this.pown(a, num)._move(a);
  }

  pown(a, num) {
    this._verify1(a);

    if (num < 0) {
      a = this.invert(a);
      num = -num;
    }

    if (num === 0)
      return new BN(1).toRed(this);

    if (num === 1)
      return a.clone();

    const bits = countBits(num);

    let r = a;

    for (let i = bits - 2; i >= 0; i--) {
      r = this.sqr(r);

      if ((num >> i) & 1)
        r = this.mul(r, a);
    }

    return r;
  }

  isqr(a) {
    return this.imul(a, a);
  }

  sqr(a) {
    return this.mul(a, a);
  }

  isqrt(x) {
    return this.sqrt(x)._move(x);
  }

  sqrt(x) {
    this._verify1(x);

    // Optimized square root chain.
    if (this.prime)
      return this.prime.sqrt(x);

    // Fast case (p = 3 mod 4).
    if (this.m.andln(3) === 3)
      return this.sqrt3mod4(x);

    // Fast case (p = 5 mod 8).
    if (this.m.andln(7) === 5) {
      if (this.sm1 != null)
        return this.sqrt5mod8sm1(x);
      return this.sqrt5mod8(x);
    }

    // Slow case (Tonelli-Shanks).
    return this.sqrt0(x);
  }

  sqrt3mod4(x) {
    const e = this.m.addn(1).iushrn(2); // (p + 1) / 4
    const b = this.pow(x, e);

    if (!this.sqr(b).eq(x))
      throw new SquareRootError(b);

    return b;
  }

  sqrt5mod8(x) {
    // Atkin's Algorithm.
    const one = new BN(1).toRed(this);
    const e = this.m.ushrn(3); // (p - 5) / 8
    const x2 = this.add(x, x);
    const alpha = this.pow(x2, e);
    const beta = this.mul(x2, this.sqr(alpha));
    const b = this.mul(this.mul(alpha, x), this.isub(beta, one));

    if (!this.sqr(b).eq(x))
      throw new SquareRootError(b);

    return b;
  }

  sqrt5mod8sm1(x) {
    const e = this.m.addn(3).iushrn(3); // (p + 3) / 8
    const b = this.pow(x, e);

    if (this.sqr(b).eq(x))
      return b;

    const c = this.mul(b, this.sm1);

    if (this.sqr(c).eq(x))
      return c;

    throw new SquareRootError(b);
  }

  sqrt0(x) {
    if (this.m.cmpn(1) === 0 || !this.m.isOdd())
      throw new Error('Invalid prime.');

    switch (this.jacobi(x)) {
      case -1:
        throw new SquareRootError(x);
      case 0:
        return x.clone();
      case 1:
        break;
    }

    const one = new BN(1).toRed(this);
    const s = this.m.subn(1);
    const e = s._makeOdd();
    const n = new BN(2).toRed(this);

    while (this.jacobi(n) !== -1)
      this.iadd(n, one);

    let g = this.pow(n, s);
    let b = this.pow(x, s);
    let y = this.pow(x, s.iaddn(1).iushrn(1));
    let k = e;

    for (;;) {
      let t = b;
      let m = 0;

      while (!t.eq(one) && m < k) {
        t = this.sqr(t);
        m += 1;
      }

      if (m === 0)
        break;

      assert(m < k);

      t = this.sqrn(g, k - m - 1);
      g = this.sqr(t);
      y = this.mul(y, t);
      b = this.mul(b, g);
      k = m;
    }

    return y;
  }

  idivsqrt(u, v) {
    return this.divsqrt(u, v)._move(u);
  }

  divsqrt(u, v) {
    this._verify2(u, v);

    // u = 0, v = 0
    if (u.isZero() && v.isZero())
      throw new SquareRootError(v);

    // Optimized inverse square root chain.
    if (this.prime)
      return this.prime.divsqrt(u, v);

    // p = 3 mod 4
    if (this.m.andln(3) === 3)
      return this.divsqrt3mod4(u, v);

    // p = 5 mod 8
    if (this.sm1 != null && this.m.andln(7) === 5)
      return this.divsqrt5mod8(u, v);

    // v = 0
    if (v.isZero())
      throw new SquareRootError(v);

    return this.sqrt(this.div(u, v));
  }

  divsqrt3mod4(u, v) {
    // x = u^3 * v * (u^5 * v^3)^((p - 3) / 4) mod p
    const e = this.m.subn(3).iushrn(2);
    const u2 = this.sqr(u);
    const u3 = this.mul(u2, u);
    const u5 = this.mul(u3, u2);
    const v3 = this.mul(this.sqr(v), v);
    const p = this.pow(this.mul(u5, v3), e);
    const x = this.mul(this.mul(u3, v), p);
    const c = this.mul(v, this.sqr(x));

    if (c.eq(u))
      return x;

    throw new SquareRootError(x);
  }

  divsqrt5mod8(u, v) {
    // x = u * v^3 * (u * v^7)^((p - 5) / 8) mod p
    const e = this.m.subn(5).iushrn(3);
    const v3 = this.mul(this.sqr(v), v);
    const v7 = this.mul(this.sqr(v3), v);
    const p = this.pow(this.mul(u, v7), e);
    const x = this.mul(this.mul(u, v3), p);
    const c = this.mul(v, this.sqr(x));

    if (c.eq(u))
      return x;

    const mc = this.ineg(c);

    if (mc.eq(u))
      return this.mul(x, this.sm1);

    if (mc.eq(this.mul(u, this.sm1)))
      throw new SquareRootError(this.mul(x, this.sm1));

    throw new SquareRootError(x);
  }

  isSquare(a) {
    if (this.m.isOdd())
      return this.jacobi(a) >= 0;

    return this.kronecker(a) >= 0;
  }

  ishl(a, num) {
    this._verify1(a);
    return this.imod(a.iushl(num));
  }

  shl(a, num) {
    return this.ishl(a.clone(), num);
  }

  ishln(a, num) {
    this._verify1(a);

    a.iushln(num);

    if (num <= 4) {
      // Quick reduction.
      while (a.ucmp(this.m) >= 0)
        a._isub(a, this.m);
    } else {
      this.imod(a);
    }

    return a;
  }

  shln(a, num) {
    return this.ishln(a.clone(), num);
  }

  ineg(a) {
    this._verify1(a);

    if (!a.isZero())
      a._isub(this.m, a);

    return a;
  }

  neg(a) {
    return this.ineg(a.clone());
  }

  eq(a, b) {
    this._verify2(a, b);
    return a.ucmp(b) === 0;
  }

  eqn(a, num) {
    this._verify1(a);

    if (this.m.length === 1) {
      num %= this.m.words[0];

      if (num < 0)
        num += this.m.words[0];

      return a.ucmpn(num) === 0;
    }

    if (num < 0) {
      this.m._isubn(-num);

      const cmp = a.ucmp(this.m);

      this.m._iaddn(-num);

      return cmp === 0;
    }

    return a.ucmpn(num) === 0;
  }

  isHigh(a) {
    return !this.isLow(a);
  }

  isLow(a) {
    this._verify1(a);
    return a.ucmp(this.m.ushrn(1)) <= 0;
  }

  isOdd(a) {
    this._verify1(a);
    return a.isOdd();
  }

  isEven(a) {
    this._verify1(a);
    return a.isEven();
  }

  legendre(num) {
    this._verify1(num);

    if (this.m.isEven())
      throw new Error('legendre: `num` must be odd.');

    // Euler's criterion.
    const e = this.m.subn(1).iushrn(1); // (p - 1) / 2
    const symbol = this.pow(num, e);

    if (symbol.isZero())
      return 0;

    const one = new BN(1).toRed(this);

    if (symbol.eq(one))
      return 1;

    if (symbol.eq(this.ineg(one)))
      return -1;

    throw new Error('Invalid prime.');
  }

  jacobi(a) {
    this._verify1(a);
    return a.jacobi(this.m);
  }

  kronecker(a) {
    this._verify1(a);
    return a.kronecker(this.m);
  }

  iinvert(a) {
    return this.invert(a)._move(a);
  }

  invert(a) {
    this._verify1(a);
    return a.invert(this.m)._forceRed(this);
  }

  ifermat(a) {
    return this.fermat(a)._move(a);
  }

  fermat(a) {
    this._verify1(a);

    if (a.isZero() || this.m.cmpn(1) === 0)
      throw new RangeError('Not invertible.');

    // Optimized inversion chain.
    if (this.prime)
      return this.prime.fermat(a);

    // Invert using fermat's little theorem.
    return this.pow(a, this.m.subn(2));
  }

  invertAll(elems) {
    // Montgomery's trick.
    enforce(Array.isArray(elems), 'elems', 'array');

    for (const elem of elems) {
      enforce(BN.isBN(elem), 'elem', 'bignum');

      this._verify1(elem);
    }

    if (this.m.cmpn(1) === 0 || this.m.isEven())
      throw new RangeError('Not invertible.');

    const len = elems.length;
    const invs = new Array(len);

    if (len === 0)
      return invs;

    let acc = new BN(1).toRed(this);

    for (let i = 0; i < len; i++) {
      if (elems[i].isZero()) {
        invs[i] = elems[i].clone();
        continue;
      }

      invs[i] = acc;
      acc = this.mul(acc, elems[i]);
    }

    acc = this.invert(acc);

    for (let i = len - 1; i >= 0; i--) {
      if (elems[i].isZero())
        continue;

      invs[i] = this.mul(acc, invs[i]);
      acc = this.mul(acc, elems[i]);
    }

    return invs;
  }

  [custom]() {
    if (this.prime)
      return `<Red: ${this.prime.name}>`;

    return `<Red: ${this.m.toString(10)}>`;
  }
}

/**
 * Barrett Engine
 */

class Barrett extends Red {
  constructor(m) {
    super(m);

    this.prime = null;
    this.n = this.m.bitLength();

    if ((this.n % 26) !== 0)
      this.n += 26 - (this.n % 26);

    this.k = this.n * 2;
    this.w = this.k / 26;
    this.b = BN.shift(1, this.k).div(this.m);
  }

  convertTo(num) {
    if (num.length > this.w)
      return super.convertTo(num);

    return this.imod(num.clone());
  }

  _shift(q) {
    let i = 0;
    let j = this.w;

    while (j < q.length)
      q.words[i++] = q.words[j++];

    if (i === 0)
      q.words[i++] = 0;

    q.length = i;
  }

  imod(a) {
    const neg = a.negative;

    assert(a.length <= this.w);

    a.negative = 0;

    const q = a.mul(this.b);

    // Shift right by `k` bits.
    this._shift(q);

    a._isub(a, q.mul(this.m));

    if (a.ucmp(this.m) >= 0)
      a._isub(a, this.m);

    if (neg && !a.isZero())
      a._isub(this.m, a);

    a.red = this;

    return a;
  }
}

/**
 * Montgomery Engine
 */

class Mont extends Red {
  constructor(m) {
    super(m);

    // Note that:
    //
    //   mi = (-m^-1 mod (2^(n * 2))) mod r
    //
    // and:
    //
    //   mi = (((2^n)^-1 mod m) * r^-1 - 1) / m
    //
    // are equivalent.
    this.prime = null;
    this.n = this.m.length * 26;
    this.r = BN.shift(1, this.n);
    this.r2 = BN.shift(1, this.n * 2).imod(this.m);
    this.ri = this.r.invert(this.m);
    this.mi = this.r.mul(this.ri).isubn(1).div(this.m);
    this.rib = null;
  }

  get mont() {
    return true;
  }

  convertTo(num) {
    if (num.isNeg() || num.ucmp(this.m) >= 0)
      return this.imod(num.ushln(this.n));

    // Equivalent to: (num * 2^n) mod m
    return this.mul(num, this.r2);
  }

  convertFrom(num) {
    // Equivalent to: num * r^-1 mod m
    const r = this.mul(num, new BN(1));
    r.red = null;
    return r;
  }

  intTo(a) {
    return (a << BigInt(this.n)) % this.mb;
  }

  intFrom(a) {
    if (this.rib === null)
      this.rib = this.ri.toBigInt();

    return (a * this.rib) % this.mb;
  }

  iaddn(a, num) {
    return this.iadd(a, this.convertTo(new BN(num)));
  }

  isubn(a, num) {
    return this.isub(a, this.convertTo(new BN(num)));
  }

  imul(a, b) {
    return this.mul(a, b)._move(a);
  }

  mul(a, b) {
    if (a.isZero() || b.isZero())
      return new BN(0)._forceRed(this);

    const t = a.mul(b);
    const c = t.umaskn(this.n).mul(this.mi).iumaskn(this.n);
    const u = t.iadd(c.mul(this.m)).iushrn(this.n);

    if (u.ucmp(this.m) >= 0)
      u._isub(u, this.m);

    return u._forceRed(this);
  }

  imuln(a, num) {
    this._verify1(a);

    if (a.isZero())
      return a;

    if (num === 0) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    const neg = num < 0;

    if (neg)
      num = -num;

    if (this.m.length === 1)
      num %= this.m.words[0];

    const bits = countBits(num);

    // Potentially compute with additions.
    // This avoids an expensive division.
    if (bits > 5) {
      // Slow case (num > 31).
      this.imul(a, this.convertTo(new BN(num)));
    } else if ((num & (num - 1)) === 0) {
      // Optimize for powers of two.
      for (let i = 0; i < bits - 1; i++)
        this.iadd(a, a);
    } else {
      // Multiply left to right.
      const c = a.clone();

      for (let i = bits - 2; i >= 0; i--) {
        this.iadd(a, a);

        if ((num >> i) & 1)
          this.iadd(a, c);
      }
    }

    if (neg)
      this.ineg(a);

    return a;
  }

  eqn(a, num) {
    this._verify1(a);

    if (num === 0)
      return a.isZero();

    return a.ucmp(this.convertTo(new BN(num))) === 0;
  }

  isLow(a) {
    this._verify1(a);
    return this.convertFrom(a).ucmp(this.m.ushrn(1)) <= 0;
  }

  isOdd(a) {
    this._verify1(a);
    return this.convertFrom(a).isOdd();
  }

  isEven(a) {
    this._verify1(a);
    return this.convertFrom(a).isEven();
  }

  invert(a) {
    this._verify1(a);

    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    return this.imod(a.invert(this.m).mul(this.r2));
  }
}

/*
 * Helpers
 */

function makeError(Error, msg, start) {
  const err = new Error(msg);

  if (Error.captureStackTrace)
    Error.captureStackTrace(err, start);

  return err;
}

function assert(value, message) {
  if (!value) {
    const msg = message || 'Assertion failed.';
    throw makeError(Error, msg, assert);
  }
}

function enforce(value, name, type) {
  if (!value) {
    const msg = `"${name}" must be a(n) ${type}.`;
    throw makeError(TypeError, msg, enforce);
  }
}

function range(value, name) {
  if (!value) {
    const msg = `"${name}" only works with positive numbers.`;
    throw makeError(RangeError, msg, range);
  }
}

function red(value, name) {
  if (!value) {
    const msg = `"${name}" only works with red numbers.`;
    throw makeError(TypeError, msg, red);
  }
}

function nonred(value, name) {
  if (!value) {
    const msg = `"${name}" only works with normal numbers.`;
    throw makeError(TypeError, msg, nonred);
  }
}

function nonzero(value) {
  if (!value) {
    const msg = 'Cannot divide by zero.';
    throw makeError(RangeError, msg, nonzero);
  }
}

class SquareRootError extends Error {
  constructor(result) {
    super();

    this.name = 'SquareRootError';
    this.message = 'X is not a square mod P.';
    this.result = result.fromRed();

    if (Error.captureStackTrace)
      Error.captureStackTrace(this, SquareRootError);
  }
}

function isInteger(num) {
  return Number.isSafeInteger(num);
}

function isSMI(num) {
  return isInteger(num)
      && num >= -0x3ffffff
      && num <= 0x3ffffff;
}

function allocate(ArrayType, size) {
  if (ArrayType.allocUnsafeSlow)
    return ArrayType.allocUnsafeSlow(size);

  return new ArrayType(size);
}

function getBase(base) {
  if (base == null)
    return 10;

  if (typeof base === 'number')
    return base;

  switch (base) {
    case 'bin':
      return 2;
    case 'oct':
      return 8;
    case 'dec':
      return 10;
    case 'hex':
      return 16;
  }

  return 0;
}

/*
 * Internal
 */

function countBits(w) {
  if (Math.clz32)
    return 32 - Math.clz32(w);

  let t = w;
  let r = 0;

  if (t >= 0x1000) {
    r += 13;
    t >>>= 13;
  }

  if (t >= 0x40) {
    r += 7;
    t >>>= 7;
  }

  if (t >= 0x8) {
    r += 4;
    t >>>= 4;
  }

  if (t >= 0x02) {
    r += 2;
    t >>>= 2;
  }

  return r + t;
}

function zeroBits(w) {
  // Shortcut.
  if (w === 0)
    return 26;

  let t = w;
  let r = 0;

  if ((t & 0x1fff) === 0) {
    r += 13;
    t >>>= 13;
  }

  if ((t & 0x7f) === 0) {
    r += 7;
    t >>>= 7;
  }

  if ((t & 0xf) === 0) {
    r += 4;
    t >>>= 4;
  }

  if ((t & 0x3) === 0) {
    r += 2;
    t >>>= 2;
  }

  if ((t & 0x1) === 0)
    r += 1;

  return r;
}

function parseHex(str, start, end) {
  const len = Math.min(str.length, end);

  let r = 0;
  let z = 0;

  for (let i = start; i < len; i++) {
    const c = str.charCodeAt(i) - 48;

    r <<= 4;

    let b;

    if (c >= 49 && c <= 54) {
      // 'a' - 'f'
      b = c - 49 + 0xa;
    } else if (c >= 17 && c <= 22) {
      // 'A' - 'F'
      b = c - 17 + 0xa;
    } else {
      // '0' - '9'
      b = c;
    }

    r |= b;
    z |= b;
  }

  if (z & ~15)
    throw new Error('Invalid string.');

  return r;
}

function parseBase(str, start, end, mul) {
  const len = Math.min(str.length, end);

  let r = 0;

  for (let i = start; i < len; i++) {
    const c = str.charCodeAt(i) - 48;

    r *= mul;

    let b;

    if (c >= 49) {
      // 'a'
      b = c - 49 + 0xa;
    } else if (c >= 17) {
      // 'A'
      b = c - 17 + 0xa;
    } else {
      // '0' - '9'
      b = c;
    }

    if (c < 0 || c > 207 || b >= mul)
      throw new Error('Invalid string.');

    r += b;
  }

  return r;
}

/*
 * Exponentiation (bigint)
 */

function powInt(x, e, m) {
  // Sliding window (odd multiples only).
  const one = BigInt(1);
  const wnd = new Array(WND_SIZE);
  const x2 = (x * x) % m;

  wnd[0] = x;

  for (let i = 1; i < WND_SIZE; i++)
    wnd[i] = (wnd[i - 1] * x2) % m;

  let i = e.bitLength();
  let r = one;

  while (i >= WND_WIDTH) {
    let width = WND_WIDTH;
    let bits = e.bits(i - width, width);

    if (bits < WND_SIZE) {
      r = (r * r) % m;
      i -= 1;
      continue;
    }

    while ((bits & 1) === 0) {
      width -= 1;
      bits >>= 1;
    }

    if (r === one) {
      r = wnd[bits >> 1];
    } else {
      r = sqrn(r, width, m);
      r = (r * wnd[bits >> 1]) % m;
    }

    i -= width;
  }

  if (i > 0) {
    const bits = e.bits(0, i);

    while (i--) {
      r = (r * r) % m;

      if ((bits >> i) & 1)
        r = (r * x) % m;
    }
  }

  return r;
}

function sqrn(x, n, m) {
  for (let i = 0; i < n; i++)
    x = (x * x) % m;
  return x;
}

/*
 * Multiplication
 */

function smallMulTo(self, num, out) {
  const len = self.length + num.length;

  out.negative = self.negative ^ num.negative;
  out._alloc(len);
  out.length = len;

  // Peel one iteration (compiler can't
  // do it, because of code complexity).
  const a = self.words[0];
  const b = num.words[0];
  const r = a * b;
  const lo = r & 0x3ffffff;

  let carry = (r / 0x4000000) | 0;
  let k = 1;

  out.words[0] = lo;

  for (; k < out.length - 1; k++) {
    // Sum all words with the same
    // `i + j = k` and accumulate
    // `ncarry`, note that ncarry
    // could be >= 0x3ffffff.
    let ncarry = carry >>> 26;
    let rword = carry & 0x3ffffff;

    const min = Math.max(0, k - self.length + 1);
    const max = Math.min(k, num.length - 1);

    for (let j = min; j <= max; j++) {
      const i = k - j;
      const a = self.words[i];
      const b = num.words[j];
      const r = a * b + rword;

      ncarry += (r / 0x4000000) | 0;
      rword = r & 0x3ffffff;
    }

    out.words[k] = rword | 0;
    carry = ncarry | 0;
  }

  if (carry !== 0)
    out.words[k] = carry | 0;
  else
    out.length -= 1;

  return out._strip();
}

function bigMulTo(self, num, out) {
  const len = self.length + num.length;

  out.negative = self.negative ^ num.negative;
  out._alloc(len);
  out.length = len;

  let carry = 0;
  let hncarry = 0;
  let k = 0;

  for (; k < out.length - 1; k++) {
    // Sum all words with the same
    // `i + j = k` and accumulate
    // `ncarry`, note that ncarry
    // could be >= 0x3ffffff.
    let ncarry = hncarry;

    hncarry = 0;

    let rword = carry & 0x3ffffff;

    const min = Math.max(0, k - self.length + 1);
    const max = Math.min(k, num.length - 1);

    for (let j = min; j <= max; j++) {
      const i = k - j;
      const a = self.words[i];
      const b = num.words[j];
      const r = a * b;

      let lo = r & 0x3ffffff;

      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;

      hncarry += ncarry >>> 26;
      ncarry &= 0x3ffffff;
    }

    out.words[k] = rword;
    carry = ncarry;
    ncarry = hncarry;
  }

  if (carry !== 0)
    out.words[k] = carry;
  else
    out.length -= 1;

  return out._strip();
}

function jumboMulTo(x, y, out) {
  // v8 has a 2147483519 bit max (~256mb).
  if (!HAS_BIGINT || x.length + y.length > 82595519)
    return bigMulTo(x, y, out);

  const zero = BigInt(0);
  const mask = BigInt(0x3ffffff);
  const shift = BigInt(26);

  let z = x.toBigInt() * y.toBigInt();

  const neg = (z < zero) | 0;

  if (neg)
    z = -z;

  let i = 0;

  while (z > zero) {
    out.words[i++] = Number(z & mask);
    z >>= shift;
  }

  if (i === 0)
    out.words[i++] = 0;

  out.length = i;
  out.negative = neg;

  return out;
}

function comb10MulTo(self, num, out) {
  const a = self.words;
  const b = num.words;
  const o = out.words;
  const a0 = a[0] | 0;
  const al0 = a0 & 0x1fff;
  const ah0 = a0 >>> 13;
  const a1 = a[1] | 0;
  const al1 = a1 & 0x1fff;
  const ah1 = a1 >>> 13;
  const a2 = a[2] | 0;
  const al2 = a2 & 0x1fff;
  const ah2 = a2 >>> 13;
  const a3 = a[3] | 0;
  const al3 = a3 & 0x1fff;
  const ah3 = a3 >>> 13;
  const a4 = a[4] | 0;
  const al4 = a4 & 0x1fff;
  const ah4 = a4 >>> 13;
  const a5 = a[5] | 0;
  const al5 = a5 & 0x1fff;
  const ah5 = a5 >>> 13;
  const a6 = a[6] | 0;
  const al6 = a6 & 0x1fff;
  const ah6 = a6 >>> 13;
  const a7 = a[7] | 0;
  const al7 = a7 & 0x1fff;
  const ah7 = a7 >>> 13;
  const a8 = a[8] | 0;
  const al8 = a8 & 0x1fff;
  const ah8 = a8 >>> 13;
  const a9 = a[9] | 0;
  const al9 = a9 & 0x1fff;
  const ah9 = a9 >>> 13;
  const b0 = b[0] | 0;
  const bl0 = b0 & 0x1fff;
  const bh0 = b0 >>> 13;
  const b1 = b[1] | 0;
  const bl1 = b1 & 0x1fff;
  const bh1 = b1 >>> 13;
  const b2 = b[2] | 0;
  const bl2 = b2 & 0x1fff;
  const bh2 = b2 >>> 13;
  const b3 = b[3] | 0;
  const bl3 = b3 & 0x1fff;
  const bh3 = b3 >>> 13;
  const b4 = b[4] | 0;
  const bl4 = b4 & 0x1fff;
  const bh4 = b4 >>> 13;
  const b5 = b[5] | 0;
  const bl5 = b5 & 0x1fff;
  const bh5 = b5 >>> 13;
  const b6 = b[6] | 0;
  const bl6 = b6 & 0x1fff;
  const bh6 = b6 >>> 13;
  const b7 = b[7] | 0;
  const bl7 = b7 & 0x1fff;
  const bh7 = b7 >>> 13;
  const b8 = b[8] | 0;
  const bl8 = b8 & 0x1fff;
  const bh8 = b8 >>> 13;
  const b9 = b[9] | 0;
  const bl9 = b9 & 0x1fff;
  const bh9 = b9 >>> 13;

  let c = 0;
  let lo, mid, hi;

  out.negative = self.negative ^ num.negative;
  out._alloc(20);
  out.length = 19;

  /* k = 0 */
  lo = Math.imul(al0, bl0);
  mid = Math.imul(al0, bh0);
  mid = (mid + Math.imul(ah0, bl0)) | 0;
  hi = Math.imul(ah0, bh0);

  let w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
  w0 &= 0x3ffffff;

  /* k = 1 */
  lo = Math.imul(al1, bl0);
  mid = Math.imul(al1, bh0);
  mid = (mid + Math.imul(ah1, bl0)) | 0;
  hi = Math.imul(ah1, bh0);
  lo = (lo + Math.imul(al0, bl1)) | 0;
  mid = (mid + Math.imul(al0, bh1)) | 0;
  mid = (mid + Math.imul(ah0, bl1)) | 0;
  hi = (hi + Math.imul(ah0, bh1)) | 0;

  let w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
  w1 &= 0x3ffffff;

  /* k = 2 */
  lo = Math.imul(al2, bl0);
  mid = Math.imul(al2, bh0);
  mid = (mid + Math.imul(ah2, bl0)) | 0;
  hi = Math.imul(ah2, bh0);
  lo = (lo + Math.imul(al1, bl1)) | 0;
  mid = (mid + Math.imul(al1, bh1)) | 0;
  mid = (mid + Math.imul(ah1, bl1)) | 0;
  hi = (hi + Math.imul(ah1, bh1)) | 0;
  lo = (lo + Math.imul(al0, bl2)) | 0;
  mid = (mid + Math.imul(al0, bh2)) | 0;
  mid = (mid + Math.imul(ah0, bl2)) | 0;
  hi = (hi + Math.imul(ah0, bh2)) | 0;

  let w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
  w2 &= 0x3ffffff;

  /* k = 3 */
  lo = Math.imul(al3, bl0);
  mid = Math.imul(al3, bh0);
  mid = (mid + Math.imul(ah3, bl0)) | 0;
  hi = Math.imul(ah3, bh0);
  lo = (lo + Math.imul(al2, bl1)) | 0;
  mid = (mid + Math.imul(al2, bh1)) | 0;
  mid = (mid + Math.imul(ah2, bl1)) | 0;
  hi = (hi + Math.imul(ah2, bh1)) | 0;
  lo = (lo + Math.imul(al1, bl2)) | 0;
  mid = (mid + Math.imul(al1, bh2)) | 0;
  mid = (mid + Math.imul(ah1, bl2)) | 0;
  hi = (hi + Math.imul(ah1, bh2)) | 0;
  lo = (lo + Math.imul(al0, bl3)) | 0;
  mid = (mid + Math.imul(al0, bh3)) | 0;
  mid = (mid + Math.imul(ah0, bl3)) | 0;
  hi = (hi + Math.imul(ah0, bh3)) | 0;

  let w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
  w3 &= 0x3ffffff;

  /* k = 4 */
  lo = Math.imul(al4, bl0);
  mid = Math.imul(al4, bh0);
  mid = (mid + Math.imul(ah4, bl0)) | 0;
  hi = Math.imul(ah4, bh0);
  lo = (lo + Math.imul(al3, bl1)) | 0;
  mid = (mid + Math.imul(al3, bh1)) | 0;
  mid = (mid + Math.imul(ah3, bl1)) | 0;
  hi = (hi + Math.imul(ah3, bh1)) | 0;
  lo = (lo + Math.imul(al2, bl2)) | 0;
  mid = (mid + Math.imul(al2, bh2)) | 0;
  mid = (mid + Math.imul(ah2, bl2)) | 0;
  hi = (hi + Math.imul(ah2, bh2)) | 0;
  lo = (lo + Math.imul(al1, bl3)) | 0;
  mid = (mid + Math.imul(al1, bh3)) | 0;
  mid = (mid + Math.imul(ah1, bl3)) | 0;
  hi = (hi + Math.imul(ah1, bh3)) | 0;
  lo = (lo + Math.imul(al0, bl4)) | 0;
  mid = (mid + Math.imul(al0, bh4)) | 0;
  mid = (mid + Math.imul(ah0, bl4)) | 0;
  hi = (hi + Math.imul(ah0, bh4)) | 0;

  let w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
  w4 &= 0x3ffffff;

  /* k = 5 */
  lo = Math.imul(al5, bl0);
  mid = Math.imul(al5, bh0);
  mid = (mid + Math.imul(ah5, bl0)) | 0;
  hi = Math.imul(ah5, bh0);
  lo = (lo + Math.imul(al4, bl1)) | 0;
  mid = (mid + Math.imul(al4, bh1)) | 0;
  mid = (mid + Math.imul(ah4, bl1)) | 0;
  hi = (hi + Math.imul(ah4, bh1)) | 0;
  lo = (lo + Math.imul(al3, bl2)) | 0;
  mid = (mid + Math.imul(al3, bh2)) | 0;
  mid = (mid + Math.imul(ah3, bl2)) | 0;
  hi = (hi + Math.imul(ah3, bh2)) | 0;
  lo = (lo + Math.imul(al2, bl3)) | 0;
  mid = (mid + Math.imul(al2, bh3)) | 0;
  mid = (mid + Math.imul(ah2, bl3)) | 0;
  hi = (hi + Math.imul(ah2, bh3)) | 0;
  lo = (lo + Math.imul(al1, bl4)) | 0;
  mid = (mid + Math.imul(al1, bh4)) | 0;
  mid = (mid + Math.imul(ah1, bl4)) | 0;
  hi = (hi + Math.imul(ah1, bh4)) | 0;
  lo = (lo + Math.imul(al0, bl5)) | 0;
  mid = (mid + Math.imul(al0, bh5)) | 0;
  mid = (mid + Math.imul(ah0, bl5)) | 0;
  hi = (hi + Math.imul(ah0, bh5)) | 0;

  let w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
  w5 &= 0x3ffffff;

  /* k = 6 */
  lo = Math.imul(al6, bl0);
  mid = Math.imul(al6, bh0);
  mid = (mid + Math.imul(ah6, bl0)) | 0;
  hi = Math.imul(ah6, bh0);
  lo = (lo + Math.imul(al5, bl1)) | 0;
  mid = (mid + Math.imul(al5, bh1)) | 0;
  mid = (mid + Math.imul(ah5, bl1)) | 0;
  hi = (hi + Math.imul(ah5, bh1)) | 0;
  lo = (lo + Math.imul(al4, bl2)) | 0;
  mid = (mid + Math.imul(al4, bh2)) | 0;
  mid = (mid + Math.imul(ah4, bl2)) | 0;
  hi = (hi + Math.imul(ah4, bh2)) | 0;
  lo = (lo + Math.imul(al3, bl3)) | 0;
  mid = (mid + Math.imul(al3, bh3)) | 0;
  mid = (mid + Math.imul(ah3, bl3)) | 0;
  hi = (hi + Math.imul(ah3, bh3)) | 0;
  lo = (lo + Math.imul(al2, bl4)) | 0;
  mid = (mid + Math.imul(al2, bh4)) | 0;
  mid = (mid + Math.imul(ah2, bl4)) | 0;
  hi = (hi + Math.imul(ah2, bh4)) | 0;
  lo = (lo + Math.imul(al1, bl5)) | 0;
  mid = (mid + Math.imul(al1, bh5)) | 0;
  mid = (mid + Math.imul(ah1, bl5)) | 0;
  hi = (hi + Math.imul(ah1, bh5)) | 0;
  lo = (lo + Math.imul(al0, bl6)) | 0;
  mid = (mid + Math.imul(al0, bh6)) | 0;
  mid = (mid + Math.imul(ah0, bl6)) | 0;
  hi = (hi + Math.imul(ah0, bh6)) | 0;

  let w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
  w6 &= 0x3ffffff;

  /* k = 7 */
  lo = Math.imul(al7, bl0);
  mid = Math.imul(al7, bh0);
  mid = (mid + Math.imul(ah7, bl0)) | 0;
  hi = Math.imul(ah7, bh0);
  lo = (lo + Math.imul(al6, bl1)) | 0;
  mid = (mid + Math.imul(al6, bh1)) | 0;
  mid = (mid + Math.imul(ah6, bl1)) | 0;
  hi = (hi + Math.imul(ah6, bh1)) | 0;
  lo = (lo + Math.imul(al5, bl2)) | 0;
  mid = (mid + Math.imul(al5, bh2)) | 0;
  mid = (mid + Math.imul(ah5, bl2)) | 0;
  hi = (hi + Math.imul(ah5, bh2)) | 0;
  lo = (lo + Math.imul(al4, bl3)) | 0;
  mid = (mid + Math.imul(al4, bh3)) | 0;
  mid = (mid + Math.imul(ah4, bl3)) | 0;
  hi = (hi + Math.imul(ah4, bh3)) | 0;
  lo = (lo + Math.imul(al3, bl4)) | 0;
  mid = (mid + Math.imul(al3, bh4)) | 0;
  mid = (mid + Math.imul(ah3, bl4)) | 0;
  hi = (hi + Math.imul(ah3, bh4)) | 0;
  lo = (lo + Math.imul(al2, bl5)) | 0;
  mid = (mid + Math.imul(al2, bh5)) | 0;
  mid = (mid + Math.imul(ah2, bl5)) | 0;
  hi = (hi + Math.imul(ah2, bh5)) | 0;
  lo = (lo + Math.imul(al1, bl6)) | 0;
  mid = (mid + Math.imul(al1, bh6)) | 0;
  mid = (mid + Math.imul(ah1, bl6)) | 0;
  hi = (hi + Math.imul(ah1, bh6)) | 0;
  lo = (lo + Math.imul(al0, bl7)) | 0;
  mid = (mid + Math.imul(al0, bh7)) | 0;
  mid = (mid + Math.imul(ah0, bl7)) | 0;
  hi = (hi + Math.imul(ah0, bh7)) | 0;

  let w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
  w7 &= 0x3ffffff;

  /* k = 8 */
  lo = Math.imul(al8, bl0);
  mid = Math.imul(al8, bh0);
  mid = (mid + Math.imul(ah8, bl0)) | 0;
  hi = Math.imul(ah8, bh0);
  lo = (lo + Math.imul(al7, bl1)) | 0;
  mid = (mid + Math.imul(al7, bh1)) | 0;
  mid = (mid + Math.imul(ah7, bl1)) | 0;
  hi = (hi + Math.imul(ah7, bh1)) | 0;
  lo = (lo + Math.imul(al6, bl2)) | 0;
  mid = (mid + Math.imul(al6, bh2)) | 0;
  mid = (mid + Math.imul(ah6, bl2)) | 0;
  hi = (hi + Math.imul(ah6, bh2)) | 0;
  lo = (lo + Math.imul(al5, bl3)) | 0;
  mid = (mid + Math.imul(al5, bh3)) | 0;
  mid = (mid + Math.imul(ah5, bl3)) | 0;
  hi = (hi + Math.imul(ah5, bh3)) | 0;
  lo = (lo + Math.imul(al4, bl4)) | 0;
  mid = (mid + Math.imul(al4, bh4)) | 0;
  mid = (mid + Math.imul(ah4, bl4)) | 0;
  hi = (hi + Math.imul(ah4, bh4)) | 0;
  lo = (lo + Math.imul(al3, bl5)) | 0;
  mid = (mid + Math.imul(al3, bh5)) | 0;
  mid = (mid + Math.imul(ah3, bl5)) | 0;
  hi = (hi + Math.imul(ah3, bh5)) | 0;
  lo = (lo + Math.imul(al2, bl6)) | 0;
  mid = (mid + Math.imul(al2, bh6)) | 0;
  mid = (mid + Math.imul(ah2, bl6)) | 0;
  hi = (hi + Math.imul(ah2, bh6)) | 0;
  lo = (lo + Math.imul(al1, bl7)) | 0;
  mid = (mid + Math.imul(al1, bh7)) | 0;
  mid = (mid + Math.imul(ah1, bl7)) | 0;
  hi = (hi + Math.imul(ah1, bh7)) | 0;
  lo = (lo + Math.imul(al0, bl8)) | 0;
  mid = (mid + Math.imul(al0, bh8)) | 0;
  mid = (mid + Math.imul(ah0, bl8)) | 0;
  hi = (hi + Math.imul(ah0, bh8)) | 0;

  let w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
  w8 &= 0x3ffffff;

  /* k = 9 */
  lo = Math.imul(al9, bl0);
  mid = Math.imul(al9, bh0);
  mid = (mid + Math.imul(ah9, bl0)) | 0;
  hi = Math.imul(ah9, bh0);
  lo = (lo + Math.imul(al8, bl1)) | 0;
  mid = (mid + Math.imul(al8, bh1)) | 0;
  mid = (mid + Math.imul(ah8, bl1)) | 0;
  hi = (hi + Math.imul(ah8, bh1)) | 0;
  lo = (lo + Math.imul(al7, bl2)) | 0;
  mid = (mid + Math.imul(al7, bh2)) | 0;
  mid = (mid + Math.imul(ah7, bl2)) | 0;
  hi = (hi + Math.imul(ah7, bh2)) | 0;
  lo = (lo + Math.imul(al6, bl3)) | 0;
  mid = (mid + Math.imul(al6, bh3)) | 0;
  mid = (mid + Math.imul(ah6, bl3)) | 0;
  hi = (hi + Math.imul(ah6, bh3)) | 0;
  lo = (lo + Math.imul(al5, bl4)) | 0;
  mid = (mid + Math.imul(al5, bh4)) | 0;
  mid = (mid + Math.imul(ah5, bl4)) | 0;
  hi = (hi + Math.imul(ah5, bh4)) | 0;
  lo = (lo + Math.imul(al4, bl5)) | 0;
  mid = (mid + Math.imul(al4, bh5)) | 0;
  mid = (mid + Math.imul(ah4, bl5)) | 0;
  hi = (hi + Math.imul(ah4, bh5)) | 0;
  lo = (lo + Math.imul(al3, bl6)) | 0;
  mid = (mid + Math.imul(al3, bh6)) | 0;
  mid = (mid + Math.imul(ah3, bl6)) | 0;
  hi = (hi + Math.imul(ah3, bh6)) | 0;
  lo = (lo + Math.imul(al2, bl7)) | 0;
  mid = (mid + Math.imul(al2, bh7)) | 0;
  mid = (mid + Math.imul(ah2, bl7)) | 0;
  hi = (hi + Math.imul(ah2, bh7)) | 0;
  lo = (lo + Math.imul(al1, bl8)) | 0;
  mid = (mid + Math.imul(al1, bh8)) | 0;
  mid = (mid + Math.imul(ah1, bl8)) | 0;
  hi = (hi + Math.imul(ah1, bh8)) | 0;
  lo = (lo + Math.imul(al0, bl9)) | 0;
  mid = (mid + Math.imul(al0, bh9)) | 0;
  mid = (mid + Math.imul(ah0, bl9)) | 0;
  hi = (hi + Math.imul(ah0, bh9)) | 0;

  let w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
  w9 &= 0x3ffffff;

  /* k = 10 */
  lo = Math.imul(al9, bl1);
  mid = Math.imul(al9, bh1);
  mid = (mid + Math.imul(ah9, bl1)) | 0;
  hi = Math.imul(ah9, bh1);
  lo = (lo + Math.imul(al8, bl2)) | 0;
  mid = (mid + Math.imul(al8, bh2)) | 0;
  mid = (mid + Math.imul(ah8, bl2)) | 0;
  hi = (hi + Math.imul(ah8, bh2)) | 0;
  lo = (lo + Math.imul(al7, bl3)) | 0;
  mid = (mid + Math.imul(al7, bh3)) | 0;
  mid = (mid + Math.imul(ah7, bl3)) | 0;
  hi = (hi + Math.imul(ah7, bh3)) | 0;
  lo = (lo + Math.imul(al6, bl4)) | 0;
  mid = (mid + Math.imul(al6, bh4)) | 0;
  mid = (mid + Math.imul(ah6, bl4)) | 0;
  hi = (hi + Math.imul(ah6, bh4)) | 0;
  lo = (lo + Math.imul(al5, bl5)) | 0;
  mid = (mid + Math.imul(al5, bh5)) | 0;
  mid = (mid + Math.imul(ah5, bl5)) | 0;
  hi = (hi + Math.imul(ah5, bh5)) | 0;
  lo = (lo + Math.imul(al4, bl6)) | 0;
  mid = (mid + Math.imul(al4, bh6)) | 0;
  mid = (mid + Math.imul(ah4, bl6)) | 0;
  hi = (hi + Math.imul(ah4, bh6)) | 0;
  lo = (lo + Math.imul(al3, bl7)) | 0;
  mid = (mid + Math.imul(al3, bh7)) | 0;
  mid = (mid + Math.imul(ah3, bl7)) | 0;
  hi = (hi + Math.imul(ah3, bh7)) | 0;
  lo = (lo + Math.imul(al2, bl8)) | 0;
  mid = (mid + Math.imul(al2, bh8)) | 0;
  mid = (mid + Math.imul(ah2, bl8)) | 0;
  hi = (hi + Math.imul(ah2, bh8)) | 0;
  lo = (lo + Math.imul(al1, bl9)) | 0;
  mid = (mid + Math.imul(al1, bh9)) | 0;
  mid = (mid + Math.imul(ah1, bl9)) | 0;
  hi = (hi + Math.imul(ah1, bh9)) | 0;

  let w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
  w10 &= 0x3ffffff;

  /* k = 11 */
  lo = Math.imul(al9, bl2);
  mid = Math.imul(al9, bh2);
  mid = (mid + Math.imul(ah9, bl2)) | 0;
  hi = Math.imul(ah9, bh2);
  lo = (lo + Math.imul(al8, bl3)) | 0;
  mid = (mid + Math.imul(al8, bh3)) | 0;
  mid = (mid + Math.imul(ah8, bl3)) | 0;
  hi = (hi + Math.imul(ah8, bh3)) | 0;
  lo = (lo + Math.imul(al7, bl4)) | 0;
  mid = (mid + Math.imul(al7, bh4)) | 0;
  mid = (mid + Math.imul(ah7, bl4)) | 0;
  hi = (hi + Math.imul(ah7, bh4)) | 0;
  lo = (lo + Math.imul(al6, bl5)) | 0;
  mid = (mid + Math.imul(al6, bh5)) | 0;
  mid = (mid + Math.imul(ah6, bl5)) | 0;
  hi = (hi + Math.imul(ah6, bh5)) | 0;
  lo = (lo + Math.imul(al5, bl6)) | 0;
  mid = (mid + Math.imul(al5, bh6)) | 0;
  mid = (mid + Math.imul(ah5, bl6)) | 0;
  hi = (hi + Math.imul(ah5, bh6)) | 0;
  lo = (lo + Math.imul(al4, bl7)) | 0;
  mid = (mid + Math.imul(al4, bh7)) | 0;
  mid = (mid + Math.imul(ah4, bl7)) | 0;
  hi = (hi + Math.imul(ah4, bh7)) | 0;
  lo = (lo + Math.imul(al3, bl8)) | 0;
  mid = (mid + Math.imul(al3, bh8)) | 0;
  mid = (mid + Math.imul(ah3, bl8)) | 0;
  hi = (hi + Math.imul(ah3, bh8)) | 0;
  lo = (lo + Math.imul(al2, bl9)) | 0;
  mid = (mid + Math.imul(al2, bh9)) | 0;
  mid = (mid + Math.imul(ah2, bl9)) | 0;
  hi = (hi + Math.imul(ah2, bh9)) | 0;

  let w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
  w11 &= 0x3ffffff;

  /* k = 12 */
  lo = Math.imul(al9, bl3);
  mid = Math.imul(al9, bh3);
  mid = (mid + Math.imul(ah9, bl3)) | 0;
  hi = Math.imul(ah9, bh3);
  lo = (lo + Math.imul(al8, bl4)) | 0;
  mid = (mid + Math.imul(al8, bh4)) | 0;
  mid = (mid + Math.imul(ah8, bl4)) | 0;
  hi = (hi + Math.imul(ah8, bh4)) | 0;
  lo = (lo + Math.imul(al7, bl5)) | 0;
  mid = (mid + Math.imul(al7, bh5)) | 0;
  mid = (mid + Math.imul(ah7, bl5)) | 0;
  hi = (hi + Math.imul(ah7, bh5)) | 0;
  lo = (lo + Math.imul(al6, bl6)) | 0;
  mid = (mid + Math.imul(al6, bh6)) | 0;
  mid = (mid + Math.imul(ah6, bl6)) | 0;
  hi = (hi + Math.imul(ah6, bh6)) | 0;
  lo = (lo + Math.imul(al5, bl7)) | 0;
  mid = (mid + Math.imul(al5, bh7)) | 0;
  mid = (mid + Math.imul(ah5, bl7)) | 0;
  hi = (hi + Math.imul(ah5, bh7)) | 0;
  lo = (lo + Math.imul(al4, bl8)) | 0;
  mid = (mid + Math.imul(al4, bh8)) | 0;
  mid = (mid + Math.imul(ah4, bl8)) | 0;
  hi = (hi + Math.imul(ah4, bh8)) | 0;
  lo = (lo + Math.imul(al3, bl9)) | 0;
  mid = (mid + Math.imul(al3, bh9)) | 0;
  mid = (mid + Math.imul(ah3, bl9)) | 0;
  hi = (hi + Math.imul(ah3, bh9)) | 0;

  let w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
  w12 &= 0x3ffffff;

  /* k = 13 */
  lo = Math.imul(al9, bl4);
  mid = Math.imul(al9, bh4);
  mid = (mid + Math.imul(ah9, bl4)) | 0;
  hi = Math.imul(ah9, bh4);
  lo = (lo + Math.imul(al8, bl5)) | 0;
  mid = (mid + Math.imul(al8, bh5)) | 0;
  mid = (mid + Math.imul(ah8, bl5)) | 0;
  hi = (hi + Math.imul(ah8, bh5)) | 0;
  lo = (lo + Math.imul(al7, bl6)) | 0;
  mid = (mid + Math.imul(al7, bh6)) | 0;
  mid = (mid + Math.imul(ah7, bl6)) | 0;
  hi = (hi + Math.imul(ah7, bh6)) | 0;
  lo = (lo + Math.imul(al6, bl7)) | 0;
  mid = (mid + Math.imul(al6, bh7)) | 0;
  mid = (mid + Math.imul(ah6, bl7)) | 0;
  hi = (hi + Math.imul(ah6, bh7)) | 0;
  lo = (lo + Math.imul(al5, bl8)) | 0;
  mid = (mid + Math.imul(al5, bh8)) | 0;
  mid = (mid + Math.imul(ah5, bl8)) | 0;
  hi = (hi + Math.imul(ah5, bh8)) | 0;
  lo = (lo + Math.imul(al4, bl9)) | 0;
  mid = (mid + Math.imul(al4, bh9)) | 0;
  mid = (mid + Math.imul(ah4, bl9)) | 0;
  hi = (hi + Math.imul(ah4, bh9)) | 0;

  let w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
  w13 &= 0x3ffffff;

  /* k = 14 */
  lo = Math.imul(al9, bl5);
  mid = Math.imul(al9, bh5);
  mid = (mid + Math.imul(ah9, bl5)) | 0;
  hi = Math.imul(ah9, bh5);
  lo = (lo + Math.imul(al8, bl6)) | 0;
  mid = (mid + Math.imul(al8, bh6)) | 0;
  mid = (mid + Math.imul(ah8, bl6)) | 0;
  hi = (hi + Math.imul(ah8, bh6)) | 0;
  lo = (lo + Math.imul(al7, bl7)) | 0;
  mid = (mid + Math.imul(al7, bh7)) | 0;
  mid = (mid + Math.imul(ah7, bl7)) | 0;
  hi = (hi + Math.imul(ah7, bh7)) | 0;
  lo = (lo + Math.imul(al6, bl8)) | 0;
  mid = (mid + Math.imul(al6, bh8)) | 0;
  mid = (mid + Math.imul(ah6, bl8)) | 0;
  hi = (hi + Math.imul(ah6, bh8)) | 0;
  lo = (lo + Math.imul(al5, bl9)) | 0;
  mid = (mid + Math.imul(al5, bh9)) | 0;
  mid = (mid + Math.imul(ah5, bl9)) | 0;
  hi = (hi + Math.imul(ah5, bh9)) | 0;

  let w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
  w14 &= 0x3ffffff;

  /* k = 15 */
  lo = Math.imul(al9, bl6);
  mid = Math.imul(al9, bh6);
  mid = (mid + Math.imul(ah9, bl6)) | 0;
  hi = Math.imul(ah9, bh6);
  lo = (lo + Math.imul(al8, bl7)) | 0;
  mid = (mid + Math.imul(al8, bh7)) | 0;
  mid = (mid + Math.imul(ah8, bl7)) | 0;
  hi = (hi + Math.imul(ah8, bh7)) | 0;
  lo = (lo + Math.imul(al7, bl8)) | 0;
  mid = (mid + Math.imul(al7, bh8)) | 0;
  mid = (mid + Math.imul(ah7, bl8)) | 0;
  hi = (hi + Math.imul(ah7, bh8)) | 0;
  lo = (lo + Math.imul(al6, bl9)) | 0;
  mid = (mid + Math.imul(al6, bh9)) | 0;
  mid = (mid + Math.imul(ah6, bl9)) | 0;
  hi = (hi + Math.imul(ah6, bh9)) | 0;

  let w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
  w15 &= 0x3ffffff;

  /* k = 16 */
  lo = Math.imul(al9, bl7);
  mid = Math.imul(al9, bh7);
  mid = (mid + Math.imul(ah9, bl7)) | 0;
  hi = Math.imul(ah9, bh7);
  lo = (lo + Math.imul(al8, bl8)) | 0;
  mid = (mid + Math.imul(al8, bh8)) | 0;
  mid = (mid + Math.imul(ah8, bl8)) | 0;
  hi = (hi + Math.imul(ah8, bh8)) | 0;
  lo = (lo + Math.imul(al7, bl9)) | 0;
  mid = (mid + Math.imul(al7, bh9)) | 0;
  mid = (mid + Math.imul(ah7, bl9)) | 0;
  hi = (hi + Math.imul(ah7, bh9)) | 0;

  let w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
  w16 &= 0x3ffffff;

  /* k = 17 */
  lo = Math.imul(al9, bl8);
  mid = Math.imul(al9, bh8);
  mid = (mid + Math.imul(ah9, bl8)) | 0;
  hi = Math.imul(ah9, bh8);
  lo = (lo + Math.imul(al8, bl9)) | 0;
  mid = (mid + Math.imul(al8, bh9)) | 0;
  mid = (mid + Math.imul(ah8, bl9)) | 0;
  hi = (hi + Math.imul(ah8, bh9)) | 0;

  let w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
  w17 &= 0x3ffffff;

  /* k = 18 */
  lo = Math.imul(al9, bl9);
  mid = Math.imul(al9, bh9);
  mid = (mid + Math.imul(ah9, bl9)) | 0;
  hi = Math.imul(ah9, bh9);

  let w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
  w18 &= 0x3ffffff;

  o[0] = w0;
  o[1] = w1;
  o[2] = w2;
  o[3] = w3;
  o[4] = w4;
  o[5] = w5;
  o[6] = w6;
  o[7] = w7;
  o[8] = w8;
  o[9] = w9;
  o[10] = w10;
  o[11] = w11;
  o[12] = w12;
  o[13] = w13;
  o[14] = w14;
  o[15] = w15;
  o[16] = w16;
  o[17] = w17;
  o[18] = w18;

  if (c !== 0) {
    o[19] = c;
    out.length += 1;
  }

  // Note: we shouldn't need to strip here.
  return out;
}

// Polyfill comb.
if (!Math.imul)
  comb10MulTo = smallMulTo;

/*
 * Expose
 */

BN.Red = Red;

module.exports = BN;
}],
[/* 52 */ 'bcrypto', '/lib/internal/custom-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * custom.js - custom inspect symbol for bcrypto
 * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

exports.custom = 'inspect';
}],
[/* 53 */ 'bcrypto', '/lib/internal/asn1.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * asn1.js - asn1 parsing for bcrypto
 * Copyright (c) 2020, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

const assert = __browser_require__(54 /* 'assert' */, module);
const BN = __browser_require__(50 /* '../bn' */, module);

/*
 * ASN1
 */

function readSize(data, pos, strict) {
  assert((data != null && data._isBuffer === true));
  assert((pos >>> 0) === pos);
  assert(typeof strict === 'boolean');

  if (pos >= data.length)
    throw new Error('Invalid size.');

  const field = data[pos];
  const bytes = field & 0x7f;

  pos += 1;

  // Definite form.
  if ((field & 0x80) === 0) {
    // Short form.
    return [bytes, pos];
  }

  // Indefinite form.
  if (strict && bytes === 0)
    throw new Error('Indefinite length.');

  // Long form.
  let size = 0;

  for (let i = 0; i < bytes; i++) {
    assert(pos < data.length);

    const ch = data[pos];

    pos += 1;

    if (size >= (1 << 24))
      throw new Error('Length too large.');

    size *= 0x100;
    size += ch;

    if (strict && size === 0)
      throw new Error('Unexpected leading zeroes.');
  }

  if (strict && size < 0x80)
    throw new Error('Non-minimal length.');

  return [size, pos];
}

function readSeq(data, pos, strict = true) {
  assert((data != null && data._isBuffer === true));
  assert((pos >>> 0) === pos);
  assert(typeof strict === 'boolean');

  if (pos >= data.length || data[pos] !== 0x30)
    throw new Error('Invalid sequence tag.');

  pos += 1;

  let size;
  [size, pos] = readSize(data, pos, strict);

  if (strict && pos + size !== data.length)
    throw new Error('Trailing bytes.');

  return pos;
}

function readInt(data, pos, strict = true) {
  assert((data != null && data._isBuffer === true));
  assert((pos >>> 0) === pos);
  assert(typeof strict === 'boolean');

  if (pos >= data.length || data[pos] !== 0x02)
    throw new Error('Invalid integer tag.');

  pos += 1;

  let size;
  [size, pos] = readSize(data, pos, strict);

  if (pos + size > data.length)
    throw new Error('Integer body out of bounds.');

  if (strict) {
    // Zero length integer.
    if (size === 0)
      throw new Error('Zero length integer.');

    // No negatives.
    if (data[pos] & 0x80)
      throw new Error('Integers must be positive.');

    // Allow zero only if it prefixes a high bit.
    if (size > 1) {
      if (data[pos] === 0x00 && (data[pos + 1] & 0x80) === 0x00)
        throw new Error('Unexpected leading zeroes.');
    }
  }

  // Eat leading zeroes.
  while (size > 0 && data[pos] === 0x00) {
    pos += 1;
    size -= 1;
  }

  // No reason to have an integer larger than this.
  if (size > 2048)
    throw new Error('Invalid integer size.');

  const num = BN.decode(data.slice(pos, pos + size));

  pos += size;

  return [num, pos];
}

function readVersion(data, pos, version, strict = true) {
  assert((data != null && data._isBuffer === true));
  assert((pos >>> 0) === pos);
  assert((version & 0xff) === version);
  assert(typeof strict === 'boolean');

  let num;
  [num, pos] = readInt(data, pos, strict);

  if (num.cmpn(version) !== 0)
    throw new Error('Invalid version.');

  return pos;
}

function sizeSize(size) {
  assert((size >>> 0) === size);

  if (size <= 0x7f) // [size]
    return 1;

  if (size <= 0xff) // 0x81 [size]
    return 2;

  assert(size <= 0xffff);

  return 3; // 0x82 [size-hi] [size-lo]
}

function sizeSeq(size) {
  return 1 + sizeSize(size) + size;
}

function sizeInt(num) {
  assert(num instanceof BN);

  // 0x02 [size] [0x00?] [int]
  const bits = num.bitLength();

  let size = (bits + 7) >>> 3;

  if (bits > 0 && (bits & 7) === 0)
    size += num.testn(bits - 1);

  if (bits === 0)
    size = 1;

  return 1 + sizeSize(size) + size;
}

function sizeVersion(version) {
  assert((version & 0xff) === version);
  return 3;
}

function writeSize(data, pos, size) {
  assert((data != null && data._isBuffer === true));
  assert((pos >>> 0) === pos);
  assert((size >>> 0) === size);

  if (size <= 0x7f)  {
    // [size]
    data[pos++] = size;
  } else if (size <= 0xff) {
    // 0x81 [size]
    data[pos++] = 0x81;
    data[pos++] = size;
  } else {
    // 0x82 [size-hi] [size-lo]
    assert(size <= 0xffff);
    data[pos++] = 0x82;
    data[pos++] = size >> 8;
    data[pos++] = size & 0xff;
  }

  assert(pos <= data.length);

  return pos;
}

function writeSeq(data, pos, size) {
  assert((data != null && data._isBuffer === true));
  assert((pos >>> 0) === pos);

  data[pos++] = 0x30;

  return writeSize(data, pos, size);
}

function writeInt(data, pos, num) {
  assert((data != null && data._isBuffer === true));
  assert((pos >>> 0) === pos);
  assert(num instanceof BN);

  // 0x02 [size] [0x00?] [int]
  const bits = num.bitLength();

  let size = (bits + 7) >>> 3;
  let pad = 0;

  if (bits > 0 && (bits & 7) === 0)
    pad = num.testn(bits - 1);

  if (bits === 0)
    size = 1;

  data[pos++] = 0x02;

  pos = writeSize(data, pos, pad + size);

  if (pad)
    data[pos++] = 0x00;

  if (bits !== 0)
    num.encode().copy(data, pos);
  else
    data[pos] = 0x00;

  pos += size;

  assert(pos <= data.length);

  return pos;
}

function writeVersion(data, pos, version) {
  assert((data != null && data._isBuffer === true));
  assert((pos >>> 0) === pos);
  assert((version & 0xff) === version);
  assert(pos + 3 <= data.length);

  data[pos++] = 0x02;
  data[pos++] = 0x01;
  data[pos++] = version;

  return pos;
}

/*
 * Expose
 */

exports.readSize = readSize;
exports.readSeq = readSeq;
exports.readInt = readInt;
exports.readVersion = readVersion;
exports.sizeSize = sizeSize;
exports.sizeSeq = sizeSeq;
exports.sizeInt = sizeInt;
exports.sizeVersion = sizeVersion;
exports.writeSize = writeSize;
exports.writeSeq = writeSeq;
exports.writeInt = writeInt;
exports.writeVersion = writeVersion;
}],
[/* 54 */ 'bpkg', '/lib/builtins/assert.js', function(exports, require, module, __filename, __dirname, __meta) {
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var util = __browser_require__(55 /* './internal/util' */, module);
var comparisons = __browser_require__(56 /* './internal/comparisons' */, module);
var isDeepEqual = comparisons.isDeepEqual;
var isDeepStrictEqual = comparisons.isDeepStrictEqual;

/*
 * Constants
 */

var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  // eslint-disable-next-line max-len
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
};

var NO_EXCEPTION_SENTINEL = {};

/**
 * AssertionError
 */

function AssertionError(options) {
  if (typeof options !== 'object' || options === null)
    throw new util.ArgError('options', options, 'Object');

  var message = null;
  var operator = 'fail';

  if (options.message != null)
    message = String(options.message);

  if (typeof options.operator === 'string')
    operator = options.operator;

  if (message == null) {
    if (operator === 'fail') {
      message = 'Assertion failed.';
    } else {
      message = kReadableOperator[operator]
              + ' ' + util.stringify(options.actual)
              + ' ' + operator
              + ' ' + util.stringify(options.expected);
    }
  }

  Error.call(this, message);

  var start = AssertionError;

  if (typeof options.stackStartFn === 'function')
    start = options.stackStartFn;

  this.name = 'AssertionError [ERR_ASSERTION]';
  this.code = 'ERR_ASSERTION';
  this.message = message;
  this.generatedMessage = !options.message;
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = operator;

  if (Error.captureStackTrace)
    Error.captureStackTrace(this, start);
}

util.inherits(AssertionError, Error);

/*
 * Assert
 */

var assert = function ok(value, message) {
  innerOk(ok, arguments.length, value, message);
};

assert.AssertionError = AssertionError;

assert.ok = assert;

assert.fail = function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;

  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (argsLen === 2)
      operator = '!=';
  }

  if (message instanceof Error)
    throw message;

  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };

  if (message !== undefined)
    errArgs.message = message;

  var err = new AssertionError(errArgs);

  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }

  throw err;
};

assert.equal = function equal(actual, expected, message) {
  // eslint-disable-next-line eqeqeq
  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
};

assert.notEqual = function notEqual(actual, expected, message) {
  // eslint-disable-next-line eqeqeq
  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
};

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
};

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (!util.equals(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (util.equals(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};

assert.throws = function throws(promiseFn, error, message) {
  expectsError(throws, getActual(promiseFn), error, message);
};

assert.rejects = function rejects(promiseFn, error, message) {
  return new Promise(function(resolve, reject) {
    waitForActual(promiseFn).then(function(res) {
      try {
        expectsError(rejects, res, error, message);
      } catch (e) {
        reject(e);
        return;
      }
      resolve();
    });
  });
};

assert.doesNotThrow = function doesNotThrow(fn, error, message) {
  expectsNoError(doesNotThrow, getActual(fn), error, message);
};

assert.doesNotReject = function doesNotReject(fn, error, message) {
  return new Promise(function(resolve, reject) {
    waitForActual(fn).then(function(res) {
      try {
        expectsNoError(doesNotReject, res, error, message);
      } catch (e) {
        reject(e);
        return;
      }
      resolve();
    });
  });
};

assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';

    if (typeof err === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor)
        message += err.constructor.name;
      else
        message += err.message;
    } else {
      message += util.stringify(err);
    }

    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    });

    var origStack = err.stack;

    if (typeof origStack === 'string') {
      var tmp2 = origStack.split('\n');
      tmp2.shift();

      var tmp1 = newErr.stack.split('\n');

      for (var i = 0; i < tmp2.length; i++) {
        var pos = tmp1.indexOf(tmp2[i]);
        if (pos !== -1) {
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }

      newErr.stack = tmp1.join('\n') + '\n' + tmp2.join('\n');
    }

    throw newErr;
  }
};

function strict(value, message) {
  innerOk(strict, arguments.length, value, message);
}

assert.strict = util.assign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});

assert.strict.strict = assert.strict;

/*
 * Helpers
 */

function innerFail(obj) {
  if (obj.message instanceof Error)
    throw obj.message;

  throw new AssertionError(obj);
}

function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;

    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message == null) {
      generatedMessage = true;
      message = 'Assertion failed.';
    } else if (message instanceof Error) {
      throw message;
    }

    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });

    err.generatedMessage = generatedMessage;

    throw err;
  }
}

function Comparison(obj, keys, actual) {
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];

    if (key in obj) {
      if (actual !== undefined
          && typeof actual[key] === 'string'
          && (obj[key] instanceof RegExp)
          && obj[key].test(actual[key])) {
        this[key] = actual[key];
      } else {
        this[key] = obj[key];
      }
    }
  }
}

function compareExceptionKey(actual, expected, key, message, keys) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);

      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: assert.throws
      });

      err.actual = actual;
      err.expected = expected;
      err.operator = 'throws';

      throw err;
    }

    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'throws',
      stackStartFn: assert.throws
    });
  }
}

function expectedException(actual, expected, msg) {
  if (typeof expected !== 'function') {
    if (expected instanceof RegExp)
      return expected.test(actual);

    if (arguments.length === 2)
      throw new util.ArgError('expected', expected, ['Function', 'RegExp']);

    if (typeof actual !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: assert.throws
      });

      err.operator = 'throws';

      throw err;
    }

    var keys = util.getOwnKeys(expected);

    if (expected instanceof Error)
      keys.push('name', 'message');
    else if (keys.length === 0)
      throw new util.ArgError('error', expected, 'may not be an empty object');

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (typeof actual[key] === 'string'
          && (expected[key] instanceof RegExp)
          && expected[key].test(actual[key])) {
        continue;
      }

      compareExceptionKey(actual, expected, key, msg, keys);
    }

    return true;
  }

  if (expected.prototype !== undefined && (actual instanceof expected))
    return true;

  if (expected.prototype instanceof Error)
    return false;

  return expected.call({}, actual) === true;
}

function getActual(fn) {
  if (typeof fn !== 'function')
    throw new util.ArgError('fn', fn, 'Function');

  try {
    fn();
  } catch (e) {
    return e;
  }

  return NO_EXCEPTION_SENTINEL;
}

function checkIsPromise(obj) {
  return obj !== null
    && typeof obj === 'object'
    && typeof obj.then === 'function'
    && typeof obj.catch === 'function';
}

function waitForActual(promiseFn) {
  return new Promise(function(resolve, reject) {
    try {
      var resultPromise;

      if (typeof promiseFn === 'function') {
        resultPromise = promiseFn();

        if (!checkIsPromise(resultPromise)) {
          throw new util.ArgError('promiseFn',
            resultPromise, 'instance of Promise');
        }
      } else if (checkIsPromise(promiseFn)) {
        resultPromise = promiseFn;
      } else {
        throw new util.ArgError('promiseFn',
          promiseFn, ['Function', 'Promise']);
      }

      resultPromise.then(function() {
        resolve(NO_EXCEPTION_SENTINEL);
      }, resolve);
    } catch (e) {
      resolve(e);
    }
  });
}

function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new util.ArgError('error', error,
        ['Object', 'Error', 'Function', 'RegExp']);
    }

    if (typeof actual === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new util.NodeError(
          'ERR_AMBIGUOUS_ARGUMENT',
          'The error message "' + actual.message
          + '" is identical to the message.'
        );
      }
    } else if (actual === error) {
      throw new util.NodeError(
        'ERR_AMBIGUOUS_ARGUMENT',
        'The error "' + actual + '" is identical to the message.'
      );
    }

    message = error;
    error = undefined;
  } else if (error != null
             && typeof error !== 'object'
             && typeof error !== 'function') {
    throw new util.ArgError('error', error,
      ['Object', 'Error', 'Function', 'RegExp']);
  }

  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';

    if (error && error.name)
      details += ' (' + error.name + ')';

    details += message ? ': ' + message : '.';

    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';

    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: 'Missing expected ' + fnType + details,
      stackStartFn: stackStartFn
    });
  }

  if (error && expectedException(actual, error, message) === false)
    throw actual;
}

function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL)
    return;

  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }

  if (!error || expectedException(actual, error)) {
    var details = message ? ': ' + message : '.';
    var fnType = stackStartFn.name === 'doesNotReject'
      ? 'rejection'
      : 'exception';

    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: 'Got unwanted ' + fnType + details + '\n'
             + 'Actual message: "' + (actual && actual.message) + '"',
      stackStartFn: stackStartFn
    });
  }

  throw actual;
}

/*
 * Expose
 */

module.exports = assert;
}],
[/* 55 */ 'bpkg', '/lib/builtins/internal/util.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

var HAS_ARRAY_BUFFER = typeof ArrayBuffer === 'function';
var HAS_SHARED_ARRAY_BUFFER = typeof SharedArrayBuffer === 'function';
var HAS_BIGINT = typeof BigInt === 'function';
var HAS_SYMBOL = typeof Symbol === 'function';
var HAS_FLOAT32_ARRAY = typeof Float32Array === 'function';
var HAS_FLOAT64_ARRAY = typeof Float64Array === 'function';
var HAS_MAP = typeof Map === 'function';
var HAS_SET = typeof Set === 'function';
var HAS_PROTO = ({ __proto__: { a: 1 } }).a === 1;

function assign(target) {
  if (Object.assign)
    return Object.assign.apply(Object, arguments);

  for (var i = 1; i < arguments.length; i++) {
    var obj = arguments[i];

    if (obj === null || typeof obj !== 'object')
      continue;

    var keys = getOwnKeys(obj);

    for (var j = 0; j < keys.length; j++)
      target[keys[j]] = obj[keys[j]];
  }

  return target;
}

function equals(x, y) {
  if (Object.is)
    return Object.is(x, y);

  if (x === y)
    return x !== 0 || 1 / x === 1 / y;

  return x !== x && y !== y;
}

function filter(arr, func) {
  if (arr.filter)
    return arr.filter(func);

  var out = [];

  for (var i = 0; i < arr.length; i++) {
    if (func(arr[i]))
      out.push(arr[i]);
  }

  return out;
}

function funcName(func) {
  var name;

  try {
    name = func.name;
  } catch (e) {
    ;
  }

  if (typeof name !== 'string' || name.length === 0)
    return 'Function';

  return 'Function: ' + name;
}

function getOwnKeys(obj) {
  if (Object.keys)
    return Object.keys(obj);

  var keys = [];
  var key;

  for (key in obj) {
    if (hasOwnProperty.call(obj, key))
      keys.push(key);
  }

  return keys;
}

function getOwnNonIndexProperties(obj, enumerable) {
  var numeric = (obj.length >>> 0) === obj.length;
  var keys = enumerable ? getOwnKeys(obj) : getOwnPropertyNames(obj);
  var out = [];
  var i, key, symbols;

  for (i = 0; i < keys.length; i++) {
    key = keys[i];

    if (numeric) {
      if (/^\d+$/.test(key) && (key >>> 0) < obj.length)
        continue;
    }

    out.push(key);
  }

  symbols = getOwnPropertySymbols(obj);

  for (i = 0; i < symbols.length; i++) {
    key = symbols[i];
    if (!enumerable || propertyIsEnumerable(obj, key))
      out.push(key);
  }

  return out;
}

function getOwnPropertyNames(obj) {
  if (Object.getOwnPropertyNames)
    return Object.getOwnPropertyNames(obj);

  return getOwnKeys(obj);
}

function getOwnPropertySymbols(obj) {
  if (Object.getOwnPropertySymbols)
    return Object.getOwnPropertySymbols(obj);

  return [];
}

function getPrototypeOf(obj) {
  if (Object.getPrototypeOf)
    return Object.getPrototypeOf(obj);

  if (obj == null)
    return undefined;

  if (HAS_PROTO)
    return obj.__proto__;

  if (obj.constructor)
    return obj.constructor.prototype;

  return undefined;
}

function hasOwnProperty(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

function isAnyArrayBuffer(obj) {
  if (HAS_ARRAY_BUFFER) {
    if (obj instanceof ArrayBuffer)
      return true;
  }

  if (HAS_SHARED_ARRAY_BUFFER) {
    if (obj instanceof SharedArrayBuffer)
      return true;
  }

  return false;
}

function isArray(obj) {
  if (Array.isArray)
    return Array.isArray(obj);

  return obj instanceof Array;
}

function isArrayBufferView(obj) {
  if (!HAS_ARRAY_BUFFER)
    return false;

  if (obj == null)
    return false;

  if (ArrayBuffer.isView)
    return ArrayBuffer.isView(obj);

  return isAnyArrayBuffer(obj.buffer);
}

function isBigIntObject(obj) {
  return HAS_BIGINT && (obj instanceof BigInt);
}

function isBooleanObject(obj) {
  return obj instanceof Boolean;
}

function isBoxedPrimitive(obj) {
  if (obj === null || typeof obj !== 'object')
    return false;

  return isNumberObject(obj)
      || isStringObject(obj)
      || isBooleanObject(obj)
      || isBigIntObject(obj)
      || isSymbolObject(obj);
}

function isDate(obj) {
  return obj instanceof Date;
}

function isFloat32Array(obj) {
  return HAS_FLOAT32_ARRAY && (obj instanceof Float32Array);
}

function isFloat64Array(obj) {
  return HAS_FLOAT64_ARRAY && (obj instanceof Float64Array);
}

function isMap(obj) {
  return HAS_MAP && (obj instanceof Map);
}

function isNaN(n) {
  return n !== n;
}

function isNumberObject(obj) {
  return obj instanceof Number;
}

function isRegExp(obj) {
  return obj instanceof RegExp;
}

function isSet(obj) {
  return HAS_SET && (obj instanceof Set);
}

function isStringObject(obj) {
  return obj instanceof String;
}

function isSymbolObject(obj) {
  return HAS_SYMBOL && (obj instanceof Symbol);
}

function inherits(child, parent) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(child, parent);
    Object.setPrototypeOf(child.prototype, parent.prototype);
    return;
  }

  if (HAS_PROTO) {
    child.__proto__ = parent;
    child.prototype.__proto__ = parent.prototype;
    return;
  }

  if (Object.create) {
    child.prototype = Object.create(parent.prototype, {
      constructor: {
        value: child,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return;
  }

  var fn = function() {};
  fn.prototype = parent.prototype;
  // eslint-disable-next-line
  child.prototype = new fn();
  child.prototype.constructor = child;
}

function propertyIsEnumerable(obj, key) {
  if (!Object.getOwnPropertyDescriptor)
    return hasOwnProperty(obj, key);

  var desc = Object.getOwnPropertyDescriptor(obj, key);

  return desc != null && desc.enumerable === true;
}

function stringify(value) {
  switch (typeof value) {
    case 'undefined':
    case 'boolean':
    case 'number':
    case 'symbol':
      return String(value);
    case 'bigint':
      return value + 'n';
    case 'string':
      if (value.length > 20)
        value = value.substring(0, 17) + '...';
      return '"' + value + '"';
    case 'object':
      if (value === null)
        return 'null';
      return '[' + toName(value) + ']';
    case 'function':
      return '[' + funcName(value) + ']';
    default:
      return '[' + (typeof value) + ']';
  }
}

function toName(obj) {
  return toString(obj).slice(8, -1);
}

function toString(obj) {
  if (obj === undefined)
    return '[object Undefined]';

  if (obj === null)
    return '[object Null]';

  return Object.prototype.toString.call(obj);
}

function ArgError(name, value, expect) {
  var msg;

  if (isArray(expect) && expect.length === 1)
    expect = expect[0];

  if (isArray(expect)) {
    var last = expect.pop();

    msg = 'The "' + name + '" argument must be one of type '
        + expect.join(', ') + ', or ' + last + '. '
        + 'Received type ' + (typeof value);
  } else {
    msg = 'The "' + name + '" argument must be of type ' + expect + '. '
        + 'Received type ' + (typeof value);
  }

  TypeError.call(this, msg);

  this.name = 'TypeError [ERR_INVALID_ARG_TYPE]';
  this.code = 'ERR_INVALID_ARG_TYPE';
  this.message = msg;

  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ArgError);
}

inherits(ArgError, TypeError);

function NodeError(code, msg) {
  Error.call(this, msg);

  this.name = 'Error [' + code + ']';
  this.code = code;
  this.message = msg;

  if (Error.captureStackTrace)
    Error.captureStackTrace(this, NodeError);
}

inherits(NodeError, Error);

/*
 * Expose
 */

exports.assign = assign;
exports.equals = equals;
exports.filter = filter;
exports.funcName = funcName;
exports.getOwnKeys = getOwnKeys;
exports.getOwnNonIndexProperties = getOwnNonIndexProperties;
exports.getOwnPropertyNames = getOwnPropertyNames;
exports.getOwnPropertySymbols = getOwnPropertySymbols;
exports.getPrototypeOf = getPrototypeOf;
exports.hasOwnProperty = hasOwnProperty;
exports.isAnyArrayBuffer = isAnyArrayBuffer;
exports.isArray = isArray;
exports.isArrayBufferView = isArrayBufferView;
exports.isBigIntObject = isBigIntObject;
exports.isBooleanObject = isBooleanObject;
exports.isBoxedPrimitive = isBoxedPrimitive;
exports.isDate = isDate;
exports.isFloat32Array = isFloat32Array;
exports.isFloat64Array = isFloat64Array;
exports.isMap = isMap;
exports.isNaN = isNaN;
exports.isNumberObject = isNumberObject;
exports.isRegExp = isRegExp;
exports.isSet = isSet;
exports.isStringObject = isStringObject;
exports.isSymbolObject = isSymbolObject;
exports.inherits = inherits;
exports.propertyIsEnumerable = propertyIsEnumerable;
exports.stringify = stringify;
exports.toName = toName;
exports.toString = toString;
exports.ArgError = ArgError;
exports.NodeError = NodeError;
}],
[/* 56 */ 'bpkg', '/lib/builtins/internal/comparisons.js', function(exports, require, module, __filename, __dirname, __meta) {
'use strict';

var util = __browser_require__(55 /* './util' */, module);

var kStrict = true;
var kLoose = false;

var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3;

function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}

function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}

function innerDeepEqual(val1, val2, strict, memos) {
  if (val1 === val2) {
    if (val1 !== 0)
      return true;
    return strict ? util.equals(val1, val2) : true;
  }

  if (strict) {
    if (typeof val1 !== 'object')
      return typeof val1 === 'number' && util.isNaN(val1) && util.isNaN(val2);

    if (typeof val2 !== 'object' || val1 === null || val2 === null)
      return false;

    if (util.getPrototypeOf(val1) !== util.getPrototypeOf(val2))
      return false;
  } else {
    if (val1 === null || typeof val1 !== 'object') {
      if (val2 === null || typeof val2 !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }

      return false;
    }

    if (val2 === null || typeof val2 !== 'object')
      return false;
  }

  var val1Tag = util.toString(val1);
  var val2Tag = util.toString(val2);
  var keys1, keys2;

  if (val1Tag !== val2Tag)
    return false;

  if (util.isArray(val1)) {
    if (val1.length !== val2.length)
      return false;

    keys1 = util.getOwnNonIndexProperties(val1, true);
    keys2 = util.getOwnNonIndexProperties(val2, true);

    if (keys1.length !== keys2.length)
      return false;

    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  }

  if (val1Tag === '[object Object]')
    return keyCheck(val1, val2, strict, memos, kNoIterator);

  if (util.isDate(val1)) {
    if (val1.getTime() !== val2.getTime())
      return false;
  } else if (util.isRegExp(val1)) {
    if (!areSimilarRegExps(val1, val2))
      return false;
  } else if (val1 instanceof Error) {
    if (val1.message !== val2.message || val1.name !== val2.name)
      return false;
  } else if (util.isArrayBufferView(val1)) {
    if (!strict && (util.isFloat32Array(val1) || util.isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2))
        return false;
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    }

    keys1 = util.getOwnNonIndexProperties(val1, true);
    keys2 = util.getOwnNonIndexProperties(val2, true);

    if (keys1.length !== keys2.length)
      return false;

    return keyCheck(val1, val2, strict, memos, kNoIterator, keys1);
  } else if (util.isSet(val1)) {
    if (!util.isSet(val2) || val1.size !== val2.size)
      return false;

    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (util.isMap(val1)) {
    if (!util.isMap(val2) || val1.size !== val2.size)
      return false;

    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (util.isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2))
      return false;
  } else if (util.isBoxedPrimitive(val1)
             && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }

  return keyCheck(val1, val2, strict, memos, kNoIterator);
}

function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  if (arguments.length === 5) {
    aKeys = util.getOwnKeys(val1);
    var bKeys = util.getOwnKeys(val2);

    if (aKeys.length !== bKeys.length)
      return false;
  }

  var i = 0;
  for (; i < aKeys.length; i++) {
    if (!util.hasOwnProperty(val2, aKeys[i]))
      return false;
  }

  if (strict && arguments.length === 5) {
    var symbolKeysA = util.getOwnPropertySymbols(val1);
    var symbolKeysB;

    if (symbolKeysA.length !== 0) {
      var count = 0;
      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];
        if (util.propertyIsEnumerable(val1, key)) {
          if (!util.propertyIsEnumerable(val2, key))
            return false;
          aKeys.push(key);
          count++;
        } else if (util.propertyIsEnumerable(val2, key)) {
          return false;
        }
      }

      symbolKeysB = util.getOwnPropertySymbols(val2);

      if (symbolKeysA.length !== symbolKeysB.length
          && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      symbolKeysB = util.getOwnPropertySymbols(val2);

      if (symbolKeysB.length !== 0
          && getEnumerables(val2, symbolKeysB).length !== 0) {
        return false;
      }
    }
  }

  if (aKeys.length === 0
      && (iterationType === kNoIterator
        || iterationType === kIsArray && val1.length === 0
        || val1.size === 0)) {
    return true;
  }

  if (memos === undefined) {
    memos = {
      val1: createMap(),
      val2: createMap(),
      position: 0
    };
  } else {
    var val2MemoA = memos.val1.get(val1);

    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);

      if (val2MemoB !== undefined)
        return val2MemoA === val2MemoB;
    }

    memos.position++;
  }

  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);

  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);

  memos.val1.delete(val1);
  memos.val2.delete(val2);

  return areEq;
}

function getEnumerables(val, keys) {
  return util.filter(keys, function(k) {
    return util.propertyIsEnumerable(val, k);
  });
}

function setHasEqualElement(set, val1, strict, memo) {
  var iter = set.keys();

  // for val2 of set
  for (;;) {
    var result = iter.next();

    if (result.done)
      break;

    var val2 = result.value;

    if (innerDeepEqual(val1, val2, strict, memo)) {
      set.delete(val2);
      return true;
    }
  }

  return false;
}

function setEquiv(a, b, strict, memo) {
  var set = null;
  var iter, result, val;

  iter = a.keys();

  // for val of a
  for (;;) {
    result = iter.next();

    if (result.done)
      break;

    val = result.value;

    if (typeof val === 'object' && val !== null) {
      if (set === null)
        set = new Set();

      set.add(val);
    } else if (!b.has(val)) {
      if (strict)
        return false;

      if (!setMightHaveLoosePrim(a, b, val))
        return false;

      if (set === null)
        set = new Set();

      set.add(val);
    }
  }

  if (set !== null) {
    iter = b.keys();

    // for val of b
    for (;;) {
      result = iter.next();

      if (result.done)
        break;

      val = result.value;

      if (typeof val === 'object' && val !== null) {
        if (!setHasEqualElement(set, val, strict, memo))
          return false;
      } else if (!strict
                 && !a.has(val)
                 && !setHasEqualElement(set, val, strict, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null)
    return altValue;

  return b.has(altValue) && !a.has(altValue);
}

function mapEquiv(a, b, strict, memo) {
  var set = null;
  var iter, result;

  iter = a.entries();

  // for [key1, item1] of a
  for (;;) {
    result = iter.next();

    if (result.done)
      break;

    var key1 = result.value[0];
    var item1 = result.value[1];

    if (typeof key1 === 'object' && key1 !== null) {
      if (set === null)
        set = new Set();
      set.add(key1);
    } else {
      var item2 = b.get(key1);

      if (item2 === undefined
          && !b.has(key1)
          || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict)
          return false;

        if (!mapMightHaveLoosePrim(a, b, key1, item1, memo))
          return false;

        if (set === null)
          set = new Set();

        set.add(key1);
      }
    }
  }

  if (set !== null) {
    iter = b.entries();

    // for [key, item] of b
    for (;;) {
      result = iter.next();

      if (result.done)
        break;

      var key = result.value[0];
      var item = result.value[1];

      if (typeof key === 'object' && key !== null) {
        if (!mapHasEqualEntry(set, a, key, item, strict, memo))
          return false;
      } else if (!strict
                 && (!a.has(key)
                     || !innerDeepEqual(a.get(key), item, false, memo))
                     && !mapHasEqualEntry(set, a, key, item, false, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null)
    return altValue;

  var curB = b.get(altValue);

  if (curB === undefined
      && !b.has(altValue)
      || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }

  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}

function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  var iter = set.keys();

  // for key2 of set
  for (;;) {
    var result = iter.next();

    if (result.done)
      break;

    var key2 = result.value;

    if (innerDeepEqual(key1, key2, strict, memo)
        && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }

  return false;
}

function objEquiv(a, b, strict, keys, memos, iterationType) {
  var i = 0;
  var key;

  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos))
      return false;
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos))
      return false;
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (util.hasOwnProperty(a, i)) {
        if (!util.hasOwnProperty(b, i)
            || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (util.hasOwnProperty(b, i)) {
        return false;
      } else {
        var keysA = util.getOwnKeys(a);

        for (; i < keysA.length; i++) {
          key = keysA[i];
          if (!util.hasOwnProperty(b, key)
              || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }

        if (keysA.length !== util.getOwnKeys(b).length)
          return false;

        return true;
      }
    }
  }

  for (i = 0; i < keys.length; i++) {
    key = keys[i];
    if (!innerDeepEqual(a[key], b[key], strict, memos))
      return false;
  }

  return true;
}

function findLooseMatchingPrimitives(prim) {
  switch (typeof prim) {
    case 'undefined':
      return null;
    case 'object':
      return undefined;
    case 'symbol':
      return false;
    case 'string':
      prim = Number(prim);
    case 'number':
      if (util.isNaN(prim))
        return false;
  }
  return true;
}

function areSimilarRegExps(a, b) {
  return a.source === b.source && a.flags === b.flags;
}

function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength)
    return false;

  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset])
      return false;
  }

  return true;
}

function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength)
    return false;

  return bytesEqual(new Uint8Array(a.buffer, a.byteOffset, a.byteLength),
                    new Uint8Array(b.buffer, b.byteOffset, b.byteLength));
}

function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength
      && bytesEqual(new Uint8Array(buf1), new Uint8Array(buf2));
}

function bytesEqual(a, b) {
  if (a.length !== b.length)
    return false;

  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i])
      return false;
  }

  return true;
}

function isEqualBoxedPrimitive(val1, val2) {
  if (util.isNumberObject(val1)) {
    return util.isNumberObject(val2)
        && util.equals(val1, val2);
  }

  if (util.isStringObject(val1)) {
    return util.isStringObject(val2)
        && val1.valueOf() === val2.valueOf();
  }

  if (util.isBooleanObject(val1)) {
    return util.isBooleanObject(val2)
        && val1.valueOf() === val2.valueOf();
  }

  if (util.isBigIntObject(val1))
    return util.isBigIntObject(val2)
        && val1.valueOf() === val2.valueOf();

  return util.isSymbolObject(val2)
      && val1.valueOf() === val2.valueOf();
}

function createMap() {
  if (typeof Map === 'function')
    return new Map();

  return new CompareMap();
}

function CompareMap() {
  this.keys = [];
  this.values = [];
}

CompareMap.prototype.get = function(key) {
  var i = this.keys.indexOf(key);
  return i !== -1 ? this.values[i] : undefined;
};

CompareMap.prototype.set = function(key, value) {
  var i = this.keys.indexOf(key);

  if (i === -1) {
    this.keys.push(key);
    this.values.push(value);
    return;
  }

  this.values[i] = value;
};

CompareMap.prototype.delete = function(key) {
  var i = this.keys.indexOf(key);

  if (i === -1)
    return;

  this.keys.splice(i, 1);
  this.values.splice(i, 1);
};

/*
 * Expose
 */

exports.isDeepEqual = isDeepEqual;
exports.isDeepStrictEqual = isDeepStrictEqual;
}],
[/* 57 */ 'bcrypto', '/lib/js/schnorr-legacy.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * schnorr-legacy.js - bip-schnorr for bcrypto
 * Copyright (c) 2019-2020, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on sipa/bip-schnorr:
 *   Copyright (c) 2018-2019, Pieter Wuille (2-clause BSD License).
 *   https://github.com/sipa/bips/blob/d194620/bip-schnorr/reference.py
 *
 * Parts of this software are based on ElementsProject/secp256k1-zkp:
 *   Copyright (c) 2013, Pieter Wuille.
 *   https://github.com/ElementsProject/secp256k1-zkp
 *
 * Resources:
 *   https://github.com/sipa/bips/blob/d194620/bip-schnorr.mediawiki
 *   https://github.com/sipa/bips/blob/d194620/bip-schnorr/reference.py
 *   https://github.com/sipa/bips/blob/d194620/bip-schnorr/test-vectors.csv
 *   https://github.com/ElementsProject/secp256k1-zkp/tree/11af701/src/modules/schnorrsig
 *   https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/2019-05-15-schnorr.md
 *
 * References:
 *
 *   [SCHNORR] Schnorr Signatures for secp256k1
 *     Pieter Wuille
 *     https://github.com/sipa/bips/blob/d194620/bip-schnorr.mediawiki
 *
 *   [CASH] Schnorr Signature specification
 *     Mark B. Lundeberg
 *     https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/2019-05-15-schnorr.md
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);
const BatchRNG = __browser_require__(58 /* './batch-rng' */, module);
const BN = __browser_require__(50 /* '../bn' */, module);

/**
 * Schnorr
 */

class Schnorr {
  constructor(curve, hash) {
    this.curve = curve;
    this.hash = hash;
    this.rng = new BatchRNG(this.curve, this.encode.bind(this));
  }

  check() {
    // [SCHNORR] "Footnotes".
    // Must be congruent to 3 mod 4.
    if (this.curve.p.andln(3) !== 3)
      throw new Error(`Schnorr is not supported for ${this.curve.id}.`);
  }

  encode(key) {
    // Extra speedy key reserialization.
    assert((key != null && key._isBuffer === true));

    const {fieldSize} = this.curve;

    if (key.length === 1 + fieldSize)
      return key;

    if (key.length !== 1 + fieldSize * 2)
      throw new Error('Invalid point.');

    const out = Buffer.alloc(1 + fieldSize);

    out[0] = 0x02 | (key[key.length - 1] & 1);
    key.copy(out, 1, 1, 1 + fieldSize);

    return out;
  }

  hashInt(...items) {
    // [SCHNORR] "Specification".
    // eslint-disable-next-line
    const h = new this.hash();

    h.init();

    for (const item of items)
      h.update(item);

    let hash = h.final(this.curve.scalarSize);

    if (hash.length > this.curve.scalarSize)
      hash = hash.slice(0, this.curve.scalarSize);

    const num = BN.decode(hash, this.curve.endian);

    num.iumaskn(this.curve.scalarBits);

    return num.imod(this.curve.n);
  }

  hashNonce(a, m) {
    return this.hashInt(a, m);
  }

  hashChallenge(R, A, m) {
    return this.hashInt(R, this.encode(A), m);
  }

  sign(msg, key) {
    assert((msg != null && msg._isBuffer === true));

    this.check();

    return this._sign(msg, key);
  }

  _sign(msg, key) {
    // Schnorr Signing.
    //
    // [SCHNORR] "Signing".
    // [CASH] "Recommended practices for secure signature generation".
    //
    // Assumptions:
    //
    //   - Let `H` be a cryptographic hash function.
    //   - Let `m` be a 32-byte array.
    //   - Let `a` be a secret non-zero scalar.
    //   - k != 0.
    //
    // Computation:
    //
    //   A = G * a
    //   k = H(a, m) mod n
    //   R = G * k
    //   k = -k mod n, if y(R) is not square
    //   r = x(R)
    //   e = H(r, A, m) mod n
    //   s = (k + e * a) mod n
    //   S = (r, s)
    //
    // Note that `k` must remain secret,
    // otherwise an attacker can compute:
    //
    //   a = (s - k) / e mod n
    const {n} = this.curve;
    const G = this.curve.g;
    const a = this.curve.decodeScalar(key);

    if (a.isZero() || a.cmp(n) >= 0)
      throw new Error('Invalid private key.');

    const A = G.mulBlind(a);
    const k = this.hashNonce(key, msg);

    if (k.isZero())
      throw new Error('Signing failed (k\' = 0).');

    const R = G.mulBlind(k);

    if (!R.isSquare())
      k.ineg().imod(n);

    const Rraw = R.encodeX();
    const Araw = A.encode();
    const e = this.hashChallenge(Rraw, Araw, msg);
    const s = k.add(e.mul(a)).imod(n);

    return Buffer.concat([Rraw, this.curve.encodeScalar(s)]);
  }

  verify(msg, sig, key) {
    assert((msg != null && msg._isBuffer === true));
    assert((sig != null && sig._isBuffer === true));
    assert((key != null && key._isBuffer === true));

    this.check();

    if (sig.length !== this.curve.fieldSize + this.curve.scalarSize)
      return false;

    try {
      return this._verify(msg, sig, key);
    } catch (e) {
      return false;
    }
  }

  _verify(msg, sig, key) {
    // Schnorr Verification.
    //
    // [SCHNORR] "Verification".
    // [CASH] "Signature verification algorithm".
    //
    // Assumptions:
    //
    //   - Let `H` be a cryptographic hash function.
    //   - Let `m` be a 32-byte array.
    //   - Let `r` and `s` be signature elements.
    //   - Let `A` be a valid group element.
    //   - r^3 + a * r + b is square in F(p).
    //   - sqrt(r^3 + a * r + b) is square in F(p).
    //   - r < p, s < n.
    //   - R != O.
    //
    // Computation:
    //
    //   R = (r, sqrt(r^3 + a * r + b))
    //   e = H(r, A, m) mod n
    //   R == G * s - A * e
    //
    // We can skip a square root with:
    //
    //   e = H(r, A, m) mod n
    //   R = G * s - A * e
    //   y(R) is square
    //   x(R) == r
    //
    // We can also avoid affinization by
    // replacing the two assertions with:
    //
    //   (y(R) * z(R) mod p) is square
    //   x(R) == r * z(R)^2 mod p
    //
    // Furthermore, squareness can be calculated
    // with a variable time Jacobi symbol algorithm.
    const {p, n} = this.curve;
    const G = this.curve.g;
    const Rraw = sig.slice(0, this.curve.fieldSize);
    const sraw = sig.slice(this.curve.fieldSize);
    const r = this.curve.decodeField(Rraw);
    const s = this.curve.decodeScalar(sraw);
    const A = this.curve.decodePoint(key);

    if (r.cmp(p) >= 0 || s.cmp(n) >= 0)
      return false;

    const e = this.hashChallenge(Rraw, key, msg);
    const R = G.jmulAdd(s, A, e.ineg().imod(n));

    if (!R.isSquare())
      return false;

    if (!R.eqX(r))
      return false;

    return true;
  }

  verifyBatch(batch) {
    assert(Array.isArray(batch));

    this.check();

    for (const item of batch) {
      assert(Array.isArray(item) && item.length === 3);

      const [msg, sig, key] = item;

      assert((msg != null && msg._isBuffer === true));
      assert((sig != null && sig._isBuffer === true));
      assert((key != null && key._isBuffer === true));

      if (sig.length !== this.curve.fieldSize + this.curve.scalarSize)
        return false;
    }

    try {
      return this._verifyBatch(batch);
    } catch (e) {
      return false;
    }
  }

  _verifyBatch(batch) {
    // Schnorr Batch Verification.
    //
    // [SCHNORR] "Batch Verification".
    //
    // Assumptions:
    //
    //   - Let `H` be a cryptographic hash function.
    //   - Let `m` be a 32-byte array.
    //   - Let `r` and `s` be signature elements.
    //   - Let `A` be a valid group element.
    //   - Let `i` be the batch item index.
    //   - r^3 + a * r + b is square in F(p).
    //   - sqrt(r^3 + a * r + b) is square in F(p).
    //   - r < p, s < n.
    //   - a1 = 1 mod n.
    //
    // Computation:
    //
    //   Ri = (ri, sqrt(ri^3 + a * ri + b))
    //   ei = H(ri, Ai, mi) mod n
    //   ai = random integer in [1,n-1]
    //   lhs = si * ai + ... mod n
    //   rhs = Ri * ai + Ai * (ei * ai mod n) + ...
    //   G * -lhs + rhs == O
    const {n} = this.curve;
    const G = this.curve.g;
    const points = new Array(1 + batch.length * 2);
    const coeffs = new Array(1 + batch.length * 2);
    const sum = new BN(0);

    this.rng.init(batch);

    points[0] = G;
    coeffs[0] = sum;

    for (let i = 0; i < batch.length; i++) {
      const [msg, sig, key] = batch[i];
      const Rraw = sig.slice(0, this.curve.fieldSize);
      const sraw = sig.slice(this.curve.fieldSize);
      const R = this.curve.decodeSquare(Rraw);
      const s = this.curve.decodeScalar(sraw);
      const A = this.curve.decodePoint(key);

      if (s.cmp(n) >= 0)
        return false;

      const e = this.hashChallenge(Rraw, key, msg);
      const a = this.rng.generate(i);
      const ea = e.mul(a).imod(n);

      sum.iadd(s.mul(a)).imod(n);

      points[1 + i * 2 + 0] = R;
      coeffs[1 + i * 2 + 0] = a;
      points[1 + i * 2 + 1] = A;
      coeffs[1 + i * 2 + 1] = ea;
    }

    sum.ineg().imod(n);

    return this.curve.jmulAll(points, coeffs).isInfinity();
  }
}

/*
 * Expose
 */

module.exports = Schnorr;
}],
[/* 58 */ 'bcrypto', '/lib/js/batch-rng.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * batch-rng.js - batch rng for bcrypto
 * Copyright (c) 2019-2020, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on ElementsProject/secp256k1-zkp:
 *   Copyright (c) 2013, Pieter Wuille.
 *   https://github.com/ElementsProject/secp256k1-zkp
 *
 * Resources:
 *   https://github.com/ElementsProject/secp256k1-zkp/blob/11af701/src/modules/schnorrsig/main_impl.h#L166
 *   https://github.com/ElementsProject/secp256k1-zkp/blob/11af701/src/scalar_4x64_impl.h#L972
 *   https://github.com/ElementsProject/secp256k1-zkp/blob/11af701/src/scalar_8x32_impl.h#L747
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);
const BN = __browser_require__(50 /* '../bn' */, module);
const ChaCha20 = __browser_require__(59 /* '../chacha20' */, module);
const SHA256 = __browser_require__(16 /* '../sha256' */, module);

/**
 * BatchRNG
 */

class BatchRNG {
  constructor(curve, encode = key => key) {
    this.curve = curve;
    this.encode = encode;
    this.hash = new SHA256();
    this.chacha = new ChaCha20();
    this.key = Buffer.alloc(32, 0x00);
    this.iv = Buffer.alloc(8, 0x00);
    this.cache = [new BN(1), new BN(1)];
  }

  init(batch) {
    assert(Array.isArray(batch));

    this.hash.init();

    for (const [msg, sig, key] of batch) {
      this.hash.update(SHA256.digest(msg));
      this.hash.update(sig);
      this.hash.update(this.encode(key));
    }

    this.key = this.hash.final();
    this.cache[0] = new BN(1);
    this.cache[1] = new BN(1);

    return this;
  }

  encrypt(counter) {
    const size = this.curve.scalarSize * 2;
    const data = Buffer.alloc(size, 0x00);
    const left = data.slice(0, this.curve.scalarSize);
    const right = data.slice(this.curve.scalarSize);

    this.chacha.init(this.key, this.iv, counter);
    this.chacha.encrypt(data);

    return [
      this.curve.decodeScalar(left),
      this.curve.decodeScalar(right)
    ];
  }

  refresh(counter) {
    let overflow = 0;

    for (;;) {
      // First word is always zero.
      this.iv[4] = overflow;
      this.iv[5] = overflow >>> 8;
      this.iv[6] = overflow >>> 16;
      this.iv[7] = overflow >>> 24;

      overflow += 1;

      const [s1, s2] = this.encrypt(counter);

      if (s1.isZero() || s1.cmp(this.curve.n) >= 0)
        continue;

      if (s2.isZero() || s2.cmp(this.curve.n) >= 0)
        continue;

      this.cache[0] = s1;
      this.cache[1] = s2;

      break;
    }
  }

  generate(index) {
    assert((index >>> 0) === index);

    if (index & 1)
      this.refresh(index >>> 1);

    return this.cache[index & 1];
  }
}

/*
 * Expose
 */

module.exports = BatchRNG;
}],
[/* 59 */ 'bcrypto', '/lib/chacha20-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * chacha20.js - chacha20 for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(60 /* './js/chacha20' */, module);
}],
[/* 60 */ 'bcrypto', '/lib/js/chacha20.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * chacha20.js - chacha20 for bcrypto
 * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Resources
 *   https://en.wikipedia.org/wiki/Chacha20
 *   https://tools.ietf.org/html/rfc7539#section-2
 *   https://cr.yp.to/chacha.html
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);

/*
 * Constants
 */

const BIG_ENDIAN = new Int8Array(new Int16Array([1]).buffer)[0] === 0;

/**
 * ChaCha20
 */

class ChaCha20 {
  /**
   * Create a ChaCha20 context.
   * @constructor
   */

  constructor() {
    this.state = new Uint32Array(16);
    this.stream = new Uint32Array(16);
    this.bytes = new Uint8Array(this.stream.buffer);
    this.pos = -1;

    if (BIG_ENDIAN)
      this.bytes = Buffer.alloc(64);
  }

  /**
   * Initialize chacha20 with a key, nonce, and counter.
   * @param {Buffer} key
   * @param {Buffer} nonce
   * @param {Number} counter
   */

  init(key, nonce, counter) {
    if (counter == null)
      counter = 0;

    assert((key != null && key._isBuffer === true));
    assert((nonce != null && nonce._isBuffer === true));
    assert(Number.isSafeInteger(counter));

    if (key.length !== 16 && key.length !== 32)
      throw new RangeError('Invalid key size.');

    if (nonce.length >= 24) {
      key = ChaCha20.derive(key, nonce.slice(0, 16));
      nonce = nonce.slice(16);
    }

    this.state[0] = 0x61707865;
    this.state[1] = key.length < 32 ? 0x3120646e : 0x3320646e;
    this.state[2] = key.length < 32 ? 0x79622d36 : 0x79622d32;
    this.state[3] = 0x6b206574;
    this.state[4] = readU32(key, 0);
    this.state[5] = readU32(key, 4);
    this.state[6] = readU32(key, 8);
    this.state[7] = readU32(key, 12);
    this.state[8] = readU32(key, 16 % key.length);
    this.state[9] = readU32(key, 20 % key.length);
    this.state[10] = readU32(key, 24 % key.length);
    this.state[11] = readU32(key, 28 % key.length);
    this.state[12] = counter >>> 0;

    if (nonce.length === 8) {
      this.state[13] = (counter / 0x100000000) >>> 0;
      this.state[14] = readU32(nonce, 0);
      this.state[15] = readU32(nonce, 4);
    } else if (nonce.length === 12) {
      this.state[13] = readU32(nonce, 0);
      this.state[14] = readU32(nonce, 4);
      this.state[15] = readU32(nonce, 8);
    } else if (nonce.length === 16) {
      this.state[12] = readU32(nonce, 0);
      this.state[13] = readU32(nonce, 4);
      this.state[14] = readU32(nonce, 8);
      this.state[15] = readU32(nonce, 12);
    } else {
      throw new RangeError('Invalid nonce size.');
    }

    this.pos = 0;

    return this;
  }

  /**
   * Encrypt/decrypt data.
   * @param {Buffer} data - Will be mutated.
   * @returns {Buffer}
   */

  encrypt(data) {
    assert((data != null && data._isBuffer === true));

    if (this.pos === -1)
      throw new Error('Context is not initialized.');

    for (let i = 0; i < data.length; i++) {
      if ((this.pos & 63) === 0) {
        this._block();
        this.pos = 0;
      }

      data[i] ^= this.bytes[this.pos++];
    }

    return data;
  }

  /**
   * Stir the stream.
   */

  _block() {
    for (let i = 0; i < 16; i++)
      this.stream[i] = this.state[i];

    for (let i = 0; i < 10; i++) {
      qround(this.stream, 0, 4, 8, 12);
      qround(this.stream, 1, 5, 9, 13);
      qround(this.stream, 2, 6, 10, 14);
      qround(this.stream, 3, 7, 11, 15);
      qround(this.stream, 0, 5, 10, 15);
      qround(this.stream, 1, 6, 11, 12);
      qround(this.stream, 2, 7, 8, 13);
      qround(this.stream, 3, 4, 9, 14);
    }

    for (let i = 0; i < 16; i++)
      this.stream[i] += this.state[i];

    if (BIG_ENDIAN) {
      for (let i = 0; i < 16; i++)
        writeU32(this.bytes, this.stream[i], i * 4);
    }

    this.state[12] += 1;

    if (this.state[12] === 0)
      this.state[13] += 1;
  }

  /**
   * Destroy context.
   */

  destroy() {
    for (let i = 0; i < 16; i++) {
      this.state[i] = 0;
      this.stream[i] = 0;
    }

    if (BIG_ENDIAN) {
      for (let i = 0; i < 64; i++)
        this.bytes[i] = 0;
    }

    this.pos = -1;

    return this;
  }

  /**
   * Derive key with XChaCha20.
   * @param {Buffer} key
   * @param {Buffer} nonce
   * @returns {Buffer}
   */

  static derive(key, nonce) {
    assert((key != null && key._isBuffer === true));
    assert((nonce != null && nonce._isBuffer === true));

    if (key.length !== 16 && key.length !== 32)
      throw new RangeError('Invalid key size.');

    if (nonce.length !== 16)
      throw new RangeError('Invalid nonce size.');

    const state = new Uint32Array(16);

    state[0] = 0x61707865;
    state[1] = key.length < 32 ? 0x3120646e : 0x3320646e;
    state[2] = key.length < 32 ? 0x79622d36 : 0x79622d32;
    state[3] = 0x6b206574;
    state[4] = readU32(key, 0);
    state[5] = readU32(key, 4);
    state[6] = readU32(key, 8);
    state[7] = readU32(key, 12);
    state[8] = readU32(key, 16 % key.length);
    state[9] = readU32(key, 20 % key.length);
    state[10] = readU32(key, 24 % key.length);
    state[11] = readU32(key, 28 % key.length);
    state[12] = readU32(nonce, 0);
    state[13] = readU32(nonce, 4);
    state[14] = readU32(nonce, 8);
    state[15] = readU32(nonce, 12);

    for (let i = 0; i < 10; i++) {
      qround(state, 0, 4, 8, 12);
      qround(state, 1, 5, 9, 13);
      qround(state, 2, 6, 10, 14);
      qround(state, 3, 7, 11, 15);
      qround(state, 0, 5, 10, 15);
      qround(state, 1, 6, 11, 12);
      qround(state, 2, 7, 8, 13);
      qround(state, 3, 4, 9, 14);
    }

    const out = Buffer.alloc(32);

    writeU32(out, state[0], 0);
    writeU32(out, state[1], 4);
    writeU32(out, state[2], 8);
    writeU32(out, state[3], 12);
    writeU32(out, state[12], 16);
    writeU32(out, state[13], 20);
    writeU32(out, state[14], 24);
    writeU32(out, state[15], 28);

    return out;
  }
}

/*
 * Static
 */

ChaCha20.native = 0;

/*
 * Helpers
 */

function qround(x, a, b, c, d) {
  x[a] += x[b];
  x[d] = rotl32(x[d] ^ x[a], 16);

  x[c] += x[d];
  x[b] = rotl32(x[b] ^ x[c], 12);

  x[a] += x[b];
  x[d] = rotl32(x[d] ^ x[a], 8);

  x[c] += x[d];
  x[b] = rotl32(x[b] ^ x[c], 7);
}

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}

function readU32(data, off) {
  return (data[off++]
        + data[off++] * 0x100
        + data[off++] * 0x10000
        + data[off] * 0x1000000);
}

function writeU32(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}

/*
 * Expose
 */

module.exports = ChaCha20;
}],
[/* 61 */ 'bcrypto', '/lib/hmac-drbg-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * hmac-drbg.js - hmac-drbg for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(62 /* './js/hmac-drbg' */, module);
}],
[/* 62 */ 'bcrypto', '/lib/js/hmac-drbg.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * hmac-drbg.js - hmac-drbg implementation for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on indutny/hmac-drbg:
 *   Copyright Fedor Indutny, 2017.
 *   https://github.com/indutny/hmac-drbg
 *
 * Resources:
 *   https://tools.ietf.org/html/rfc6979
 *   https://csrc.nist.gov/publications/detail/sp/800-90a/archive/2012-01-23
 *   https://github.com/indutny/hmac-drbg/blob/master/lib/hmac-drbg.js
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);

/*
 * Constants
 */

const RESEED_INTERVAL = 0x1000000000000;
const ZERO = Buffer.from([0x00]);
const ONE = Buffer.from([0x01]);

/**
 * HmacDRBG
 */

class HmacDRBG {
  constructor(hash, entropy, nonce, pers) {
    assert(hash && typeof hash.id === 'string');

    this.hash = hash;
    this.minEntropy = hash.id === 'SHA1' ? 10 : 24;

    this.K = Buffer.alloc(hash.size);
    this.V = Buffer.alloc(hash.size);
    this.rounds = 0;

    if (entropy)
      this.init(entropy, nonce, pers);
  }

  init(entropy, nonce, pers) {
    if (nonce == null)
      nonce = Buffer.alloc(0);

    if (pers == null)
      pers = Buffer.alloc(0);

    assert((entropy != null && entropy._isBuffer === true));
    assert((nonce != null && nonce._isBuffer === true));
    assert((pers != null && pers._isBuffer === true));

    for (let i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }

    const seed = Buffer.concat([entropy, nonce, pers]);

    if (seed.length < this.minEntropy)
      throw new Error('Not enough entropy.');

    this.update(seed);
    this.rounds = 1;

    return this;
  }

  reseed(entropy, add) {
    if (add == null)
      add = Buffer.alloc(0);

    assert((entropy != null && entropy._isBuffer === true));
    assert((add != null && add._isBuffer === true));

    if (this.rounds === 0)
      throw new Error('DRBG not initialized.');

    const seed = Buffer.concat([entropy, add]);

    if (seed.length < this.minEntropy)
     throw new Error('Not enough entropy.');

    this.update(seed);
    this.rounds = 1;

    return this;
  }

  generate(len, add) {
    assert((len >>> 0) === len);
    assert(add == null || (add != null && add._isBuffer === true));

    if (this.rounds === 0)
      throw new Error('DRBG not initialized.');

    if (this.rounds > RESEED_INTERVAL)
      throw new Error('Reseed is required.');

    if (add && add.length > 0)
      this.update(add);

    const blocks = Math.ceil(len / this.hash.size);
    const out = Buffer.alloc(blocks * this.hash.size);

    for (let i = 0; i < blocks; i++) {
      this.V = this.mac(this.V);
      this.V.copy(out, i * this.hash.size);
    }

    this.update(add);
    this.rounds += 1;

    return out.slice(0, len);
  }

  randomBytes(size) {
    return this.generate(size);
  }

  /*
   * Helpers
   */

  mac(data) {
    return this.hash.mac(data, this.K);
  }

  hmac() {
    return this.hash.hmac().init(this.K);
  }

  update(seed) {
    assert(seed == null || (seed != null && seed._isBuffer === true));

    const kmac = this.hmac();

    kmac.update(this.V);
    kmac.update(ZERO);

    if (seed)
      kmac.update(seed);

    this.K = kmac.final();
    this.V = this.mac(this.V);

    if (seed && seed.length > 0) {
      const kmac = this.hmac();

      kmac.update(this.V);
      kmac.update(ONE);
      kmac.update(seed);

      this.K = kmac.final();
      this.V = this.mac(this.V);
    }

    return this;
  }
}

/*
 * Static
 */

HmacDRBG.native = 0;

/*
 * Expose
 */

module.exports = HmacDRBG;
}],
[/* 63 */ 'bcrypto', '/lib/js/elliptic.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * elliptic.js - elliptic curves for bcrypto
 * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on indutny/elliptic:
 *   Copyright (c) 2014, Fedor Indutny (MIT License).
 *   https://github.com/indutny/elliptic
 *
 * Formulas from DJB and Tanja Lange [EFD].
 *
 * References:
 *
 *   [GECC] Guide to Elliptic Curve Cryptography
 *     D. Hankerson, A. Menezes, and S. Vanstone
 *     https://tinyurl.com/guide-to-ecc
 *
 *   [GLV] Faster Point Multiplication on Elliptic Curves
 *     R. Gallant, R. Lambert, and S. Vanstone
 *     https://link.springer.com/content/pdf/10.1007/3-540-44647-8_11.pdf
 *
 *   [MONT1] Montgomery curves and the Montgomery ladder
 *     Daniel J. Bernstein, Tanja Lange
 *     https://eprint.iacr.org/2017/293.pdf
 *
 *   [SQUARED] Elligator Squared
 *     Mehdi Tibouchi
 *     https://eprint.iacr.org/2014/043.pdf
 *
 *   [SEC1] SEC 1 - Standards for Efficient Cryptography Group
 *     Certicom Research
 *     https://www.secg.org/sec1-v2.pdf
 *
 *   [SEC2] SEC 2: Recommended Elliptic Curve Domain Parameters
 *     Certicom Research
 *     https://www.secg.org/sec2-v2.pdf
 *
 *   [SIDE1] Elliptic Curves and Side-Channel Attacks
 *     Marc Joye
 *     https://pdfs.semanticscholar.org/8d69/9645033e25d74fcfd4cbf07a770d2e943e14.pdf
 *
 *   [BLIND] Side-Channel Analysis on Blinding Regular Scalar Multiplications
 *     B. Feix, M. Roussellet, A. Venelli
 *     https://eprint.iacr.org/2014/191.pdf
 *
 *   [ALT] Alternative Elliptic Curve Representations
 *     R. Struik
 *     https://tools.ietf.org/id/draft-ietf-lwig-curve-representations-02.html
 *
 *   [ARITH1] Arithmetic of Elliptic Curves
 *     Christophe Doche, Tanja Lange
 *     Handbook of Elliptic and Hyperelliptic Curve Cryptography
 *     Page 267, Section 13 (978-1-58488-518-4)
 *     https://hyperelliptic.org/HEHCC/index.html
 *
 *   [ARITH2] The Arithmetic of Elliptic Curves, 2nd Edition
 *     Joseph H. Silverman
 *     http://www.pdmi.ras.ru/~lowdimma/BSD/Silverman-Arithmetic_of_EC.pdf
 *
 *   [EFD] Explicit-Formulas Database
 *     Daniel J. Bernstein, Tanja Lange
 *     https://hyperelliptic.org/EFD/index.html
 *
 *   [SAFE] SafeCurves: choosing safe curves for elliptic-curve cryptography
 *     Daniel J. Bernstein
 *     https://safecurves.cr.yp.to/
 *
 *   [4GLV] Refinement of the Four-Dimensional GLV Method on Elliptic Curves
 *     Hairong Yi, Yuqing Zhu, and Dongdai Lin
 *     http://www.site.uottawa.ca/~cadams/papers/prepro/paper_19_slides.pdf
 *
 *   [SSWU1] Efficient Indifferentiable Hashing into Ordinary Elliptic Curves
 *     E. Brier, J. Coron, T. Icart, D. Madore, H. Randriam, M. Tibouchi
 *     https://eprint.iacr.org/2009/340.pdf
 *
 *   [SSWU2] Rational points on certain hyperelliptic curves over finite fields
 *     Maciej Ulas
 *     https://arxiv.org/abs/0706.1448
 *
 *   [H2EC] Hashing to Elliptic Curves
 *     A. Faz-Hernandez, S. Scott, N. Sullivan, R. S. Wahby, C. A. Wood
 *     https://git.io/JeWz6
 *     https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve
 *
 *   [SVDW1] Construction of Rational Points on Elliptic Curves
 *     A. Shallue, C. E. van de Woestijne
 *     https://works.bepress.com/andrew_shallue/1/download/
 *
 *   [SVDW2] Indifferentiable Hashing to Barreto-Naehrig Curves
 *     Pierre-Alain Fouque, Mehdi Tibouchi
 *     https://www.di.ens.fr/~fouque/pub/latincrypt12.pdf
 *
 *   [SVDW3] Covert ECDH over secp256k1
 *     Pieter Wuille
 *     https://gist.github.com/sipa/29118d3fcfac69f9930d57433316c039
 *
 *   [MONT2] Montgomery Curve (wikipedia)
 *     https://en.wikipedia.org/wiki/Montgomery_curve
 *
 *   [MONT3] Montgomery Curves and their arithmetic
 *     C. Costello, B. Smith
 *     https://eprint.iacr.org/2017/212.pdf
 *
 *   [ELL2] Elliptic-curve points indistinguishable from uniform random strings
 *     D. Bernstein, M. Hamburg, A. Krasnova, T. Lange
 *     https://elligator.cr.yp.to/elligator-20130828.pdf
 *
 *   [RFC7748] Elliptic Curves for Security
 *     A. Langley, M. Hamburg, S. Turner
 *     https://tools.ietf.org/html/rfc7748
 *
 *   [TWISTED] Twisted Edwards Curves
 *     D. Bernstein, P. Birkner, M. Joye, T. Lange, C. Peters
 *     https://eprint.iacr.org/2008/013.pdf
 *
 *   [ELL1] Injective Encodings to Elliptic Curves
 *     P. Fouque, A. Joux, M. Tibouchi
 *     https://eprint.iacr.org/2013/373.pdf
 *
 *   [ISOGENY] Twisting Edwards curves with isogenies
 *     Mike Hamburg
 *     https://www.shiftleft.org/papers/isogeny/isogeny.pdf
 *
 *   [RFC8032] Edwards-Curve Digital Signature Algorithm (EdDSA)
 *     S. Josefsson, SJD AB, I. Liusvaara
 *     https://tools.ietf.org/html/rfc8032
 *
 *   [SCHNORR] Schnorr Signatures for secp256k1
 *     Pieter Wuille
 *     https://github.com/sipa/bips/blob/d194620/bip-schnorr.mediawiki
 *
 *   [BIP340] Schnorr Signatures for secp256k1
 *     Pieter Wuille, Jonas Nick, Tim Ruffing
 *     https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
 *
 *   [JCEN12] Efficient Software Implementation of Public-Key Cryptography
 *            on Sensor Networks Using the MSP430X Microcontroller
 *     C. P. L. Gouvea, L. B. Oliveira, J. Lopez
 *     http://conradoplg.cryptoland.net/files/2010/12/jcen12.pdf
 *
 *   [FIPS186] Federal Information Processing Standards Publication
 *     National Institute of Standards and Technology
 *     https://tinyurl.com/fips-186-3
 *
 *   [RFC5639] Elliptic Curve Cryptography (ECC) Brainpool
 *             Standard Curves and Curve Generation
 *     M. Lochter, BSI, J. Merkle
 *     https://tools.ietf.org/html/rfc5639
 *
 *   [TWISTEQ] Twisted Edwards & Short Weierstrass Equivalence
 *     Christopher Jeffrey
 *     https://gist.github.com/chjj/16ba7fa08d64e8dda269a9fe5b2a8bbc
 *
 *   [ECPM] Elliptic Curve Point Multiplication (wikipedia)
 *     https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication
 */

'use strict';

const {custom} = __browser_require__(52 /* '../internal/custom' */, module);
const BN = __browser_require__(50 /* '../bn' */, module);

/*
 * Constants
 */

const types = {
  AFFINE: 0,
  JACOBIAN: 1,
  PROJECTIVE: 2,
  EXTENDED: 3
};

const jsfIndex = [
  -3, // -1 -1
  -1, // -1 0
  -5, // -1 1
  -7, // 0 -1
  0, // 0 0
  7, // 0 1
  5, // 1 -1
  1, // 1 0
  3  // 1 1
];

const USE_FIXED = false;

let uid = 0;

/**
 * Curve
 */

class Curve {
  constructor(Point, type, conf) {
    this.Point = null;
    this.id = null;
    this.uid = uid++;
    this.ossl = null;
    this.type = 'base';
    this.endian = 'be';
    this.hash = null;
    this.prefix = null;
    this.context = false;
    this.prime = null;
    this.p = null;
    this.red = null;
    this.fieldSize = 0;
    this.fieldBits = 0;
    this.adjustedSize = 0;
    this.signBit = 0;
    this.mask = 0;
    this.n = null;
    this.h = null;
    this.q = null;
    this.z = null;
    this.g = null;
    this.nh = null;
    this.scalarSize = 0;
    this.scalarBits = 0;
    this.zero = null;
    this.one = null;
    this.two = null;
    this.three = null;
    this.four = null;
    this.i2 = null;
    this.i3 = null;
    this.i4 = null;
    this.i6 = null;
    this.torsion = null;
    this.endo = null;
    this.hi = null;
    this._init(Point, type, conf);
  }

  _init(Point, type, conf) {
    assert(typeof Point === 'function');
    assert(typeof type === 'string');
    assert(conf && typeof conf === 'object');
    assert(conf.red == null || (conf.red instanceof BN.Red));
    assert(conf.p != null, 'Must pass a prime.');
    assert(conf.id == null || typeof conf.id === 'string');
    assert(conf.ossl == null || typeof conf.ossl === 'string');
    assert(conf.endian == null || typeof conf.endian === 'string');
    assert(conf.hash == null || typeof conf.hash === 'string');
    assert(conf.prefix == null || typeof conf.prefix === 'string');
    assert(conf.context == null || typeof conf.context === 'boolean');
    assert(conf.prime == null || typeof conf.prime === 'string');
    assert(conf.torsion == null || Array.isArray(conf.torsion));

    // Point class.
    this.Point = Point;

    // Meta.
    this.id = conf.id || null;
    this.ossl = conf.ossl || null;
    this.type = type;
    this.endian = conf.endian || (type === 'short' ? 'be' : 'le');
    this.hash = conf.hash || null;
    this.prefix = conf.prefix ? Buffer.from(conf.prefix, 'binary') : null;
    this.context = conf.context || false;
    this.prime = conf.prime || null;

    // Prime.
    this.p = BN.fromJSON(conf.p);

    // Reduction.
    if (conf.red) {
      this.red = conf.red;
    } else {
      // Use Montgomery when there is no fast reduction for the prime.
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
      this.red.precompute();
    }

    // Precalculate encoding length.
    this.fieldSize = this.p.byteLength();
    this.fieldBits = this.p.bitLength();
    this.adjustedSize = this.fieldSize + ((this.fieldBits & 7) === 0);
    this.signBit = this.adjustedSize * 8 - 1;
    this.mask = 0xff;

    if ((this.fieldBits & 7) !== 0)
      this.mask = (1 << (this.fieldBits & 7)) - 1;

    // Curve configuration, optional.
    this.n = BN.fromJSON(conf.n || '0');
    this.h = BN.fromJSON(conf.h || '1');
    this.q = this.n.mul(this.h);
    this.z = BN.fromJSON(conf.z || '0').toRed(this.red);
    this.g = null;
    this.nh = this.n.ushrn(1);
    this.scalarSize = this.n.byteLength();
    this.scalarBits = this.n.bitLength();

    // Useful for many curves.
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    this.three = new BN(3).toRed(this.red);
    this.four = new BN(4).toRed(this.red);

    // Inverses.
    this.i2 = this.two.redInvert();
    this.i3 = this.three.redInvert();
    this.i4 = this.i2.redSqr();
    this.i6 = this.i2.redMul(this.i3);

    // Torsion.
    this.torsion = new Array(this.h.word(0));

    for (let i = 0; i < this.torsion.length; i++)
      this.torsion[i] = this.point();

    // Endomorphism.
    this.endo = null;

    // Cache.
    this.hi = null;

    // Memoize.
    this._scale = memoize(this._scale, this);
    this.isIsomorphic = memoize(this.isIsomorphic, this);
    this.isIsogenous = memoize(this.isIsogenous, this);

    // Sanity checks.
    assert(this.p.sign() > 0 && this.p.isOdd());
    assert(this.n.sign() >= 0);
    assert(this.h.sign() > 0 && this.h.cmpn(255) <= 0);
    assert(this.endian === 'be' || this.endian === 'le');

    return this;
  }

  _finalize(conf) {
    assert(conf && typeof conf === 'object');

    // Create base point.
    this.g = conf.g ? this.pointFromJSON(conf.g) : this.point();

    // Parse small order points.
    if (conf.torsion) {
      assert(conf.torsion.length === this.torsion.length);

      for (let i = 0; i < this.torsion.length; i++)
        this.torsion[i] = this.pointFromJSON(conf.torsion[i]);
    }

    return this;
  }

  _findTorsion() {
    // Find all torsion points by grinding.
    assert(!this.n.isZero());

    const h = this.h.word(0);
    const x = this.one.redNeg();
    const out = [this.point()];
    const set = new Set();

    let len = h;

    while (out.length < len) {
      let p;

      x.redIAdd(this.one);

      try {
        p = this.pointFromX(x.clone());
      } catch (e) {
        continue;
      }

      try {
        p = p.mul(this.n);
      } catch (e) {
        len = 2;
        continue;
      }

      if (p.isInfinity())
        continue;

      p.normalize();

      for (const point of [p, p.neg()]) {
        const key = point.key();

        if (!set.has(key)) {
          out.push(point);
          set.add(key);
        }
      }
    }

    out.sort((a, b) => a.cmp(b));

    while (out.length < h)
      out.push(this.point());

    return out;
  }

  _fixedMul(p, k) {
    // Fixed-base method for point multiplication.
    //
    // [ECPM] "Windowed method".
    // [GECC] Page 95, Section 3.3.
    //
    // Windows are appropriately shifted to avoid any
    // doublings. This reduces a 256 bit multiplication
    // down to 64 additions with a window size of 4.
    assert(p instanceof Point);
    assert(k instanceof BN);
    assert(p.pre && p.pre.windows);

    // Get precomputed windows.
    const {width, points} = p._getWindows(0, 0);

    // Recompute window size.
    const size = 1 << width;

    // Recompute steps.
    const bits = k.bitLength();
    const steps = ((bits + width - 1) / width) >>> 0;

    // Multiply.
    let acc = this.jpoint();

    for (let i = 0; i < steps; i++) {
      const bits = k.bits(i * width, width);

      acc = acc.add(points[i * size + bits]);
    }

    // Adjust sign.
    if (k.isNeg())
      acc = acc.neg();

    return acc;
  }

  _fixedNafMul(p, k) {
    // Fixed-base NAF windowing method for point multiplication.
    //
    // [GECC] Algorithm 3.42, Page 105, Section 3.3.
    assert(p instanceof Point);
    assert(k instanceof BN);
    assert(p.pre && p.pre.doubles);

    // Get precomputed doubles.
    const {step, points} = p._getDoubles(0, 0);

    // Get fixed NAF (in a more windowed form).
    const naf = getFixedNAF(k, 2, k.bitLength() + 1, step);

    // Compute steps.
    const I = ((1 << (step + 1)) - (step % 2 === 0 ? 2 : 1)) / 3;

    // Multiply.
    let a = this.jpoint();
    let b = this.jpoint();

    for (let i = I; i > 0; i--) {
      for (let j = 0; j < naf.length; j++) {
        const nafW = naf[j];

        if (nafW === i)
          b = b.add(points[j]);
        else if (nafW === -i)
          b = b.sub(points[j]);
      }

      a = a.add(b);
    }

    return a;
  }

  _wnafMul(w, p, k) {
    // Window NAF method for point multiplication.
    //
    // [GECC] Algorithm 3.36, Page 100, Section 3.3.
    assert(p instanceof Point);
    assert(k instanceof BN);

    // Precompute window.
    const {width, points} = p._safeNAF(w);

    // Get NAF form.
    const naf = getNAF(k, width, k.bitLength() + 1);

    // Add `this`*(N+1) for every w-NAF index.
    let acc = this.jpoint();

    for (let i = naf.length - 1; i >= 0; i--) {
      const z = naf[i];

      if (i !== naf.length - 1)
        acc = acc.dbl();

      if (z > 0)
        acc = acc.add(points[(z - 1) >> 1]);
      else if (z < 0)
        acc = acc.sub(points[(-z - 1) >> 1]);
    }

    return acc;
  }

  _wnafMulAdd(w, points, coeffs) {
    // Multiple point multiplication, also known
    // as "Shamir's trick" (with interleaved NAFs).
    //
    // [GECC] Algorithm 3.48, Page 109, Section 3.3.3.
    //        Algorithm 3.51, Page 112, Section 3.3.
    //
    // This is particularly useful for signature
    // verifications and mutiplications after an
    // endomorphism split.
    assert((w >>> 0) === w);
    assert(Array.isArray(points));
    assert(Array.isArray(coeffs));
    assert(points.length === coeffs.length);

    const length = points.length;
    const wnd = new Array(length);
    const naf = new Array(length);

    // Check arrays and calculate size.
    let max = 0;

    for (let i = 0; i < length; i++) {
      const point = points[i];
      const coeff = coeffs[i];

      assert(point instanceof Point);
      assert(coeff instanceof BN);

      if (i > 0 && point.type !== points[i - 1].type)
        throw new Error('Cannot mix points.');

      // Avoid sparse arrays.
      wnd[i] = null;
      naf[i] = null;

      // Compute max scalar size.
      max = Math.max(max, coeff.bitLength() + 1);
    }

    // Compute NAFs.
    let ppoint = null;
    let pcoeff = null;
    let len = 0;

    for (let i = 0; i < length; i++) {
      const point = points[i];
      const coeff = coeffs[i];
      const pre = point._getNAF(0);

      // Use precomputation if available.
      if (pre) {
        wnd[len] = pre.points;
        naf[len] = getNAF(coeff, pre.width, max);
        len += 1;
        continue;
      }

      // Save last non-precomputed point.
      if (!ppoint) {
        ppoint = point;
        pcoeff = coeff;
        continue;
      }

      // Compute JSF in NAF form.
      wnd[len] = ppoint._getJNAF(point);
      naf[len] = getJNAF(pcoeff, coeff, max);

      ppoint = null;
      pcoeff = null;

      len += 1;
    }

    // Regular NAF for odd points.
    if (ppoint) {
      const nafw = ppoint._safeNAF(w);

      wnd[len] = nafw.points;
      naf[len] = getNAF(pcoeff, nafw.width, max);

      len += 1;
    }

    // Multiply and add.
    let acc = this.jpoint();

    for (let i = max - 1; i >= 0; i--) {
      if (i !== max - 1)
        acc = acc.dbl();

      for (let j = 0; j < len; j++) {
        const z = naf[j][i];

        if (z > 0)
          acc = acc.add(wnd[j][(z - 1) >> 1]);
        else if (z < 0)
          acc = acc.sub(wnd[j][(-z - 1) >> 1]);
      }
    }

    return acc;
  }

  _endoWnafMulAdd(points, coeffs) {
    throw new Error('Not implemented.');
  }

  _scale(curve, invert) {
    assert(curve instanceof Curve);
    assert(curve.p.eq(this.p));

    switch (curve.type) {
      case 'short':
        return this._scaleShort(curve, invert);
      case 'mont':
        return this._scaleMont(curve, invert);
      case 'edwards':
        return this._scaleEdwards(curve, invert);
      default:
        throw new Error('Not implemented.');
    }
  }

  _scaleShort(curve, invert) {
    throw new Error('Not implemented.');
  }

  _scaleMont(curve, invert) {
    throw new Error('Not implemented.');
  }

  _scaleEdwards(curve, invert) {
    throw new Error('Not implemented.');
  }

  isElliptic() {
    throw new Error('Not implemented.');
  }

  jinv() {
    throw new Error('Not implemented.');
  }

  isComplete() {
    return false;
  }

  precompute(rng) {
    assert(!this.g.isInfinity(), 'Must have base point.');
    assert(!this.n.isZero(), 'Must have order.');

    this.g.precompute(this.n.bitLength(), rng);

    return this;
  }

  scalar(num, base, endian) {
    const k = new BN(num, base, endian);

    assert(!k.red);

    if (this.n.isZero())
      return k;

    return k.imod(this.n);
  }

  field(num, base, endian) {
    const x = BN.cast(num, base, endian);

    if (x.red)
      return x.forceRed(this.red);

    return x.toRed(this.red);
  }

  point(x, y) {
    throw new Error('Not implemented.');
  }

  jpoint(x, y, z) {
    throw new Error('Not implemented.');
  }

  xpoint(x, z) {
    throw new Error('Not implemented.');
  }

  cpoint(xx, xz, yy, yz) {
    assert(xx instanceof BN);
    assert(xz instanceof BN);
    assert(yy instanceof BN);
    assert(yz instanceof BN);

    if (xz.isZero() || yz.isZero())
      return this.point();

    const z = xz.redMul(yz).redInvert();
    const x = xx.redMul(yz).redMul(z);
    const y = yy.redMul(xz).redMul(z);

    return this.point(x, y);
  }

  solveX2(y) {
    throw new Error('Not implemented.');
  }

  solveX(y) {
    return this.solveX2(y).redSqrt();
  }

  solveY2(x) {
    throw new Error('Not implemented.');
  }

  solveY(x) {
    return this.solveY2(x).redSqrt();
  }

  validate(point) {
    throw new Error('Not implemented.');
  }

  pointFromX(x, sign) {
    throw new Error('Not implemented.');
  }

  pointFromY(y, sign) {
    throw new Error('Not implemented.');
  }

  isIsomorphic(curve) {
    throw new Error('Not implemented.');
  }

  isIsogenous(curve) {
    throw new Error('Not implemented.');
  }

  pointFromShort(point) {
    throw new Error('Not implemented.');
  }

  pointFromMont(point, sign) {
    throw new Error('Not implemented.');
  }

  pointFromEdwards(point) {
    throw new Error('Not implemented.');
  }

  pointFromUniform(u) {
    throw new Error('Not implemented.');
  }

  pointToUniform(p) {
    throw new Error('Not implemented.');
  }

  pointFromHash(bytes, pake = false) {
    // [H2EC] "Roadmap".
    assert((bytes != null && bytes._isBuffer === true));
    assert(typeof pake === 'boolean');

    if (bytes.length !== this.fieldSize * 2)
      throw new Error('Invalid hash size.');

    // Random oracle encoding.
    // Ensure a proper distribution.
    const s1 = bytes.slice(0, this.fieldSize);
    const s2 = bytes.slice(this.fieldSize);
    const u1 = this.decodeUniform(s1);
    const u2 = this.decodeUniform(s2);
    const p1 = this.pointFromUniform(u1);
    const p2 = this.pointFromUniform(u2);
    const p3 = p1.add(p2);

    return pake ? p3.mulH() : p3;
  }

  pointToHash(p, subgroup, rng) {
    // [SQUARED] Algorithm 1, Page 8, Section 3.3.
    assert(p instanceof this.Point);
    assert((subgroup >>> 0) === subgroup);

    // Add a random torsion component.
    const i = subgroup % this.torsion.length;
    const p0 = p.add(this.torsion[i]);

    // Average Cost (R = sqrt):
    //
    //   SSWU (~4 iterations) => 8I + 16R
    //   SVDW (~4 iterations) => 12I + 28R
    //   Elligator 1 (~2 iterations) => 6I + 10R
    //   Elligator 2 (~2 iterations) => 4I + 6R
    //   Ristretto (~1 iteration) => 1I + 2R + h*1R
    for (;;) {
      const u1 = this.randomField(rng);
      const p1 = this.pointFromUniform(u1);

      // Avoid 2-torsion points:
      //   Short Weierstrass: ((A / 3) / B, 0)
      //   Montgomery: (0, 0)
      //   Twisted Edwards: (0, -1)
      if (p1.neg().eq(p1))
        continue;

      const p2 = p0.sub(p1);
      const hint = randomInt(rng);

      let u2;
      try {
        u2 = this.pointToUniform(p2, hint & 15);
      } catch (e) {
        if (e.message === 'Invalid point.')
          continue;
        throw e;
      }

      const s1 = this.encodeUniform(u1, hint >>> 8);
      const s2 = this.encodeUniform(u2, hint >>> 16);

      return Buffer.concat([s1, s2]);
    }
  }

  randomScalar(rng) {
    const max = this.n.isZero() ? this.p : this.n;
    return BN.random(rng, 1, max);
  }

  randomField(rng) {
    return BN.random(rng, 1, this.p).toRed(this.red);
  }

  randomPoint(rng) {
    let p;

    for (;;) {
      const x = this.randomField(rng);
      const sign = (randomInt(rng) & 1) !== 0;

      try {
        p = this.pointFromX(x, sign);
      } catch (e) {
        continue;
      }

      assert(p.validate());

      return p.mulH();
    }
  }

  mulAll(points, coeffs) {
    return this.jmulAll(points, coeffs);
  }

  jmulAll(points, coeffs) {
    assert(Array.isArray(points));
    assert(points.length === 0 || (points[0] instanceof Point));

    // Multiply with endomorphism if we're using affine points.
    if (this.endo && points.length > 0 && points[0].type === types.AFFINE)
      return this._endoWnafMulAdd(points, coeffs);

    // Otherwise, a regular Shamir's trick.
    return this._wnafMulAdd(5, points, coeffs);
  }

  mulH(k) {
    assert(k instanceof BN);
    return this.imulH(k.clone());
  }

  imulH(k) {
    assert(k instanceof BN);
    assert(!k.red);

    const word = this.h.word(0);

    // Optimize for powers of two.
    if ((word & (word - 1)) === 0) {
      const bits = this.h.bitLength();
      return k.iushln(bits - 1).imod(this.n);
    }

    return k.imuln(word).imod(this.n);
  }

  normalizeAll(points) {
    assert(Array.isArray(points));

    const len = points.length;
    const z = new Array(len);

    for (let i = 0; i < len; i++) {
      const p = points[i];

      assert(p instanceof Point);
      assert(p.curve === this);

      if (p.type === types.AFFINE) {
        z[i] = this.one;
        continue;
      }

      z[i] = p.z;
    }

    const zi = this.red.invertAll(z);
    const out = new Array(len);

    for (let i = 0; i < len; i++)
      out[i] = points[i].scale(zi[i]);

    return out;
  }

  affinizeAll(points) {
    return this.normalizeAll(points);
  }

  clamp(scalar) {
    // [RFC7748] Page 8, Section 5.
    // [RFC8032] Section 5.1.5 & 5.2.5.
    assert((scalar != null && scalar._isBuffer === true));
    assert(scalar.length === this.scalarSize);
    assert(this.scalarSize <= this.fieldSize);

    let top = (this.fieldBits & 7) || 8;
    let lsb = 0;
    let msb = this.scalarSize - 1;

    // Swap endianness.
    if (this.endian === 'be')
      [lsb, msb] = [msb, lsb];

    // Adjust for low order.
    if (this.scalarSize < this.fieldSize)
      top = 8;

    // Ensure a multiple of the cofactor.
    scalar[lsb] &= -this.h.word(0) & 0xff;

    // Clamp to the prime.
    scalar[msb] &= (1 << top) - 1;

    // Set the high bit.
    scalar[msb] |= 1 << (top - 1);

    return scalar;
  }

  splitHash(bytes) {
    // [RFC8032] Section 5.1.6 & 5.2.6.
    assert((bytes != null && bytes._isBuffer === true));
    assert(bytes.length === this.adjustedSize * 2);
    assert(this.scalarSize <= this.adjustedSize);

    let off = 0;

    if (this.endian === 'be')
      off = this.adjustedSize - this.scalarSize;

    const scalar = bytes.slice(off, off + this.scalarSize);
    const prefix = bytes.slice(this.adjustedSize);

    this.clamp(scalar);

    return [scalar, prefix];
  }

  encodeField(x) {
    // [SEC1] Page 12, Section 2.3.5.
    assert(x instanceof BN);
    assert(!x.red);

    return x.encode(this.endian, this.fieldSize);
  }

  decodeField(bytes) {
    // [SEC1] Page 13, Section 2.3.6.
    assert((bytes != null && bytes._isBuffer === true));

    if (bytes.length !== this.fieldSize)
      throw new Error('Invalid field element size.');

    return BN.decode(bytes, this.endian);
  }

  encodeAdjusted(x) {
    assert(x instanceof BN);
    assert(!x.red);

    return x.encode(this.endian, this.adjustedSize);
  }

  decodeAdjusted(bytes) {
    assert((bytes != null && bytes._isBuffer === true));

    if (bytes.length !== this.adjustedSize)
      throw new Error('Invalid field element size.');

    return BN.decode(bytes, this.endian);
  }

  encodeScalar(k) {
    // [SEC1] Page 13, Section 2.3.7.
    assert(k instanceof BN);
    assert(!k.red);

    return k.encode(this.endian, this.scalarSize);
  }

  decodeScalar(bytes) {
    // [SEC1] Page 14, Section 2.3.8.
    assert((bytes != null && bytes._isBuffer === true));

    if (bytes.length !== this.scalarSize)
      throw new Error('Invalid scalar size.');

    return BN.decode(bytes, this.endian);
  }

  encodeClamped(k) {
    // [RFC7748] Page 8, Section 5.
    // [RFC8032] Section 5.1.5 & 5.2.5.
    return this.clamp(this.encodeScalar(k));
  }

  decodeClamped(bytes) {
    // [RFC7748] Page 8, Section 5.
    // [RFC8032] Section 5.1.5 & 5.2.5.
    assert((bytes != null && bytes._isBuffer === true));

    if (bytes.length !== this.scalarSize)
      throw new Error('Invalid scalar size.');

    const clamped = this.clamp(Buffer.from(bytes));

    return BN.decode(clamped, this.endian);
  }

  encodeUniform(x, bits) {
    assert(x instanceof BN);
    assert((bits >>> 0) === bits);

    const msb = this.endian === 'le' ? this.fieldSize - 1 : 0;
    const bytes = x.fromRed().encode(this.endian, this.fieldSize);

    bytes[msb] |= (bits & ~this.mask) & 0xff;

    return bytes;
  }

  decodeUniform(bytes) {
    assert((bytes != null && bytes._isBuffer === true));

    if (bytes.length !== this.fieldSize)
      throw new Error('Invalid field size.');

    const x = BN.decode(bytes, this.endian);

    x.iumaskn(this.fieldBits);

    return x.toRed(this.red);
  }

  encodePoint(point, compact) {
    assert(point instanceof Point);
    return point.encode(compact);
  }

  decodePoint(bytes) {
    throw new Error('Not implemented.');
  }

  encodeX(point) {
    throw new Error('Not implemented.');
  }

  decodeX(bytes) {
    throw new Error('Not implemented.');
  }

  decodeEven(bytes) {
    throw new Error('Not implemented.');
  }

  decodeSquare(bytes) {
    throw new Error('Not implemented.');
  }

  toShort() {
    throw new Error('Not implemented.');
  }

  toMont(b0) {
    throw new Error('Not implemented.');
  }

  toEdwards(a0) {
    throw new Error('Not implemented.');
  }

  pointToJSON(point, pre) {
    assert(point instanceof Point);
    return point.toJSON(pre);
  }

  pointFromJSON(json) {
    throw new Error('Not implemented.');
  }

  toJSON(pre) {
    let prefix, context;
    let n, z, endo;

    if (this.type === 'edwards') {
      prefix = this.prefix ? this.prefix.toString() : null;
      context = this.context;
    }

    if (!this.n.isZero())
      n = this.n.toJSON();

    if (!this.z.isZero()) {
      z = this.z.fromRed();

      if (this.z.redIsHigh())
        z.isub(this.p);

      z = z.toString(16);
    }

    if (this.endo)
      endo = this.endo.toJSON();

    return {
      id: this.id,
      ossl: this.ossl,
      type: this.type,
      endian: this.endian,
      hash: this.hash,
      prefix,
      context,
      prime: this.prime,
      p: this.p.toJSON(),
      a: undefined,
      b: undefined,
      d: undefined,
      n,
      h: this.h.toString(16),
      s: undefined,
      z,
      c: undefined,
      g: this.g.toJSON(pre),
      endo
    };
  }

  static fromJSON(json) {
    return new this(json);
  }
}

/**
 * Point
 */

class Point {
  constructor(curve, type) {
    assert(curve instanceof Curve);
    assert((type >>> 0) === type);

    this.curve = curve;
    this.type = type;
    this.pre = null;
  }

  _init() {
    throw new Error('Not implemented.');
  }

  _safeNAF(width) {
    assert((width >>> 0) === width);

    if (this.pre && this.pre.naf)
      return this.pre.naf;

    if (width === 0)
      return null;

    const size = 1 << (width - 2);
    const points = new Array(size);
    const p = this.toJ();
    const dbl = size === 1 ? null : p.dbl();

    points[0] = p;

    for (let i = 1; i < size; i++)
      points[i] = points[i - 1].add(dbl);

    return new NAF(width, points);
  }

  _getNAF(width) {
    assert((width >>> 0) === width);

    if (this.pre && this.pre.naf)
      return this.pre.naf;

    if (width === 0)
      return null;

    const odds = this._safeNAF(width).points;
    const points = this.curve.affinizeAll(odds);

    return new NAF(width, points);
  }

  _getWindows(width, bits) {
    assert((width >>> 0) === width);
    assert((bits >>> 0) === bits);

    if (this.pre && this.pre.windows)
      return this.pre.windows;

    if (width === 0)
      return null;

    const size = 1 << width;
    const steps = ((bits + width - 1) / width) >>> 0;
    const wnds = new Array(steps * size);

    let g = this.toJ();

    for (let i = 0; i < steps; i++) {
      wnds[i * size] = this.curve.jpoint();

      for (let j = 1; j < size; j++)
        wnds[i * size + j] = wnds[i * size + j - 1].add(g);

      g = g.dblp(width);
    }

    const points = this.curve.affinizeAll(wnds);

    return new Windows(width, bits, points);
  }

  _getDoubles(step, power) {
    assert((step >>> 0) === step);
    assert((power >>> 0) === power);

    if (this.pre && this.pre.doubles)
      return this.pre.doubles;

    if (step === 0)
      return null;

    const len = Math.ceil(power / step) + 1;
    const dbls = new Array(len);

    let acc = this.toJ();
    let k = 0;

    dbls[k++] = acc;

    for (let i = 0; i < power; i += step) {
      for (let j = 0; j < step; j++)
        acc = acc.dbl();

      dbls[k++] = acc;
    }

    assert(k === len);

    const points = this.curve.affinizeAll(dbls);

    return new Doubles(step, points);
  }

  _getBeta() {
    return null;
  }

  _getBlinding(rng) {
    if (this.pre && this.pre.blinding)
      return this.pre.blinding;

    if (!rng)
      return null;

    if (this.curve.n.isZero())
      return null;

    // Pregenerate a random blinding value:
    //
    //   blind = random integer in [1,n-1]
    //   unblind = G * blind
    //
    // We intend to subtract the blinding value
    // from scalars before multiplication. We
    // can add the unblinding point once the
    // multiplication is complete.
    const blind = this.curve.randomScalar(rng);
    const unblind = this.mul(blind);

    return new Blinding(blind, unblind);
  }

  _hasWindows(k) {
    assert(k instanceof BN);

    if (!this.pre || !this.pre.windows)
      return false;

    const {width, bits} = this.pre.windows;
    const steps = ((bits + width - 1) / width) >>> 0;

    return k.bitLength() <= steps * width;
  }

  _hasDoubles(k) {
    assert(k instanceof BN);

    if (!this.pre || !this.pre.doubles)
      return false;

    const {step, points} = this.pre.doubles;
    const power = k.bitLength() + 1;

    return points.length >= Math.ceil(power / step) + 1;
  }

  _getJNAF(point) {
    assert(point instanceof Point);
    assert(point.type === this.type);

    // Create comb for JSF.
    return [
      this, // 1
      this.add(point), // 3
      this.sub(point), // 5
      point // 7
    ];
  }

  _blind(k, rng) {
    // [SIDE1] Page 5, Section 4.
    // [BLIND] Page 20, Section 7.
    assert(k instanceof BN);
    assert(!k.red);

    // Scalar splitting (requires precomputation).
    //
    // Blind a multiplication by first subtracting
    // a blinding value from the scalar. Example:
    //
    //   b = random integer in [1,n-1]
    //   B = P * b (precomputed)
    //   Q = P * (k - b) + B
    //
    // Note that Joye describes a different method
    // (multiplier randomization) which computes:
    //
    //   B = random point in E
    //   Q = (P + B) * k - B * k
    //
    // Our method is more similar to the "scalar
    // splitting" technique described in the
    // second source above.
    //
    // The blinding value and its corresponding
    // point are randomly generated and computed
    // on boot. As long as an attacker is not
    // able to observe the boot, this should give
    // a decent bit of protection against various
    // channel attacks.
    if (this.pre && this.pre.blinding) {
      const {blind, unblind} = this.pre.blinding;
      const t = k.sub(blind);

      return [this, t, unblind];
    }

    // Randomization is not possible without
    // an RNG. Do a normal multiplication.
    if (!rng)
      return [this, k, null];

    // If we have no precomputed blinding
    // factor, there are two possibilities
    // for randomization:
    //
    // 1. Randomize the multiplier by adding
    //    a random multiple of `n`.
    //
    // 2. Re-scale the point itself by a
    //    random factor.
    //
    // The first option can be accomplished
    // with some like:
    //
    //   a = random integer in [1,n-1]
    //   r = a * n
    //   Q = P * (k + r)
    //
    // The second is accomplished with:
    //
    //   a = random element in F(p)
    //   R = (x * a^2, y * a^3, z * a)
    //   Q = R * k
    //
    // If we have precomputed doubles / naf
    // points, we opt for the first method
    // to avoid randomizing everything.
    if (this.pre) {
      if (this.curve.n.isZero())
        return [this, k, null];

      const a = this.curve.randomScalar(rng);
      const r = a.mul(this.curve.n);
      const t = r.iadd(k);

      return [this, t, null];
    }

    // If there is no precomputation _at all_,
    // we opt for the second method.
    const p = this.randomize(rng);

    return [p, k, null];
  }

  clone() {
    throw new Error('Not implemented.');
  }

  precompute(bits, rng) {
    assert((bits >>> 0) === bits);

    if (!this.pre)
      this.pre = new Precomp();

    if (!this.pre.naf)
      this.pre.naf = this._getNAF(9);

    if (USE_FIXED && !this.pre.windows)
      this.pre.windows = this._getWindows(4, bits);

    if (!this.pre.doubles)
      this.pre.doubles = this._getDoubles(4, bits + 1);

    if (!this.pre.beta)
      this.pre.beta = this._getBeta();

    if (!this.pre.blinding)
      this.pre.blinding = this._getBlinding(rng);

    return this;
  }

  validate() {
    return this.curve.validate(this);
  }

  normalize() {
    return this;
  }

  scale(a) {
    throw new Error('Not implemented.');
  }

  randomize(rng) {
    const z = this.curve.randomField(rng);
    return this.scale(z);
  }

  neg() {
    throw new Error('Not implemented.');
  }

  add(point) {
    throw new Error('Not implemented.');
  }

  sub(point) {
    assert(point instanceof Point);
    return this.add(point.neg());
  }

  dbl() {
    throw new Error('Not implemented.');
  }

  dblp(pow) {
    // Repeated doubling. This can
    // be optimized by child classes.
    assert((pow >>> 0) === pow);

    let r = this;

    for (let i = 0; i < pow; i++)
      r = r.dbl();

    return r;
  }

  diffAddDbl(p, q) {
    throw new Error('Not implemented.');
  }

  getX() {
    throw new Error('Not implemented.');
  }

  getY() {
    throw new Error('Not implemented.');
  }

  eq(point) {
    throw new Error('Not implemented.');
  }

  cmp(point) {
    throw new Error('Not implemented.');
  }

  isInfinity() {
    throw new Error('Not implemented.');
  }

  isOrder2() {
    throw new Error('Not implemented.');
  }

  isOdd() {
    throw new Error('Not implemented.');
  }

  isEven() {
    throw new Error('Not implemented.');
  }

  isSquare() {
    throw new Error('Not implemented.');
  }

  eqX(x) {
    throw new Error('Not implemented.');
  }

  eqR(x) {
    throw new Error('Not implemented.');
  }

  isSmall() {
    // Test whether the point is of small order.
    if (this.isInfinity())
      return false;

    // P * h = O
    return this.jmulH().isInfinity();
  }

  hasTorsion() {
    // Test whether the point is in another subgroup.
    if (this.isInfinity())
      return false;

    // P * n != O
    return !this.jmul(this.curve.n).isInfinity();
  }

  order() {
    // Calculate point order.
    const {h, n} = this.curve;

    let p = this.toJ();
    let q = new BN(1);

    while (!p.isInfinity()) {
      q.iaddn(1);

      if (q.cmp(h) > 0) {
        q = n.clone();
        break;
      }

      p = p.add(this);
    }

    return q;
  }

  mul(k) {
    return this.jmul(k);
  }

  muln(k) {
    return this.jmuln(k);
  }

  mulBlind(k, rng) {
    return this.jmulBlind(k, rng);
  }

  mulAdd(k1, p2, k2) {
    return this.jmulAdd(k1, p2, k2);
  }

  mulH() {
    return this.jmulH();
  }

  div(k) {
    return this.jdiv(k);
  }

  divn(k) {
    return this.jdivn(k);
  }

  divH() {
    return this.jdivH();
  }

  jmul(k) {
    if (USE_FIXED && this._hasWindows(k))
      return this.curve._fixedMul(this, k);

    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);

    if (this.curve.endo && this.type === types.AFFINE)
      return this.curve._endoWnafMulAdd([this], [k]);

    return this.curve._wnafMul(5, this, k);
  }

  jmuln(k) {
    assert((k | 0) === k);
    return this.jmul(new BN(k));
  }

  jmulBlind(k, rng = null) {
    const [p, t, unblind] = this._blind(k, rng);
    const q = p.jmul(t);

    if (unblind)
      return q.add(unblind);

    return q;
  }

  jmulAdd(k1, p2, k2) {
    if (this.curve.endo && this.type === types.AFFINE)
      return this.curve._endoWnafMulAdd([this, p2], [k1, k2]);

    return this.curve._wnafMulAdd(5, [this, p2], [k1, k2]);
  }

  jmulH() {
    const word = this.curve.h.word(0);

    // Optimize for powers of two.
    if ((word & (word - 1)) === 0) {
      const bits = this.curve.h.bitLength();
      return this.toJ().dblp(bits - 1);
    }

    return this.jmul(this.curve.h);
  }

  jdiv(k) {
    assert(k instanceof BN);
    assert(!k.red);

    return this.jmul(k.invert(this.curve.n));
  }

  jdivn(k) {
    assert(!this.curve.n.isZero());

    if (this.curve.h.cmpn(k) === 0)
      return this.jdivH();

    return this.jdiv(new BN(k));
  }

  jdivH() {
    if (this.curve.n.isZero())
      return this.toJ();

    if (this.curve.h.cmpn(1) === 0)
      return this.toJ();

    if (this.curve.hi === null)
      this.curve.hi = this.curve.h.invert(this.curve.n);

    return this.jmul(this.curve.hi);
  }

  toP() {
    return this.normalize();
  }

  toJ() {
    return this;
  }

  toX() {
    return this;
  }

  key() {
    if (this.isInfinity())
      return `${this.curve.uid}:oo`;

    this.normalize();

    const x = this.getX().toString(16);
    const y = this.getY().toString(16);

    return `${this.curve.uid}:${x},${y}`;
  }

  encode(compact) {
    throw new Error('Not implemented.');
  }

  static decode(curve, bytes) {
    throw new Error('Not implemented.');
  }

  encodeX() {
    throw new Error('Not implemented.');
  }

  static decodeX(curve, bytes) {
    throw new Error('Not implemented.');
  }

  static decodeEven(curve, bytes) {
    throw new Error('Not implemented.');
  }

  static decodeSquare(curve, bytes) {
    throw new Error('Not implemented.');
  }

  toJSON(pre) {
    throw new Error('Not implemented.');
  }

  static fromJSON(curve, json) {
    throw new Error('Not implemented.');
  }

  [custom]() {
    return '<Point>';
  }
}

/**
 * ShortCurve
 */

class ShortCurve extends Curve {
  constructor(conf) {
    super(ShortPoint, 'short', conf);

    this.a = BN.fromJSON(conf.a).toRed(this.red);
    this.b = BN.fromJSON(conf.b).toRed(this.red);
    this.c = BN.fromJSON(conf.c || '0').toRed(this.red);
    this.ai = this.a.isZero() ? this.zero : this.a.redInvert();
    this.zi = this.z.isZero() ? this.zero : this.z.redInvert();

    this.zeroA = this.a.isZero();
    this.threeA = this.a.eq(this.three.redNeg());
    this.redN = this.n.toRed(this.red);
    this.pmodn = this.p.clone();
    this.highOrder = this.n.cmp(this.p) >= 0;
    this.smallGap = false;

    this._finalize(conf);
  }

  _finalize(conf) {
    super._finalize(conf);

    // Precalculate endomorphism.
    if (conf.endo != null)
      this.endo = Endo.fromJSON(this, conf.endo);
    else
      this.endo = this._getEndomorphism();

    if (!this.n.isZero()) {
      this.pmodn = this.p.mod(this.n);

      // Check for Maxwell's trick (see eqR).
      this.smallGap = this.p.div(this.n).cmpn(1) <= 0;
    }

    return this;
  }

  static _isomorphism(curveA, curveB, custom, odd) {
    // Short Weierstrass Isomorphism.
    //
    // [GECC] Page 84, Section 3.1.5.
    // [ARITH1] Page 274, Section 13.1.5.
    // [ALT] Appendix F.3 (Isomorphic Mapping between Weierstrass Curves).
    //
    // Find `u` such that `a * u^4 = a'` and `b * u^6 = b'`.
    //
    // Transformation:
    //
    //   u4 = a' / a
    //   u2 = +-sqrt(u4)
    //   u6 = u4 * u2
    //   a' = a * u4
    //   b' = b * u6
    //
    // Where `u2` is any root that is square.
    //
    // If a = 0, we can do:
    //
    //   a' = 0
    //   b' = b'
    //
    // Where (b' / b)^(1 / 3) is square.
    //
    // If b = 0, we can do:
    //
    //   a' = a'
    //   b' = 0
    //
    // Where sqrt(a' / a) is square.
    assert(curveA instanceof BN);
    assert(curveB instanceof BN);
    assert(custom instanceof BN);
    assert(odd == null || typeof odd === 'boolean');
    assert(!curveA.isZero() || !curveB.isZero());

    if (custom.isZero())
      throw new Error('Invalid coefficient.');

    if (curveA.isZero()) {
      const customB = custom;
      const u6 = customB.redDiv(curveB);
      // Todo: allow index flag.
      const u2 = uncube(u6);

      // Already checked in uncube().
      assert(u2.redJacobi() === 1);

      return [curveA.clone(), customB.clone()];
    }

    if (curveB.isZero()) {
      const customA = custom;
      const u4 = customA.redDiv(curveA);
      const u2 = u4.redSqrt();

      // Todo: allow odd flag.
      if (u2.redJacobi() !== 1)
        u2.redINeg();

      if (u2.redJacobi() !== 1)
        throw new Error('Invalid `a` coefficient.');

      return [customA.clone(), curveB.clone()];
    }

    const customA = custom;
    const u4 = customA.redDiv(curveA);
    const u2 = u4.redSqrt();

    if (odd != null) {
      if (u2.redIsOdd() !== odd)
        u2.redINeg();
    } else {
      if (u2.redJacobi() !== 1)
        u2.redINeg();
    }

    if (u2.redJacobi() !== 1)
      throw new Error('Invalid `a` coefficient.');

    const u6 = u4.redMul(u2);
    const a = curveA.redMul(u4);
    const b = curveB.redMul(u6);

    assert(a.eq(customA));

    return [a, b];
  }

  _short(a0, odd) {
    return ShortCurve._isomorphism(this.a, this.b, a0, odd);
  }

  _mont(b0, odd) {
    // Short Weierstrass->Montgomery Equivalence.
    //
    // [ARITH1] Page 286, Section 13.2.3.c.
    // [SAFE] "Ladders".
    //
    // Transformation:
    //
    //   r = A / (3 * B)
    //   s = +-sqrt(3 * r^2 + a)
    //   A = 3 * r / s
    //   B = 1 / s
    const [r, s] = this._findRS(odd);
    const b = s.redInvert();
    const a = r.redMuln(3).redMul(b);

    if (b0 != null)
      return MontCurve._isomorphism(a, b, b0);

    return [a, b];
  }

  _edwards(a0, odd) {
    // Short Weierstrass->Twisted Edwards Equivalence.
    //
    // [TWISTEQ] Section 1.
    //
    // Transformation:
    //
    //   r = (a' + d') / 6
    //   s = +-sqrt(3 * r^2 + a)
    //   a' = 3 * r + 2 * s
    //   d' = 3 * r - 2 * s
    const [r, s] = this._findRS(odd);
    const r3 = r.redMuln(3);
    const s2 = s.redMuln(2);
    const a = r3.redAdd(s2);
    const d = r3.redSub(s2);

    if (a0 != null)
      return EdwardsCurve._isomorphism(a, d, a0);

    return [a, d];
  }

  _findRS(sign) {
    // Find `r` and `s` for equivalence.
    //
    // [ARITH1] Page 286, Section 13.2.3.c.
    // [SAFE] "Ladders".
    //
    // Computation:
    //
    //   r = solve(r^3 + a * r + b == 0, r)
    //   s = +-sqrt(3 * r^2 + a)
    //
    // Computing `r` is non-trivial. We need
    // to solve `r^3 + a * r + b = 0`, but we
    // don't have a polynomial solver, so we
    // loop over random points until we find
    // one with 2-torsion. Multiplying by the
    // subgroup order should yield a point of
    // ((A / 3) / B, 0) which is a solution.
    assert(sign == null || typeof sign === 'boolean');
    assert(this.h.word(0) >= 4);
    assert(!this.n.isZero());

    const x = this.one.redNeg();

    let p;

    for (;;) {
      x.redIAdd(this.one);

      try {
        p = this.pointFromX(x.clone());
      } catch (e) {
        continue;
      }

      p = p.mul(this.n);

      if (p.isInfinity())
        continue;

      if (!p.y.isZero())
        continue;

      break;
    }

    const r = p.x;
    const r2 = r.redSqr();
    const s = r2.redMuln(3).redIAdd(this.a).redSqrt();

    if (sign != null) {
      if (s.redIsOdd() !== sign)
        s.redINeg();
    }

    return [r, s];
  }

  _scale0(a, b) {
    // We can extract the isomorphism factors with:
    //
    //   u4 = a' / a
    //   u6 = b' / b
    //   u2 = +-sqrt(u4)
    //   u = +-sqrt(u2)
    //   u3 = u2 * u
    //
    // `u2` should be picked such that `u4 * u2 = u6`.
    //
    // If a = 0, we can do:
    //
    //   u6 = b' / b
    //   u2 = u6^(1 / 3)
    //   u = +-sqrt(u2)
    //   u3 = u2 * u
    //
    // Where `u2` is any root that is square.
    //
    // If b = 0, we can do:
    //
    //   u4 = a' / a
    //   u2 = +-sqrt(u4)
    //   u = +-sqrt(u2)
    //   u3 = u2 * u
    //
    // Where `u2` is any root that is square.
    assert(this.a.isZero() === a.isZero());
    assert(this.b.isZero() === b.isZero());

    if (this.a.isZero()) {
      const u6 = this.b.redDiv(this.field(b));
      // Todo: figure out how to check index.
      const u2 = uncube(u6);
      const u = u2.redSqrt();
      const u3 = u2.redMul(u);

      assert(u3.redSqr().eq(u6));
      assert(!u.isZero());

      return [u2, u3];
    }

    if (this.b.isZero()) {
      const u4 = this.a.redDiv(this.field(a));
      const u2 = u4.redSqrt();

      // Todo: figure out how to check oddness.
      if (u2.redJacobi() !== 1)
        u2.redINeg();

      const u = u2.redSqrt();
      const u3 = u2.redMul(u);

      assert(u3.redMul(u).eq(u4));
      assert(!u.isZero());

      return [u2, u3];
    }

    const u4 = this.a.redDiv(this.field(a));
    const u6 = this.b.redDiv(this.field(b));
    const u2 = u4.redSqrt();

    if (!u4.redMul(u2).eq(u6))
      u2.redINeg();

    assert(u4.redMul(u2).eq(u6));

    const u = u2.redSqrt();
    const u3 = u2.redMul(u);

    assert(!u.isZero());

    return [u2, u3];
  }

  _scale1(x, y) {
    // If base points are available, it is much
    // easier, with:
    //
    //   u2 = x' / x
    //   u3 = y' / y
    //   u = +-sqrt(u2)
    //
    // `u` should be picked such that `u2 * u = u3`.
    const u2 = this.g.x.redDiv(this.field(x));
    const u3 = this.g.y.redDiv(this.field(y));
    const u = u2.redSqrt();

    if (!u2.redMul(u).eq(u3))
      u.redINeg();

    assert(u2.redMul(u).eq(u3));
    assert(!u.isZero());

    return [u2, u3];
  }

  _scaleShort(curve) {
    assert(curve instanceof ShortCurve);

    if (this.g.isInfinity() || curve.g.isInfinity())
      return this._scale0(curve.a, curve.b);

    return this._scale1(curve.g.x, curve.g.y);
  }

  _scaleMont(curve) {
    assert(curve instanceof MontCurve);

    if (this.g.isInfinity() || curve.g.isInfinity()) {
      const [a, b] = curve._short();
      return this._scale0(a, b);
    }

    const {x, y} = curve.g;
    const nx = x.redAdd(curve.a3).redMul(curve.bi);
    const ny = y.redMul(curve.bi);

    return this._scale1(nx, ny);
  }

  _scaleEdwards(curve) {
    assert(curve instanceof EdwardsCurve);

    if (this.g.isInfinity() || curve.g.isInfinity()) {
      const [a, b] = curve._short();
      return this._scale0(a, b);
    }

    const {x, y, z} = curve.g;
    const a5 = curve.a.redMuln(5);
    const d5 = curve.d.redMuln(5);
    const dma = curve.d.redSub(curve.a);
    const d5a = d5.redSub(curve.a);
    const da5 = curve.d.redSub(a5);
    const ypz = y.redAdd(z);
    const ymz = y.redSub(z);
    const xx = d5a.redMul(y).redIAdd(da5.redMul(z));
    const xz = ymz.redMuln(12);
    const yy = dma.redMul(ypz).redMul(z);
    const yz = ymz.redMul(x).redIMuln(4);
    const zi = xz.redMul(yz).redInvert();
    const nx = xx.redMul(yz).redMul(zi);
    const ny = yy.redMul(xz).redMul(zi);

    return this._scale1(nx, ny);
  }

  _getEndomorphism(index = 0) {
    // Compute endomorphism.
    //
    // [GECC] Example 3.76, Page 128, Section 3.5.

    // No curve params.
    if (this.n.isZero() || this.g.isInfinity())
      return null;

    // No efficient endomorphism.
    if (!this.zeroA || this.p.modrn(3) !== 1 || this.n.modrn(3) !== 1)
      return null;

    // Solve beta^3 mod p = 1.
    const [b1, b2] = this._getEndoRoots(this.p);

    // Choose the smallest beta by default.
    const beta = [b1, b2][index & 1].toRed(this.red);

    // Solve lambda^3 mod n = 1.
    const [l1, l2] = this._getEndoRoots(this.n);

    // Choose the lambda matching selected beta.
    // Note that P * lambda = (x * beta, y).
    const p = this.point(this.g.x.redMul(beta), this.g.y);

    let lambda;

    if (this.g.mul(l1).eq(p)) {
      lambda = l1;
    } else {
      assert(this.g.mul(l2).eq(p));
      lambda = l2;
    }

    // Get basis vectors.
    const basis = this._getEndoBasis(lambda);

    // Precompute `g1` and `g2`.
    const pre = this._getEndoPrecomp(basis);

    return new Endo(beta, lambda, basis, pre);
  }

  _getEndoRoots(num) {
    // Find roots for x^2 + x + 1 in F.
    //
    // [GECC] Example 3.76, Page 128, Section 3.5.
    // [GLV] Page 192, Section 2 (Endomorphisms).
    //
    // The above document doesn't fully explain how
    // to derive these and only "hints" at it, as
    // mentioned by Hal Finney[1], but we're basically
    // computing two possible cube roots of 1 here.
    //
    // Note that we could also compute[2]:
    //
    //   beta = 2^((p - 1) / 3) mod p
    //   lambda = 3^((n - 1) / 3) mod n
    //
    // As an extension of Fermat's little theorem:
    //
    //   g^(p - 1) mod p == 1
    //
    // It is suspected[3] this is how Hal Finney[4]
    // computed his original endomorphism roots.
    //
    // @indutny's method for computing cube roots
    // of unity[5] appears to be the method described
    // on wikipedia[6][7].
    //
    // Sage produces the same solution:
    //
    //   sage: solve(x^2 + x + 1 == 0, x)
    //   [x == -1/2*I*sqrt(3) - 1/2, x == 1/2*I*sqrt(3) - 1/2]
    //
    // This can be reduced to:
    //
    //   x = (+-sqrt(-3) - 1) / 2
    //
    // [1] https://bitcointalk.org/index.php?topic=3238.msg45565#msg45565
    // [2] https://crypto.stackexchange.com/a/22739
    // [3] https://bitcoin.stackexchange.com/a/35872
    // [4] https://github.com/halfinney/bitcoin/commit/dc411b5
    // [5] https://en.wikipedia.org/wiki/Cube_root_of_unity
    // [6] https://en.wikipedia.org/wiki/Splitting_field#Cubic_example
    // [7] http://mathworld.wolfram.com/SplittingField.html
    const red = num === this.p ? this.red : BN.mont(num);
    const two = new BN(2).toRed(red);
    const three = new BN(3).toRed(red);
    const i2 = two.redInvert();

    // S1 = sqrt(-3) / 2
    const s1 = three.redNeg().redSqrt().redMul(i2);

    // S2 = -S1
    const s2 = s1.redNeg();

    // R1 = S1 - 1 / 2
    const r1 = s1.redSub(i2).fromRed();

    // R2 = S2 - 1 / 2
    const r2 = s2.redSub(i2).fromRed();

    return [r1, r2].sort(BN.cmp);
  }

  _getEndoBasis(lambda) {
    // Compute endomorphic basis.
    //
    // This essentially computes Cornacchia's algorithm
    // for solving x^2 + d * y^2 = m (d = lambda, m = order).
    //
    // https://en.wikipedia.org/wiki/Cornacchia%27s_algorithm
    //
    // [GECC] Algorithm 3.74, Page 127, Section 3.5.
    // [GLV] Page 196, Section 4 (Decomposing K).
    //
    // Balanced length-two representation of a multiplier.
    //
    // 1. Run the extended euclidean algorithm with inputs n
    //    and lambda. The algorithm produces a sequence of
    //    equations si*n + ti*lam = ri where s0=1, t0=0,
    //    r0=n, s1=0, t1=1, r1=lam, and the remainders ri
    //    and are non-negative and strictly decreasing. Let
    //    l be the greatest index for which rl >= sqrt(n).
    const [rl, tl, rl1, tl1, rl2, tl2] = this._egcdSqrt(lambda);

    // 2. Set (a1, b1) <- (rl+1, -tl+1).
    const a1 = rl1;
    const b1 = tl1.neg();

    // 3. If (rl^2 + tl^2) <= (rl+2^2 + tl+2^2)
    //    then set (a2, b2) <- (rl, -tl).
    //    else set (a2, b2) <- (rl+2, -tl+2).
    const lhs = rl.sqr().iadd(tl.sqr());
    const rhs = rl2.sqr().iadd(tl2.sqr());

    let a2, b2;

    if (lhs.cmp(rhs) <= 0) {
      a2 = rl;
      b2 = tl.neg();
    } else {
      a2 = rl2;
      b2 = tl2.neg();
    }

    return [
      new Vector(a1, b1),
      new Vector(a2, b2)
    ];
  }

  _egcdSqrt(lambda) {
    // Extended Euclidean algorithm for integers.
    //
    // [GECC] Algorithm 2.19, Page 40, Section 2.2.
    // [GLV] Page 196, Section 4 (Decomposing K).
    assert(lambda instanceof BN);
    assert(!lambda.red);
    assert(lambda.sign() > 0);
    assert(this.n.sign() > 0);

    // Note that we insert the approximate square
    // root checks as described in algorithm 3.74.
    //
    // Algorithm 2.19 is defined as:
    //
    // 1. u <- a
    //    v <- b
    //
    // 2. x1 <- 1
    //    y1 <- 0
    //    x2 <- 0
    //    y2 <- 1
    //
    // 3. while u != 0 do
    //
    // 3.1. q <- floor(v / u)
    //      r <- v - q * u
    //      x <- x2 - q * x1
    //      y <- y2 - q * y1
    //
    // 3.2. v <- u
    //      u <- r
    //      x2 <- x1
    //      x1 <- x
    //      y2 <- y1
    //      y1 <- y
    //
    // 4. d <- v
    //    x <- x2
    //    y <- y2
    //
    // 5. Return (d, x, y).

    // Start with an approximate square root of n.
    const sqrtn = this.n.ushrn(this.n.bitLength() >>> 1);

    let u = lambda; // r1
    let v = this.n.clone(); // r0
    let x1 = new BN(1); // t1
    let y1 = new BN(0); // t0
    let x2 = new BN(0); // s1
    let y2 = new BN(1); // s0

    // All vectors are roots of: a + b * lambda = 0 (mod n).
    let rl, tl;

    // First vector.
    let rl1, tl1;

    // Inner.
    let i = 0;
    let j = 0;
    let p;

    // Compute EGCD.
    while (!u.isZero() && i < 2) {
      const q = v.quo(u);
      const r = v.sub(q.mul(u));
      const x = x2.sub(q.mul(x1));
      const y = y2.sub(q.mul(y1));

      // Check for r < sqrt(n).
      if (j === 0 && r.cmp(sqrtn) < 0) {
        rl = p;
        tl = x1;
        rl1 = r;
        tl1 = x;
        j = 1; // 1 more round.
      }

      p = r;
      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;

      i += j;
    }

    // Should never happen.
    assert(j !== 0, 'Could not find r < sqrt(n).');

    // Second vector.
    const rl2 = x2;
    const tl2 = x1;

    return [
      rl,
      tl,
      rl1,
      tl1,
      rl2,
      tl2
    ];
  }

  _getEndoPrecomp(basis) {
    // Precompute `g1` and `g2` to avoid round division.
    //
    // [JCEN12] Page 5, Section 4.3.
    //
    // Computation:
    //
    //   d = a1 * b2 - b1 * a2
    //   t = ceil(log2(d+1)) + p
    //   g1 = round((2^t * b2) / d)
    //   g2 = round((2^t * b1) / d)
    //
    // Where:
    //
    //   `p` is the number of precision bits.
    //   `d` is equal to `n` (the curve order).
    //
    // The paper above uses 2 as the value of `p`,
    // whereas libsecp256k1 uses 128 (total=384).
    //
    // We pick precision for `g1` and `g2` such that:
    //
    //   abs(g1) < n
    //   abs(g2) < n
    //
    // This ensures maximum precision for the constants
    // while also ensuring they fit into a fixed number
    // of scalar limbs in more optimized implementations.
    //
    // Furthermore, we attempt to align to a limb width
    // of 64 bits. This allows us to optimize the shift,
    // a la libsecp256k1[1].
    //
    // [1] https://github.com/bitcoin-core/secp256k1/pull/822
    assert(Array.isArray(basis));
    assert(basis.length === 2);
    assert(basis[0] instanceof Vector);
    assert(basis[1] instanceof Vector);

    const [v1, v2] = basis;
    const d = v1.a.mul(v2.b).isub(v1.b.mul(v2.a));
    const bits = d.bitLength();
    const align = bits >= 160;

    assert(d.eq(this.n));

    // Start with a rough estimate.
    let shift = bits + Math.ceil(bits / 2) + 1;
    let g1, g2;

    if (align)
      shift -= shift & 63;

    while (shift > bits) {
      g1 = v2.b.ushln(shift).divRound(d);
      g2 = v1.b.ushln(shift).divRound(d);

      if (g1.ucmp(d) < 0 && g2.ucmp(d) < 0)
        break;

      if (align)
        shift -= 64;
      else
        shift -= 1;
    }

    if (shift <= bits)
      throw new Error('Could not calculate g1 and g2.');

    return [shift, g1, g2];
  }

  _endoSplit(k) {
    // Balanced length-two representation of a multiplier.
    //
    // [GECC] Algorithm 3.74, Page 127, Section 3.5.
    //
    // Also note that it is possible to precompute[1]
    // values in order to avoid the division[2][3][4].
    //
    // This involves precomputing `g1` and `g2 (see
    // above). `c1` and `c2` can then be computed as
    // follows:
    //
    //   t = ceil(log2(n+1)) + p
    //   c1 = (k * g1) >> t
    //   c2 = -((k * g2) >> t)
    //
    // Where `>>` is an _unsigned_ right shift. Also
    // note that the last bit discarded in the shift
    // must be stored. If it is 1, then add 1 to the
    // scalar (absolute addition).
    //
    // It's worth noting that libsecp256k1 uses a
    // different calculation along the lines of:
    //
    //   t = ceil(log2(n+1)) + p
    //   c1 = ((k * g1) >> t) * -b1
    //   c2 = ((k * -g2) >> t) * -b2
    //   k2 = c1 + c2
    //   k1 = k2 * -lambda + k
    //
    // So, in the future, we can consider changing
    // step 4 to:
    //
    //   4. Compute c1 = (k * g1) >> t
    //          and c2 = -((k * g2) >> t).
    //
    //   const [shift, g1, g2] = this.endo.pre;
    //   const c1 = k.mulShift(g1, shift);
    //   const c2 = k.mulShift(g2, shift).ineg();
    //
    // Once we're brave enough, that is.
    //
    // [1] [JCEN12] Page 5, Section 4.3.
    // [2] https://github.com/bitcoin-core/secp256k1/blob/0b70241/src/scalar_impl.h#L259
    // [3] https://github.com/bitcoin-core/secp256k1/pull/21
    // [4] https://github.com/bitcoin-core/secp256k1/pull/127
    assert(k instanceof BN);
    assert(!k.red);
    assert(!this.n.isZero());

    const [v1, v2] = this.endo.basis;

    // 4. Compute c1 = round(b2 * k / n)
    //        and c2 = round(-b1 * k / n).
    const c1 = v2.b.mul(k).divRound(this.n);
    const c2 = v1.b.neg().mul(k).divRound(this.n);

    // 5. Compute k1 = k - c1 * a1 - c2 * a2
    //        and k2 = -c1 * b1 - c2 * b2.
    const p1 = c1.mul(v1.a);
    const p2 = c2.mul(v2.a);
    const q1 = c1.ineg().mul(v1.b);
    const q2 = c2.mul(v2.b);

    // Calculate answer.
    const k1 = k.sub(p1).isub(p2);
    const k2 = q1.isub(q2);

    // 6. Return (k1, k2).
    return [k1, k2];
  }

  _endoBeta(point) {
    assert(point instanceof ShortPoint);
    return [point, point._getBeta()];
  }

  _endoWnafMulAdd(points, coeffs) {
    // Point multiplication with efficiently computable endomorphisms.
    //
    // [GECC] Algorithm 3.77, Page 129, Section 3.5.
    // [GLV] Page 193, Section 3 (Using Efficient Endomorphisms).
    //
    // Note it may be possible to do this 4-dimensionally [4GLV].
    assert(Array.isArray(points));
    assert(Array.isArray(coeffs));
    assert(points.length === coeffs.length);
    assert(this.endo != null);

    const len = points.length;
    const npoints = new Array(len * 2);
    const ncoeffs = new Array(len * 2);

    for (let i = 0; i < len; i++) {
      const [p1, p2] = this._endoBeta(points[i]);
      const [k1, k2] = this._endoSplit(coeffs[i]);

      npoints[i * 2 + 0] = p1;
      ncoeffs[i * 2 + 0] = k1;
      npoints[i * 2 + 1] = p2;
      ncoeffs[i * 2 + 1] = k2;
    }

    return this._wnafMulAdd(5, npoints, ncoeffs);
  }

  _sswu(u) {
    // Simplified Shallue-Woestijne-Ulas Method.
    //
    // Distribution: 3/8.
    //
    // [SSWU1] Page 15-16, Section 7. Appendix G.
    // [SSWU2] Page 5, Theorem 2.3.
    // [H2EC] "Simplified Shallue-van de Woestijne-Ulas Method".
    //
    // Assumptions:
    //
    //   - a != 0, b != 0.
    //   - Let z be a non-square in F(p).
    //   - z != -1.
    //   - The polynomial g(x) - z is irreducible over F(p).
    //   - g(b / (z * a)) is square in F(p).
    //   - u != 0, u != +-sqrt(-1 / z).
    //
    // Map:
    //
    //   g(x) = x^3 + a * x + b
    //   t1 = 1 / (z^2 * u^4 + z * u^2)
    //   x1 = (-b / a) * (1 + t1)
    //   x1 = b / (z * a), if t1 = 0
    //   x2 = z * u^2 * x1
    //   x = x1, if g(x1) is square
    //     = x2, otherwise
    //   y = sign(u) * abs(sqrt(g(x)))
    const {b, z, ai, zi, one} = this;
    const z2 = z.redSqr();
    const ba = b.redNeg().redMul(ai);
    const bza = b.redMul(zi).redMul(ai);
    const u2 = u.redSqr();
    const u4 = u2.redSqr();
    const t0 = z2.redMul(u4).redIAdd(z.redMul(u2));
    const t1 = t0.isZero() ? t0 : t0.redInvert();
    const x1 = t1.isZero() ? bza : ba.redMul(one.redAdd(t1));
    const x2 = z.redMul(u2).redMul(x1);
    const y1 = this.solveY2(x1);
    const y2 = this.solveY2(x2);
    const alpha = y1.redIsSquare() | 0;
    const x = [x1, x2][alpha ^ 1];
    const y = [y1, y2][alpha ^ 1].redSqrt();

    if (y.redIsOdd() !== u.redIsOdd())
      y.redINeg();

    return this.point(x, y);
  }

  _sswui(p, hint) {
    // Inverting the Map (Simplified Shallue-Woestijne-Ulas).
    //
    // Assumptions:
    //
    //   - a^2 * x^2 - 2 * a * b * x - 3 * b^2 is square in F(p).
    //   - If r < 3 then x != -b / a.
    //
    // Unlike SVDW, the preimages here are evenly
    // distributed (more or less). SSWU covers ~3/8
    // of the curve points. Each preimage has a 1/2
    // chance of mapping to either x1 or x2.
    //
    // Assuming the point is within that set, each
    // point has a 1/4 chance of inverting to any
    // of the preimages. This means we can simply
    // randomly select a preimage if one exists.
    //
    // However, the [SVDW2] sampling method seems
    // slighly faster in practice for [SQUARED].
    //
    // Map:
    //
    //   c = sqrt(a^2 * x^2 - 2 * a * b * x - 3 * b^2)
    //   u1 = -(a * x + b - c) / (2 * (a * x + b) * z)
    //   u2 = -(a * x + b + c) / (2 * (a * x + b) * z)
    //   u3 = -(a * x + b - c) / (2 * b * z)
    //   u4 = -(a * x + b + c) / (2 * b * z)
    //   r = random integer in [1,4]
    //   u = sign(y) * abs(sqrt(ur))
    const {a, b, z} = this;
    const {x, y} = p;
    const r = hint & 3;
    const a2x2 = a.redSqr().redMul(x.redSqr());
    const abx2 = a.redMul(b).redMul(x).redIMuln(2);
    const b23 = b.redSqr().redMuln(3);
    const axb = a.redMul(x).redIAdd(b);
    const c = a2x2.redISub(abx2).redISub(b23).redSqrt();
    const n0 = axb.redSub(c).redINeg();
    const n1 = axb.redAdd(c).redINeg();
    const d0 = axb.redMul(z).redIMuln(2);
    const d1 = b.redMul(z).redIMuln(2);
    const n = [n0, n1][r & 1]; // r = 1 or 3
    const d = [d0, d1][r >>> 1]; // r = 2 or 3
    const u = n.redDivSqrt(d);

    if (u.redIsOdd() !== y.redIsOdd())
      u.redINeg();

    return u;
  }

  _svdwf(u) {
    // Shallue-van de Woestijne Method.
    //
    // Distribution: 9/16.
    //
    // [SVDW1] Section 5.
    // [SVDW2] Page 8, Section 3.
    //         Page 15, Section 6, Algorithm 1.
    // [H2EC] "Shallue-van de Woestijne Method".
    //
    // Assumptions:
    //
    //   - p = 1 (mod 3).
    //   - a = 0, b != 0.
    //   - Let z be a unique element in F(p).
    //   - g((sqrt(-3 * z^2) - z) / 2) is square in F(p).
    //   - u != 0, u != +-sqrt(-g(z)).
    //
    // Map:
    //
    //   g(x) = x^3 + b
    //   c = sqrt(-3 * z^2)
    //   t1 = u^2 + g(z)
    //   t2 = 1 / (u^2 * t1)
    //   t3 = u^4 * t2 * c
    //   x1 = (c - z) / 2 - t3
    //   x2 = t3 - (c + z) / 2
    //   x3 = z - t1^3 * t2 / (3 * z^2)
    //   x = x1, if g(x1) is square
    //     = x2, if g(x2) is square
    //     = x3, otherwise
    //   y = sign(u) * abs(sqrt(g(x)))
    const {c, z, zi, i2, i3} = this;
    const gz = this.solveY2(z);
    const z3 = i3.redMul(zi.redSqr());
    const u2 = u.redSqr();
    const u4 = u2.redSqr();
    const t1 = u2.redAdd(gz);
    const u2t1 = u2.redMul(t1);
    const t2 = u2t1.isZero() ? u2t1 : u2t1.redInvert();
    const t3 = u4.redMul(t2).redMul(c);
    const t4 = t1.redSqr().redMul(t1);
    const x1 = c.redSub(z).redMul(i2).redISub(t3);
    const x2 = t3.redSub(c.redAdd(z).redMul(i2));
    const x3 = z.redSub(t4.redMul(t2).redMul(z3));
    const y1 = this.solveY2(x1);
    const y2 = this.solveY2(x2);
    const y3 = this.solveY2(x3);
    const alpha = y1.redJacobi() | 1;
    const beta = y2.redJacobi() | 1;
    const i = mod((alpha - 1) * beta, 3);
    const x = [x1, x2, x3][i];
    const y = [y1, y2, y3][i];

    return [x, y];
  }

  _svdw(u) {
    const [x, yy] = this._svdwf(u);
    const y = yy.redSqrt();

    if (y.redIsOdd() !== u.redIsOdd())
      y.redINeg();

    return this.point(x, y);
  }

  _svdwi(p, hint) {
    // Inverting the Map (Shallue-van de Woestijne).
    //
    // [SQUARED] Algorithm 1, Page 8, Section 3.3.
    // [SVDW2] Page 12, Section 5.
    // [SVDW3] "Inverting the map".
    //
    // Assumptions:
    //
    //   - If r = 1 then x != -(c + z) / 2.
    //   - If r = 2 then x != (c - z) / 2.
    //   - If r > 2 then (t0 - t1 + t2) is square in F(p).
    //   - f(f^-1(x)) = x where f is the map function.
    //
    // We use the sampling method from [SVDW2],
    // _not_ [SQUARED]. This seems to have a
    // better distribution in practice.
    //
    // Note that [SVDW3] also appears to be
    // incorrect in terms of distribution.
    //
    // The distribution of f(u), assuming u is
    // random, is (1/2, 1/4, 1/4).
    //
    // To mirror this, f^-1(x) should simply
    // pick (1/2, 1/4, 1/8, 1/8).
    //
    // To anyone running the forward map, our
    // strings will appear to be random.
    //
    // Map:
    //
    //   g(x) = x^3 + b
    //   c = sqrt(-3 * z^2)
    //   t0 = 9 * (x^2 * z^2 + z^4)
    //   t1 = 18 * x * z^3
    //   t2 = 12 * g(z) * (x - z)
    //   t3 = sqrt(t0 - t1 + t2)
    //   t4 = t3 * z
    //   u1 = g(z) * (c - 2 * x - z) / (c + 2 * x + z)
    //   u2 = g(z) * (c + 2 * x + z) / (c - 2 * x - z)
    //   u3 = (3 * (z^3 - x * z^2) - 2 * g(z) + t4) / 2
    //   u4 = (3 * (z^3 - x * z^2) - 2 * g(z) - t4) / 2
    //   r = random integer in [1,4]
    //   u = sign(y) * abs(sqrt(ur))
    const {b, c, z, zero, two} = this;
    const {x, y} = p;
    const r = hint & 3;
    const z2 = z.redSqr();
    const z3 = z2.redMul(z);
    const z4 = z2.redSqr();
    const gz = z3.redAdd(b);
    const gz2 = gz.redMuln(2);
    const xx = x.redSqr();
    const x2z = x.redMuln(2).redIAdd(z);
    const xz2 = x.redMul(z2);
    const c0 = c.redSub(x2z);
    const c1 = c.redAdd(x2z);
    const t0 = xx.redMul(z2).redIAdd(z4).redIMuln(9);
    const t1 = x.redMul(z3).redIMuln(18);
    const t2 = gz.redMul(x.redSub(z)).redIMuln(12);
    const t3 = r >= 2 ? t0.redISub(t1).redIAdd(t2).redSqrt() : zero;
    const t4 = t3.redMul(z);
    const t5 = z3.redISub(xz2).redIMuln(3).redISub(gz2);
    const n0 = gz.redMul(c0);
    const n1 = gz.redMul(c1);
    const n2 = t5.redAdd(t4);
    const n3 = t5.redSub(t4);
    const d2 = two;
    const n = [n0, n1, n2, n3][r];
    const d = [c1, c0, d2, d2][r];
    const u = n.redDivSqrt(d);
    const [x0] = this._svdwf(u);

    if (!x0.eq(x))
      throw new Error('Invalid point.');

    if (u.redIsOdd() !== y.redIsOdd())
      u.redINeg();

    return u;
  }

  isElliptic() {
    const {a, b} = this;
    const a2 = a.redSqr();
    const a3 = a2.redMul(a);
    const b2 = b.redSqr();
    const d = b2.redMuln(27).redIAdd(a3.redMuln(4));

    // 4 * a^3 + 27 * b^2 != 0
    return !d.isZero();
  }

  jinv() {
    // [ARITH1] Page 71, Section 4.4.
    // http://mathworld.wolfram.com/j-Invariant.html
    const {a, b} = this;
    const a2 = a.redSqr();
    const a3 = a2.redMul(a);
    const b2 = b.redSqr();
    const t0 = a3.redMuln(4);
    const lhs = t0.redMuln(1728);
    const rhs = b2.redMuln(27).redIAdd(t0);

    if (rhs.isZero())
      throw new Error('Curve is not elliptic.');

    // (1728 * 4 * a^3) / (4 * a^3 + 27 * b^2)
    return lhs.redDiv(rhs).fromRed();
  }

  point(x, y) {
    return new ShortPoint(this, x, y);
  }

  jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  }

  solveX(y) {
    assert(y instanceof BN);

    if (!this.a.isZero())
      throw new Error('Not implemented.');

    // x^3 = y^2 - b
    const y2 = y.redSqr();
    const x3 = y2.redSub(this.b);

    return cubeRoots(x3);
  }

  solveY2(x) {
    // [GECC] Page 89, Section 3.2.2.
    // https://hyperelliptic.org/EFD/g1p/auto-shortw.html
    assert(x instanceof BN);

    // y^2 = x^3 + a * x + b
    const x3 = x.redSqr().redMul(x);
    const y2 = x3.redIAdd(this.b);

    if (!this.zeroA) {
      // Save some cycles for a = -3.
      if (this.threeA)
        y2.redIAdd(x.redMuln(-3));
      else
        y2.redIAdd(this.a.redMul(x));
    }

    return y2;
  }

  validate(point) {
    assert(point instanceof ShortPoint);

    if (point.inf)
      return true;

    const {x, y} = point;
    const y2 = this.solveY2(x);

    return y.redSqr().eq(y2);
  }

  pointFromX(x, sign = null) {
    assert(x instanceof BN);
    assert(sign == null || typeof sign === 'boolean');

    if (!x.red)
      x = x.toRed(this.red);

    const y = this.solveY(x);

    if (sign != null) {
      if (this.h.cmpn(1) > 0) {
        if (y.isZero() && sign)
          throw new Error('Invalid point.');
      }

      if (y.redIsOdd() !== sign)
        y.redINeg();
    }

    return this.point(x, y);
  }

  pointFromY(y, index = 0) {
    assert(y instanceof BN);
    assert((index >>> 0) === index);

    if (!y.red)
      y = y.toRed(this.red);

    const coords = this.solveX(y);

    if (index >= coords.length)
      throw new Error('Invalid X coordinate index.');

    const x = coords[index];

    return this.point(x, y);
  }

  isIsomorphic(curve) {
    // [GECC] Page 84, Section 3.1.5.
    // [ARITH1] Page 286, Section 13.2.3.c.
    assert(curve instanceof Curve);

    if (!curve.p.eq(this.p))
      return false;

    let u2, u3;
    try {
      [u2, u3] = this._scale(curve);
    } catch (e) {
      return false;
    }

    // E(a,b) <-> E(au^4,bu^6)
    if (curve.type === 'short') {
      // a' = a * u^4, b' = b * u^6
      const a = this.field(curve.a).redMul(u2.redSqr());
      const b = this.field(curve.b).redMul(u3.redSqr());

      return this.a.eq(a) && this.b.eq(b);
    }

    // E(a,b) <-> M(A,B)
    if (curve.type === 'mont') {
      // (A / (3 * B))^3 + a * (A / (3 * B)) + b = 0
      const {a3, bi} = curve;
      const x = this.field(a3.redMul(bi)).redMul(u2);
      const y2 = this.solveY2(x);

      return y2.isZero();
    }

    // E(a,b) <-> E(a,d)
    if (curve.type === 'edwards') {
      // ((a' + d') / 6)^3 + a * ((a' + d') / 6) + b = 0
      const x = this.field(curve.ad6).redMul(u2);
      const y2 = this.solveY2(x);

      return y2.isZero();
    }

    return false;
  }

  isIsogenous(curve) {
    assert(curve instanceof Curve);
    return false;
  }

  pointFromShort(point) {
    // [GECC] Page 84, Section 3.1.5.
    // [ALT] Appendix F.3 (Isomorphic Mapping between Weierstrass Curves).
    assert(point instanceof ShortPoint);

    if (this.isIsomorphic(point.curve)) {
      // Isomorphic maps for E(a,b)<->E(au^4,bu^6):
      //
      //   x' = x * u^2
      //   y' = y * u^3
      //
      // Where a * u^4 = a' and b * u^6 = b'.
      if (point.isInfinity())
        return this.point();

      const [u2, u3] = this._scale(point.curve);
      const x = this.field(point.x);
      const y = this.field(point.y);
      const nx = x.redMul(u2);
      const ny = y.redMul(u3);

      return this.point(nx, ny);
    }

    throw new Error('Not implemented.');
  }

  pointFromMont(point) {
    // [ALT] Appendix E.2 (Switching between Alternative Representations).
    // [MONT2] "Equivalence with Weierstrass curves"
    assert(point instanceof MontPoint);

    if (this.isIsomorphic(point.curve)) {
      // Equivalence for M(A,B)->E(a,b):
      //
      //   x = (u + A / 3) / B
      //   y = v / B
      //
      // Undefined if ((u^3 + A * u^2 + u) / B) is not square.
      if (point.isInfinity())
        return this.point();

      const {a3, bi} = point.curve;
      const [u2, u3] = this._scale(point.curve);
      const nx = point.x.redAdd(a3).redMul(bi);
      const ny = point.y.redMul(bi);

      return this.point(this.field(nx).redMul(u2),
                        this.field(ny).redMul(u3));
    }

    throw new Error('Not implemented.');
  }

  pointFromEdwards(point) {
    // [TWISTEQ] Section 2.
    assert(point instanceof EdwardsPoint);

    if (this.isIsomorphic(point.curve)) {
      // Equivalence for E(a,d)->E(a',b'):
      //
      //   x' = ((5 * d - a) * y + d - 5 * a) / (12 * (y - 1))
      //   y' = (d - a) * (y + 1) / (4 * x * (y - 1))
      //
      // Undefined for x = 0 or y = 1.
      //
      // Exceptional Cases:
      //   - (0, 1) -> O
      //   - (0, -1) -> ((a + d) / 6, 0)
      //
      // Unexceptional Cases:
      //   - (sqrt(1 / a), 0) -> ((5 * a - d) / 12, (a - d) / 4 * sqrt(a))
      const {a, d, ad6} = point.curve;
      const [u2, u3] = this._scale(point.curve);

      if (point.isInfinity())
        return this.point();

      if (point.x.isZero()) {
        const x = this.field(ad6).redMul(u2);
        return this.point(x, this.zero);
      }

      const {x, y, z} = point;
      const a5 = a.redMuln(5);
      const d5 = d.redMuln(5);
      const dma = d.redSub(a);
      const d5a = d5.redSub(a);
      const da5 = d.redSub(a5);
      const ypz = y.redAdd(z);
      const ymz = y.redSub(z);
      const xx = d5a.redMul(y).redIAdd(da5.redMul(z));
      const xz = ymz.redMuln(12);
      const yy = dma.redMul(ypz).redMul(z);
      const yz = ymz.redMul(x).redIMuln(4);

      return this.cpoint(this.field(xx).redMul(u2),
                         this.field(xz),
                         this.field(yy).redMul(u3),
                         this.field(yz));
    }

    throw new Error('Not implemented.');
  }

  pointFromUniform(u) {
    assert(u instanceof BN);

    // z = 0 or b = 0
    if (this.z.isZero() || this.b.isZero())
      throw new Error('Not implemented.');

    // a != 0, b != 0
    if (!this.a.isZero())
      return this._sswu(u);

    // p = 1 mod 3, a = 0, b != 0
    if (!this.c.isZero())
      return this._svdw(u);

    throw new Error('Not implemented.');
  }

  pointToUniform(p, hint) {
    // Convert a short weierstrass point to a field
    // element by inverting either the SSWU or SVDW
    // map.
    //
    // Hint Layout:
    //
    //   [00000000] [0000] [0000]
    //        |        |      |
    //        |        |      +-- preimage index
    //        |        +--- subgroup
    //        +-- bits to OR with uniform bytes
    assert(p instanceof ShortPoint);
    assert((hint >>> 0) === hint);

    // z = 0 or b = 0
    if (this.z.isZero() || this.b.isZero())
      throw new Error('Not implemented.');

    // P = O
    if (p.isInfinity())
      throw new Error('Invalid point.');

    // Add a random torsion component.
    const i = ((hint >>> 4) & 15) % this.torsion.length;
    const q = p.add(this.torsion[i]);

    return wrapErrors(() => {
      // a != 0, b != 0
      if (!this.a.isZero())
        return this._sswui(q, hint);

      // p = 1 mod 3, a = 0, b != 0
      if (!this.c.isZero())
        return this._svdwi(q, hint);

      throw new Error('Not implemented.');
    });
  }

  mulAll(points, coeffs) {
    return super.mulAll(points, coeffs).toP();
  }

  affinizeAll(points) {
    const out = this.normalizeAll(points);

    for (let i = 0; i < out.length; i++)
      out[i] = out[i].toP();

    return out;
  }

  decodePoint(bytes) {
    return ShortPoint.decode(this, bytes);
  }

  encodeX(point) {
    assert(point instanceof Point);
    return point.encodeX();
  }

  decodeEven(bytes) {
    return ShortPoint.decodeEven(this, bytes);
  }

  decodeSquare(bytes) {
    return ShortPoint.decodeSquare(this, bytes);
  }

  toShort(a0, odd, sign = null) {
    const [a, b] = this._short(a0, odd);

    const curve = new ShortCurve({
      red: this.red,
      prime: this.prime,
      p: this.p,
      a: a,
      b: b,
      n: this.n,
      h: this.h
    });

    if (sign != null) {
      const [, u3] = curve._scale(this);

      if (u3.redIsOdd() !== sign)
        u3.redINeg();
    }

    if (!this.g.isInfinity())
      curve.g = curve.pointFromShort(this.g);

    for (let i = 0; i < this.h.word(0); i++)
      curve.torsion[i] = curve.pointFromShort(this.torsion[i]);

    return curve;
  }

  toMont(b0, odd, sign = null) {
    const [a, b] = this._mont(b0, odd);

    const curve = new MontCurve({
      red: this.red,
      prime: this.prime,
      p: this.p,
      a: a,
      b: b,
      n: this.n,
      h: this.h
    });

    if (sign != null) {
      const [, u3] = this._scale(curve);

      if (u3.redIsOdd() !== sign)
        u3.redINeg();
    }

    if (!this.g.isInfinity())
      curve.g = curve.pointFromShort(this.g);

    for (let i = 0; i < this.h.word(0); i++)
      curve.torsion[i] = curve.pointFromShort(this.torsion[i]);

    return curve;
  }

  toEdwards(a0, odd, sign = null) {
    const [a, d] = this._edwards(a0, odd);

    const curve = new EdwardsCurve({
      red: this.red,
      prime: this.prime,
      p: this.p,
      a: a,
      d: d,
      n: this.n,
      h: this.h
    });

    if (sign != null) {
      const [, u3] = this._scale(curve);

      if (u3.redIsOdd() !== sign)
        u3.redINeg();
    }

    if (!this.g.isInfinity()) {
      curve.g = curve.pointFromShort(this.g);
      curve.g.normalize();
    }

    if (curve.isComplete()) {
      for (let i = 0; i < this.h.word(0); i++) {
        curve.torsion[i] = curve.pointFromShort(this.torsion[i]);
        curve.torsion[i].normalize();
      }
    }

    return curve;
  }

  pointFromJSON(json) {
    return ShortPoint.fromJSON(this, json);
  }

  toJSON(pre) {
    const json = super.toJSON(pre);

    json.a = this.a.fromRed().toJSON();
    json.b = this.b.fromRed().toJSON();

    if (!this.c.isZero())
      json.c = this.c.fromRed().toJSON();

    return json;
  }
}

/**
 * ShortPoint
 */

class ShortPoint extends Point {
  constructor(curve, x, y) {
    assert(curve instanceof ShortCurve);

    super(curve, types.AFFINE);

    this.x = this.curve.zero;
    this.y = this.curve.zero;
    this.inf = true;

    if (x != null)
      this._init(x, y);
  }

  _init(x, y) {
    assert(x instanceof BN);
    assert(y instanceof BN);

    this.x = x;
    this.y = y;

    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);

    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);

    this.inf = false;
  }

  _getBeta() {
    if (!this.curve.endo)
      return null;

    if (this.pre && this.pre.beta)
      return this.pre.beta;

    // Augment the point with our beta value.
    // This is the counterpart to `k2` after
    // the endomorphism split of `k`.
    //
    // Note that if we have precomputation,
    // we have to clone and update all of the
    // precomputed points below.
    const xb = this.x.redMul(this.curve.endo.beta);
    const beta = this.curve.point(xb, this.y);

    if (this.pre) {
      beta.pre = this.pre.map((point) => {
        const xb = point.x.redMul(this.curve.endo.beta);
        return this.curve.point(xb, point.y);
      });

      this.pre.beta = beta;
    }

    return beta;
  }

  _getJNAF(point) {
    assert(point instanceof ShortPoint);

    if (this.inf || point.inf)
      return super._getJNAF(point);

    // Create comb for JSF.
    const comb = [
      this, // 1
      null, // 3
      null, // 5
      point // 7
    ];

    // Try to avoid Jacobian points, if possible.
    if (this.y.eq(point.y)) {
      comb[1] = this.add(point);
      comb[2] = this.toJ().sub(point);
    } else if (this.y.eq(point.y.redNeg())) {
      comb[1] = this.toJ().add(point);
      comb[2] = this.sub(point);
    } else {
      comb[1] = this.toJ().add(point);
      comb[2] = this.toJ().sub(point);
    }

    return comb;
  }

  clone() {
    if (this.inf)
      return this.curve.point();

    return this.curve.point(this.x, this.y);
  }

  scale(a) {
    return this.toJ().scale(a);
  }

  neg() {
    // P = O
    if (this.inf)
      return this;

    // -(X1, Y1) = (X1, -Y1)
    return this.curve.point(this.x, this.y.redNeg());
  }

  add(p) {
    // [GECC] Page 80, Section 3.1.2.
    //
    // Addition Law:
    //
    //   l = (y1 - y2) / (x1 - x2)
    //   x3 = l^2 - x1 - x2
    //   y3 = l * (x1 - x3) - y1
    //
    // 1I + 2M + 1S + 6A
    assert(p instanceof ShortPoint);

    // O + P = P
    if (this.inf)
      return p;

    // P + O = P
    if (p.inf)
      return this;

    // P + P, P + -P
    if (this.x.eq(p.x)) {
      // P + -P = O
      if (!this.y.eq(p.y))
        return this.curve.point();

      // P + P = 2P
      return this.dbl();
    }

    // X1 != X2, Y1 = Y2
    if (this.y.eq(p.y)) {
      // X3 = -X1 - X2
      const nx = this.x.redNeg().redISub(p.x);

      // Y3 = -Y1
      const ny = this.y.redNeg();

      // Skip the inverse.
      return this.curve.point(nx, ny);
    }

    // H = X1 - X2
    const h = this.x.redSub(p.x);

    // R = Y1 - Y2
    const r = this.y.redSub(p.y);

    // L = R / H
    const l = r.redDiv(h);

    // X3 = L^2 - X1 - X2
    const nx = l.redSqr().redISub(this.x).redISub(p.x);

    // Y3 = L * (X1 - X3) - Y1
    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);

    return this.curve.point(nx, ny);
  }

  dbl() {
    // [GECC] Page 80, Section 3.1.2.
    //
    // Addition Law (doubling):
    //
    //   l = (3 * x1^2 + a) / (2 * y1)
    //   x3 = l^2 - 2 * x1
    //   y3 = l * (x1 - x3) - y1
    //
    // 1I + 2M + 2S + 3A + 2*2 + 1*3

    // P = O
    if (this.inf)
      return this;

    // Y1 = 0
    if (this.y.isZero())
      return this.curve.point();

    // XX = X1^2
    const xx = this.x.redSqr();

    // M = 3 * XX + a
    const m = xx.redIMuln(3).redIAdd(this.curve.a);

    // Z = 2 * Y1
    const z = this.y.redMuln(2);

    // L = M / Z
    const l = m.redDiv(z);

    // X3 = L^2 - 2 * X1
    const nx = l.redSqr().redISub(this.x).redISub(this.x);

    // Y3 = L * (X1 - X3) - Y1
    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);

    return this.curve.point(nx, ny);
  }

  dblp(pow) {
    return this.toJ().dblp(pow).toP();
  }

  getX() {
    if (this.inf)
      throw new Error('Invalid point.');

    return this.x.fromRed();
  }

  getY() {
    if (this.inf)
      throw new Error('Invalid point.');

    return this.y.fromRed();
  }

  eq(p) {
    assert(p instanceof ShortPoint);

    // P = Q
    if (this === p)
      return true;

    // P = O
    if (this.inf)
      return p.inf;

    // Q = O
    if (p.inf)
      return false;

    // X1 = X2, Y1 = Y2
    return this.x.eq(p.x)
        && this.y.eq(p.y);
  }

  cmp(point) {
    assert(point instanceof ShortPoint);

    if (this.inf && !point.inf)
      return -1;

    if (!this.inf && point.inf)
      return 1;

    if (this.inf && point.inf)
      return 0;

    return this.order().cmp(point.order())
        || this.getX().cmp(point.getX())
        || this.getY().cmp(point.getY());
  }

  isInfinity() {
    // Infinity cannot be represented in
    // the affine space, except by a flag.
    return this.inf;
  }

  isOrder2() {
    if (this.inf)
      return false;

    return this.y.isZero();
  }

  isOdd() {
    if (this.inf)
      return false;

    return this.y.redIsOdd();
  }

  isEven() {
    if (this.inf)
      return false;

    return this.y.redIsEven();
  }

  isSquare() {
    if (this.inf)
      return false;

    return this.y.redJacobi() !== -1;
  }

  eqX(x) {
    assert(x instanceof BN);
    assert(!x.red);

    if (this.inf)
      return false;

    return this.getX().eq(x);
  }

  eqR(x) {
    assert(x instanceof BN);
    assert(!x.red);
    assert(!this.curve.n.isZero());

    if (this.inf)
      return false;

    return this.getX().imod(this.curve.n).eq(x);
  }

  mul(k) {
    return super.mul(k).toP();
  }

  muln(k) {
    return super.muln(k).toP();
  }

  mulBlind(k, rng) {
    return super.mulBlind(k, rng).toP();
  }

  mulAdd(k1, p2, k2) {
    return super.mulAdd(k1, p2, k2).toP();
  }

  mulH() {
    return super.mulH().toP();
  }

  div(k) {
    return super.div(k).toP();
  }

  divn(k) {
    return super.divn(k).toP();
  }

  divH() {
    return super.divH().toP();
  }

  toP() {
    return this;
  }

  toJ() {
    // (X3, Y3, Z3) = (1, 1, 0)
    if (this.inf)
      return this.curve.jpoint();

    // (X3, Y3, Z3) = (X1, Y1, 1)
    return this.curve.jpoint(this.x, this.y, this.curve.one);
  }

  encode(compact) {
    // [SEC1] Page 10, Section 2.3.3.
    if (compact == null)
      compact = true;

    assert(typeof compact === 'boolean');

    const {fieldSize} = this.curve;

    // We do not serialize points at infinity.
    if (this.inf)
      throw new Error('Invalid point.');

    // Compressed form (0x02 = even, 0x03 = odd).
    if (compact) {
      const p = Buffer.alloc(1 + fieldSize);
      const x = this.curve.encodeField(this.getX());

      p[0] = 0x02 | this.y.redIsOdd();
      x.copy(p, 1);

      return p;
    }

    // Uncompressed form (0x04).
    const p = Buffer.alloc(1 + fieldSize * 2);
    const x = this.curve.encodeField(this.getX());
    const y = this.curve.encodeField(this.getY());

    p[0] = 0x04;
    x.copy(p, 1);
    y.copy(p, 1 + fieldSize);

    return p;
  }

  static decode(curve, bytes) {
    // [SEC1] Page 11, Section 2.3.4.
    assert(curve instanceof ShortCurve);
    assert((bytes != null && bytes._isBuffer === true));

    const len = curve.fieldSize;

    if (bytes.length < 1 + len)
      throw new Error('Not a point.');

    // Point forms:
    //
    //   0x00 -> Infinity (openssl, unsupported)
    //   0x02 -> Compressed Even
    //   0x03 -> Compressed Odd
    //   0x04 -> Uncompressed
    //   0x06 -> Hybrid Even (openssl)
    //   0x07 -> Hybrid Odd (openssl)
    //
    // Note that openssl supports serializing points
    // at infinity as {0}. We choose not to support it
    // because it's strange and not terribly useful.
    const form = bytes[0];

    switch (form) {
      case 0x02:
      case 0x03: {
        if (bytes.length !== 1 + len)
          throw new Error('Invalid point size for compressed.');

        const x = curve.decodeField(bytes.slice(1, 1 + len));

        if (x.cmp(curve.p) >= 0)
          throw new Error('Invalid point.');

        const p = curve.pointFromX(x, form === 0x03);

        assert(!p.isInfinity());

        return p;
      }

      case 0x04:
      case 0x06:
      case 0x07: {
        if (bytes.length !== 1 + len * 2)
          throw new Error('Invalid point size for uncompressed.');

        const x = curve.decodeField(bytes.slice(1, 1 + len));
        const y = curve.decodeField(bytes.slice(1 + len, 1 + 2 * len));

        // [GECC] Algorithm 4.3, Page 180, Section 4.
        if (x.cmp(curve.p) >= 0 || y.cmp(curve.p) >= 0)
          throw new Error('Invalid point.');

        // OpenSSL hybrid encoding.
        if (form !== 0x04 && form !== (0x06 | y.isOdd()))
          throw new Error('Invalid hybrid encoding.');

        const p = curve.point(x, y);

        if (!p.validate())
          throw new Error('Invalid point.');

        assert(!p.isInfinity());

        return p;
      }

      default: {
        throw new Error('Unknown point format.');
      }
    }
  }

  encodeX() {
    // [SCHNORR] "Specification".
    // [BIP340] "Specification".
    return this.curve.encodeField(this.getX());
  }

  static decodeEven(curve, bytes) {
    // [BIP340] "Specification".
    assert(curve instanceof ShortCurve);

    const x = curve.decodeField(bytes);

    if (x.cmp(curve.p) >= 0)
      throw new Error('Invalid point.');

    return curve.pointFromX(x, false);
  }

  static decodeSquare(curve, bytes) {
    // [SCHNORR] "Specification".
    assert(curve instanceof ShortCurve);

    const x = curve.decodeField(bytes);

    if (x.cmp(curve.p) >= 0)
      throw new Error('Invalid point.');

    return curve.pointFromX(x);
  }

  toJSON(pre) {
    if (this.inf)
      return [];

    const x = this.getX().toJSON();
    const y = this.getY().toJSON();

    if (pre === true && this.pre)
      return [x, y, this.pre.toJSON()];

    return [x, y];
  }

  toPretty() {
    if (this.inf)
      return [];

    const size = this.curve.fieldSize * 2;
    const x = toPretty(this.getX(), size);
    const y = toPretty(this.getY(), size);

    return [x, y];
  }

  static fromJSON(curve, json) {
    assert(curve instanceof ShortCurve);
    assert(Array.isArray(json));
    assert(json.length === 0
        || json.length === 2
        || json.length === 3);

    if (json.length === 0)
      return curve.point();

    const x = BN.fromJSON(json[0]);
    const y = BN.fromJSON(json[1]);
    const point = curve.point(x, y);

    if (json.length > 2 && json[2] != null)
      point.pre = Precomp.fromJSON(point, json[2]);

    return point;
  }

  [custom]() {
    if (this.inf)
      return '<ShortPoint: Infinity>';

    return '<ShortPoint:'
         + ' x=' + this.x.fromRed().toString(16, 2)
         + ' y=' + this.y.fromRed().toString(16, 2)
         + '>';
  }
}

/**
 * JPoint
 */

class JPoint extends Point {
  constructor(curve, x, y, z) {
    assert(curve instanceof ShortCurve);

    super(curve, types.JACOBIAN);

    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = this.curve.zero;
    this.zOne = false;

    if (x != null)
      this._init(x, y, z);
  }

  _init(x, y, z) {
    assert(x instanceof BN);
    assert(y instanceof BN);
    assert(z == null || (z instanceof BN));

    this.x = x;
    this.y = y;
    this.z = z || this.curve.one;

    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);

    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);

    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);

    this.zOne = this.z.eq(this.curve.one);
  }

  clone() {
    return this.curve.jpoint(this.x, this.y, this.z);
  }

  validate() {
    // [GECC] Example 3.20, Page 88, Section 3.
    const {a, b} = this.curve;

    // P = O
    if (this.isInfinity())
      return true;

    // Z1 = 1
    if (this.zOne)
      return this.curve.validate(this.toP());

    // y^2 = x^3 + a * x * z^4 + b * z^6
    const lhs = this.y.redSqr();
    const x3 = this.x.redSqr().redMul(this.x);
    const z2 = this.z.redSqr();
    const z4 = z2.redSqr();
    const z6 = z4.redMul(z2);
    const rhs = x3.redIAdd(b.redMul(z6));

    if (!this.curve.zeroA) {
      // Save some cycles for a = -3.
      if (this.curve.threeA)
        rhs.redIAdd(z4.redIMuln(-3).redMul(this.x));
      else
        rhs.redIAdd(a.redMul(z4).redMul(this.x));
    }

    return lhs.eq(rhs);
  }

  normalize() {
    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#scaling-z
    // 1I + 3M + 1S

    // Z = 1
    if (this.zOne)
      return this;

    // P = O
    if (this.isInfinity())
      return this;

    // A = 1 / Z1
    const a = this.z.redInvert();

    // AA = A^2
    const aa = a.redSqr();

    // X3 = X1 * AA
    this.x = this.x.redMul(aa);

    // Y3 = Y1 * AA * A
    this.y = this.y.redMul(aa).redMul(a);

    // Z3 = 1
    this.z = this.curve.one;
    this.zOne = true;

    return this;
  }

  scale(a) {
    assert(a instanceof BN);

    // P = O
    if (this.isInfinity())
      return this.curve.jpoint();

    // AA = A^2
    const aa = a.redSqr();

    // X3 = X1 * AA
    const nx = this.x.redMul(aa);

    // Y3 = Y1 * AA * A
    const ny = this.y.redMul(aa).redMul(a);

    // Z3 = Z1 * A
    const nz = this.z.redMul(a);

    return this.curve.jpoint(nx, ny, nz);
  }

  neg() {
    // -(X1, Y1, Z1) = (X1, -Y1, Z1)
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  }

  add(p) {
    assert(p instanceof Point);

    if (p.type === types.AFFINE)
      return this._mixedAdd(p);

    return this._add(p);
  }

  _add(p) {
    assert(p instanceof JPoint);

    // O + P = P
    if (this.isInfinity())
      return p;

    // P + O = P
    if (p.isInfinity())
      return this;

    // Z1 = 1
    if (this.zOne)
      return p._addJA(this);

    // Z2 = 1
    if (p.zOne)
      return this._addJA(p);

    return this._addJJ(p);
  }

  _mixedAdd(p) {
    assert(p instanceof ShortPoint);

    // O + P = P
    if (this.isInfinity())
      return p.toJ();

    // P + O = P
    if (p.isInfinity())
      return this;

    return this._addJA(p);
  }

  _addJJ(p) {
    // No assumptions.
    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-add-1998-cmo-2
    // 12M + 4S + 6A + 1*2 (implemented as: 12M + 4S + 7A)

    // Z1Z1 = Z1^2
    const z1z1 = this.z.redSqr();

    // Z2Z2 = Z2^2
    const z2z2 = p.z.redSqr();

    // U1 = X1 * Z2Z2
    const u1 = this.x.redMul(z2z2);

    // U2 = X2 * Z1Z1
    const u2 = p.x.redMul(z1z1);

    // S1 = Y1 * Z2 * Z2Z2
    const s1 = this.y.redMul(p.z).redMul(z2z2);

    // S2 = Y2 * Z1 * Z1Z1
    const s2 = p.y.redMul(this.z).redMul(z1z1);

    // H = U2 - U1
    const h = u2.redISub(u1);

    // r = S2 - S1
    const r = s2.redISub(s1);

    // H = 0
    if (h.isZero()) {
      if (!r.isZero())
        return this.curve.jpoint();

      return this.dbl();
    }

    // HH = H^2
    const hh = h.redSqr();

    // HHH = H * HH
    const hhh = h.redMul(hh);

    // V = U1 * HH
    const v = u1.redMul(hh);

    // X3 = r^2 - HHH - 2 * V
    const nx = r.redSqr().redISub(hhh).redISub(v).redISub(v);

    // Y3 = r * (V - X3) - S1 * HHH
    const ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(hhh));

    // Z3 = Z1 * Z2 * H
    const nz = this.z.redMul(p.z).redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  }

  _addJA(p) {
    // Assumes Z2 = 1.
    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#addition-madd
    // 8M + 3S + 6A + 5*2 (implemented as: 8M + 3S + 7A + 4*2)

    // Z1Z1 = Z1^2
    const z1z1 = this.z.redSqr();

    // U2 = X2 * Z1Z1
    const u2 = p.x.redMul(z1z1);

    // S2 = Y2 * Z1 * Z1Z1
    const s2 = p.y.redMul(this.z).redMul(z1z1);

    // H = U2 - X1
    const h = u2.redISub(this.x);

    // r = 2 * (S2 - Y1)
    const r = s2.redISub(this.y).redIMuln(2);

    // H = 0
    if (h.isZero()) {
      if (!r.isZero())
        return this.curve.jpoint();

      return this.dbl();
    }

    // I = (2 * H)^2
    const i = h.redMuln(2).redSqr();

    // J = H * I
    const j = h.redMul(i);

    // V = X1 * I
    const v = this.x.redMul(i);

    // X3 = r^2 - J - 2 * V
    const nx = r.redSqr().redISub(j).redISub(v).redISub(v);

    // Y3 = r * (V - X3) - 2 * Y1 * J
    const ny = r.redMul(v.redISub(nx)).redISub(this.y.redMul(j).redIMuln(2));

    // Z3 = 2 * Z1 * H
    const nz = this.z.redMul(h).redIMuln(2);

    return this.curve.jpoint(nx, ny, nz);
  }

  dbl() {
    // P = O
    if (this.isInfinity())
      return this;

    // Y1 = 0
    if (this.y.isZero())
      return this.curve.jpoint();

    // a = 0
    if (this.curve.zeroA)
      return this._dbl0();

    // a = -3
    if (this.curve.threeA)
      return this._dbl3();

    return this._dblJ();
  }

  _dblJ() {
    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2
    // 3M + 6S + 4A + 1*a + 2*2 + 1*3 + 1*4 + 1*8
    // (implemented as: 3M + 6S + 5A + 1*a + 1*2 + 1*3 + 1*4 + 1*8)

    // XX = X1^2
    const xx = this.x.redSqr();

    // YY = Y1^2
    const yy = this.y.redSqr();

    // ZZ = Z1^2
    const zz = this.z.redSqr();

    // S = 4 * X1 * YY
    const s = this.x.redMul(yy).redIMuln(4);

    // M = 3 * XX + a * ZZ^2
    const m = xx.redIMuln(3).redIAdd(this.curve.a.redMul(zz.redSqr()));

    // T = M^2 - 2 * S
    const t = m.redSqr().redISub(s).redISub(s);

    // X3 = T
    const nx = t;

    // Y3 = M * (S - T) - 8 * YY^2
    const ny = m.redMul(s.redISub(t)).redISub(yy.redSqr().redIMuln(8));

    // Z3 = 2 * Y1 * Z1
    const nz = this.y.redMul(this.z).redIMuln(2);

    return this.curve.jpoint(nx, ny, nz);
  }

  _dbl0() {
    // Assumes a = 0.
    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l
    // 2M + 5S + 6A + 3*2 + 1*3 + 1*8
    // (implemented as: 2M + 5S + 7A + 2*2 + 1*3 + 1*8)

    // A = X1^2
    const a = this.x.redSqr();

    // B = Y1^2
    const b = this.y.redSqr();

    // C = B^2
    const c = b.redSqr();

    // + XB2 = (X1 + B)^2
    const xb2 = b.redIAdd(this.x).redSqr();

    // D = 2 * ((X1 + B)^2 - A - C)
    const d = xb2.redISub(a).redISub(c).redIMuln(2);

    // E = 3 * A
    const e = a.redIMuln(3);

    // F = E^2
    const f = e.redSqr();

    // X3 = F - 2 * D
    const nx = f.redISub(d).redISub(d);

    // Y3 = E * (D - X3) - 8 * C
    const ny = e.redMul(d.redISub(nx)).redISub(c.redIMuln(8));

    // Z3 = 2 * Y1 * Z1
    const nz = this.y.redMul(this.z).redIMuln(2);

    return this.curve.jpoint(nx, ny, nz);
  }

  _dbl3() {
    // Assumes a = -3.
    // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S + 8A + 1*3 + 1*4 + 2*8
    // (implemented as: 3M + 5S + 8A + 1*2 + 1*3 + 1*4 + 1*8)

    // delta = Z1^2
    const delta = this.z.redSqr();

    // gamma = Y1^2
    const gamma = this.y.redSqr();

    // beta = X1 * gamma
    const beta = this.x.redMul(gamma);

    // + xmdelta = X1 - delta
    const xmdelta = this.x.redSub(delta);

    // + xpdelta = X1 + delta
    const xpdelta = this.x.redAdd(delta);

    // alpha = 3 * (X1 - delta) * (X1 + delta)
    const alpha = xmdelta.redMul(xpdelta).redIMuln(3);

    // + beta4 = 4 * beta
    const beta4 = beta.redIMuln(4);

    // + beta8 = 2 * beta4
    const beta8 = beta4.redMuln(2);

    // + gamma28 = 8 * gamma^2
    const gamma28 = gamma.redSqr().redIMuln(8);

    // X3 = alpha^2 - 8 * beta
    const nx = alpha.redSqr().redISub(beta8);

    // Z3 = (Y1 + Z1)^2 - gamma - delta
    const nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);

    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    const ny = alpha.redMul(beta4.redISub(nx)).redISub(gamma28);

    return this.curve.jpoint(nx, ny, nz);
  }

  getX() {
    if (this.isInfinity())
      throw new Error('Invalid point.');

    this.normalize();

    return this.x.fromRed();
  }

  getY() {
    if (this.isInfinity())
      throw new Error('Invalid point.');

    this.normalize();

    return this.y.fromRed();
  }

  eq(p) {
    assert(p instanceof JPoint);

    // P = Q
    if (this === p)
      return true;

    // P = O
    if (this.isInfinity())
      return p.isInfinity();

    // Q = O
    if (p.isInfinity())
      return false;

    // Z1 = Z2
    if (this.z.eq(p.z)) {
      return this.x.eq(p.x)
          && this.y.eq(p.y);
    }

    // X1 * Z2^2 = X2 * Z1^2
    const zz1 = this.z.redSqr();
    const zz2 = p.z.redSqr();
    const x1 = this.x.redMul(zz2);
    const x2 = p.x.redMul(zz1);

    if (!x1.eq(x2))
      return false;

    // Y1 * Z2^3 = Y2 * Z1^3
    const zzz1 = zz1.redMul(this.z);
    const zzz2 = zz2.redMul(p.z);
    const y1 = this.y.redMul(zzz2);
    const y2 = p.y.redMul(zzz1);

    return y1.eq(y2);
  }

  cmp(point) {
    assert(point instanceof JPoint);

    const inf1 = this.isInfinity();
    const inf2 = point.isInfinity();

    if (inf1 && !inf2)
      return -1;

    if (!inf1 && inf2)
      return 1;

    if (inf1 && inf2)
      return 0;

    return this.order().cmp(point.order())
        || this.getX().cmp(point.getX())
        || this.getY().cmp(point.getY());
  }

  isInfinity() {
    // Z1 = 0
    return this.z.isZero();
  }

  isOrder2() {
    if (this.isInfinity())
      return false;

    return this.y.isZero();
  }

  isOdd() {
    if (this.isInfinity())
      return false;

    this.normalize();

    return this.y.redIsOdd();
  }

  isEven() {
    if (this.isInfinity())
      return false;

    this.normalize();

    return this.y.redIsEven();
  }

  isSquare() {
    if (this.isInfinity())
      return false;

    return this.y.redMul(this.z).redJacobi() !== -1;
  }

  eqX(x) {
    // Verify that integer `x` is equal to field
    // element `x` by scaling it by our z coordinate.
    // This optimization is mentioned in and used for
    // bip-schnorr[1]. This avoids having to affinize
    // the resulting point during verification.
    //
    // [1] [SCHNORR] "Optimizations".
    assert(x instanceof BN);
    assert(!x.red);

    if (this.isInfinity())
      return false;

    const zz = this.z.redSqr();
    const rx = x.toRed(this.curve.red).redMul(zz);

    return this.x.eq(rx);
  }

  eqR(x) {
    // Similar to the optimization above, this
    // optimization, suggested by Maxwell[1],
    // compares an integer to an X coordinate
    // by scaling it.
    //
    // Since a signature's R value is modulo N
    // in ECDSA, we may be dealing with an R
    // value greater than N in actuality.
    //
    // If the equality check fails, we can
    // scale N itself by Z and add it to the
    // X field element.
    //
    // [1] https://github.com/bitcoin-core/secp256k1/commit/ce7eb6f
    assert(x instanceof BN);
    assert(!x.red);

    if (!this.curve.smallGap)
      return this.toP().eqR(x);

    if (this.isInfinity())
      return false;

    if (x.cmp(this.curve.p) >= 0)
      return false;

    const zz = this.z.redSqr();
    const rx = x.toRed(this.curve.red).redMul(zz);

    if (this.x.eq(rx))
      return true;

    if (this.curve.highOrder)
      return false;

    if (x.cmp(this.curve.pmodn) >= 0)
      return false;

    const rn = this.curve.redN.redMul(zz);

    rx.redIAdd(rn);

    return this.x.eq(rx);
  }

  toP() {
    // P = O
    if (this.isInfinity())
      return this.curve.point();

    this.normalize();

    // (X3, Y3) = (X1 / Z1^2, Y1 / Z1^3)
    return this.curve.point(this.x, this.y);
  }

  toJ() {
    return this;
  }

  encode(compact) {
    return this.toP().encode(compact);
  }

  static decode(curve, bytes) {
    return ShortPoint.decode(curve, bytes).toJ();
  }

  encodeX() {
    return this.toP().encodeX();
  }

  static decodeEven(curve, bytes) {
    return ShortPoint.decodeEven(curve, bytes).toJ();
  }

  static decodeSquare(curve, bytes) {
    return ShortPoint.decodeSquare(curve, bytes).toJ();
  }

  toJSON(pre) {
    return this.toP().toJSON(pre);
  }

  toPretty() {
    return this.toP().toPretty();
  }

  static fromJSON(curve, json) {
    return ShortPoint.fromJSON(curve, json).toJ();
  }

  [custom]() {
    if (this.isInfinity())
      return '<JPoint: Infinity>';

    return '<JPoint:'
         + ' x=' + this.x.fromRed().toString(16, 2)
         + ' y=' + this.y.fromRed().toString(16, 2)
         + ' z=' + this.z.fromRed().toString(16, 2)
         + '>';
  }
}

/**
 * MontCurve
 */

class MontCurve extends Curve {
  constructor(conf) {
    super(MontPoint, 'mont', conf);

    this.a = BN.fromJSON(conf.a).toRed(this.red);
    this.b = BN.fromJSON(conf.b).toRed(this.red);

    this.bi = this.b.redInvert();
    this.a2 = this.a.redAdd(this.two);
    this.a24 = this.a2.redMul(this.i4);
    this.a3 = this.a.redMul(this.i3);
    this.a0 = this.a.redMul(this.bi);
    this.b0 = this.bi.redSqr();

    this._finalize(conf);
  }

  static _isomorphism(curveA, curveB, customB) {
    // Montgomery Isomorphism.
    //
    // [MONT3] Page 3, Section 2.1.
    //
    // Transformation:
    //
    //   A' = A
    //   B' = B'
    //
    // Where (B / B') is square.
    assert(curveA instanceof BN);
    assert(curveB instanceof BN);
    assert(customB instanceof BN);

    const a = curveA.clone();
    const b = customB.clone();
    const c = curveB.redDiv(customB);

    if (c.redJacobi() !== 1)
      throw new Error('Invalid `b` coefficient.');

    return [a, b];
  }

  _short(a0, odd) {
    // Montgomery->Short Weierstrass Equivalence.
    //
    // [MONT2] "Equivalence with Weierstrass curves".
    //
    // Transformation:
    //
    //   a = (3 - A^2) / (3 * B^2)
    //   b = (2 * A^3 - 9 * A) / (27 * B^3)
    const {a, b, three} = this;
    const a2 = a.redSqr();
    const a3 = a2.redMul(a);
    const b2 = b.redSqr();
    const b3 = b2.redMul(b);
    const n0 = three.redSub(a2);
    const d0 = b2.redMuln(3);
    const n1 = a3.redMuln(2).redISub(a.redMuln(9));
    const d1 = b3.redMuln(27);
    const wa = n0.redDiv(d0);
    const wb = n1.redDiv(d1);

    if (a0 != null)
      return ShortCurve._isomorphism(wa, wb, a0, odd);

    return [wa, wb];
  }

  _mont(b0) {
    return MontCurve._isomorphism(this.a, this.b, b0);
  }

  _edwards(a0, invert = false) {
    // Montgomery->Twisted Edwards Transformation.
    //
    // [MONT1] Page 11, Section 4.3.5.
    // [TWISTED] Theorem 3.2, Page 4, Section 3.
    //
    // Equivalence:
    //
    //   a = (A + 2) / B
    //   d = (A - 2) / B
    //
    // Isomorphism:
    //
    //   a = a'
    //   d = a' * (A - 2) / (A + 2)
    //
    // Where ((A + 2) / (B * a')) is square.
    //
    // If `d` is square, we can usually find
    // a complete curve by using the `invert`
    // option. This will create an isomorphism
    // chain of: M(A,B)->E(a,d)->E(d,a).
    //
    // The equivalence between E(a,d) and
    // E(d,a) is:
    //
    //   (x, y) = (x, 1 / y)
    //
    // Meaning our map to E(d,a) is:
    //
    //   x = u / v
    //   y = 1 / ((u - 1) / (u + 1))
    //     = (u + 1) / (u - 1)
    assert(typeof invert === 'boolean');

    const {two, bi} = this;
    const a = this.a.redAdd(two).redMul(bi);
    const d = this.a.redSub(two).redMul(bi);

    if (invert)
      a.swap(d);

    if (a0 != null)
      return EdwardsCurve._isomorphism(a, d, a0);

    return [a, d];
  }

  _scaleShort(curve) {
    assert(curve instanceof ShortCurve);

    const [u2, u3] = curve._scale(this);

    return [this.field(u2.redInvert()),
            this.field(u3.redInvert())];
  }

  _scaleMont(curve) {
    // We can extract the isomorphism factor with:
    //
    //   c = +-sqrt(B / B')
    //
    // If base points are available, we can do:
    //
    //   c = v' / v
    assert(curve instanceof MontCurve);

    if (this.g.isInfinity() || curve.g.isInfinity())
      return this.field(curve.b).redDivSqrt(this.b);

    return this.g.y.redDiv(this.field(curve.g.y));
  }

  _scaleEdwards(curve, invert) {
    // We _could_ do something like:
    //
    //   B = 4 / (a - d)
    //   c = +-sqrt(B / B')
    //
    // Which can be reduced to:
    //
    //   c = +-sqrt(4 / ((a - d) * B'))
    //
    // If base points are available:
    //
    //   v = u' / x
    //   c = v' / v
    //
    // Which can be reduced to:
    //
    //   c = v' * x / u'
    //
    // However, the way our maps are
    // written, we can re-use the Edwards
    // isomorphism factor when going the
    // other direction.
    assert(curve instanceof EdwardsCurve);

    const c = curve._scale(this, invert);

    return this.field(c);
  }

  _solveY0(x) {
    assert(x instanceof BN);

    // y^2 = x^3 + A * x^2 + B * x
    const a = this.a0;
    const b = this.b0;
    const x2 = x.redSqr();
    const x3 = x2.redMul(x);
    const y2 = x3.redIAdd(a.redMul(x2)).redIAdd(b.redMul(x));

    return y2;
  }

  _elligator2(u) {
    // Elligator 2.
    //
    // Distribution: 1/2.
    //
    // [ELL2] Page 11, Section 5.2.
    // [H2EC] "Elligator 2 Method".
    //        "Mappings for Montgomery curves".
    // [SAFE] "Indistinguishability from uniform random strings".
    //
    // Assumptions:
    //
    //   - y^2 = x^3 + A * x^2 + B * x.
    //   - A != 0, B != 0.
    //   - A^2 - 4 * B is non-zero and non-square in F(p).
    //   - Let z be a non-square in F(p).
    //   - u != +-sqrt(-1 / z).
    //
    // Note that Elligator 2 is defined over the form:
    //
    //   y'^2 = x'^3 + A' * x'^2 + B' * x'
    //
    // Instead of:
    //
    //   B * y^2 = x^3 + A * x^2 + x
    //
    // Where:
    //
    //   A' = A / B
    //   B' = 1 / B^2
    //   x' = x / B
    //   y' = y / B
    //
    // And:
    //
    //   x = B * x'
    //   y = B * y'
    //
    // This is presumably the result of Elligator 2
    // being designed in long Weierstrass form. If
    // we want to support B != 1, we need to do the
    // conversion.
    //
    // Map:
    //
    //   g(x) = x^3 + A * x^2 + B * x
    //   x1 = -A / (1 + z * u^2)
    //   x1 = -A, if x1 = 0
    //   x2 = -x1 - A
    //   x = x1, if g(x1) is square
    //     = x2, otherwise
    //   y = sign(u) * abs(sqrt(g(x)))
    const lhs = this.a0.redNeg();
    const rhs = this.one.redAdd(this.z.redMul(u.redSqr()));

    if (rhs.isZero())
      rhs.inject(this.one);

    const x1 = lhs.redMul(rhs.redInvert());
    const x2 = x1.redNeg().redISub(this.a0);
    const y1 = this._solveY0(x1);
    const y2 = this._solveY0(x2);
    const alpha = y1.redIsSquare() | 0;
    const x0 = [x1, x2][alpha ^ 1];
    const y0 = [y1, y2][alpha ^ 1].redSqrt();

    if (y0.redIsOdd() !== u.redIsOdd())
      y0.redINeg();

    const x = this.b.redMul(x0);
    const y = this.b.redMul(y0);

    return this.point(x, y);
  }

  _invert2(p, hint) {
    // Inverting the Map (Elligator 2).
    //
    // [ELL2] Page 12, Section 5.3.
    //
    // Assumptions:
    //
    //   - -z * x * (x + A) is square in F(p).
    //   - If r = 1 then x != 0.
    //   - If r = 2 then x != -A.
    //
    // Map:
    //
    //   u1 = -(x + A) / (x * z)
    //   u2 = -x / ((x + A) * z)
    //   r = random integer in [1,2]
    //   u = sign(y) * abs(sqrt(ur))
    //
    // Note that `0 / 0` can only occur if A = 0
    // (this violates the assumptions of Elligator 2).
    const {x, y} = p;
    const r = hint & 1;
    const x0 = x.redMul(this.bi);
    const y0 = y.redMul(this.bi);
    const n = x0.redAdd(this.a0);
    const d = x0;
    const lhs = [n, d][r].redINeg();
    const rhs = [d, n][r].redMul(this.z);
    const u = lhs.redDivSqrt(rhs);

    if (u.redIsOdd() !== y0.redIsOdd())
      u.redINeg();

    return u;
  }

  isElliptic() {
    const a2 = this.a.redSqr();
    const d = this.b.redMul(a2.redSub(this.four));

    // B * (A^2 - 4) != 0
    return !d.isZero();
  }

  jinv() {
    // [MONT3] Page 3, Section 2.
    const {a, three, four} = this;
    const a2 = a.redSqr();
    const t0 = a2.redSub(three);
    const lhs = t0.redPown(3).redIMuln(256);
    const rhs = a2.redSub(four);

    if (rhs.isZero())
      throw new Error('Curve is not elliptic.');

    // (256 * (A^2 - 3)^3) / (A^2 - 4)
    return lhs.redDiv(rhs).fromRed();
  }

  point(x, y) {
    return new MontPoint(this, x, y);
  }

  jpoint(x, y, z) {
    assert(x == null && y == null && z == null);
    return this.point();
  }

  xpoint(x, z) {
    return new XPoint(this, x, z);
  }

  solveY2(x) {
    // [MONT3] Page 3, Section 2.
    // https://hyperelliptic.org/EFD/g1p/auto-montgom.html
    assert(x instanceof BN);

    // B * y^2 = x^3 + A * x^2 + x
    const x2 = x.redSqr();
    const x3 = x2.redMul(x);
    const by2 = x3.redIAdd(this.a.redMul(x2)).redIAdd(x);
    const y2 = by2.redMul(this.bi);

    return y2;
  }

  validate(point) {
    assert(point instanceof MontPoint);

    if (point.isInfinity())
      return true;

    const {x, y} = point;
    const y2 = this.solveY2(x);

    return y.redSqr().eq(y2);
  }

  pointFromX(x, sign = null) {
    assert(x instanceof BN);
    assert(sign == null || typeof sign === 'boolean');

    if (!x.red)
      x = x.toRed(this.red);

    const y = this.solveY(x);

    if (sign != null) {
      if (y.isZero() && sign)
        throw new Error('Invalid point.');

      if (y.redIsOdd() !== sign)
        y.redINeg();
    }

    return this.point(x, y);
  }

  isIsomorphic(curve, invert) {
    // [MONT3] Page 3, Section 2.1.
    assert(curve instanceof Curve);

    if (!curve.p.eq(this.p))
      return false;

    // M(A,B) <-> M(A,B')
    if (curve.type === 'mont') {
      const a = this.field(curve.a);
      const b = this.field(curve.b);

      // A' = A
      if (!this.a.eq(a))
        return false;

      // B' != 0
      if (this.b.isZero())
        return false;

      // jacobi(B / B') = 1
      const c = b.redDiv(this.b);

      return c.redJacobi() === 1;
    }

    return curve.isIsomorphic(this, invert);
  }

  isIsogenous(curve) {
    assert(curve instanceof Curve);

    if (curve.type === 'mont')
      return false;

    return curve.isIsogenous(this);
  }

  pointFromShort(point) {
    // [ALT] Appendix E.2 (Switching between Alternative Representations).
    // [MONT2] "Equivalence with Weierstrass curves"
    assert(point instanceof ShortPoint);

    if (this.isIsomorphic(point.curve)) {
      // Equivalence for E(a,b)->M(A,B):
      //
      //   u = B * x - A / 3
      //   v = B * y
      //
      // Undefined if ((u^3 + A * u^2 + u) / B) is not square.
      if (point.isInfinity())
        return this.point();

      const {a3, b} = this;
      const [u2, u3] = this._scale(point.curve);
      const x = this.field(point.x).redMul(u2);
      const y = this.field(point.y).redMul(u3);
      const u = b.redMul(x).redISub(a3);
      const v = b.redMul(y);

      return this.point(u, v);
    }

    throw new Error('Not implemented.');
  }

  pointFromMont(point) {
    // [MONT3] Page 3, Section 2.1.
    assert(point instanceof MontPoint);

    if (this.isIsomorphic(point.curve)) {
      // Isomorphic maps for M(A,B)<->M(A,B'):
      //
      //   u' = u
      //   v' = +-sqrt(B / B') * v
      //
      // Undefined if (B / B') is not square.
      if (point.isInfinity())
        return this.point();

      const c = this._scale(point.curve);
      const u = this.field(point.x);
      const v = this.field(point.y);
      const nu = u;
      const nv = c.redMul(v);

      return this.point(nu, nv);
    }

    throw new Error('Not implemented.');
  }

  pointFromEdwards(point) {
    // [RFC7748] Section 4.1 & 4.2.
    // [MONT3] Page 6, Section 2.5.
    // [TWISTED] Theorem 3.2, Page 4, Section 3.
    assert(point instanceof EdwardsPoint);
    assert(point.curve.p.eq(this.p));

    // Edwards `x`, `y`, `z`.
    const x = this.field(point.x);
    const y = this.field(point.y);
    const z = this.field(point.z);

    if (this.isIsogenous(point.curve)) {
      // 4-isogeny maps for E(1,d)->M(2-4d,1):
      //
      //   u = y^2 / x^2
      //   v = (2 - x^2 - y^2) * y / x^3
      //
      // Undefined for x = 0.
      //
      // Exceptional Cases:
      //   - (0, 1) -> O
      //   - (0, -1) -> (0, 0)
      //
      // Unexceptional Cases:
      //   - (+-1, 0) -> (0, 0)
      if (point.isInfinity())
        return this.point();

      if (point.x.isZero())
        return this.point(this.zero, this.zero);

      const c = z.redSqr().redIMuln(2);
      const uu = y.redSqr();
      const uz = x.redSqr();
      const vv = c.redISub(uz).redISub(uu).redMul(y);
      const vz = uz.redMul(x);

      return this.cpoint(uu, uz, vv, vz);
    }

    if (this.isIsomorphic(point.curve, true)) {
      // Isomorphic maps for E(d,a)->M(A,B):
      //
      //   u = (y + 1) / (y - 1)
      //   v = +-sqrt((A - 2) / (B * a)) * u / x
      //
      // Undefined for x = 0 or y = 1.
      //
      // Exceptional Cases:
      //   - (0, 1) -> O
      //   - (0, -1) -> (0, 0)
      //
      // Unexceptional Cases:
      //   - (+-sqrt(1 / a), 0) -> (-1, +-sqrt((A - 2) / B))
      if (point.isInfinity())
        return this.point();

      if (point.x.isZero())
        return this.point(this.zero, this.zero);

      const c = this._scale(point.curve, true);
      const uu = y.redAdd(z);
      const uz = y.redSub(z);
      const vv = c.redMul(z).redMul(uu);
      const vz = x.redMul(uz);

      return this.cpoint(uu, uz, vv, vz);
    }

    if (this.isIsomorphic(point.curve, false)) {
      // Isomorphic maps for E(a,d)->M(A,B):
      //
      //   u = (1 + y) / (1 - y)
      //   v = +-sqrt((A + 2) / (B * a)) * u / x
      //
      // Undefined for x = 0 or y = 1.
      //
      // Exceptional Cases:
      //   - (0, 1) -> O
      //   - (0, -1) -> (0, 0)
      //
      // Unexceptional Cases:
      //   - (+-sqrt(1 / a), 0) -> (1, +-sqrt((A + 2) / B))
      if (point.isInfinity())
        return this.point();

      if (point.x.isZero())
        return this.point(this.zero, this.zero);

      const c = this._scale(point.curve, false);
      const uu = z.redAdd(y);
      const uz = z.redSub(y);
      const vv = c.redMul(z).redMul(uu);
      const vz = x.redMul(uz);

      return this.cpoint(uu, uz, vv, vz);
    }

    throw new Error('Not implemented.');
  }

  pointFromUniform(u) {
    assert(u instanceof BN);

    // z = 0 or A = 0
    if (this.z.isZero() || this.a.isZero())
      throw new Error('Not implemented.');

    return this._elligator2(u);
  }

  pointToUniform(p, hint) {
    // Convert a montgomery point to a field
    // element by inverting the elligator2 map.
    //
    // Hint Layout:
    //
    //   [00000000] [0000] [0000]
    //        |        |      |
    //        |        |      +-- preimage index
    //        |        +--- subgroup
    //        +-- bits to OR with uniform bytes
    assert(p instanceof MontPoint);
    assert((hint >>> 0) === hint);

    // z = 0 or A = 0
    if (this.z.isZero() || this.a.isZero())
      throw new Error('Not implemented.');

    // P = O
    if (p.isInfinity())
      throw new Error('Invalid point.');

    // Add a random torsion component.
    const i = ((hint >>> 4) & 15) % this.torsion.length;
    const q = p.add(this.torsion[i]);

    return wrapErrors(() => {
      return this._invert2(q, hint);
    });
  }

  decodePoint(bytes, sign) {
    return MontPoint.decode(this, bytes, sign);
  }

  encodeX(point) {
    assert(point instanceof XPoint);
    return point.encode();
  }

  decodeX(bytes) {
    return XPoint.decode(this, bytes);
  }

  toShort(a0, odd, sign = null) {
    const [a, b] = this._short(a0, odd);

    const curve = new ShortCurve({
      red: this.red,
      prime: this.prime,
      p: this.p,
      a: a,
      b: b,
      n: this.n,
      h: this.h
    });

    if (sign != null) {
      const [, u3] = curve._scale(this);

      if (u3.redIsOdd() !== sign)
        u3.redINeg();
    }

    if (!this.g.isInfinity())
      curve.g = curve.pointFromMont(this.g);

    for (let i = 0; i < this.h.word(0); i++)
      curve.torsion[i] = curve.pointFromMont(this.torsion[i]);

    return curve;
  }

  toMont(b0, sign = null) {
    const [a, b] = this._mont(b0);

    const curve = new MontCurve({
      red: this.red,
      prime: this.prime,
      p: this.p,
      a: a,
      b: b,
      n: this.n,
      h: this.h,
      z: this.z
    });

    if (sign != null) {
      const c = curve._scale(this);

      if (c.redIsOdd() !== sign)
        c.redINeg();
    }

    if (!this.g.isInfinity())
      curve.g = curve.pointFromMont(this.g);

    for (let i = 0; i < this.h.word(0); i++)
      curve.torsion[i] = curve.pointFromMont(this.torsion[i]);

    return curve;
  }

  toEdwards(a0, invert, sign = null) {
    const [a, d] = this._edwards(a0, invert);

    const curve = new EdwardsCurve({
      red: this.red,
      prime: this.prime,
      p: this.p,
      a: a,
      d: d,
      n: this.n,
      h: this.h,
      z: this.z
    });

    if (sign != null) {
      const c = curve._scale(this, invert);

      if (c.redIsOdd() !== sign)
        c.redINeg();
    }

    if (!this.g.isInfinity()) {
      curve.g = curve.pointFromMont(this.g);
      curve.g.normalize();
    }

    if (curve.isComplete()) {
      for (let i = 0; i < this.h.word(0); i++) {
        curve.torsion[i] = curve.pointFromMont(this.torsion[i]);
        curve.torsion[i].normalize();
      }
    }

    return curve;
  }

  pointFromJSON(json) {
    return MontPoint.fromJSON(this, json);
  }

  toJSON(pre) {
    const json = super.toJSON(pre);
    json.a = this.a.fromRed().toJSON();
    json.b = this.b.fromRed().toJSON();
    return json;
  }
}

/**
 * MontPoint
 */

class MontPoint extends Point {
  constructor(curve, x, y) {
    assert(curve instanceof MontCurve);

    super(curve, types.AFFINE);

    this.x = this.curve.zero;
    this.y = this.curve.zero;
    this.inf = true;

    if (x != null)
      this._init(x, y);
  }

  _init(x, y) {
    assert(x instanceof BN);
    assert(y instanceof BN);

    this.x = x;
    this.y = y;

    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);

    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);

    this.inf = false;
  }

  clone() {
    if (this.inf)
      return this.curve.point();

    return this.curve.point(this.x, this.y);
  }

  scale(a) {
    return this.clone();
  }

  randomize(rng) {
    return this.clone();
  }

  neg() {
    // P = O
    if (this.inf)
      return this;

    // -(X1, Y1) = (X1, -Y1)
    return this.curve.point(this.x, this.y.redNeg());
  }

  add(p) {
    // [MONT1] Page 8, Section 4.3.2.
    //
    // Addition Law:
    //
    //   l = (y2 - y1) / (x2 - x1)
    //   x3 = b * l^2 - a - x1 - x2
    //   y3 = l * (x1 - x3) - y1
    //
    // 1I + 2M + 1S + 7A + 1*b
    assert(p instanceof MontPoint);

    // O + P = P
    if (this.inf)
      return p;

    // P + O = P
    if (p.inf)
      return this;

    // P + P, P + -P
    if (this.x.eq(p.x)) {
      // P + -P = O
      if (!this.y.eq(p.y))
        return this.curve.point();

      // P + P = 2P
      return this.dbl();
    }

    // H = X2 - X1
    const h = p.x.redSub(this.x);

    // R = Y2 - Y1
    const r = p.y.redSub(this.y);

    // L = R / H
    const l = r.redDiv(h);

    // K = b * L^2
    const k = this.curve.b.redMul(l.redSqr());

    // X3 = K - a - X1 - X2
    const nx = k.redISub(this.curve.a).redISub(this.x).redISub(p.x);

    // Y3 = L * (X1 - X3) - Y1
    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);

    return this.curve.point(nx, ny);
  }

  dbl() {
    // [MONT1] Page 8, Section 4.3.2.
    //
    // Addition Law (doubling):
    //
    //   l = (3 * x1^2 + 2 * a * x1 + 1) / (2 * b * y1)
    //   x3 = b * l^2 - a - 2 * x1
    //   y3 = l * (x1 - x3) - y1
    //
    // 1I + 3M + 2S + 7A + 1*a + 1*b + 1*b + 2*2 + 1*3

    // P = O
    if (this.inf)
      return this;

    // Y1 = 0
    if (this.y.isZero())
      return this.curve.point();

    // M1 = 3 * X1^2
    const m1 = this.x.redSqr().redIMuln(3);

    // M2 = 2 * a * X1
    const m2 = this.curve.a.redMul(this.x).redIMuln(2);

    // M = M1 + M2 + 1
    const m = m1.redIAdd(m2).redIAdd(this.curve.one);

    // Z = 2 * b * Y1
    const z = this.curve.b.redMul(this.y).redIMuln(2);

    // L = M / Z
    const l = m.redDiv(z);

    // K = b * L^2
    const k = this.curve.b.redMul(l.redSqr());

    // X3 = K - a - 2 * X1
    const nx = k.redISub(this.curve.a).redISub(this.x).redISub(this.x);

    // Y3 = L * (X1 - X3) - Y1
    const ny = l.redMul(this.x.redSub(nx)).redISub(this.y);

    return this.curve.point(nx, ny);
  }

  getX() {
    if (this.inf)
      throw new Error('Invalid point.');

    return this.x.fromRed();
  }

  getY() {
    if (this.inf)
      throw new Error('Invalid point.');

    return this.y.fromRed();
  }

  eq(p) {
    assert(p instanceof MontPoint);

    // P = Q
    if (this === p)
      return true;

    // P = O
    if (this.inf)
      return p.inf;

    // Q = O
    if (p.inf)
      return false;

    // X1 = X2, Y1 = Y2
    return this.x.eq(p.x)
        && this.y.eq(p.y);
  }

  cmp(point) {
    assert(point instanceof MontPoint);

    if (this.inf && !point.inf)
      return -1;

    if (!this.inf && point.inf)
      return 1;

    if (this.inf && point.inf)
      return 0;

    return this.order().cmp(point.order())
        || this.getX().cmp(point.getX())
        || this.getY().cmp(point.getY());
  }

  isInfinity() {
    // Infinity cannot be represented in
    // the affine space, except by a flag.
    return this.inf;
  }

  isOrder2() {
    if (this.inf)
      return false;

    return this.y.isZero();
  }

  isOdd() {
    if (this.inf)
      return false;

    return this.y.redIsOdd();
  }

  isEven() {
    if (this.inf)
      return false;

    return this.y.redIsEven();
  }

  toP() {
    return this;
  }

  toJ() {
    return this;
  }

  toX() {
    // (X3, Z3) = (1, 0)
    if (this.inf)
      return this.curve.xpoint();

    // (X3, Z3) = (X1, 1)
    return this.curve.xpoint(this.x, this.curve.one);
  }

  encode() {
    return this.toX().encode();
  }

  static decode(curve, bytes, sign) {
    assert(curve instanceof MontCurve);
    return curve.decodeX(bytes).toP(sign);
  }

  toJSON(pre) {
    if (this.inf)
      return [];

    const x = this.getX().toJSON();
    const y = this.getY().toJSON();

    return [x, y];
  }

  toPretty() {
    if (this.inf)
      return [];

    const size = this.curve.fieldSize * 2;
    const x = toPretty(this.getX(), size);
    const y = toPretty(this.getY(), size);

    return [x, y];
  }

  static fromJSON(curve, json) {
    assert(curve instanceof MontCurve);
    assert(Array.isArray(json));
    assert(json.length === 0
        || json.length === 2
        || json.length === 3);

    if (json.length === 0)
      return curve.point();

    const x = BN.fromJSON(json[0]);
    const y = BN.fromJSON(json[1]);

    return curve.point(x, y);
  }

  [custom]() {
    if (this.inf)
      return '<MontPoint: Infinity>';

    return '<MontPoint:'
         + ' x=' + this.x.fromRed().toString(16, 2)
         + ' y=' + this.y.fromRed().toString(16, 2)
         + '>';
  }
}

/**
 * XPoint
 */

class XPoint extends Point {
  constructor(curve, x, z) {
    assert(curve instanceof MontCurve);

    super(curve, types.PROJECTIVE);

    this.x = this.curve.one;
    this.z = this.curve.zero;

    if (x != null)
      this._init(x, z);
  }

  _init(x, z) {
    assert(x instanceof BN);
    assert(z == null || (z instanceof BN));

    this.x = x;
    this.z = z || this.curve.one;

    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);

    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }

  clone() {
    return this.curve.xpoint(this.x, this.z);
  }

  precompute(power, rng) {
    // No-op.
    return this;
  }

  validate() {
    if (this.isInfinity())
      return true;

    // B * y^2 * z = x^3 + A * x^2 * z + x * z^2
    const {x, z} = this;
    const x2 = x.redSqr();
    const x3 = x2.redMul(x);
    const z2 = z.redSqr();
    const ax2 = this.curve.a.redMul(x2).redMul(z);
    const by2 = x3.redIAdd(ax2).redIAdd(x.redMul(z2));
    const y2 = by2.redMul(this.curve.bi);

    // sqrt(y^2 * z^4) = y * z^2
    return y2.redMul(z).redJacobi() !== -1;
  }

  normalize() {
    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#scaling-scale
    // 1I + 1M

    // P = O
    if (this.isInfinity())
      return this;

    // Z1 = 1
    if (this.z.eq(this.curve.one))
      return this;

    // X3 = X1 / Z1
    this.x = this.x.redDiv(this.z);

    // Z3 = 1
    this.z = this.curve.one;

    return this;
  }

  scale(a) {
    assert(a instanceof BN);

    // P = O
    if (this.isInfinity())
      return this.curve.xpoint();

    // X3 = X1 * A
    const nx = this.x.redMul(a);

    // Y3 = Y1 * A
    const nz = this.z.redMul(a);

    return this.curve.xpoint(nx, nz);
  }

  neg() {
    // -(X1, Z1) = (X1, Z1)
    return this;
  }

  dbl() {
    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A + 1*a24

    // A = X1 + Z1
    const a = this.x.redAdd(this.z);

    // AA = A^2
    const aa = a.redSqr();

    // B = X1 - Z1
    const b = this.x.redSub(this.z);

    // BB = B^2
    const bb = b.redSqr();

    // C = AA - BB
    const c = aa.redSub(bb);

    // X3 = AA * BB
    const nx = aa.redMul(bb);

    // Z3 = C * (BB + a24 * C)
    const nz = c.redMul(bb.redIAdd(this.curve.a24.redMul(c)));

    return this.curve.xpoint(nx, nz);
  }

  diffAddDbl(p2, p3) {
    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#ladder-ladd-1987-m-3
    // 6M + 4S + 8A + 1*a24
    assert(p2 instanceof XPoint);
    assert(p3 instanceof XPoint);

    // A = X2 + Z2
    const a = p2.x.redAdd(p2.z);

    // AA = A^2
    const aa = a.redSqr();

    // B = X2 - Z2
    const b = p2.x.redSub(p2.z);

    // BB = B^2
    const bb = b.redSqr();

    // E = AA - BB
    const e = aa.redSub(bb);

    // C = X3 + Z3
    const c = p3.x.redAdd(p3.z);

    // D = X3 - Z3
    const d = p3.x.redSub(p3.z);

    // DA = D * A
    const da = d.redMul(a);

    // CB = C * B
    const cb = c.redMul(b);

    // X5 = Z1 * (DA + CB)^2
    const x5 = this.z.redMul(da.redAdd(cb).redSqr());

    // Z5 = X1 * (DA - CB)^2
    const z5 = this.x.redMul(da.redISub(cb).redSqr());

    // X4 = AA * BB
    const x4 = aa.redMul(bb);

    // Z4 = E * (BB + a24 * E)
    const z4 = e.redMul(bb.redIAdd(this.curve.a24.redMul(e)));

    return [
      this.curve.xpoint(x4, z4),
      this.curve.xpoint(x5, z5)
    ];
  }

  getX() {
    if (this.isInfinity())
      throw new Error('Invalid point.');

    this.normalize();

    return this.x.fromRed();
  }

  getY(sign) {
    return this.toP(sign).getY();
  }

  eq(p) {
    assert(p instanceof XPoint);

    // P = Q
    if (this === p)
      return true;

    // P = O
    if (this.isInfinity())
      return p.isInfinity();

    // Q = O
    if (p.isInfinity())
      return false;

    // Z1 = Z2
    if (this.z.eq(p.z))
      return this.x.eq(p.x);

    // X1 * Z2 = X2 * Z1
    const x1 = this.x.redMul(p.z);
    const x2 = p.x.redMul(this.z);

    return x1.eq(x2);
  }

  cmp(point) {
    assert(point instanceof XPoint);

    const inf1 = this.isInfinity();
    const inf2 = point.isInfinity();

    if (inf1 && !inf2)
      return -1;

    if (!inf1 && inf2)
      return 1;

    if (inf1 && inf2)
      return 0;

    return this.order().cmp(point.order())
        || this.getX().cmp(point.getX());
  }

  isInfinity() {
    // Z1 = 0
    return this.z.isZero();
  }

  isOrder2() {
    if (this.isInfinity())
      return false;

    return this.x.isZero();
  }

  isOdd() {
    return false;
  }

  isEven() {
    return false;
  }

  hasTorsion() {
    if (this.isInfinity())
      return false;

    // X1 = 0, Z1 != 0 (edge case)
    if (this.x.isZero())
      return true;

    return super.hasTorsion();
  }

  order() {
    try {
      return this.toP().order();
    } catch (e) {
      return new BN(1);
    }
  }

  jmul(k) {
    // Multiply with the Montgomery Ladder.
    //
    // [MONT3] Algorithm 4, Page 12, Section 4.2.
    //
    // Note that any clamping is meant to
    // be done _outside_ of this function.
    assert(k instanceof BN);
    assert(!k.red);

    const bits = k.bitLength();

    let a = this.curve.xpoint();
    let b = this;

    for (let i = bits - 1; i >= 0; i--) {
      const bit = k.bit(i);

      if (bit === 0)
        [a, b] = this.diffAddDbl(a, b);
      else
        [b, a] = this.diffAddDbl(b, a);
    }

    return a;
  }

  jmulBlind(k, rng) {
    if (!rng)
      return this.jmul(k);

    // Randomize if available.
    return this.randomize(rng).jmul(k);
  }

  jmulAdd(k1, p2, k2) {
    throw new Error('Not implemented.');
  }

  toP(sign = null) {
    assert(sign == null || typeof sign === 'boolean');

    if (this.isInfinity())
      return this.curve.point();

    this.normalize();

    return this.curve.pointFromX(this.x, sign);
  }

  toJ() {
    return this;
  }

  toX() {
    return this;
  }

  key() {
    if (this.isInfinity())
      return `${this.curve.uid}:oo`;

    this.normalize();

    const x = this.getX().toString(16);

    return `${this.curve.uid}:${x}`;
  }

  encode() {
    // [RFC7748] Section 5.
    return this.curve.encodeField(this.getX());
  }

  static decode(curve, bytes) {
    assert(curve instanceof MontCurve);

    // [RFC7748] Section 5.
    const x = curve.decodeField(bytes);

    // We're supposed to ignore the hi bit
    // on montgomery points... I think. If
    // we don't, the X25519 test vectors
    // break, which is pretty convincing
    // evidence. This is a no-op for X448.
    x.iumaskn(curve.fieldBits);

    // Note: montgomery points are meant to be
    // reduced by the prime and do not have to
    // be explicitly validated in order to do
    // the montgomery ladder.
    const p = curve.xpoint(x, curve.one);

    assert(!p.isInfinity());

    return p;
  }

  toJSON(pre) {
    return this.toP().toJSON(pre);
  }

  toPretty() {
    return this.toP().toPretty();
  }

  static fromJSON(curve, json) {
    return MontPoint.fromJSON(curve, json).toX();
  }

  [custom]() {
    if (this.isInfinity())
      return '<XPoint: Infinity>';

    return '<XPoint:'
        + ' x=' + this.x.fromRed().toString(16, 2)
        + ' z=' + this.z.fromRed().toString(16, 2)
        + '>';
  }
}

/**
 * EdwardsCurve
 */

class EdwardsCurve extends Curve {
  constructor(conf) {
    super(EdwardsPoint, 'edwards', conf);

    this.a = BN.fromJSON(conf.a).toRed(this.red);
    this.d = BN.fromJSON(conf.d).toRed(this.red);
    this.s = BN.fromJSON(conf.s || '0').toRed(this.red);
    this.si = this.s.isZero() ? this.zero : this.s.redInvert();

    this.k = this.d.redMuln(2);
    this.smi = -this.d.redNeg().word(0);
    this.ad6 = this.a.redAdd(this.d).redMul(this.i6);

    this.twisted = !this.a.eq(this.one);
    this.oneA = this.a.eq(this.one);
    this.mOneA = this.a.eq(this.one.redNeg());
    this.smallD = this.prime != null && this.d.redNeg().length === 1;
    this.alt = null;

    this._finalize(conf);
  }

  static _isomorphism(curveA, curveD, customA) {
    // Twisted Edwards Isomorphism.
    //
    // [TWISTED] Definition 2.1, Page 3, Section 2.
    //
    // Transformation:
    //
    //   a' = a'
    //   d' = a' * d / a
    //
    // Where (a / a') is square.
    assert(curveA instanceof BN);
    assert(curveD instanceof BN);
    assert(customA instanceof BN);

    const a = customA.clone();
    const d = customA.redMul(curveD).redDiv(curveA);
    const c = curveA.redDiv(customA);

    if (c.redJacobi() !== 1)
      throw new Error('Invalid `a` coefficient.');

    return [a, d];
  }

  _short(a0, odd) {
    // Twisted Edwards->Short Weierstrass Equivalence.
    //
    // [TWISTEQ] Section 2.
    //
    // Transformation:
    //
    //   a' = -(a^2 + 14 * a * d + d^2) / 48
    //   b' = (33 * (a^2 * d + a * d^2) - a^3 - d^3) / 864
    const {a, d} = this;
    const a2 = a.redSqr();
    const a3 = a2.redMul(a);
    const d2 = d.redSqr();
    const d3 = d2.redMul(d);
    const ad14 = a.redMul(d).redIMuln(14);
    const a2d = a2.redMul(d);
    const ad2 = a.redMul(d2);
    const t0 = a2d.redIAdd(ad2).redIMuln(33);
    const wa = a2.redAdd(ad14).redIAdd(d2).redDivn(-48);
    const wb = t0.redISub(a3).redISub(d3).redDivn(864);

    if (a0 != null)
      return ShortCurve._isomorphism(wa, wb, a0, odd);

    return [wa, wb];
  }

  _mont(b0, invert = false) {
    // Twisted Edwards->Montgomery Transformation.
    //
    // [TWISTED] Theorem 3.2, Page 4, Section 3.
    //
    // Equivalence:
    //
    //   A = 2 * (a + d) / (a - d)
    //   B = 4 / (a - d)
    //
    // Isomorphism:
    //
    //   A = 2 * (a + d) / (a - d)
    //   B = B'
    //
    // Where ((4 / (a - d)) / B') is square.
    //
    // If `4 / (a - d)` is non-square, we can
    // usually force B=1 by using the `invert`
    // option. This will create an isomorphism
    // chain of: E(a,d)->E(d,a)->M(-A,-B).
    //
    // The equivalence between E(a,d) and E(d,a)
    // is:
    //
    //   (x, y) = (x, 1 / y)
    //
    // Meaning our map to M(-A,-B) is:
    //
    //   u = (1 + 1 / y) / (1 - 1 / y)
    //     = (y + 1) / (y - 1)
    //   v = u / x
    assert(typeof invert === 'boolean');

    let apd, amd;

    if (invert) {
      apd = this.d.redAdd(this.a);
      amd = this.d.redSub(this.a);
    } else {
      apd = this.a.redAdd(this.d);
      amd = this.a.redSub(this.d);
    }

    const z = amd.redInvert();
    const a = apd.redMuln(2).redMul(z);
    const b = z.redMuln(4);

    if (b0 != null)
      return MontCurve._isomorphism(a, b, b0);

    return [a, b];
  }

  _edwards(a0) {
    return EdwardsCurve._isomorphism(this.a, this.d, a0);
  }

  _scaleShort(curve) {
    assert(curve instanceof ShortCurve);

    const [u2, u3] = curve._scale(this);

    return [this.field(u2.redInvert()),
            this.field(u3.redInvert())];
  }

  _scaleMont(curve, invert = false) {
    // Calculate isomorphism factor between
    // Twisted Edwards and Montgomery with:
    //
    //   a = (A + 2) / B
    //   c = +-sqrt(a / a')
    //
    // Which can be reduced to:
    //
    //   c = +-sqrt((A + 2) / (B * a'))
    //
    // If base points are available, we can do:
    //
    //   x = u / v
    //   c = x' / x
    //
    // Which can be reduced to:
    //
    //   c = v * x' / u
    //
    // We can now calculate the Edwards `x` with:
    //
    //   x' = c * u / v
    //
    // And likewise, the Montgomery `v`:
    //
    //   v = c * u / x'
    assert(curve instanceof MontCurve);
    assert(typeof invert === 'boolean');

    if (this.g.isInfinity() || curve.g.isInfinity()) {
      const [a] = curve._edwards(null, invert);

      return this.field(a).redDivSqrt(this.a);
    }

    const x = curve.g.x.redDiv(curve.g.y);

    return this.g.x.redDiv(this.field(x));
  }

  _scaleEdwards(curve) {
    // We can extract the isomorphism factor with:
    //
    //   c = +-sqrt(a / a')
    //
    // If base points are available, we can do:
    //
    //   c = x' / x
    assert(curve instanceof EdwardsCurve);

    if (this.g.isInfinity() || curve.g.isInfinity())
      return this.field(curve.a).redDivSqrt(this.a);

    return this.g.x.redDiv(this.field(curve.g.x));
  }

  _mulA(num) {
    assert(num instanceof BN);

    // n * a = n
    if (this.oneA)
      return num.clone();

    // n * a = -n
    if (this.mOneA)
      return num.redNeg();

    return this.a.redMul(num);
  }

  _mulD(num) {
    assert(num instanceof BN);

    // -d < 0x4000000
    if (this.smallD)
      return num.redMuln(this.smi);

    return this.d.redMul(num);
  }

  _elligator1(t) {
    // Elligator 1.
    //
    // Distribution: 1/2.
    //
    // [ELL1] Page 6, Section 3.
    //        Page 15, Appendix A.
    // [ELL2] Page 7, Section 3.2.
    //
    // Assumptions:
    //
    //   - Let p be a prime power congruent to 3 mod 4.
    //   - Let s be a nonzero element of F(p).
    //   - Let c = 2 / s^2.
    //   - Let r = c + 1 / c.
    //   - Let d = -(c + 1)^2 / (c - 1)^2.
    //   - (s^2 - 2) * (s^2 + 2) != 0.
    //   - c * (c - 1) * (c + 1) != 0.
    //   - r != 0.
    //   - d is not square.
    //   - x^2 + y^2 = 1 + d * x^2 * y^2.
    //   - u * v * X * Y * x * (Y + 1) != 0.
    //   - Y^2 = X^5 + (r^2 - 2) * X^3 + X.
    //
    // Elligator 1, as devised by Fouque et al,
    // takes place on the hyperelliptic curve of:
    //
    //   y^2 = x^5 + (r^2 - 2) * x^3 + x
    //
    // Not only must our Edwards curve be complete,
    // with a prime congruent to 3 mod 4, and a = 1,
    // our curve must be isomorphic to a hyperelliptic
    // curve of the above form. Roughly one half of
    // all Edwards curves are isomorphic to a curve
    // of said form.
    //
    // We can derive the isomorphism with:
    //
    //   c = (d +- 2 * sqrt(-d) - 1) / (d + 1)
    //   s = +-sqrt(2 / c)
    //   r = c + 1 / c
    //
    // Note that even if your curve is an Elligator 1
    // curve, Elligator 2 is probably still preferable,
    // as it has nearly the same properties (i.e. the
    // same distribution), and is much less complex.
    //
    // Map:
    //
    //   f(a) = a^((p - 1) / 2)
    //   u = (1 - t) / (1 + t)
    //   v = u^5 + (r^2 - 2) * u^3 + u
    //   X = f(v) * u
    //   Y = (f(v) * v)^((p + 1) / 4) * f(v) * f(u^2 + 1 / c^2)
    //   Y = 1, if u = 0
    //   x = (c - 1) * s * X * (1 + X) / Y
    //   y = (r * X - (1 + X)^2) / (r * X + (1 + X)^2)
    //
    // When t = +-1, we create the hyperelliptic
    // 2-torsion point of (0, 0). This needs to be
    // mapped to (0, -1) in Edwards form, but the x
    // denominator becomes zero. As far as I can
    // tell, this is the only exceptional case.
    //
    // The only other exceptional case initially
    // appears to be when the y denominator sums to
    // zero (when t = sqrt(4 / r + 1)), however, the
    // hyperelliptic `X` is negated by the sign of
    // `v`, making this impossible.
    const {s, si, i2, one, two} = this;
    const c = si.redSqr().redIMuln(2);
    const ci = s.redSqr().redMul(i2);
    const ci2 = ci.redSqr();
    const r = c.redAdd(ci);
    const r2 = r.redSqr().redISub(two);
    const cm1 = c.redSub(one);
    const uu = one.redSub(t);
    const uz = one.redAdd(t);
    const u = uz.isZero() ? uz : uu.redDiv(uz);
    const u2 = u.redSqr();
    const u3 = u2.redMul(u);
    const u5 = u3.redMul(u2);
    const v = u5.redAdd(r2.redMul(u3)).redIAdd(u);
    const f0 = this.field(v.redJacobi());
    const f1 = this.field(u2.redAdd(ci2).redJacobi());
    const f2 = f0.redMul(f1);
    const X = f0.redMul(u);
    const Y = f0.redMul(v).redSqrt().redMul(f2);
    const X1 = one.redAdd(X);
    const rX = r.redMul(X);
    const X12 = X1.redSqr();
    const xx = cm1.redMul(s).redMul(X).redMul(X1);
    const xz = u.isZero() ? this.one : Y;
    const yy = rX.redSub(X12);
    const yz = rX.redAdd(X12);

    return this.cpoint(xx, xz, yy, yz);
  }

  _invert1(p, hint) {
    // Inverting the Map (Elligator 1).
    //
    // [ELL1] Page 6, Section 3.
    //        Page 15, Appendix A.
    // [ELL2] Page 7, Section 3.3.
    //
    // Assumptions:
    //
    //   - y + 1 != 0.
    //   - (1 + n * r)^2 - 1 is square in F(p).
    //   - If n * r = -2 then x = 2 * s * (c - 1) * f(c) / r.
    //   - Y = (c - 1) * s * X * (1 + X) / x.
    //
    // Map:
    //
    //   f(a) = a^((p - 1) / 2)
    //   n = (y - 1) / (2 * (y + 1))
    //   X = -(1 + n * r) + ((1 + n * r)^2 - 1)^((p + 1) / 4)
    //   z = f((c - 1) * s * X * (1 + X) * x * (X^2 + 1 / c^2))
    //   u = z * X
    //   t = (1 - u) / (1 + u)
    const {s, si, i2, one} = this;
    const {x, y, z} = p;
    const sign = hint & 1;
    const c = si.redSqr().redIMuln(2);
    const ci = s.redSqr().redMul(i2);
    const ci2 = ci.redSqr();
    const r = c.redAdd(ci);
    const cm1 = c.redSub(one);
    const nn = y.redSub(z);
    const nz = y.redAdd(z).redIMuln(2);
    const n = nz.isZero() ? nz : nn.redDiv(nz);
    const nr1 = one.redAdd(n.redMul(r));
    const w2 = nr1.redSqr().redISub(one);
    const w = w2.redSqrt();
    const X = w.redSub(nr1);
    const X1 = one.redAdd(X);
    const YY = cm1.redMul(s).redMul(X).redMul(X1);
    const Y = YY.redMul(x.redMul(z));
    const X2 = X.redSqr().redIAdd(ci2);
    const Z = this.field(Y.redMul(X2).redJacobi());
    const u = Z.redMul(X);
    const tt = one.redSub(u);
    const tz = one.redAdd(u);
    const t = tz.isZero() ? tz : tt.redDiv(tz);

    if (t.redIsOdd() !== Boolean(sign))
      t.redINeg();

    return t;
  }

  _alt() {
    if (!this.alt)
      this.alt = this.toMont();

    return this.alt;
  }

  isElliptic() {
    const ad = this.a.redMul(this.d);
    const amd = this.a.redSub(this.d);

    // a * d * (a - d) != 0
    return !ad.redMul(amd).isZero();
  }

  jinv() {
    // [TWISTED] Definition 2.1, Page 3, Section 2.
    const {a, d} = this;
    const ad = a.redMul(d);
    const amd4 = a.redSub(d).redPown(4);
    const a2 = a.redSqr();
    const d2 = d.redSqr();
    const t0 = a2.redAdd(ad.redMuln(14)).redIAdd(d2);
    const lhs = t0.redPown(3).redIMuln(16);
    const rhs = ad.redMul(amd4);

    if (rhs.isZero())
      throw new Error('Curve is not elliptic.');

    // 16 * (a^2 + 14 * a * d + d^2)^3 / (a * d * (a - d)^4)
    return lhs.redDiv(rhs).fromRed();
  }

  isComplete() {
    return this.a.redJacobi() === 1
        && this.d.redJacobi() === -1;
  }

  point(x, y, z, t) {
    return new EdwardsPoint(this, x, y, z, t);
  }

  jpoint(x, y, z) {
    assert(x == null && y == null && z == null);
    return this.point();
  }

  cpoint(xx, xz, yy, yz) {
    assert(xx instanceof BN);
    assert(xz instanceof BN);
    assert(yy instanceof BN);
    assert(yz instanceof BN);

    const x = xx.redMul(yz);
    const y = yy.redMul(xz);
    const z = xz.redMul(yz);
    const t = xx.redMul(yy);

    return this.point(x, y, z, t);
  }

  solveX2(y) {
    // [RFC8032] Section 5.1.3 & 5.2.3.
    assert(y instanceof BN);

    // x^2 = (y^2 - 1) / (d * y^2 - a)
    const y2 = y.redSqr();
    const rhs = this._mulD(y2).redISub(this.a);
    const lhs = y2.redISub(this.one);
    const x2 = lhs.redDiv(rhs);

    return x2;
  }

  solveX(y) {
    // Optimize with inverse square root trick.
    //
    // Note that `0 / 0` can only occur if
    // `a == d` (i.e. the curve is singular).
    const y2 = y.redSqr();
    const rhs = this._mulD(y2).redISub(this.a);
    const lhs = y2.redISub(this.one);

    return lhs.redDivSqrt(rhs);
  }

  solveY2(x) {
    assert(x instanceof BN);

    // y^2 = (a * x^2 - 1) / (d * x^2 - 1)
    const x2 = x.redSqr();
    const lhs = this._mulA(x2).redISub(this.one);
    const rhs = this._mulD(x2).redISub(this.one);
    const y2 = lhs.redDiv(rhs);

    return y2;
  }

  solveY(x) {
    // Optimize with inverse square root trick.
    //
    // Note that `0 / 0` can only occur if
    // `a == d` (i.e. the curve is singular).
    const x2 = x.redSqr();
    const lhs = this._mulA(x2).redISub(this.one);
    const rhs = this._mulD(x2).redISub(this.one);

    return lhs.redDivSqrt(rhs);
  }

  validate(point) {
    // [TWISTED] Definition 2.1, Page 3, Section 2.
    //           Page 11, Section 6.
    assert(point instanceof EdwardsPoint);

    // Z1 = 1
    if (point.zOne) {
      // a * x^2 + y^2 = 1 + d * x^2 * y^2
      const x2 = point.x.redSqr();
      const y2 = point.y.redSqr();
      const dxy = this._mulD(x2).redMul(y2);
      const lhs = this._mulA(x2).redIAdd(y2);
      const rhs = this.one.redAdd(dxy);
      const tz = point.t;
      const xy = point.x.redMul(point.y);

      return lhs.eq(rhs) && tz.eq(xy);
    }

    // (a * x^2 + y^2) * z^2 = z^4 + d * x^2 * y^2
    const x2 = point.x.redSqr();
    const y2 = point.y.redSqr();
    const z2 = point.z.redSqr();
    const z4 = z2.redSqr();
    const dxy = this._mulD(x2).redMul(y2);
    const lhs = this._mulA(x2).redIAdd(y2).redMul(z2);
    const rhs = z4.redIAdd(dxy);
    const tz = point.t.redMul(point.z);
    const xy = point.x.redMul(point.y);

    return lhs.eq(rhs) && tz.eq(xy);
  }

  pointFromX(x, sign = null) {
    assert(x instanceof BN);
    assert(sign == null || typeof sign === 'boolean');

    if (!x.red)
      x = x.toRed(this.red);

    const y = this.solveY(x);

    if (sign != null) {
      if (y.isZero() && sign)
        throw new Error('Invalid point.');

      if (y.redIsOdd() !== sign)
        y.redINeg();
    }

    return this.point(x, y);
  }

  pointFromY(y, sign = null) {
    assert(y instanceof BN);
    assert(sign == null || typeof sign === 'boolean');

    if (!y.red)
      y = y.toRed(this.red);

    const x = this.solveX(y);

    if (sign != null) {
      if (x.isZero() && sign)
        throw new Error('Invalid point.');

      if (x.redIsOdd() !== sign)
        x.redINeg();
    }

    return this.point(x, y);
  }

  isIsomorphic(curve, invert = false) {
    // [TWISTED] Theorem 3.2, Page 4, Section 3.
    //           Definition 2.1, Page 3, Section 2.
    assert(curve instanceof Curve);
    assert(typeof invert === 'boolean');

    if (!curve.p.eq(this.p))
      return false;

    // E(a,d) <-> E(a,b)
    if (curve.type === 'short')
      return curve.isIsomorphic(this);

    // E(a,d) <-> M(A,B)
    // E(a,d) <-> M(-A,-B)
    if (curve.type === 'mont') {
      // A * (a - d) = 2 * (a + d)
      const a = this.field(curve.a);

      let apd, amd;

      if (invert) {
        apd = this.d.redAdd(this.a);
        amd = this.d.redSub(this.a);
      } else {
        apd = this.a.redAdd(this.d);
        amd = this.a.redSub(this.d);
      }

      return a.redMul(amd).eq(apd.redIMuln(2));
    }

    // E(a,d) <-> E(a',a'd/a)
    if (curve.type === 'edwards') {
      // a' * d = a * d'
      const a = this.field(curve.a);
      const d = this.field(curve.d);

      return this.a.redMul(d).eq(a.redMul(this.d));
    }

    return false;
  }

  isIsogenous(curve) {
    // Check for the 4-isogenies described by Hamburg:
    // https://moderncrypto.org/mail-archive/curves/2016/000806.html
    assert(curve instanceof Curve);

    if (!curve.p.eq(this.p))
      return false;

    // E(1,d) <-> M(2-4d,1)
    if (curve.type === 'mont') {
      if (!this.a.eq(this.one))
        return false;

      const a = this.field(curve.a);
      const b = this.field(curve.b);
      const d24 = this.two.redSub(this.d.redMuln(4));

      return a.eq(d24) && b.eq(this.one);
    }

    // E(a,d) <-> E(-a,d-a)
    if (curve.type === 'edwards') {
      const a = this.field(curve.a);
      const d = this.field(curve.d);

      return a.eq(this.a.redNeg())
          && d.eq(this.d.redSub(this.a));
    }

    return false;
  }

  pointFromShort(point) {
    // [TWISTEQ] Section 1.
    assert(point instanceof ShortPoint);

    if (this.isIsomorphic(point.curve)) {
      // Equivalence for E(a,b)->E(a',d'):
      //
      //   x' = (6 * x - a' - d') / (6 * y)
      //   y' = (12 * x - 5 * a' + d') / (12 * x + a' - 5 * d')
      //
      // Undefined for x = (5 * d' - a') / 12 or y = 0.
      //
      // Exceptional Cases:
      //   - O -> (0, 1)
      //   - ((a' + d') / 6, 0) -> (0, -1)
      //   - ((5 * d' - a') / 12, (d' - a') / 4 * sqrt(d')) -> (sqrt(1/d'), oo)
      //
      // Unexceptional Cases:
      //   - ((5 * a' - d') / 12, (a' - d') / 4 * sqrt(a')) -> (sqrt(1/a'), 0)
      if (point.isInfinity())
        return this.point();

      if (point.y.isZero())
        return this.point(this.zero, this.one.redNeg());

      const {a, d} = this;
      const [u2, u3] = this._scale(point.curve);
      const a5 = a.redMuln(5);
      const d5 = d.redMuln(5);
      const x = this.field(point.x).redMul(u2);
      const y = this.field(point.y).redMul(u3);
      const x6 = x.redMuln(6);
      const x12 = x.redMuln(12);
      const xx = x6.redSub(a).redISub(d);
      const xz = y.redMuln(6);
      const yy = x12.redSub(a5).redIAdd(d);
      const yz = x12.redAdd(a).redISub(d5);

      return this.cpoint(xx, xz, yy, yz);
    }

    throw new Error('Not implemented.');
  }

  pointFromMont(point) {
    // [RFC7748] Section 4.1 & 4.2.
    // [MONT3] Page 6, Section 2.5.
    // [TWISTED] Theorem 3.2, Page 4, Section 3.
    assert(point instanceof MontPoint);
    assert(point.curve.p.eq(this.p));

    // Montgomery `u`, `v`.
    const u = this.field(point.x);
    const v = this.field(point.y);

    if (this.isIsogenous(point.curve)) {
      // 4-isogeny maps for M(2-4d,1)->E(1,d):
      //
      //   x = 4 * v * (u^2 - 1) / (u^4 - 2 * u^2 + 4 * v^2 + 1)
      //   y = -(u^5 - 2 * u^3 - 4 * u * v^2 + u) /
      //        (u^5 - 2 * u^2 * v^2 - 2 * u^3 - 2 * v^2 + u)
      //
      // Undefined for u = 0 and v = 0.
      //
      // Exceptional Cases:
      //   - O -> (0, 1)
      //   - (0, 0) -> (0, 1)
      //
      // Unexceptional Cases:
      //   - (-1, +-sqrt(A - 2)) -> (0, 1)
      //   - (1, +-sqrt(A + 2)) -> (0, -1)
      //
      // The point (1, v) is invalid on Curve448.
      if (point.isInfinity())
        return this.point();

      if (point.x.isZero())
        return this.point();

      const u2 = u.redSqr();
      const u3 = u2.redMul(u);
      const u4 = u3.redMul(u);
      const u5 = u4.redMul(u);
      const v2 = v.redSqr();
      const a = v.redMuln(4);
      const b = u2.redSub(this.one);
      const c = u2.redMuln(2);
      const d = v2.redMuln(4);
      const e = u3.redIMuln(2);
      const f = u.redMul(v2).redIMuln(4);
      const g = u2.redMul(v2).redIMuln(2);
      const h = v2.redIMuln(2);
      const xx = a.redMul(b);
      const xz = u4.redISub(c).redIAdd(d).redIAdd(this.one);
      const yy = u5.redSub(e).redISub(f).redIAdd(u).redINeg();
      const yz = u5.redISub(g).redISub(e).redISub(h).redIAdd(u);

      return this.cpoint(xx, xz, yy, yz).divn(4);
    }

    if (this.isIsomorphic(point.curve, true)) {
      // Isomorphic maps for M(-A,-B)->E(a,d):
      //
      //   x = +-sqrt((A - 2) / (B * a)) * u / v
      //   y = (u + 1) / (u - 1)
      //
      // Undefined for u = 1 or v = 0.
      //
      // Exceptional Cases:
      //   - O -> (0, 1)
      //   - (0, 0) -> (0, -1)
      //   - (1, +-sqrt((A + 2) / B)) -> (+-sqrt(1 / d), oo)
      //
      // Unexceptional Cases:
      //   - (-1, +-sqrt((A - 2) / B)) -> (+-sqrt(1 / a), 0)
      //
      // The point (1, v) is invalid on Curve448.
      if (point.isInfinity())
        return this.point();

      if (point.x.isZero())
        return this.point(this.zero, this.one.redNeg());

      const c = this._scale(point.curve, true);
      const xx = c.redMul(u);
      const xz = v;
      const yy = u.redAdd(this.one);
      const yz = u.redSub(this.one);

      return this.cpoint(xx, xz, yy, yz);
    }

    if (this.isIsomorphic(point.curve, false)) {
      // Isomorphic maps for M(A,B)->E(a,d):
      //
      //   x = +-sqrt((A + 2) / (B * a)) * u / v
      //   y = (u - 1) / (u + 1)
      //
      // Undefined for u = -1 or v = 0.
      //
      // Exceptional Cases:
      //   - O -> (0, 1)
      //   - (0, 0) -> (0, -1)
      //   - (-1, +-sqrt((A - 2) / B)) -> (+-sqrt(1 / d), oo)
      //
      // Unexceptional Cases:
      //   - (1, +-sqrt((A + 2) / B)) -> (+-sqrt(1 / a), 0)
      //
      // The point (-1, v) is invalid on Curve25519.
      if (point.isInfinity())
        return this.point();

      if (point.x.isZero())
        return this.point(this.zero, this.one.redNeg());

      const c = this._scale(point.curve, false);
      const xx = c.redMul(u);
      const xz = v;
      const yy = u.redSub(this.one);
      const yz = u.redAdd(this.one);

      return this.cpoint(xx, xz, yy, yz);
    }

    throw new Error('Not implemented.');
  }

  pointFromEdwards(point) {
    // [TWISTED] Definition 2.1, Page 3, Section 2.
    // [ISOGENY] Page 2, Section 2.
    assert(point instanceof EdwardsPoint);
    assert(point.curve.p.eq(this.p));

    // Edwards `x`, `y`, `z`, `t`.
    const a = this.field(point.curve.a);
    const x = this.field(point.x);
    const y = this.field(point.y);
    const z = this.field(point.z);
    const t = this.field(point.t);

    if (this.isIsogenous(point.curve)) {
      // 4-isogeny maps for E(a,d)<->E(-a,d-a):
      //
      //   x' = (2 * x * y) / (y^2 - a * x^2)
      //   y' = (y^2 + a * x^2) / (2 - y^2 - a * x^2)
      //
      // Undefined for y^2 - a * x^2 = 0
      //            or y^2 + a * x^2 = 2.
      const xy = x.redMul(y);
      const x2 = x.redSqr();
      const y2 = y.redSqr();
      const z2 = z.redSqr();
      const ax2 = a.redMul(x2);
      const xx = xy.redIMuln(2);
      const xz = y2.redSub(ax2);
      const yy = y2.redAdd(ax2);
      const yz = z2.redIMuln(2).redISub(yy);
      const p = this.cpoint(xx, xz, yy, yz);

      return !this.twisted ? p.divn(4) : p;
    }

    if (this.isIsomorphic(point.curve)) {
      // Isomorphic maps for E(a,d)<->E(a',a'd/a):
      //
      //   x' = +-sqrt(a / a') * x
      //   y' = y
      //
      // Undefined when (a / a') is not square.
      const c = this._scale(point.curve);
      const nx = c.redMul(x);
      const ny = y;
      const nz = z;
      const nt = c.redMul(t);

      return this.point(nx, ny, nz, nt);
    }

    throw new Error('Not implemented.');
  }

  pointFromUniform(u, curve = null) {
    assert(u instanceof BN);
    assert(u.red === this.red);
    assert(curve == null || (curve instanceof MontCurve));

    if (!curve)
      curve = this._alt();

    const u0 = curve.field(u);
    const p0 = curve.pointFromUniform(u0);

    return this.pointFromMont(p0);
  }

  pointToUniform(p, hint, curve = null) {
    // Convert an edwards point to a field
    // element by inverting the elligator2 map.
    //
    // Hint Layout:
    //
    //   [00000000] [0000] [0000]
    //        |        |      |
    //        |        |      +-- preimage index
    //        |        +--- subgroup
    //        +-- bits to OR with uniform bytes
    assert(p instanceof EdwardsPoint);
    assert((hint >>> 0) === hint);
    assert(curve == null || (curve instanceof MontCurve));

    if (!curve)
      curve = this._alt();

    // Add a random torsion component.
    const i = ((hint >> 4) & 15) % this.torsion.length;
    const q = p.add(this.torsion[i]);

    // Convert and invert.
    const p0 = curve.pointFromEdwards(q);
    const u0 = curve.pointToUniform(p0, hint & 15);

    return this.field(u0);
  }

  pointFromHash(bytes, pake, curve = null) {
    assert(curve == null || (curve instanceof MontCurve));

    if (!curve)
      curve = this._alt();

    const p0 = curve.pointFromHash(bytes, pake);

    return this.pointFromMont(p0);
  }

  pointToHash(p, subgroup, rng, curve = null) {
    assert(p instanceof EdwardsPoint);
    assert((subgroup >>> 0) === subgroup);
    assert(curve == null || (curve instanceof MontCurve));

    if (!curve)
      curve = this._alt();

    // Add a random torsion component.
    const i = subgroup % this.torsion.length;
    const q = p.add(this.torsion[i]);

    // Convert and invert.
    const p0 = curve.pointFromEdwards(q);

    return curve.pointToHash(p0, 0, rng);
  }

  decodePoint(bytes) {
    return EdwardsPoint.decode(this, bytes);
  }

  toShort(a0, odd, sign = null) {
    const [a, b] = this._short(a0, odd);

    const curve = new ShortCurve({
      red: this.red,
      prime: this.prime,
      p: this.p,
      a: a,
      b: b,
      n: this.n,
      h: this.h
    });

    if (sign != null) {
      const [, u3] = curve._scale(this);

      if (u3.redIsOdd() !== sign)
        u3.redINeg();
    }

    if (!this.g.isInfinity())
      curve.g = curve.pointFromEdwards(this.g);

    for (let i = 0; i < this.h.word(0); i++)
      curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);

    return curve;
  }

  toMont(b0, invert, sign = null) {
    const [a, b] = this._mont(b0, invert);

    const curve = new MontCurve({
      red: this.red,
      prime: this.prime,
      p: this.p,
      a: a,
      b: b,
      n: this.n,
      h: this.h,
      z: this.z
    });

    if (sign != null) {
      const c = this._scale(curve, invert);

      if (c.redIsOdd() !== sign)
        c.redINeg();
    }

    if (!this.g.isInfinity())
      curve.g = curve.pointFromEdwards(this.g);

    for (let i = 0; i < this.h.word(0); i++)
      curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);

    return curve;
  }

  toEdwards(a0, sign = null) {
    const [a, d] = this._edwards(a0);

    const curve = new EdwardsCurve({
      red: this.red,
      prime: this.prime,
      p: this.p,
      a: a,
      d: d,
      n: this.n,
      h: this.h,
      z: this.z
    });

    if (sign != null) {
      const c = curve._scale(this);

      if (c.redIsOdd() !== sign)
        c.redINeg();
    }

    if (!this.g.isInfinity()) {
      curve.g = curve.pointFromEdwards(this.g);
      curve.g.normalize();
    }

    if (curve.isComplete()) {
      for (let i = 0; i < this.h.word(0); i++) {
        curve.torsion[i] = curve.pointFromEdwards(this.torsion[i]);
        curve.torsion[i].normalize();
      }
    }

    return curve;
  }

  pointFromJSON(json) {
    return EdwardsPoint.fromJSON(this, json);
  }

  toJSON(pre) {
    const json = super.toJSON(pre);

    json.a = this.a.fromRed().toJSON();
    json.d = this.d.fromRed().toJSON();

    if (!this.s.isZero())
      json.s = this.s.fromRed().toJSON();

    return json;
  }
}

/**
 * EdwardsPoint
 */

class EdwardsPoint extends Point {
  constructor(curve, x, y, z, t) {
    assert(curve instanceof EdwardsCurve);

    super(curve, types.EXTENDED);

    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;

    if (x != null)
      this._init(x, y, z, t);
  }

  _init(x, y, z, t) {
    assert(x instanceof BN);
    assert(y instanceof BN);
    assert(z == null || (z instanceof BN));
    assert(t == null || (t instanceof BN));

    this.x = x;
    this.y = y;
    this.z = z || this.curve.one;
    this.t = t || null;

    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);

    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);

    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);

    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);

    this.zOne = this.z.eq(this.curve.one);

    this._check();

    if (!this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redDiv(this.z);
    }
  }

  _check() {
    // In order to achieve complete
    // addition formulas, `a` must
    // be a square (always the case
    // for a=1), and `d` must be a
    // non-square.
    //
    // If this is not the case, the
    // addition formulas may have
    // exceptional cases where Z3=0.
    //
    // In particular, this can occur
    // when: Q*h = -P*h and Q != -P.
    //
    // This is assuming 4-torsion is
    // involved (the 4-torsion point
    // is _not_ representable when
    // `d` is square).
    if (this.z.isZero())
      throw new Error('Invalid point.');
  }

  clone() {
    return this.curve.point(this.x, this.y, this.z, this.t);
  }

  normalize() {
    // https://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#scaling-z
    // 1I + 2M (+ 1M if extended)

    // Z1 = 1
    if (this.zOne)
      return this;

    // A = 1 / Z1
    const a = this.z.redInvert();

    // X3 = X1 * A
    this.x = this.x.redMul(a);

    // Y3 = Y1 * A
    this.y = this.y.redMul(a);

    // T3 = T1 * A
    this.t = this.t.redMul(a);

    // Z3 = 1
    this.z = this.curve.one;
    this.zOne = true;

    return this;
  }

  scale(a) {
    assert(a instanceof BN);

    // X3 = X1 * A
    const nx = this.x.redMul(a);

    // Y3 = Y1 * A
    const ny = this.y.redMul(a);

    // Z3 = Z1 * A
    const nz = this.z.redMul(a);

    // T3 = T1 * A
    const nt = this.t.redMul(a);

    return this.curve.point(nx, ny, nz, nt);
  }

  neg() {
    // -(X1, Y1, Z1, T1) = (-X1, Y1, Z1, -T1)
    const nx = this.x.redNeg();
    const ny = this.y;
    const nz = this.z;
    const nt = this.t.redNeg();

    return this.curve.point(nx, ny, nz, nt);
  }

  add(p) {
    assert(p instanceof EdwardsPoint);

    // P = O
    if (this.isInfinity())
      return p;

    // Q = O
    if (p.isInfinity())
      return this;

    // Z1 = 1
    if (this.zOne)
      return p._add(this);

    return this._add(p);
  }

  _add(p) {
    // a = -1
    if (this.curve.mOneA)
      return this._addM1(p);

    return this._addA(p);
  }

  _addM1(p) {
    // Assumes a = -1.
    //
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3
    // 8M + 8A + 1*k + 1*2
    //
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-madd-2008-hwcd-3
    // 7M + 8A + 1*k + 1*2

    // A = (Y1 - X1) * (Y2 - X2)
    const a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));

    // B = (Y1 + X1) * (Y2 + X2)
    const b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));

    // C = T1 * k * T2
    const c = this.t.redMul(this.curve.k).redMul(p.t);

    // D = Z1 * 2 * Z2
    const d = p.zOne ? this.z.redAdd(this.z) : this.z.redMul(p.z).redIMuln(2);

    // E = B - A
    const e = b.redSub(a);

    // F = D - C
    const f = d.redSub(c);

    // G = D + C
    const g = d.redIAdd(c);

    // H = B + A
    const h = b.redIAdd(a);

    // X3 = E * F
    const nx = e.redMul(f);

    // Y3 = G * H
    const ny = g.redMul(h);

    // T3 = E * H
    const nt = e.redMul(h);

    // Z3 = F * G
    const nz = f.redMul(g);

    return this.curve.point(nx, ny, nz, nt);
  }

  _addA(p) {
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
    // 9M + 7A + 1*a + 1*d
    //
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-madd-2008-hwcd
    // 8M + 7A + 1*a + 1*d

    // A = X1 * X2
    const a = this.x.redMul(p.x);

    // B = Y1 * Y2
    const b = this.y.redMul(p.y);

    // C = T1 * d * T2
    const c = this.curve._mulD(this.t).redMul(p.t);

    // D = Z1 * Z2
    const d = p.zOne ? this.z.clone() : this.z.redMul(p.z);

    // + XYXY = (X1 + Y1) * (X2 + Y2)
    const xyxy = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y));

    // E = (X1 + Y1) * (X2 + Y2) - A - B
    const e = xyxy.redISub(a).redISub(b);

    // F = D - C
    const f = d.redSub(c);

    // G = D + C
    const g = d.redIAdd(c);

    // H = B - a * A
    const h = b.redISub(this.curve._mulA(a));

    // X3 = E * F
    const nx = e.redMul(f);

    // Y3 = G * H
    const ny = g.redMul(h);

    // T3 = E * H
    const nt = e.redMul(h);

    // Z3 = F * G
    const nz = f.redMul(g);

    return this.curve.point(nx, ny, nz, nt);
  }

  dbl() {
    // P = O
    if (this.isInfinity())
      return this;

    return this._dbl();
  }

  _dbl() {
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
    // 4M + 4S + 6A + 1*a + 1*2
    //
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-mdbl-2008-hwcd
    // 3M + 4S + 7A + 1*a + 1*2

    // A = X1^2
    const a = this.x.redSqr();

    // B = Y1^2
    const b = this.y.redSqr();

    // C = 2 * Z1^2
    const c = this.zOne ? this.curve.two : this.z.redSqr().redIMuln(2);

    // D = a * A
    const d = this.curve._mulA(a);

    // E = (X1 + Y1)^2 - A - B
    const e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);

    // G = D + B
    const g = d.redAdd(b);

    // F = G - C
    const f = g.redSub(c);

    // H = D - B
    const h = d.redISub(b);

    // X3 = E * F
    const nx = e.redMul(f);

    // Y3 = G * H
    const ny = g.redMul(h);

    // T3 = E * H
    const nt = e.redMul(h);

    // Z3 = F * G
    const nz = f.redMul(g);

    return this.curve.point(nx, ny, nz, nt);
  }

  getX() {
    this.normalize();
    return this.x.fromRed();
  }

  getY() {
    this.normalize();
    return this.y.fromRed();
  }

  eq(p) {
    assert(p instanceof EdwardsPoint);
    assert(!this.z.isZero());
    assert(!p.z.isZero());

    // P = Q
    if (this === p)
      return true;

    // Z1 = Z2
    if (this.z.eq(p.z)) {
      return this.x.eq(p.x)
          && this.y.eq(p.y);
    }

    // X1 * Z2 = X2 * Z1
    const x1 = this.x.redMul(p.z);
    const x2 = p.x.redMul(this.z);

    if (!x1.eq(x2))
      return false;

    const y1 = this.y.redMul(p.z);
    const y2 = p.y.redMul(this.z);

    return y1.eq(y2);
  }

  cmp(point) {
    assert(point instanceof EdwardsPoint);

    return this.order().cmp(point.order())
        || this.getY().cmp(point.getY())
        || this.getX().cmp(point.getX());
  }

  isInfinity() {
    assert(!this.z.isZero());

    // X1 = 0
    if (!this.x.isZero())
      return false;

    // Y1 = Z1
    return this.y.eq(this.z);
  }

  isOrder2() {
    if (this.isInfinity())
      return false;

    return this.x.isZero();
  }

  isOdd() {
    this.normalize();
    return this.x.redIsOdd();
  }

  isEven() {
    this.normalize();
    return this.x.redIsEven();
  }

  toP() {
    return this.normalize();
  }

  toJ() {
    return this;
  }

  encode() {
    // [RFC8032] Section 5.1.2.
    const y = this.getY();

    // Note: `x` normalized from `getY()` call.
    y.setn(this.curve.signBit, this.x.redIsOdd());

    return this.curve.encodeAdjusted(y);
  }

  static decode(curve, bytes) {
    // [RFC8032] Section 5.1.3.
    assert(curve instanceof EdwardsCurve);

    const y = curve.decodeAdjusted(bytes);
    const sign = y.testn(curve.signBit) !== 0;

    y.setn(curve.signBit, 0);

    if (y.cmp(curve.p) >= 0)
      throw new Error('Invalid point.');

    return curve.pointFromY(y, sign);
  }

  toJSON(pre) {
    if (this.isInfinity())
      return [];

    const x = this.getX().toJSON();
    const y = this.getY().toJSON();

    if (pre === true && this.pre)
      return [x, y, this.pre.toJSON()];

    return [x, y];
  }

  toPretty() {
    const size = this.curve.fieldSize * 2;
    const x = toPretty(this.getX(), size);
    const y = toPretty(this.getY(), size);

    return [x, y];
  }

  static fromJSON(curve, json) {
    assert(curve instanceof EdwardsCurve);
    assert(Array.isArray(json));
    assert(json.length === 0
        || json.length === 2
        || json.length === 3);

    if (json.length === 0)
      return curve.point();

    const x = BN.fromJSON(json[0]);
    const y = BN.fromJSON(json[1]);
    const point = curve.point(x, y);

    if (json.length > 2 && json[2] != null)
      point.pre = Precomp.fromJSON(point, json[2]);

    return point;
  }

  [custom]() {
    if (this.isInfinity())
      return '<EdwardsPoint: Infinity>';

    return '<EdwardsPoint:'
        + ' x=' + this.x.fromRed().toString(16, 2)
        + ' y=' + this.y.fromRed().toString(16, 2)
        + ' z=' + this.z.fromRed().toString(16, 2)
        + '>';
  }
}

/**
 * Precomp
 */

class Precomp {
  constructor() {
    this.naf = null;
    this.windows = null;
    this.doubles = null;
    this.blinding = null;
    this.beta = null;
  }

  map(func) {
    assert(typeof func === 'function');

    const out = new this.constructor();

    if (this.naf)
      out.naf = this.naf.map(func);

    if (this.doubles)
      out.doubles = this.doubles.map(func);

    return out;
  }

  toJSON() {
    return {
      naf: this.naf ? this.naf.toJSON() : null,
      windows: this.windows ? this.windows.toJSON() : null,
      doubles: this.doubles ? this.doubles.toJSON() : null,
      blinding: this.blinding ? this.blinding.toJSON() : undefined
    };
  }

  fromJSON(point, json) {
    assert(point instanceof Point);
    assert(json && typeof json === 'object');

    if (json.naf != null)
      this.naf = NAF.fromJSON(point, json.naf);

    if (json.windows != null)
      this.windows = Windows.fromJSON(point, json.windows);

    if (json.doubles != null)
      this.doubles = Doubles.fromJSON(point, json.doubles);

    if (json.blinding != null)
      this.blinding = Blinding.fromJSON(point, json.blinding);

    return this;
  }

  static fromJSON(point, json) {
    return new this().fromJSON(point, json);
  }
}

/**
 * NAF
 */

class NAF {
  constructor(width, points) {
    this.width = width;
    this.points = points;
  }

  map(func) {
    assert(typeof func === 'function');

    const {width} = this;
    const points = [];

    for (const point of this.points)
      points.push(func(point));

    return new this.constructor(width, points);
  }

  toJSON() {
    return {
      width: this.width,
      points: this.points.slice(1).map((point) => {
        return point.toJSON();
      })
    };
  }

  static fromJSON(point, json) {
    assert(point instanceof Point);
    assert(json && typeof json === 'object');
    assert((json.width >>> 0) === json.width);
    assert(Array.isArray(json.points));

    const {curve} = point;
    const {width} = json;
    const points = [point];

    for (const item of json.points)
      points.push(curve.pointFromJSON(item));

    return new this(width, points);
  }
}

/**
 * Windows
 */

class Windows {
  constructor(width, bits, points) {
    this.width = width;
    this.bits = bits;
    this.points = points;
  }

  toJSON() {
    return {
      width: this.width,
      bits: this.bits,
      points: this.points.slice(1).map((point) => {
        return point.toJSON();
      })
    };
  }

  static fromJSON(point, json) {
    assert(point instanceof Point);
    assert(json && typeof json === 'object');
    assert((json.width >>> 0) === json.width);
    assert((json.bits >>> 0) === json.bits);
    assert(Array.isArray(json.points));

    const {curve} = point;
    const {width, bits} = json;
    const points = [point];

    for (const item of json.points)
      points.push(curve.pointFromJSON(item));

    return new this(width, bits, points);
  }
}

/**
 * Doubles
 */

class Doubles {
  constructor(step, points) {
    this.step = step;
    this.points = points;
  }

  map(func) {
    assert(typeof func === 'function');

    const {step} = this;
    const points = [];

    for (const point of this.points)
      points.push(func(point));

    return new this.constructor(step, points);
  }

  toJSON() {
    return {
      step: this.step,
      points: this.points.slice(1).map((point) => {
        return point.toJSON();
      })
    };
  }

  static fromJSON(point, json) {
    assert(point instanceof Point);
    assert(json && typeof json === 'object');
    assert((json.step >>> 0) === json.step);
    assert(Array.isArray(json.points));

    const {curve} = point;
    const {step} = json;
    const points = [point];

    for (const item of json.points)
      points.push(curve.pointFromJSON(item));

    return new this(step, points);
  }
}

/**
 * Blinding
 */

class Blinding {
  constructor(blind, unblind) {
    this.blind = blind;
    this.unblind = unblind;
  }

  toJSON() {
    return {
      blind: this.blind.toJSON(),
      unblind: this.unblind.toJSON()
    };
  }

  static fromJSON(point, json) {
    assert(point instanceof Point);
    assert(json && typeof json === 'object');

    const {curve} = point;
    const blind = BN.fromJSON(json.blind);
    const unblind = curve.pointFromJSON(json.unblind);

    return new this(blind, unblind);
  }
}

/**
 * Endo
 */

class Endo {
  constructor(beta, lambda, basis, pre) {
    this.beta = beta;
    this.lambda = lambda;
    this.basis = basis;
    this.pre = pre;
  }

  toJSON() {
    return {
      beta: this.beta.fromRed().toJSON(),
      lambda: this.lambda.toJSON(),
      basis: [
        this.basis[0].toJSON(),
        this.basis[1].toJSON()
      ],
      pre: [
        this.pre[0],
        this.pre[1].toJSON(),
        this.pre[2].toJSON()
      ]
    };
  }

  static fromJSON(curve, json) {
    assert(curve instanceof Curve);
    assert(json && typeof json === 'object');
    assert(Array.isArray(json.basis));
    assert(Array.isArray(json.pre));
    assert(json.basis.length === 2);
    assert(json.pre.length === 3);
    assert((json.pre[0] >>> 0) === json.pre[0]);

    const beta = BN.fromJSON(json.beta).toRed(curve.red);
    const lambda = BN.fromJSON(json.lambda);

    const basis = [
      Vector.fromJSON(json.basis[0]),
      Vector.fromJSON(json.basis[1])
    ];

    const pre = [
      json.pre[0],
      BN.fromJSON(json.pre[1]),
      BN.fromJSON(json.pre[2])
    ];

    return new this(beta, lambda, basis, pre);
  }
}

/**
 * Vector
 */

class Vector {
  constructor(a, b) {
    this.a = a;
    this.b = b;
  }

  toJSON() {
    return {
      a: this.a.toJSON(),
      b: this.b.toJSON()
    };
  }

  static fromJSON(json) {
    assert(json && typeof json === 'object');

    const a = BN.fromJSON(json.a);
    const b = BN.fromJSON(json.b);

    return new this(a, b);
  }
}

/**
 * P192
 * https://tinyurl.com/fips-186-2 (page 29)
 * https://tinyurl.com/fips-186-3 (page 88)
 */

class P192 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'P192',
      ossl: 'prime192v1',
      type: 'short',
      endian: 'be',
      hash: 'SHA256',
      prime: 'p192',
      // 2^192 - 2^64 - 1 (= 3 mod 4)
      p: ['ffffffff ffffffff ffffffff fffffffe',
          'ffffffff ffffffff'],
      // -3 mod p
      a: ['ffffffff ffffffff ffffffff fffffffe',
          'ffffffff fffffffc'],
      b: ['64210519 e59c80e7 0fa7e9ab 72243049',
          'feb8deec c146b9b1'],
      n: ['ffffffff ffffffff ffffffff 99def836',
          '146bc9b1 b4d22831'],
      h: '1',
      // Icart
      z: '-5',
      g: [
        ['188da80e b03090f6 7cbf20eb 43a18800',
         'f4ff0afd 82ff1012'],
        ['07192b95 ffc8da78 631011ed 6b24cdd5',
         '73f977a1 1e794811'],
        pre
      ]
    });
  }
}

/**
 * P224
 * https://tinyurl.com/fips-186-2 (page 30)
 * https://tinyurl.com/fips-186-3 (page 88)
 */

class P224 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'P224',
      ossl: 'secp224r1',
      type: 'short',
      endian: 'be',
      hash: 'SHA256',
      prime: 'p224',
      // 2^224 - 2^96 + 1 (1 mod 16)
      p: ['ffffffff ffffffff ffffffff ffffffff',
          '00000000 00000000 00000001'],
      // -3 mod p
      a: ['ffffffff ffffffff ffffffff fffffffe',
          'ffffffff ffffffff fffffffe'],
      b: ['b4050a85 0c04b3ab f5413256 5044b0b7',
          'd7bfd8ba 270b3943 2355ffb4'],
      n: ['ffffffff ffffffff ffffffff ffff16a2',
          'e0b8f03e 13dd2945 5c5c2a3d'],
      h: '1',
      // SSWU
      z: '1f',
      g: [
        ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3',
         '56c21122 343280d6 115c1d21'],
        ['bd376388 b5f723fb 4c22dfe6 cd4375a0',
         '5a074764 44d58199 85007e34'],
        pre
      ]
    });
  }
}

/**
 * P256
 * https://tinyurl.com/fips-186-2 (page 31)
 * https://tinyurl.com/fips-186-3 (page 89)
 */

class P256 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'P256',
      ossl: 'prime256v1',
      type: 'short',
      endian: 'be',
      hash: 'SHA256',
      prime: null,
      // 2^256 - 2^224 + 2^192 + 2^96 - 1 (= 3 mod 4)
      p: ['ffffffff 00000001 00000000 00000000',
          '00000000 ffffffff ffffffff ffffffff'],
      // -3 mod p
      a: ['ffffffff 00000001 00000000 00000000',
          '00000000 ffffffff ffffffff fffffffc'],
      b: ['5ac635d8 aa3a93e7 b3ebbd55 769886bc',
          '651d06b0 cc53b0f6 3bce3c3e 27d2604b'],
      n: ['ffffffff 00000000 ffffffff ffffffff',
          'bce6faad a7179e84 f3b9cac2 fc632551'],
      h: '1',
      // SSWU
      z: '-a',
      g: [
        ['6b17d1f2 e12c4247 f8bce6e5 63a440f2',
         '77037d81 2deb33a0 f4a13945 d898c296'],
        ['4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16',
         '2bce3357 6b315ece cbb64068 37bf51f5'],
        pre
      ]
    });
  }
}

/**
 * P384
 * https://tinyurl.com/fips-186-2 (page 32)
 * https://tinyurl.com/fips-186-3 (page 89)
 */

class P384 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'P384',
      ossl: 'secp384r1',
      type: 'short',
      endian: 'be',
      hash: 'SHA384',
      prime: null,
      // 2^384 - 2^128 - 2^96 + 2^32 - 1 (= 3 mod 4)
      p: ['ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff fffffffe',
          'ffffffff 00000000 00000000 ffffffff'],
      // -3 mod p
      a: ['ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff fffffffe',
          'ffffffff 00000000 00000000 fffffffc'],
      b: ['b3312fa7 e23ee7e4 988e056b e3f82d19',
          '181d9c6e fe814112 0314088f 5013875a',
          'c656398d 8a2ed19d 2a85c8ed d3ec2aef'],
      n: ['ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff c7634d81 f4372ddf',
          '581a0db2 48b0a77a ecec196a ccc52973'],
      h: '1',
      // Icart
      z: '-c',
      g: [
        ['aa87ca22 be8b0537 8eb1c71e f320ad74',
         '6e1d3b62 8ba79b98 59f741e0 82542a38',
         '5502f25d bf55296c 3a545e38 72760ab7'],
        ['3617de4a 96262c6f 5d9e98bf 9292dc29',
         'f8f41dbd 289a147c e9da3113 b5f0b8c0',
         '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'],
        pre
      ]
    });
  }
}

/**
 * P521
 * https://tinyurl.com/fips-186-2 (page 33)
 * https://tinyurl.com/fips-186-3 (page 90)
 */

class P521 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'P521',
      ossl: 'secp521r1',
      type: 'short',
      endian: 'be',
      hash: 'SHA512',
      prime: 'p521',
      // 2^521 - 1 (= 3 mod 4)
      p: ['000001ff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'ffffffff'],
      // -3 mod p
      a: ['000001ff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'fffffffc'],
      b: ['00000051 953eb961 8e1c9a1f 929a21a0',
          'b68540ee a2da725b 99b315f3 b8b48991',
          '8ef109e1 56193951 ec7e937b 1652c0bd',
          '3bb1bf07 3573df88 3d2c34f1 ef451fd4',
          '6b503f00'],
      n: ['000001ff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'fffffffa 51868783 bf2f966b 7fcc0148',
          'f709a5d0 3bb5c9b8 899c47ae bb6fb71e',
          '91386409'],
      h: '1',
      // SSWU
      z: '-4',
      g: [
        ['000000c6 858e06b7 0404e9cd 9e3ecb66',
         '2395b442 9c648139 053fb521 f828af60',
         '6b4d3dba a14b5e77 efe75928 fe1dc127',
         'a2ffa8de 3348b3c1 856a429b f97e7e31',
         'c2e5bd66'],
        ['00000118 39296a78 9a3bc004 5c8a5fb4',
         '2c7d1bd9 98f54449 579b4468 17afbd17',
         '273e662c 97ee7299 5ef42640 c550b901',
         '3fad0761 353c7086 a272c240 88be9476',
         '9fd16650'],
        pre
      ]
    });
  }
}

/**
 * SECP256K1
 * https://www.secg.org/SEC2-Ver-1.0.pdf (page 15, section 2.7.1)
 * https://www.secg.org/sec2-v2.pdf (page 9, section 2.4.1)
 */

class SECP256K1 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'SECP256K1',
      ossl: 'secp256k1',
      type: 'short',
      endian: 'be',
      hash: 'SHA256',
      prime: 'k256',
      // 2^256 - 2^32 - 977 (= 3 mod 4)
      p: ['ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff fffffffe fffffc2f'],
      a: '0',
      b: '7',
      n: ['ffffffff ffffffff ffffffff fffffffe',
          'baaedce6 af48a03b bfd25e8c d0364141'],
      h: '1',
      // SVDW
      z: '1',
      // sqrt(-3)
      c: ['0a2d2ba9 3507f1df 233770c2 a797962c',
          'c61f6d15 da14ecd4 7d8d27ae 1cd5f852'],
      g: [
        ['79be667e f9dcbbac 55a06295 ce870b07',
         '029bfcdb 2dce28d9 59f2815b 16f81798'],
        ['483ada77 26a3c465 5da4fbfc 0e1108a8',
         'fd17b448 a6855419 9c47d08f fb10d4b8'],
        pre
      ],
      // Precomputed endomorphism.
      endo: {
        beta: ['7ae96a2b 657c0710 6e64479e ac3434e9',
               '9cf04975 12f58995 c1396c28 719501ee'],
        lambda: ['5363ad4c c05c30e0 a5261c02 8812645a',
                 '122e22ea 20816678 df02967c 1b23bd72'],
        basis: [
          {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
          },
          {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
          }
        ],
        pre: [
          384,
          ['3086d221 a7d46bcd e86c90e4 9284eb15',
           '3daa8a14 71e8ca7f e893209a 45dbb031'],
          ['-',
           'e4437ed6 010e8828 6f547fa9 0abfe4c4',
           '221208ac 9df506c6 1571b4ae 8ac47f71']
        ]
      }
    });
  }
}

/**
 * BRAINPOOLP256
 * https://tools.ietf.org/html/rfc5639#section-3.4
 */

class BRAINPOOLP256 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'BRAINPOOLP256',
      ossl: 'brainpoolP256r1',
      type: 'short',
      endian: 'be',
      hash: 'SHA256',
      prime: null,
      // (= 3 mod 4)
      p: ['a9fb57db a1eea9bc 3e660a90 9d838d72',
          '6e3bf623 d5262028 2013481d 1f6e5377'],
      a: ['7d5a0975 fc2c3057 eef67530 417affe7',
          'fb8055c1 26dc5c6c e94a4b44 f330b5d9'],
      b: ['26dc5c6c e94a4b44 f330b5d9 bbd77cbf',
          '95841629 5cf7e1ce 6bccdc18 ff8c07b6'],
      n: ['a9fb57db a1eea9bc 3e660a90 9d838d71',
          '8c397aa3 b561a6f7 901e0e82 974856a7'],
      h: '1',
      // Icart
      z: '-2',
      g: [
        ['8bd2aeb9 cb7e57cb 2c4b482f fc81b7af',
         'b9de27e1 e3bd23c2 3a4453bd 9ace3262'],
        ['547ef835 c3dac4fd 97f8461a 14611dc9',
         'c2774513 2ded8e54 5c1d54c7 2f046997'],
        pre
      ]
    });
  }
}

/**
 * BRAINPOOLP384
 * https://tools.ietf.org/html/rfc5639#section-3.6
 */

class BRAINPOOLP384 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'BRAINPOOLP384',
      ossl: 'brainpoolP384r1',
      type: 'short',
      endian: 'be',
      hash: 'SHA384',
      prime: null,
      // (= 3 mod 4)
      p: ['8cb91e82 a3386d28 0f5d6f7e 50e641df',
          '152f7109 ed5456b4 12b1da19 7fb71123',
          'acd3a729 901d1a71 87470013 3107ec53'],
      a: ['7bc382c6 3d8c150c 3c72080a ce05afa0',
          'c2bea28e 4fb22787 139165ef ba91f90f',
          '8aa5814a 503ad4eb 04a8c7dd 22ce2826'],
      b: ['04a8c7dd 22ce2826 8b39b554 16f0447c',
          '2fb77de1 07dcd2a6 2e880ea5 3eeb62d5',
          '7cb43902 95dbc994 3ab78696 fa504c11'],
      n: ['8cb91e82 a3386d28 0f5d6f7e 50e641df',
          '152f7109 ed5456b3 1f166e6c ac0425a7',
          'cf3ab6af 6b7fc310 3b883202 e9046565'],
      h: '1',
      // SSWU
      z: '-5',
      g: [
        ['1d1c64f0 68cf45ff a2a63a81 b7c13f6b',
         '8847a3e7 7ef14fe3 db7fcafe 0cbd10e8',
         'e826e034 36d646aa ef87b2e2 47d4af1e'],
        ['8abe1d75 20f9c2a4 5cb1eb8e 95cfd552',
         '62b70b29 feec5864 e19c054f f9912928',
         '0e464621 77918111 42820341 263c5315'],
        pre
      ]
    });
  }
}

/**
 * BRAINPOOLP512
 * https://tools.ietf.org/html/rfc5639#section-3.7
 */

class BRAINPOOLP512 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'BRAINPOOLP512',
      ossl: 'brainpoolP512r1',
      type: 'short',
      endian: 'be',
      hash: 'SHA512',
      prime: null,
      // (= 3 mod 4)
      p: ['aadd9db8 dbe9c48b 3fd4e6ae 33c9fc07',
          'cb308db3 b3c9d20e d6639cca 70330871',
          '7d4d9b00 9bc66842 aecda12a e6a380e6',
          '2881ff2f 2d82c685 28aa6056 583a48f3'],
      a: ['7830a331 8b603b89 e2327145 ac234cc5',
          '94cbdd8d 3df91610 a83441ca ea9863bc',
          '2ded5d5a a8253aa1 0a2ef1c9 8b9ac8b5',
          '7f1117a7 2bf2c7b9 e7c1ac4d 77fc94ca'],
      b: ['3df91610 a83441ca ea9863bc 2ded5d5a',
          'a8253aa1 0a2ef1c9 8b9ac8b5 7f1117a7',
          '2bf2c7b9 e7c1ac4d 77fc94ca dc083e67',
          '984050b7 5ebae5dd 2809bd63 8016f723'],
      n: ['aadd9db8 dbe9c48b 3fd4e6ae 33c9fc07',
          'cb308db3 b3c9d20e d6639cca 70330870',
          '553e5c41 4ca92619 41866119 7fac1047',
          '1db1d381 085ddadd b5879682 9ca90069'],
      h: '1',
      // Icart
      z: '7',
      g: [
        ['81aee4bd d82ed964 5a21322e 9c4c6a93',
         '85ed9f70 b5d916c1 b43b62ee f4d0098e',
         'ff3b1f78 e2d0d48d 50d1687b 93b97d5f',
         '7c6d5047 406a5e68 8b352209 bcb9f822'],
        ['7dde385d 566332ec c0eabfa9 cf7822fd',
         'f209f700 24a57b1a a000c55b 881f8111',
         'b2dcde49 4a5f485e 5bca4bd8 8a2763ae',
         'd1ca2b2f a8f05406 78cd1e0f 3ad80892'],
        pre
      ]
    });
  }
}

/**
 * X25519
 * https://tools.ietf.org/html/rfc7748#section-4.1
 */

class X25519 extends MontCurve {
  constructor() {
    super({
      id: 'X25519',
      ossl: 'X25519',
      type: 'mont',
      endian: 'le',
      hash: 'SHA512',
      prime: 'p25519',
      // 2^255 - 19 (= 5 mod 8)
      p: ['7fffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff ffffffed'],
      // 486662
      a: '76d06',
      b: '1',
      n: ['10000000 00000000 00000000 00000000',
          '14def9de a2f79cd6 5812631a 5cf5d3ed'],
      h: '8',
      // Elligator 2
      z: '2',
      g: [
        ['00000000 00000000 00000000 00000000',
         '00000000 00000000 00000000 00000009'],
        // See: https://www.rfc-editor.org/errata/eid4730
        ['5f51e65e 475f794b 1fe122d3 88b72eb3',
         '6dc2b281 92839e4d d6163a5d 81312c14']
      ],
      torsion: [
        [],
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000']
        ],
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000001'],
          ['6be4f497 f9a9c2af c21fa77a d7f4a6ef',
           '635a11c7 284a9363 e9a248ef 9c884415']
        ],
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000001'],
          ['141b0b68 06563d50 3de05885 280b5910',
           '9ca5ee38 d7b56c9c 165db710 6377bbd8']
        ],
        [
          ['57119fd0 dd4e22d8 868e1c58 c45c4404',
           '5bef839c 55b1d0b1 248c50a3 bc959c5f'],
          ['68c59389 3d458e64 31c6ca00 45fb5015',
           '20a44346 8eaa68dd 0f103842 048065b7']
        ],
        [
          ['57119fd0 dd4e22d8 868e1c58 c45c4404',
           '5bef839c 55b1d0b1 248c50a3 bc959c5f'],
          ['173a6c76 c2ba719b ce3935ff ba04afea',
           'df5bbcb9 71559722 f0efc7bd fb7f9a36']
        ],
        [
          ['00b8495f 16056286 fdb1329c eb8d09da',
           '6ac49ff1 fae35616 aeb8413b 7c7aebe0'],
          ['3931c129 569e83a5 29482c14 e628b457',
           '933bfc29 ed801b4d 68871483 92507b1a']
        ],
        [
          ['00b8495f 16056286 fdb1329c eb8d09da',
           '6ac49ff1 fae35616 aeb8413b 7c7aebe0'],
          ['46ce3ed6 a9617c5a d6b7d3eb 19d74ba8',
           '6cc403d6 127fe4b2 9778eb7c 6daf84d3']
        ]
      ]
    });
  }
}

/**
 * X448
 * https://tools.ietf.org/html/rfc7748#section-4.2
 */

class X448 extends MontCurve {
  constructor() {
    super({
      id: 'X448',
      ossl: 'X448',
      type: 'mont',
      endian: 'le',
      hash: 'SHAKE256',
      prime: 'p448',
      // 2^448 - 2^224 - 1 (= 3 mod 4)
      p: ['ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff fffffffe ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff'],
      // 156326
      a: '262a6',
      b: '1',
      n: ['3fffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff 7cca23e9',
          'c44edb49 aed63690 216cc272 8dc58f55',
          '2378c292 ab5844f3'],
      h: '4',
      // Elligator 2
      z: '-1',
      g: [
        ['00000000 00000000 00000000 00000000',
         '00000000 00000000 00000000 00000000',
         '00000000 00000000 00000000 00000000',
         '00000000 00000005'],
        ['7d235d12 95f5b1f6 6c98ab6e 58326fce',
         'cbae5d34 f55545d0 60f75dc2 8df3f6ed',
         'b8027e23 46430d21 1312c4b1 50677af7',
         '6fd7223d 457b5b1a']
      ],
      torsion: [
        [],
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000']
        ],
        [
          ['ffffffff ffffffff ffffffff ffffffff',
           'ffffffff ffffffff fffffffe ffffffff',
           'ffffffff ffffffff ffffffff ffffffff',
           'ffffffff fffffffe'],
          ['ba4d3a08 29b6112f 8812e51b a0bb2abe',
           'bc1cb08e b48e5569 36ba50fd d2e7d68a',
           'f8cb3216 0522425b 3f990812 abbe635a',
           'd37a21e1 7551b193']
        ],
        [
          ['ffffffff ffffffff ffffffff ffffffff',
           'ffffffff ffffffff fffffffe ffffffff',
           'ffffffff ffffffff ffffffff ffffffff',
           'ffffffff fffffffe'],
          ['45b2c5f7 d649eed0 77ed1ae4 5f44d541',
           '43e34f71 4b71aa96 c945af01 2d182975',
           '0734cde9 faddbda4 c066f7ed 54419ca5',
           '2c85de1e 8aae4e6c']
        ]
      ]
    });
  }
}

/**
 * MONT448
 * Isomorphic to Ed448-Goldilocks.
 */

class MONT448 extends MontCurve {
  constructor() {
    super({
      id: 'MONT448',
      ossl: null,
      type: 'mont',
      endian: 'le',
      hash: 'SHAKE256',
      prime: 'p448',
      // 2^448 - 2^224 - 1 (= 3 mod 4)
      p: ['ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff fffffffe ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff'],
      // -78160 / -39082 mod p
      a: ['b2cf97d2 d43459a9 31ed36b1 fc4e3cb5',
          '5d93f8d2 22746997 60ccffc6 49961ed6',
          'c5b05fca c24864ed 6fb59697 931b78da',
          '84ddecd8 ca2b5cfb'],
      b: '1',
      n: ['3fffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff 7cca23e9',
          'c44edb49 aed63690 216cc272 8dc58f55',
          '2378c292 ab5844f3'],
      h: '4',
      // Elligator 2
      z: '-1',
      g: [
        ['ac0d24cc c6c75cb0 eb71f81e 7a6edf51',
         '48e88aee 009a2a24 e795687e c28e125a',
         '3e6730a6 0d46367b aa7fe99d 152128dc',
         '41321bc7 7817f059'],
        ['5a4437f6 80c0d0db 9b061276 d5d0ffcc',
         'e786ff33 b6a53d30 98746425 82e66f09',
         '4433dae7 7244a6e2 6b11e905 7228f483',
         '556c41a5 913f55fe']
      ],
      torsion: [
        [],
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000']
        ],
        [
          ['ffffffff ffffffff ffffffff ffffffff',
           'ffffffff ffffffff fffffffe ffffffff',
           'ffffffff ffffffff ffffffff ffffffff',
           'ffffffff fffffffe'],
          ['bec92fd0 6da2acf2 b4e261e8 7cef0d34',
           '22e75c18 3c589857 b71924e5 73c2f9ce',
           'e18da5f2 466e2f39 3c2eedf0 f105a60a',
           'b40c717d 4f1e1fd7']
        ],
        [
          ['ffffffff ffffffff ffffffff ffffffff',
           'ffffffff ffffffff fffffffe ffffffff',
           'ffffffff ffffffff ffffffff ffffffff',
           'ffffffff fffffffe'],
          ['4136d02f 925d530d 4b1d9e17 8310f2cb',
           'dd18a3e7 c3a767a8 48e6db19 8c3d0631',
           '1e725a0d b991d0c6 c3d1120f 0efa59f5',
           '4bf38e82 b0e1e028']
        ]
      ]
    });
  }
}

/**
 * ED25519
 * https://tools.ietf.org/html/rfc8032#section-5.1
 */

class ED25519 extends EdwardsCurve {
  constructor(pre) {
    super({
      id: 'ED25519',
      ossl: 'ED25519',
      type: 'edwards',
      endian: 'le',
      hash: 'SHA512',
      prefix: 'SigEd25519 no Ed25519 collisions',
      context: false,
      prime: 'p25519',
      // 2^255 - 19 (= 5 mod 8)
      p: ['7fffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff ffffffed'],
      a: '-1',
      // -121665 / 121666 mod p
      d: ['52036cee 2b6ffe73 8cc74079 7779e898',
          '00700a4d 4141d8ab 75eb4dca 135978a3'],
      n: ['10000000 00000000 00000000 00000000',
          '14def9de a2f79cd6 5812631a 5cf5d3ed'],
      h: '8',
      // Elligator 2
      z: '2',
      g: [
        ['216936d3 cd6e53fe c0a4e231 fdd6dc5c',
         '692cc760 9525a7b2 c9562d60 8f25d51a'],
        // 4/5
        ['66666666 66666666 66666666 66666666',
         '66666666 66666666 66666666 66666658'],
        pre
      ],
      torsion: [
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000001']
        ],
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000'],
          ['7fffffff ffffffff ffffffff ffffffff',
           'ffffffff ffffffff ffffffff ffffffec']
        ],
        [
          ['2b832480 4fc1df0b 2b4d0099 3dfbd7a7',
           '2f431806 ad2fe478 c4ee1b27 4a0ea0b0'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000']
        ],
        [
          ['547cdb7f b03e20f4 d4b2ff66 c2042858',
           'd0bce7f9 52d01b87 3b11e4d8 b5f15f3d'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000']
        ],
        [
          ['1fd5b9a0 06394a28 e9339932 38de4abb',
           '5c193c70 13e5e238 dea14646 c545d14a'],
          ['05fc536d 880238b1 3933c6d3 05acdfd5',
           'f098eff2 89f4c345 b027b2c2 8f95e826']
        ],
        [
          ['602a465f f9c6b5d7 16cc66cd c721b544',
           'a3e6c38f ec1a1dc7 215eb9b9 3aba2ea3'],
          ['05fc536d 880238b1 3933c6d3 05acdfd5',
           'f098eff2 89f4c345 b027b2c2 8f95e826']
        ],
        [
          ['1fd5b9a0 06394a28 e9339932 38de4abb',
           '5c193c70 13e5e238 dea14646 c545d14a'],
          ['7a03ac92 77fdc74e c6cc392c fa53202a',
           '0f67100d 760b3cba 4fd84d3d 706a17c7']
        ],
        [
          ['602a465f f9c6b5d7 16cc66cd c721b544',
           'a3e6c38f ec1a1dc7 215eb9b9 3aba2ea3'],
          ['7a03ac92 77fdc74e c6cc392c fa53202a',
           '0f67100d 760b3cba 4fd84d3d 706a17c7']
        ]
      ]
    });
  }
}

/**
 * ISO448
 * https://tools.ietf.org/html/rfc7748#section-4.2
 * https://git.zx2c4.com/goldilocks/tree/_aux/ristretto/ristretto.sage#n658
 */

class ISO448 extends EdwardsCurve {
  constructor(pre) {
    super({
      id: 'ISO448',
      ossl: null,
      type: 'edwards',
      endian: 'le',
      hash: 'SHAKE256',
      prefix: 'SigEd448',
      context: true,
      prime: 'p448',
      // 2^448 - 2^224 - 1 (= 3 mod 4)
      p: ['ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff fffffffe ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff'],
      a: '1',
      // 39082 / 39081 mod p
      d: ['d78b4bdc 7f0daf19 f24f38c2 9373a2cc',
          'ad461572 42a50f37 809b1da3 412a12e7',
          '9ccc9c81 264cfe9a d0809970 58fb61c4',
          '243cc32d baa156b9'],
      n: ['3fffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff 7cca23e9',
          'c44edb49 aed63690 216cc272 8dc58f55',
          '2378c292 ab5844f3'],
      h: '4',
      // Elligator 2
      z: '-1',
      g: [
        ['79a70b2b 70400553 ae7c9df4 16c792c6',
         '1128751a c9296924 0c25a07d 728bdc93',
         'e21f7787 ed697224 9de732f3 8496cd11',
         '69871309 3e9c04fc'],
        // Note: the RFC has this wrong.
        ['7fffffff ffffffff ffffffff ffffffff',
         'ffffffff ffffffff ffffffff 80000000',
         '00000000 00000000 00000000 00000000',
         '00000000 00000001'],
        pre
      ],
      torsion: [
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000001']
        ],
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000'],
          ['ffffffff ffffffff ffffffff ffffffff',
           'ffffffff ffffffff fffffffe ffffffff',
           'ffffffff ffffffff ffffffff ffffffff',
           'ffffffff fffffffe']
        ],
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000001'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000']
        ],
        [
          ['ffffffff ffffffff ffffffff ffffffff',
           'ffffffff ffffffff fffffffe ffffffff',
           'ffffffff ffffffff ffffffff ffffffff',
           'ffffffff fffffffe'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000']
        ]
      ]
    });
  }
}

/**
 * ED448
 * https://tools.ietf.org/html/rfc8032#section-5.2
 */

class ED448 extends EdwardsCurve {
  constructor(pre) {
    super({
      id: 'ED448',
      ossl: 'ED448',
      type: 'edwards',
      endian: 'le',
      hash: 'SHAKE256',
      prefix: 'SigEd448',
      context: true,
      prime: 'p448',
      // 2^448 - 2^224 - 1 (= 3 mod 4)
      p: ['ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff fffffffe ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff'],
      a: '1',
      // -39081 mod p
      d: ['ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff fffffffe ffffffff',
          'ffffffff ffffffff ffffffff ffffffff',
          'ffffffff ffff6756'],
      n: ['3fffffff ffffffff ffffffff ffffffff',
          'ffffffff ffffffff ffffffff 7cca23e9',
          'c44edb49 aed63690 216cc272 8dc58f55',
          '2378c292 ab5844f3'],
      h: '4',
      // Elligator 2
      z: '-1',
      g: [
        ['4f1970c6 6bed0ded 221d15a6 22bf36da',
         '9e146570 470f1767 ea6de324 a3d3a464',
         '12ae1af7 2ab66511 433b80e1 8b00938e',
         '2626a82b c70cc05e'],
        ['693f4671 6eb6bc24 88762037 56c9c762',
         '4bea7373 6ca39840 87789c1e 05a0c2d7',
         '3ad3ff1c e67c39c4 fdbd132c 4ed7c8ad',
         '9808795b f230fa14'],
        pre
      ],
      torsion: [
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000001']
        ],
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000'],
          ['ffffffff ffffffff ffffffff ffffffff',
           'ffffffff ffffffff fffffffe ffffffff',
           'ffffffff ffffffff ffffffff ffffffff',
           'ffffffff fffffffe']
        ],
        [
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000001'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000']
        ],
        [
          ['ffffffff ffffffff ffffffff ffffffff',
           'ffffffff ffffffff fffffffe ffffffff',
           'ffffffff ffffffff ffffffff ffffffff',
           'ffffffff fffffffe'],
          ['00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000 00000000 00000000',
           '00000000 00000000']
        ]
      ]
    });
  }
}

/*
 * Curve Registry
 */

const curves = {
  __proto__: null,
  P192,
  P224,
  P256,
  P384,
  P521,
  SECP256K1,
  BRAINPOOLP256,
  BRAINPOOLP384,
  BRAINPOOLP512,
  X25519,
  X448,
  MONT448,
  ED25519,
  ISO448,
  ED448
};

const cache = {
  __proto__: null,
  P192: null,
  P224: null,
  P256: null,
  P384: null,
  P521: null,
  SECP256K1: null,
  BRAINPOOLP256: null,
  BRAINPOOLP384: null,
  BRAINPOOLP512: null,
  X25519: null,
  X448: null,
  MONT448: null,
  ED25519: null,
  ISO448: null,
  ED448: null
};

function curve(name, ...args) {
  assert(typeof name === 'string');

  const key = name.toUpperCase();

  let curve = cache[key];

  if (!curve) {
    const Curve = curves[key];

    if (!Curve)
      throw new Error(`Curve not found: "${name}".`);

    curve = new Curve(...args);
    cache[key] = curve;
  }

  return curve;
}

function register(name, Curve) {
  assert(typeof name === 'string');
  assert(typeof Curve === 'function');

  const key = name.toUpperCase();

  if (curves[key])
    throw new Error(`Curve already registered: "${name}".`);

  curves[key] = Curve;
  cache[key] = null;
}

/*
 * Scalar Recoding
 */

function getNAF(k, width, max) {
  // Computing the width-w NAF of a positive integer.
  //
  // [GECC] Algorithm 3.35, Page 100, Section 3.3.
  //
  // The above document describes a rather abstract
  // method of recoding. The more optimal method
  // below was ported from libsecp256k1.
  assert(k instanceof BN);
  assert(!k.red);
  assert((width >>> 0) === width);
  assert((max >>> 0) === max);

  const naf = new Array(max);
  const bits = k.bitLength() + 1;
  const sign = k.sign() | 1;

  assert(bits <= max);

  for (let i = 0; i < max; i++)
    naf[i] = 0;

  let i = 0;
  let carry = 0;
  let word;

  while (i < bits) {
    if (k.bit(i) === carry) {
      i += 1;
      continue;
    }

    word = k.bits(i, width) + carry;
    carry = (word >> (width - 1)) & 1;
    word -= carry << width;

    naf[i] = sign * word;

    i += width;
  }

  assert(carry === 0);

  return naf;
}

function getFixedNAF(k, width, max, step) {
  assert((step >>> 0) === step);

  // Recode to NAF.
  const naf = getNAF(k, width, max);

  // Translate into more windowed form.
  const len = Math.ceil(naf.length / step);
  const repr = new Array(len);

  let i = 0;

  for (let j = 0; j < naf.length; j += step) {
    let nafW = 0;

    for (let k = j + step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];

    repr[i++] = nafW;
  }

  assert(i === len);

  return repr;
}

function getJSF(k1, k2, max) {
  // Joint sparse form.
  //
  // [GECC] Algorithm 3.50, Page 111, Section 3.3.
  assert(k1 instanceof BN);
  assert(k2 instanceof BN);
  assert(!k1.red);
  assert(!k2.red);
  assert((max >>> 0) === max);

  const jsf = [new Array(max), new Array(max)];
  const bits = Math.max(k1.bitLength(), k2.bitLength()) + 1;
  const s1 = k1.sign() | 1;
  const s2 = k2.sign() | 1;

  assert(bits <= max);

  let d1 = 0;
  let d2 = 0;

  for (let i = 0; i < bits; i++) {
    const b1 = k1.bits(i, 3);
    const b2 = k2.bits(i, 3);

    // First phase.
    let m14 = ((b1 & 3) + d1) & 3;
    let m24 = ((b2 & 3) + d2) & 3;
    let u1 = 0;
    let u2 = 0;

    if (m14 === 3)
      m14 = -1;

    if (m24 === 3)
      m24 = -1;

    if (m14 & 1) {
      const m8 = ((b1 & 7) + d1) & 7;

      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }

    if (m24 & 1) {
      const m8 = ((b2 & 7) + d2) & 7;

      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }

    jsf[0][i] = u1 * s1;
    jsf[1][i] = u2 * s2;

    // Second phase.
    if (2 * d1 === 1 + u1)
      d1 = 1 - d1;

    if (2 * d2 === 1 + u2)
      d2 = 1 - d2;
  }

  for (let i = bits; i < max; i++) {
    jsf[0][i] = 0;
    jsf[1][i] = 0;
  }

  return jsf;
}

function getJNAF(c1, c2, max) {
  const jsf = getJSF(c1, c2, max);
  const naf = new Array(max);

  // JSF -> NAF conversion.
  for (let i = 0; i < max; i++) {
    const ja = jsf[0][i];
    const jb = jsf[1][i];

    naf[i] = jsfIndex[(ja + 1) * 3 + (jb + 1)];
  }

  return naf;
}

/*
 * Helpers
 */

function assert(val, msg) {
  if (!val) {
    const err = new Error(msg || 'Assertion failed');

    if (Error.captureStackTrace)
      Error.captureStackTrace(err, assert);

    throw err;
  }
}

function wrapErrors(fn) {
  assert(typeof fn === 'function');

  try {
    return fn();
  } catch (e) {
    if (e.message === 'X is not a square mod P.'
        || e.message === 'Not invertible.') {
      throw new Error('Invalid point.');
    }
    throw e;
  }
}

function mod(x, y) {
  // Euclidean modulo.
  let r = x % y;

  if (r < 0) {
    if (y < 0)
      r -= y;
    else
      r += y;
  }

  return r;
}

function cubeRoot(x) {
  assert(x instanceof BN);
  assert(x.red);

  const p = x.red.m;

  if (p.cmpn(3) <= 0)
    return x.clone();

  // p = 2 mod 3
  if (p.modrn(3) === 2) {
    // e = (2 * p - 1) / 3
    const e = p.ushln(1).isubn(1).idivn(3);
    return x.redPow(e);
  }

  const mod9 = p.modrn(9);

  // p = 4 mod 9
  if (mod9 === 4) {
    // e = (2 * p + 1) / 9
    const e = p.ushln(1).iaddn(1).idivn(9);
    const r = x.redPow(e);
    const c = r.redSqr().redMul(r);

    if (!c.eq(x))
      throw new Error('X is not a cube mod P.');

    return r;
  }

  // p = 7 mod 9
  if (mod9 === 7) {
    // e = (p + 2) / 9
    const e = p.addn(2).idivn(9);
    const r = x.redPow(e);
    const c = r.redSqr().redMul(r);

    if (!c.eq(x))
      throw new Error('X is not a cube mod P.');

    return r;
  }

  throw new Error('Not implemented.');
}

function cubeRoots(x) {
  const r0 = cubeRoot(x);

  // p = 1 mod 3
  if (x.red.m.modrn(3) === 1) {
    // Multiply by roots of unity to find other roots.
    const two = new BN(2).toRed(x.red);
    const three = new BN(3).toRed(x.red);
    const i2 = two.redInvert();
    const s1 = three.redNeg().redSqrt().redMul(i2);
    const s2 = s1.redNeg();
    const u1 = s1.redSub(i2);
    const u2 = s2.redSub(i2);
    const r1 = r0.redMul(u1);
    const r2 = r0.redMul(u2);

    return [r0, r1, r2];
  }

  // p = 2 mod 3 guarantees 1 cube root per element.
  return [r0];
}

function uncube(x) {
  // Find a cube root which is also a quadratic residue.
  for (const root of cubeRoots(x)) {
    if (root.redJacobi() >= 0)
      return root;
  }

  throw new Error('X^(1/3) is not a square mod P.');
}

function randomInt(rng) {
  return BN.randomBits(rng, 32).toNumber();
}

function memoize(method, self) {
  const cache = new WeakMap();

  return function memoized(curve, invert) {
    const i = invert & 1;
    const item = cache.get(curve);

    if (item && item[i] !== null)
      return item[i];

    const result = method.call(self, curve, invert);

    if (!cache.has(curve))
      cache.set(curve, [null, null]);

    cache.get(curve)[i] = result;

    return result;
  };
}

function toPretty(x, size) {
  assert(x instanceof BN);
  assert((size >>> 0) === size);

  if (size & 7)
    size += 8 - (size & 7);

  const str = x.toString(16, size);
  const chunks = [];
  const out = [];

  assert((str.length & 7) === 0);

  for (let i = 0; i < str.length; i += 8)
    chunks.push(str.slice(i, i + 8));

  for (let i = 0; i < chunks.length; i += 4)
    out.push(chunks.slice(i, i + 4).join(' '));

  return out;
}

/*
 * Expose
 */

exports.Curve = Curve;
exports.Point = Point;
exports.ShortCurve = ShortCurve;
exports.ShortPoint = ShortPoint;
exports.JPoint = JPoint;
exports.MontCurve = MontCurve;
exports.MontPoint = MontPoint;
exports.XPoint = XPoint;
exports.EdwardsCurve = EdwardsCurve;
exports.EdwardsPoint = EdwardsPoint;
exports.curves = curves;
exports.curve = curve;
exports.register = register;
}],
[/* 64 */ 'bcrypto', '/lib/js/precomputed/secp256k1.json', function(exports, require, module, __filename, __dirname, __meta) {
module.exports = {
  "naf": {
    "width": 9,
    "points": [
      [
        "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
        "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
      ],
      [
        "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
        "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
      ],
      [
        "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
        "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
      ],
      [
        "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
        "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
      ],
      [
        "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
        "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
      ],
      [
        "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
        "0ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
      ],
      [
        "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
        "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
      ],
      [
        "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
        "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
      ],
      [
        "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
        "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
      ],
      [
        "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
        "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
      ],
      [
        "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
        "02de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
      ],
      [
        "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
        "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
      ],
      [
        "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
        "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
      ],
      [
        "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
        "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
      ],
      [
        "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
        "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
      ],
      [
        "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
        "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
      ],
      [
        "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
        "02972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
      ],
      [
        "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
        "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
      ],
      [
        "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
        "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
      ],
      [
        "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
        "0d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
      ],
      [
        "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
        "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
      ],
      [
        "049370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
        "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
      ],
      [
        "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
        "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
      ],
      [
        "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
        "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
      ],
      [
        "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
        "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
      ],
      [
        "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
        "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
      ],
      [
        "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
        "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
      ],
      [
        "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
        "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
      ],
      [
        "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
        "091b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
      ],
      [
        "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
        "0673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
      ],
      [
        "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
        "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
      ],
      [
        "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
        "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
      ],
      [
        "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
        "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
      ],
      [
        "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
        "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
      ],
      [
        "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
        "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
      ],
      [
        "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
        "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
      ],
      [
        "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
        "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
      ],
      [
        "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
        "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
      ],
      [
        "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
        "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
      ],
      [
        "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
        "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
      ],
      [
        "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
        "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
      ],
      [
        "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
        "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
      ],
      [
        "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
        "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
      ],
      [
        "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
        "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
      ],
      [
        "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
        "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
      ],
      [
        "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
        "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
      ],
      [
        "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
        "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
      ],
      [
        "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
        "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
      ],
      [
        "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
        "0a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
      ],
      [
        "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
        "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
      ],
      [
        "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
        "09414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
      ],
      [
        "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
        "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
      ],
      [
        "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
        "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
      ],
      [
        "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
        "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
      ],
      [
        "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
        "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
      ],
      [
        "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
        "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
      ],
      [
        "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
        "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
      ],
      [
        "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
        "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
      ],
      [
        "078c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
        "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
      ],
      [
        "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
        "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
      ],
      [
        "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
        "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
      ],
      [
        "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
        "04f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
      ],
      [
        "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
        "073867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
      ],
      [
        "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
        "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
      ],
      [
        "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
        "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
      ],
      [
        "0336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
        "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
      ],
      [
        "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
        "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
      ],
      [
        "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
        "060660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
      ],
      [
        "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
        "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
      ],
      [
        "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
        "0b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
      ],
      [
        "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
        "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
      ],
      [
        "04e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
        "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
      ],
      [
        "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
        "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
      ],
      [
        "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
        "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
      ],
      [
        "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
        "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
      ],
      [
        "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
        "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
      ],
      [
        "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
        "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
      ],
      [
        "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
        "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
      ],
      [
        "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
        "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
      ],
      [
        "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
        "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
      ],
      [
        "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
        "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
      ],
      [
        "0c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
        "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
      ],
      [
        "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
        "021ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
      ],
      [
        "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
        "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
      ],
      [
        "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
        "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
      ],
      [
        "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
        "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
      ],
      [
        "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
        "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
      ],
      [
        "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
        "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
      ],
      [
        "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
        "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
      ],
      [
        "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
        "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
      ],
      [
        "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
        "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
      ],
      [
        "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
        "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
      ],
      [
        "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
        "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
      ],
      [
        "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
        "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
      ],
      [
        "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
        "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
      ],
      [
        "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
        "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
      ],
      [
        "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
        "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
      ],
      [
        "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
        "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
      ],
      [
        "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
        "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
      ],
      [
        "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
        "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
      ],
      [
        "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
        "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
      ],
      [
        "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
        "0c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
      ],
      [
        "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
        "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
      ],
      [
        "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
        "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
      ],
      [
        "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
        "09731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
      ],
      [
        "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
        "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
      ],
      [
        "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
        "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
      ],
      [
        "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
        "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
      ],
      [
        "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
        "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
      ],
      [
        "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
        "0cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
      ],
      [
        "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
        "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
      ],
      [
        "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
        "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
      ],
      [
        "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
        "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
      ],
      [
        "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
        "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
      ],
      [
        "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
        "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
      ],
      [
        "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
        "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
      ],
      [
        "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
        "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
      ],
      [
        "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
        "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
      ],
      [
        "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
        "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
      ],
      [
        "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
        "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
      ],
      [
        "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
        "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
      ],
      [
        "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
        "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
      ],
      [
        "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
        "0712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
      ],
      [
        "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
        "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
      ],
      [
        "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
        "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
      ],
      [
        "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
        "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
      ],
      [
        "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
        "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
      ]
    ]
  },
  "doubles": {
    "step": 4,
    "points": [
      [
        "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
        "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
      ],
      [
        "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
        "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
      ],
      [
        "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
        "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
      ],
      [
        "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
        "04e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
      ],
      [
        "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
        "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
      ],
      [
        "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
        "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
      ],
      [
        "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
        "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
      ],
      [
        "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
        "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
      ],
      [
        "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
        "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
      ],
      [
        "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
        "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
      ],
      [
        "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
        "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
      ],
      [
        "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
        "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
      ],
      [
        "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
        "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
      ],
      [
        "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
        "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
      ],
      [
        "06f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
        "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
      ],
      [
        "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
        "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
      ],
      [
        "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
        "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
      ],
      [
        "0948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
        "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
      ],
      [
        "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
        "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
      ],
      [
        "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
        "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
      ],
      [
        "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
        "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
      ],
      [
        "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
        "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
      ],
      [
        "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
        "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
      ],
      [
        "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
        "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
      ],
      [
        "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
        "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
      ],
      [
        "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
        "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
      ],
      [
        "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
        "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
      ],
      [
        "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
        "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
      ],
      [
        "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
        "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
      ],
      [
        "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
        "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
      ],
      [
        "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
        "0e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
      ],
      [
        "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
        "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
      ],
      [
        "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
        "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
      ],
      [
        "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
        "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
      ],
      [
        "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
        "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
      ],
      [
        "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
        "067c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
      ],
      [
        "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
        "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
      ],
      [
        "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
        "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
      ],
      [
        "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
        "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
      ],
      [
        "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
        "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
      ],
      [
        "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
        "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
      ],
      [
        "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
        "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
      ],
      [
        "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
        "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
      ],
      [
        "0928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
        "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
      ],
      [
        "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
        "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
      ],
      [
        "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
        "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
      ],
      [
        "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
        "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
      ],
      [
        "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
        "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
      ],
      [
        "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
        "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
      ],
      [
        "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
        "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
      ],
      [
        "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
        "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
      ],
      [
        "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
        "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
      ],
      [
        "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
        "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
      ],
      [
        "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
        "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
      ],
      [
        "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
        "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
      ],
      [
        "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
        "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
      ],
      [
        "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
        "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
      ],
      [
        "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
        "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
      ],
      [
        "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
        "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
      ],
      [
        "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
        "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
      ],
      [
        "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
        "0d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
      ],
      [
        "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
        "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
      ],
      [
        "08ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
        "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
      ],
      [
        "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
        "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
      ],
      [
        "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
        "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
      ]
    ]
  }
};
}],
[/* 65 */ 'bpkg', '/lib/builtins/util.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * util@0.11.1 - Node.JS util module
 * Copyright (c) 2019, Joyent (MIT)
 * https://github.com/defunctzombie/node-util
 *
 * License for util@0.11.1:
 *
 * Copyright Joyent, Inc. and other Node contributors. All rights reserved.
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * License for inherits@2.0.3:
 *
 * The ISC License
 *
 * Copyright (c) Isaac Z. Schlueter
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

var __node_modules__ = [
[/* 0 */ 'util', '/util.js', function(exports, module, __filename, __dirname, __meta) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __node_require__(1 /* './support/isBuffer' */);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __node_require__(2 /* 'inherits' */);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;
}],
[/* 1 */ 'util', '/support/isBufferBrowser.js', function(exports, module, __filename, __dirname, __meta) {
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
}],
[/* 2 */ 'inherits', '/inherits_browser.js', function(exports, module, __filename, __dirname, __meta) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}
}]
];

var __node_cache__ = [];

function __node_error__(location) {
  var err = new Error('Cannot find module \'' + location + '\'');
  err.code = 'MODULE_NOT_FOUND';
  throw err;
}

function __node_require__(id) {
  if ((id >>> 0) !== id || id > __node_modules__.length)
    return __node_error__(id);

  while (__node_cache__.length <= id)
    __node_cache__.push(null);

  var cache = __node_cache__[id];

  if (cache)
    return cache.exports;

  var mod = __node_modules__[id];
  var name = mod[0];
  var path = mod[1];
  var func = mod[2];
  var meta;

  var _exports = exports;
  var _module = module;

  if (id !== 0) {
    _exports = {};
    _module = {
      id: '/' + name + path,
      exports: _exports,
      parent: module.parent,
      filename: module.filename,
      loaded: false,
      children: module.children,
      paths: module.paths
    };
  }

  __node_cache__[id] = _module;

  try {
    func.call(_exports, _exports, _module,
              __filename, __dirname, meta);
  } catch (e) {
    __node_cache__[id] = null;
    throw e;
  }

  __node_modules__[id] = null;

  if (id !== 0)
    _module.loaded = true;

  return _module.exports;
}

__node_require__(0);
}],
[/* 66 */ 'bcoin', '/lib/hd/private.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * private.js - hd private keys for bcoin
 * Copyright (c) 2015-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const assert = __browser_require__(2 /* 'bsert' */, module);
const bio = __browser_require__(7 /* 'bufio' */, module);
const base58 = __browser_require__(67 /* 'bcrypto/lib/encoding/base58' */, module);
const sha512 = __browser_require__(26 /* 'bcrypto/lib/sha512' */, module);
const hash160 = __browser_require__(69 /* 'bcrypto/lib/hash160' */, module);
const hash256 = __browser_require__(45 /* 'bcrypto/lib/hash256' */, module);
const cleanse = __browser_require__(20 /* 'bcrypto/lib/cleanse' */, module);
const random = __browser_require__(22 /* 'bcrypto/lib/random' */, module);
const secp256k1 = __browser_require__(47 /* 'bcrypto/lib/secp256k1' */, module);
const Network = __browser_require__(72 /* '../protocol/network' */, module);
const consensus = __browser_require__(74 /* '../protocol/consensus' */, module);
const common = __browser_require__(3 /* './common' */, module);
const Mnemonic = __browser_require__(6 /* './mnemonic' */, module);
const HDPublicKey = __browser_require__(77 /* './public' */, module);

/*
 * Constants
 */

const SEED_SALT = Buffer.from('Bitcoin seed', 'ascii');

/**
 * HDPrivateKey
 * @alias module:hd.PrivateKey
 * @property {Number} depth
 * @property {Number} parentFingerPrint
 * @property {Number} childIndex
 * @property {Buffer} chainCode
 * @property {Buffer} privateKey
 */

class HDPrivateKey {
  /**
   * Create an hd private key.
   * @constructor
   * @param {Object|String} options
   * @param {Number?} options.depth
   * @param {Number?} options.parentFingerPrint
   * @param {Number?} options.childIndex
   * @param {Buffer?} options.chainCode
   * @param {Buffer?} options.privateKey
   */

  constructor(options) {
    this.depth = 0;
    this.parentFingerPrint = 0;
    this.childIndex = 0;
    this.chainCode = consensus.ZERO_HASH;
    this.privateKey = consensus.ZERO_HASH;

    this.publicKey = common.ZERO_KEY;
    this.fingerPrint = -1;

    this._hdPublicKey = null;

    if (options)
      this.fromOptions(options);
  }

  /**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */

  fromOptions(options) {
    assert(options, 'No options for HD private key.');
    assert((options.depth & 0xff) === options.depth);
    assert((options.parentFingerPrint >>> 0) === options.parentFingerPrint);
    assert((options.childIndex >>> 0) === options.childIndex);
    assert((options.chainCode != null && options.chainCode._isBuffer === true));
    assert((options.privateKey != null && options.privateKey._isBuffer === true));

    this.depth = options.depth;
    this.parentFingerPrint = options.parentFingerPrint;
    this.childIndex = options.childIndex;
    this.chainCode = options.chainCode;
    this.privateKey = options.privateKey;
    this.publicKey = secp256k1.publicKeyCreate(options.privateKey, true);

    return this;
  }

  /**
   * Instantiate HD private key from options object.
   * @param {Object} options
   * @returns {HDPrivateKey}
   */

  static fromOptions(options) {
    return new this().fromOptions(options);
  }

  /**
   * Get HD public key.
   * @returns {HDPublicKey}
   */

  toPublic() {
    let key = this._hdPublicKey;

    if (!key) {
      key = new HDPublicKey();
      key.depth = this.depth;
      key.parentFingerPrint = this.parentFingerPrint;
      key.childIndex = this.childIndex;
      key.chainCode = this.chainCode;
      key.publicKey = this.publicKey;
      this._hdPublicKey = key;
    }

    return key;
  }

  /**
   * Get cached base58 xprivkey.
   * {(Network|NetworkType)?} network
   * @returns {Base58String}
   */

  xprivkey(network) {
    return this.toBase58(network);
  }

  /**
   * Get cached base58 xpubkey.
   * {(Network|NetworkType)?} network
   * @returns {Base58String}
   */

  xpubkey(network) {
    return this.toPublic().xpubkey(network);
  }

  /**
   * Destroy the key (zeroes chain code, privkey, and pubkey).
   * @param {Boolean} pub - Destroy hd public key as well.
   */

  destroy(pub) {
    this.depth = 0;
    this.childIndex = 0;
    this.parentFingerPrint = 0;

    cleanse(this.chainCode);
    cleanse(this.privateKey);
    cleanse(this.publicKey);

    this.fingerPrint = -1;

    if (this._hdPublicKey) {
      if (pub)
        this._hdPublicKey.destroy();
      this._hdPublicKey = null;
    }
  }

  /**
   * Derive a child key.
   * @param {Number} index - Derivation index.
   * @param {Boolean?} hardened - Whether the derivation should be hardened.
   * @returns {HDPrivateKey}
   */

  derive(index, hardened) {
    assert(typeof index === 'number');

    if ((index >>> 0) !== index)
      throw new Error('Index out of range.');

    if (this.depth >= 0xff)
      throw new Error('Depth too high.');

    if (hardened) {
      index |= common.HARDENED;
      index >>>= 0;
    }

    const id = this.getID(index);
    const cache = common.cache.get(id);

    if (cache)
      return cache;

    const bw = bio.pool(37);

    if (index & common.HARDENED) {
      bw.writeU8(0);
      bw.writeBytes(this.privateKey);
      bw.writeU32BE(index);
    } else {
      bw.writeBytes(this.publicKey);
      bw.writeU32BE(index);
    }

    const data = bw.render();

    const hash = sha512.mac(data, this.chainCode);
    const left = hash.slice(0, 32);
    const right = hash.slice(32, 64);

    let key;
    try {
      key = secp256k1.privateKeyTweakAdd(this.privateKey, left);
    } catch (e) {
      return this.derive(index + 1);
    }

    if (this.fingerPrint === -1) {
      const fp = hash160.digest(this.publicKey);
      this.fingerPrint = fp.readUInt32BE(0, true);
    }

    const child = new this.constructor();
    child.depth = this.depth + 1;
    child.parentFingerPrint = this.fingerPrint;
    child.childIndex = index;
    child.chainCode = right;
    child.privateKey = key;
    child.publicKey = secp256k1.publicKeyCreate(key, true);

    common.cache.set(id, child);

    return child;
  }

  /**
   * Unique HD key ID.
   * @private
   * @param {Number} index
   * @returns {String}
   */

  getID(index) {
    return 'v' + this.publicKey.toString('hex') + index;
  }

  /**
   * Derive a BIP44 account key.
   * @param {Number} purpose
   * @param {Number} type
   * @param {Number} account
   * @returns {HDPrivateKey}
   * @throws Error if key is not a master key.
   */

  deriveAccount(purpose, type, account) {
    assert((purpose >>> 0) === purpose, 'Purpose must be a number.');
    assert((type >>> 0) === type, 'Coin type must be a number.');
    assert((account >>> 0) === account, 'Account index must be a number.');
    assert(this.isMaster(), 'Cannot derive account index.');
    return this
      .derive(purpose, true)
      .derive(type, true)
      .derive(account, true);
  }

  /**
   * Test whether the key is a master key.
   * @returns {Boolean}
   */

  isMaster() {
    return common.isMaster(this);
  }

  /**
   * Test whether the key is (most likely) a BIP44 account key.
   * @param {Number?} account
   * @returns {Boolean}
   */

  isAccount(account) {
    return common.isAccount(this, account);
  }

  /**
   * Test whether an object is in the form of a base58 xprivkey.
   * @param {String} data
   * @param {Network?} network
   * @returns {Boolean}
   */

  static isBase58(data, network) {
    if (typeof data !== 'string')
      return false;

    if (data.length < 4)
      return false;

    const prefix = data.substring(0, 4);

    try {
      Network.fromPrivate58(prefix, network);
      return true;
    } catch (e) {
      return false;
    }
  }

  /**
   * Test whether a buffer has a valid network prefix.
   * @param {Buffer} data
   * @param {Network?} network
   * @returns {Boolean}
   */

  static isRaw(data, network) {
    if (!(data != null && data._isBuffer === true))
      return false;

    if (data.length < 4)
      return false;

    const version = data.readUInt32BE(0, true);

    try {
      Network.fromPrivate(version, network);
      return true;
    } catch (e) {
      return false;
    }
  }

  /**
   * Test whether a string is a valid path.
   * @param {String} path
   * @returns {Boolean}
   */

  static isValidPath(path) {
    try {
      common.parsePath(path, true);
      return true;
    } catch (e) {
      return false;
    }
  }

  /**
   * Derive a key from a derivation path.
   * @param {String} path
   * @returns {HDPrivateKey}
   * @throws Error if `path` is not a valid path.
   */

  derivePath(path) {
    const indexes = common.parsePath(path, true);

    let key = this;

    for (const index of indexes)
      key = key.derive(index);

    return key;
  }

  /**
   * Compare a key against an object.
   * @param {Object} obj
   * @returns {Boolean}
   */

  equals(obj) {
    assert(HDPrivateKey.isHDPrivateKey(obj));

    return this.depth === obj.depth
      && this.parentFingerPrint === obj.parentFingerPrint
      && this.childIndex === obj.childIndex
      && this.chainCode.equals(obj.chainCode)
      && this.privateKey.equals(obj.privateKey);
  }

  /**
   * Compare a key against an object.
   * @param {HDPrivateKey} key
   * @returns {Boolean}
   */

  compare(key) {
    assert(HDPrivateKey.isHDPrivateKey(key));

    let cmp = this.depth - key.depth;

    if (cmp !== 0)
      return cmp;

    cmp = this.parentFingerPrint - key.parentFingerPrint;

    if (cmp !== 0)
      return cmp;

    cmp = this.childIndex - key.childIndex;

    if (cmp !== 0)
      return cmp;

    cmp = this.chainCode.compare(key.chainCode);

    if (cmp !== 0)
      return cmp;

    cmp = this.privateKey.compare(key.privateKey);

    if (cmp !== 0)
      return cmp;

    return 0;
  }

  /**
   * Inject properties from seed.
   * @private
   * @param {Buffer} seed
   */

  fromSeed(seed) {
    assert((seed != null && seed._isBuffer === true));

    if (seed.length * 8 < common.MIN_ENTROPY
        || seed.length * 8 > common.MAX_ENTROPY) {
      throw new Error('Entropy not in range.');
    }

    const hash = sha512.mac(seed, SEED_SALT);
    const left = hash.slice(0, 32);
    const right = hash.slice(32, 64);

    // Only a 1 in 2^127 chance of happening.
    if (!secp256k1.privateKeyVerify(left))
      throw new Error('Master private key is invalid.');

    this.depth = 0;
    this.parentFingerPrint = 0;
    this.childIndex = 0;
    this.chainCode = right;
    this.privateKey = left;
    this.publicKey = secp256k1.publicKeyCreate(left, true);

    return this;
  }

  /**
   * Instantiate an hd private key from a 512 bit seed.
   * @param {Buffer} seed
   * @returns {HDPrivateKey}
   */

  static fromSeed(seed) {
    return new this().fromSeed(seed);
  }

  /**
   * Inject properties from a mnemonic.
   * @private
   * @param {Mnemonic} mnemonic
   * @param {String?} passphrase
   */

  fromMnemonic(mnemonic, passphrase) {
    assert(mnemonic instanceof Mnemonic);
    return this.fromSeed(mnemonic.toSeed(passphrase));
  }

  /**
   * Instantiate an hd private key from a mnemonic.
   * @param {Mnemonic} mnemonic
   * @param {String?} passphrase
   * @returns {HDPrivateKey}
   */

  static fromMnemonic(mnemonic, passphrase) {
    return new this().fromMnemonic(mnemonic, passphrase);
  }

  /**
   * Inject properties from a mnemonic.
   * @private
   * @param {String} phrase
   */

  fromPhrase(phrase) {
    const mnemonic = Mnemonic.fromPhrase(phrase);
    this.fromMnemonic(mnemonic);
    return this;
  }

  /**
   * Instantiate an hd private key from a phrase.
   * @param {String} phrase
   * @returns {HDPrivateKey}
   */

  static fromPhrase(phrase) {
    return new this().fromPhrase(phrase);
  }

  /**
   * Inject properties from privateKey and entropy.
   * @private
   * @param {Buffer} key
   * @param {Buffer} entropy
   */

  fromKey(key, entropy) {
    assert((key != null && key._isBuffer === true) && key.length === 32);
    assert((entropy != null && entropy._isBuffer === true) && entropy.length === 32);
    this.depth = 0;
    this.parentFingerPrint = 0;
    this.childIndex = 0;
    this.chainCode = entropy;
    this.privateKey = key;
    this.publicKey = secp256k1.publicKeyCreate(key, true);
    return this;
  }

  /**
   * Create an hd private key from a key and entropy bytes.
   * @param {Buffer} key
   * @param {Buffer} entropy
   * @returns {HDPrivateKey}
   */

  static fromKey(key, entropy) {
    return new this().fromKey(key, entropy);
  }

  /**
   * Generate an hd private key.
   * @returns {HDPrivateKey}
   */

  static generate() {
    const key = secp256k1.privateKeyGenerate();
    const entropy = random.randomBytes(32);
    return HDPrivateKey.fromKey(key, entropy);
  }

  /**
   * Inject properties from base58 key.
   * @private
   * @param {Base58String} xkey
   * @param {Network?} network
   */

  fromBase58(xkey, network) {
    assert(typeof xkey === 'string');
    return this.fromRaw(base58.decode(xkey), network);
  }

  /**
   * Inject properties from serialized data.
   * @private
   * @param {BufferReader} br
   * @param {(Network|NetworkType)?} network
   */

  fromReader(br, network) {
    const version = br.readU32BE();

    Network.fromPrivate(version, network);

    this.depth = br.readU8();
    this.parentFingerPrint = br.readU32BE();
    this.childIndex = br.readU32BE();
    this.chainCode = br.readBytes(32);
    assert(br.readU8() === 0);
    this.privateKey = br.readBytes(32);
    this.publicKey = secp256k1.publicKeyCreate(this.privateKey, true);

    br.verifyChecksum(hash256.digest);

    return this;
  }

  /**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   * @param {(Network|NetworkType)?} network
   */

  fromRaw(data, network) {
    return this.fromReader(bio.read(data), network);
  }

  /**
   * Serialize key to a base58 string.
   * @param {(Network|NetworkType)?} network
   * @returns {Base58String}
   */

  toBase58(network) {
    return base58.encode(this.toRaw(network));
  }

  /**
   * Calculate serialization size.
   * @returns {Number}
   */

  getSize() {
    return 82;
  }

  /**
   * Write the key to a buffer writer.
   * @param {BufferWriter} bw
   * @param {(Network|NetworkType)?} network
   */

  toWriter(bw, network) {
    network = Network.get(network);

    bw.writeU32BE(network.keyPrefix.xprivkey);
    bw.writeU8(this.depth);
    bw.writeU32BE(this.parentFingerPrint);
    bw.writeU32BE(this.childIndex);
    bw.writeBytes(this.chainCode);
    bw.writeU8(0);
    bw.writeBytes(this.privateKey);
    bw.writeChecksum(hash256.digest);

    return bw;
  }

  /**
   * Serialize the key.
   * @param {(Network|NetworkType)?} network
   * @returns {Buffer}
   */

  toRaw(network) {
    return this.toWriter(bio.write(82), network).render();
  }

  /**
   * Instantiate an HD private key from a base58 string.
   * @param {Base58String} xkey
   * @param {Network?} network
   * @returns {HDPrivateKey}
   */

  static fromBase58(xkey, network) {
    return new this().fromBase58(xkey, network);
  }

  /**
   * Instantiate key from buffer reader.
   * @param {BufferReader} br
   * @param {(Network|NetworkType)?} network
   * @returns {HDPrivateKey}
   */

  static fromReader(br, network) {
    return new this().fromReader(br, network);
  }

  /**
   * Instantiate key from serialized data.
   * @param {Buffer} data
   * @param {(Network|NetworkType)?} network
   * @returns {HDPrivateKey}
   */

  static fromRaw(data, network) {
    return new this().fromRaw(data, network);
  }

  /**
   * Convert key to a more json-friendly object.
   * {(Network|NetworkType)?} network
   * @returns {Object}
   */

  toJSON(network) {
    return {
      xprivkey: this.xprivkey(network)
    };
  }

  /**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   * @param {Network?} network
   */

  fromJSON(json, network) {
    assert(json.xprivkey, 'Could not handle key JSON.');

    this.fromBase58(json.xprivkey, network);

    return this;
  }

  /**
   * Instantiate an HDPrivateKey from a jsonified key object.
   * @param {Object} json - The jsonified key object.
   * @param {Network?} network
   * @returns {HDPrivateKey}
   */

  static fromJSON(json, network) {
    return new this().fromJSON(json, network);
  }

  /**
   * Test whether an object is an HDPrivateKey.
   * @param {Object} obj
   * @returns {Boolean}
   */

  static isHDPrivateKey(obj) {
    return obj instanceof HDPrivateKey;
  }
}

/*
 * Expose
 */

module.exports = HDPrivateKey;
}],
[/* 67 */ 'bcrypto', '/lib/encoding/base58-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * base58.js - base58 for bcrypto
 * Copyright (c) 2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(68 /* '../js/base58' */, module);
}],
[/* 68 */ 'bcrypto', '/lib/js/base58.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * base58.js - base58 for bcrypto
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on bitcoin/bitcoin:
 *   Copyright (c) 2009-2019, The Bitcoin Core Developers (MIT License).
 *   Copyright (c) 2009-2019, The Bitcoin Developers (MIT License).
 *   https://github.com/bitcoin/bitcoin
 *
 * Resources:
 *   https://github.com/bitcoin/bitcoin/blob/master/src/base58.cpp
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);

/*
 * Constants
 */

const CHARSET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

const TABLE = [
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1,  0,  1,  2,  3,  4,  5,  6,
   7,  8, -1, -1, -1, -1, -1, -1,
  -1,  9, 10, 11, 12, 13, 14, 15,
  16, -1, 17, 18, 19, 20, 21, -1,
  22, 23, 24, 25, 26, 27, 28, 29,
  30, 31, 32, -1, -1, -1, -1, -1,
  -1, 33, 34, 35, 36, 37, 38, 39,
  40, 41, 42, 43, -1, 44, 45, 46,
  47, 48, 49, 50, 51, 52, 53, 54,
  55, 56, 57, -1, -1, -1, -1, -1
];

const pool = Buffer.alloc(128);

/**
 * Encode a base58 string.
 * @param {Buffer} data
 * @returns {String}
 */

function encode(data) {
  assert((data != null && data._isBuffer === true));

  let zeroes = 0;
  let i = 0;

  for (; i < data.length; i++) {
    if (data[i] !== 0)
      break;

    zeroes += 1;
  }

  const size = (((data.length - zeroes) * 138 / 100) | 0) + 1;
  const b58 = size <= 128 ? pool.fill(0) : Buffer.alloc(size);

  let length = 0;

  for (; i < data.length; i++) {
    let carry = data[i];
    let j = 0;

    for (let k = size - 1; k >= 0; k--, j++) {
      if (carry === 0 && j >= length)
        break;

      carry += b58[k] * 256;
      b58[k] = carry % 58;
      carry = (carry / 58) | 0;
    }

    assert(carry === 0);

    length = j;
  }

  i = size - length;

  while (i < size && b58[i] === 0)
    i += 1;

  let str = '';

  for (let j = 0; j < zeroes; j++)
    str += '1';

  while (i < size)
    str += CHARSET[b58[i++]];

  return str;
}

/**
 * Decode a base58 string.
 * @param {String} str
 * @returns {Buffer}
 * @throws on non-base58 character.
 */

function decode(str) {
  assert(typeof str === 'string');

  let zeroes = 0;
  let i = 0;

  for (; i < str.length; i++) {
    if (str[i] !== '1')
      break;

    zeroes += 1;
  }

  const size = ((str.length * 733) / 1000 | 0) + 1;
  const b256 = size <= 128 ? pool.fill(0) : Buffer.alloc(size);

  let length = 0;

  for (; i < str.length; i++) {
    const ch = str.charCodeAt(i);

    if (ch & 0xff80)
      throw new Error('Invalid base58 string.');

    const val = TABLE[ch];

    if (val === -1)
      throw new Error('Invalid base58 string.');

    let carry = val;
    let j = 0;

    for (let k = size - 1; k >= 0; k--, j++) {
      if (carry === 0 && j >= length)
        break;

      carry += b256[k] * 58;
      b256[k] = carry;
      carry >>>= 8;
    }

    assert(carry === 0);

    length = j;
  }

  // See: https://github.com/bitcoin/bitcoin/commit/2bcf1fc4
  i = size - length;

  const out = Buffer.alloc(zeroes + (size - i));

  let j;

  for (j = 0; j < zeroes; j++)
    out[j] = 0;

  while (i < size)
    out[j++] = b256[i++];

  return out;
}

/**
 * Test whether the string is a base58 string.
 * @param {String} str
 * @returns {Buffer}
 */

function test(str) {
  assert(typeof str === 'string');

  for (let i = 0; i < str.length; i++) {
    const ch = str.charCodeAt(i);

    if (ch & 0xff80)
      return false;

    if (TABLE[ch] === -1)
      return false;
  }

  return true;
}

/*
 * Expose
 */

exports.native = 0;
exports.encode = encode;
exports.decode = decode;
exports.test = test;
}],
[/* 69 */ 'bcrypto', '/lib/hash160-browser.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * hash160.js - hash160 for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

'use strict';

module.exports = __browser_require__(70 /* './js/hash160' */, module);
}],
[/* 70 */ 'bcrypto', '/lib/js/hash160.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * hash160.js - Hash160 implementation for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Resources:
 *   https://github.com/bitcoin/bitcoin/blob/master/src/hash.h
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);
const SHA256 = __browser_require__(17 /* './sha256' */, module);
const RIPEMD160 = __browser_require__(71 /* './ripemd160' */, module);
const HMAC = __browser_require__(19 /* '../internal/hmac' */, module);

/*
 * Constants
 */

const rmd = new RIPEMD160();

/**
 * Hash160
 */

class Hash160 {
  constructor() {
    this.ctx = new SHA256();
  }

  init() {
    this.ctx.init();
    return this;
  }

  update(data) {
    this.ctx.update(data);
    return this;
  }

  final() {
    const out = Buffer.alloc(32);

    this.ctx._final(out);

    rmd.init();
    rmd.update(out);
    rmd._final(out);

    return out.slice(0, 20);
  }

  static hash() {
    return new Hash160();
  }

  static hmac() {
    return new HMAC(Hash160, 64);
  }

  static digest(data) {
    return Hash160.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert((left != null && left._isBuffer === true) && left.length === 20);
    assert((right != null && right._isBuffer === true) && right.length === 20);
    return Hash160.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    const {ctx} = Hash160;

    ctx.init();
    ctx.update(x);
    ctx.update(y);

    if (z)
      ctx.update(z);

    return ctx.final();
  }

  static mac(data, key) {
    return Hash160.hmac().init(key).update(data).final();
  }
}

/*
 * Static
 */

Hash160.native = 0;
Hash160.id = 'HASH160';
Hash160.size = 20;
Hash160.bits = 160;
Hash160.blockSize = 64;
Hash160.zero = Buffer.alloc(20, 0x00);
Hash160.ctx = new Hash160();

/*
 * Expose
 */

module.exports = Hash160;
}],
[/* 71 */ 'bcrypto', '/lib/js/ripemd160.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * ripemd160.js - RIPEMD160 implementation for bcrypto
 * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on indutny/hash.js:
 *   Copyright (c) 2014, Fedor Indutny (MIT License).
 *   https://github.com/indutny/hash.js
 *
 * Resources:
 *   https://en.wikipedia.org/wiki/RIPEMD-160
 *   https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf
 *   https://github.com/indutny/hash.js/blob/master/lib/hash/ripemd.js
 */

'use strict';

const assert = __browser_require__(18 /* '../internal/assert' */, module);
const HMAC = __browser_require__(19 /* '../internal/hmac' */, module);

/*
 * Constants
 */

const FINALIZED = -1;
const DESC = Buffer.alloc(8, 0x00);
const PADDING = Buffer.alloc(64, 0x00);

PADDING[0] = 0x80;

const r = new Uint8Array([
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]);

const rh = new Uint8Array([
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]);

const s = new Uint8Array([
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]);

const sh = new Uint8Array([
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]);

/**
 * RIPEMD160
 */

class RIPEMD160 {
  constructor() {
    this.state = new Uint32Array(5);
    this.msg = new Uint32Array(16);
    this.block = Buffer.alloc(64);
    this.size = FINALIZED;
  }

  init() {
    this.state[0] = 0x67452301;
    this.state[1] = 0xefcdab89;
    this.state[2] = 0x98badcfe;
    this.state[3] = 0x10325476;
    this.state[4] = 0xc3d2e1f0;
    this.size = 0;
    return this;
  }

  update(data) {
    assert((data != null && data._isBuffer === true));
    this._update(data, data.length);
    return this;
  }

  final() {
    return this._final(Buffer.alloc(20));
  }

  _update(data, len) {
    assert(this.size !== FINALIZED, 'Context is not initialized.');

    let pos = this.size & 63;
    let off = 0;

    this.size += len;

    if (pos > 0) {
      let want = 64 - pos;

      if (want > len)
        want = len;

      data.copy(this.block, pos, off, off + want);

      pos += want;
      len -= want;
      off += want;

      if (pos < 64)
        return;

      this._transform(this.block, 0);
    }

    while (len >= 64) {
      this._transform(data, off);
      off += 64;
      len -= 64;
    }

    if (len > 0)
      data.copy(this.block, 0, off, off + len);
  }

  _final(out) {
    assert(this.size !== FINALIZED, 'Context is not initialized.');

    const pos = this.size & 63;
    const len = this.size * 8;

    writeU32(DESC, len >>> 0, 0);
    writeU32(DESC, (len * (1 / 0x100000000)) >>> 0, 4);

    this._update(PADDING, 1 + ((119 - pos) & 63));
    this._update(DESC, 8);

    for (let i = 0; i < 5; i++) {
      writeU32(out, this.state[i], i * 4);
      this.state[i] = 0;
    }

    for (let i = 0; i < 16; i++)
      this.msg[i] = 0;

    for (let i = 0; i < 64; i++)
      this.block[i] = 0;

    this.size = FINALIZED;

    return out;
  }

  _transform(chunk, pos) {
    const W = this.msg;

    let A = this.state[0];
    let B = this.state[1];
    let C = this.state[2];
    let D = this.state[3];
    let E = this.state[4];
    let Ah = A;
    let Bh = B;
    let Ch = C;
    let Dh = D;
    let Eh = E;

    for (let i = 0; i < 16; i++)
      W[i] = readU32(chunk, pos + i * 4);

    for (let j = 0; j < 80; j++) {
      let a = A + f(j, B, C, D) + W[r[j]] + K(j);
      let b = rotl32(a, s[j]);
      let T = b + E;

      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;

      a = Ah + f(79 - j, Bh, Ch, Dh) + W[rh[j]] + Kh(j);
      b = rotl32(a, sh[j]);
      T = b + Eh;
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }

    const T = this.state[1] + C + Dh;

    this.state[1] = this.state[2] + D + Eh;
    this.state[2] = this.state[3] + E + Ah;
    this.state[3] = this.state[4] + A + Bh;
    this.state[4] = this.state[0] + B + Ch;
    this.state[0] = T;
  }

  static hash() {
    return new RIPEMD160();
  }

  static hmac() {
    return new HMAC(RIPEMD160, 64);
  }

  static digest(data) {
    return RIPEMD160.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert((left != null && left._isBuffer === true) && left.length === 20);
    assert((right != null && right._isBuffer === true) && right.length === 20);
    return RIPEMD160.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    const {ctx} = RIPEMD160;

    ctx.init();
    ctx.update(x);
    ctx.update(y);

    if (z)
      ctx.update(z);

    return ctx.final();
  }

  static mac(data, key) {
    return RIPEMD160.hmac().init(key).update(data).final();
  }
}

/*
 * Static
 */

RIPEMD160.native = 0;
RIPEMD160.id = 'RIPEMD160';
RIPEMD160.size = 20;
RIPEMD160.bits = 160;
RIPEMD160.blockSize = 64;
RIPEMD160.zero = Buffer.alloc(20, 0x00);
RIPEMD160.ctx = new RIPEMD160();

/*
 * Helpers
 */

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;

  if (j <= 31)
    return (x & y) | ((~x) & z);

  if (j <= 47)
    return (x | (~y)) ^ z;

  if (j <= 63)
    return (x & z) | (y & (~z));

  return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;

  if (j <= 31)
    return 0x5a827999;

  if (j <= 47)
    return 0x6ed9eba1;

  if (j <= 63)
    return 0x8f1bbcdc;

  return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;

  if (j <= 31)
    return 0x5c4dd124;

  if (j <= 47)
    return 0x6d703ef3;

  if (j <= 63)
    return 0x7a6d76e9;

  return 0x00000000;
}

function readU32(data, off) {
  return (data[off++]
        + data[off++] * 0x100
        + data[off++] * 0x10000
        + data[off] * 0x1000000);
}

function writeU32(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}

/*
 * Expose
 */

module.exports = RIPEMD160;
}],
[/* 72 */ 'bcoin', '/lib/protocol/network.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * network.js - network object for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const assert = __browser_require__(2 /* 'bsert' */, module);
const binary = __browser_require__(41 /* '../utils/binary' */, module);
const networks = __browser_require__(73 /* './networks' */, module);
const consensus = __browser_require__(74 /* './consensus' */, module);
const TimeData = __browser_require__(75 /* './timedata' */, module);
const {inspectSymbol} = __browser_require__(40 /* '../utils' */, module);

/**
 * Network
 * Represents a network.
 * @alias module:protocol.Network
 */

class Network {
  /**
   * Create a network.
   * @constructor
   * @param {Object} options
   */

  constructor(options) {
    assert(!Network[options.type], 'Cannot create two networks.');

    this.type = options.type;
    this.seeds = options.seeds;
    this.magic = options.magic;
    this.port = options.port;
    this.checkpointMap = options.checkpointMap;
    this.lastCheckpoint = options.lastCheckpoint;
    this.txnData = options.txnData;
    this.checkpoints = [];
    this.halvingInterval = options.halvingInterval;
    this.genesis = options.genesis;
    this.genesisBlock = options.genesisBlock;
    this.pow = options.pow;
    this.block = options.block;
    this.bip30 = options.bip30;
    this.activationThreshold = options.activationThreshold;
    this.minerWindow = options.minerWindow;
    this.deployments = options.deployments;
    this.deploys = options.deploys;
    this.unknownBits = ~consensus.VERSION_TOP_MASK;
    this.keyPrefix = options.keyPrefix;
    this.addressPrefix = options.addressPrefix;
    this.requireStandard = options.requireStandard;
    this.rpcPort = options.rpcPort;
    this.walletPort = options.walletPort;
    this.minRelay = options.minRelay;
    this.feeRate = options.feeRate;
    this.maxFeeRate = options.maxFeeRate;
    this.selfConnect = options.selfConnect;
    this.requestMempool = options.requestMempool;
    this.time = new TimeData();

    this.init();
  }

  /**
   * Get a deployment by bit index.
   * @returns {Object}
   */

  init() {
    let bits = 0;

    for (const deployment of this.deploys)
      bits |= 1 << deployment.bit;

    bits |= consensus.VERSION_TOP_MASK;

    this.unknownBits = ~bits >>> 0;

    for (const key of Object.keys(this.checkpointMap)) {
      const hash = this.checkpointMap[key];
      const height = Number(key);

      this.checkpoints.push({ hash, height });
    }

    this.checkpoints.sort(cmpNode);
  }

  /**
   * Get a deployment by bit index.
   * @param {Number} bit
   * @returns {Object}
   */

  byBit(bit) {
    const index = binary.search(this.deploys, bit, cmpBit);

    if (index === -1)
      return null;

    return this.deploys[index];
  }

  /**
   * Get network adjusted time.
   * @returns {Number}
   */

  now() {
    return this.time.now();
  }

  /**
   * Get network adjusted time in milliseconds.
   * @returns {Number}
   */

  ms() {
    return this.time.ms();
  }

  /**
   * Create a network. Get existing network if possible.
   * @param {NetworkType|Object} options
   * @returns {Network}
   */

  static create(options) {
    if (typeof options === 'string')
      options = networks[options];

    assert(options, 'Unknown network.');

    if (Network[options.type])
      return Network[options.type];

    const network = new Network(options);

    Network[network.type] = network;

    if (!Network.primary)
      Network.primary = network;

    return network;
  }

  /**
   * Set the default network. This network will be used
   * if nothing is passed as the `network` option for
   * certain objects.
   * @param {NetworkType} type - Network type.
   * @returns {Network}
   */

  static set(type) {
    assert(typeof type === 'string', 'Bad network.');
    Network.primary = Network.get(type);
    Network.type = type;
    return Network.primary;
  }

  /**
   * Get a network with a string or a Network object.
   * @param {NetworkType|Network} type - Network type.
   * @returns {Network}
   */

  static get(type) {
    if (!type) {
      assert(Network.primary, 'No default network.');
      return Network.primary;
    }

    if (type instanceof Network)
      return type;

    if (typeof type === 'string')
      return Network.create(type);

    throw new Error('Unknown network.');
  }

  /**
   * Get a network with a string or a Network object.
   * @param {NetworkType|Network} type - Network type.
   * @returns {Network}
   */

  static ensure(type) {
    if (!type) {
      assert(Network.primary, 'No default network.');
      return Network.primary;
    }

    if (type instanceof Network)
      return type;

    if (typeof type === 'string') {
      if (networks[type])
        return Network.create(type);
    }

    assert(Network.primary, 'No default network.');

    return Network.primary;
  }

  /**
   * Get a network by an associated comparator.
   * @private
   * @param {Object} value
   * @param {Function} compare
   * @param {Network|null} network
   * @param {String} name
   * @returns {Network}
   */

  static by(value, compare, network, name) {
    if (network) {
      network = Network.get(network);
      if (compare(network, value))
        return network;
      throw new Error(`Network mismatch for ${name}.`);
    }

    for (const type of networks.types) {
      network = networks[type];
      if (compare(network, value))
        return Network.get(type);
    }

    throw new Error(`Network not found for ${name}.`);
  }

  /**
   * Get a network by its magic number.
   * @param {Number} value
   * @param {Network?} network
   * @returns {Network}
   */

  static fromMagic(value, network) {
    return Network.by(value, cmpMagic, network, 'magic number');
  }

  /**
   * Get a network by its WIF prefix.
   * @param {Number} prefix
   * @param {Network?} network
   * @returns {Network}
   */

  static fromWIF(prefix, network) {
    return Network.by(prefix, cmpWIF, network, 'WIF');
  }

  /**
   * Get a network by its xpubkey prefix.
   * @param {Number} prefix
   * @param {Network?} network
   * @returns {Network}
   */

  static fromPublic(prefix, network) {
    return Network.by(prefix, cmpPub, network, 'xpubkey');
  }

  /**
   * Get a network by its xprivkey prefix.
   * @param {Number} prefix
   * @param {Network?} network
   * @returns {Network}
   */

  static fromPrivate(prefix, network) {
    return Network.by(prefix, cmpPriv, network, 'xprivkey');
  }

  /**
   * Get a network by its xpubkey base58 prefix.
   * @param {String} prefix
   * @param {Network?} network
   * @returns {Network}
   */

  static fromPublic58(prefix, network) {
    return Network.by(prefix, cmpPub58, network, 'xpubkey');
  }

  /**
   * Get a network by its xprivkey base58 prefix.
   * @param {String} prefix
   * @param {Network?} network
   * @returns {Network}
   */

  static fromPrivate58(prefix, network) {
    return Network.by(prefix, cmpPriv58, network, 'xprivkey');
  }

  /**
   * Get a network by its base58 address prefix.
   * @param {Number} prefix
   * @param {Network?} network
   * @returns {Network}
   */

  static fromBase58(prefix, network) {
    return Network.by(prefix, cmpBase58, network, 'base58 address');
  }

  /**
   * Get a network by its bech32 address prefix.
   * @param {String} hrp
   * @param {Network?} network
   * @returns {Network}
   */

  static fromBech32(hrp, network) {
    return Network.by(hrp, cmpBech32, network, 'bech32 address');
  }

  /**
   * Get a network by its bech32m address prefix.
   * @param {String} hrp
   * @param {Network?} network
   * @returns {Network}
   */

  static fromBech32m(hrp, network) {
    return Network.by(hrp, cmpBech32, network, 'bech32m address');
  }

  /**
   * Convert the network to a string.
   * @returns {String}
   */

  toString() {
    return this.type;
  }

  /**
   * Inspect the network.
   * @returns {String}
   */

  [inspectSymbol]() {
    return `<Network: ${this.type}>`;
  }

  /**
   * Test an object to see if it is a Network.
   * @param {Object} obj
   * @returns {Boolean}
   */

  static isNetwork(obj) {
    return obj instanceof Network;
  }
}

/**
 * Default network.
 * @type {Network}
 */

Network.primary = null;

/**
 * Default network type.
 * @type {String}
 */

Network.type = null;

/*
 * Networks (to avoid hash table mode).
 */

Network.main = null;
Network.testnet = null;
Network.regtest = null;
Network.simnet = null;

/*
 * Set initial network.
 */

Network.set(process.env.BCOIN_NETWORK || 'main');

/*
 * Helpers
 */

function cmpBit(a, b) {
  return a.bit - b;
}

function cmpNode(a, b) {
  return a.height - b.height;
}

function cmpMagic(network, magic) {
  return network.magic === magic;
}

function cmpWIF(network, prefix) {
  return network.keyPrefix.privkey === prefix;
}

function cmpPub(network, prefix) {
  return network.keyPrefix.xpubkey === prefix;
}

function cmpPriv(network, prefix) {
  return network.keyPrefix.xprivkey === prefix;
}

function cmpPub58(network, prefix) {
  return network.keyPrefix.xpubkey58 === prefix;
}

function cmpPriv58(network, prefix) {
  return network.keyPrefix.xprivkey58 === prefix;
}

function cmpBase58(network, prefix) {
  const prefixes = network.addressPrefix;

  switch (prefix) {
    case prefixes.pubkeyhash:
    case prefixes.scripthash:
      return true;
  }

  return false;
}

function cmpBech32(network, hrp) {
  return network.addressPrefix.bech32 === hrp;
}

/*
 * Expose
 */

module.exports = Network;
}],
[/* 73 */ 'bcoin', '/lib/protocol/networks.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * network.js - bitcoin networks for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

/**
 * @module protocol/networks
 */

const BN = __browser_require__(50 /* 'bcrypto/lib/bn.js' */, module);

const network = exports;

/*
 * Helpers
 */

function b(hash) {
  return Buffer.from(hash, 'hex');
}

/**
 * Network type list.
 * @memberof module:protocol/networks
 * @const {String[]}
 * @default
 */

network.types = ['main', 'testnet', 'regtest', 'simnet'];

/**
 * Mainnet
 * @static
 * @lends module:protocol/networks
 * @type {Object}
 */

const main = {};

/**
 * Symbolic network type.
 * @const {String}
 * @default
 */

main.type = 'main';

/**
 * Default DNS seeds.
 * @const {String[]}
 * @default
 */

main.seeds = [
  'seed.bitcoin.sipa.be', // Pieter Wuille
  'dnsseed.bluematt.me', // Matt Corallo
  'dnsseed.bitcoin.dashjr.org', // Luke Dashjr
  'seed.bitcoinstats.com', // Christian Decker
  'seed.bitcoin.jonasschnelli.ch', // Jonas Schnelli
  'seed.btc.petertodd.org', // Peter Todd
  'seed.bitcoin.sprovoost.nl', // Sjors Provoost
  'dnsseed.emzy.de' // Stephan Oeste
];

/**
 * Packet magic number.
 * @const {Number}
 * @default
 */

main.magic = 0xd9b4bef9;

/**
 * Default network port.
 * @const {Number}
 * @default
 */

main.port = 8333;

/**
 * Checkpoint block list.
 * @const {Object}
 */

main.checkpointMap = {
  11111: b('1d7c6eb2fd42f55925e92efad68b61edd22fba29fde8783df744e26900000000'),
  33333: b('a6d0b5df7d0df069ceb1e736a216ad187a50b07aaa4e78748a58d52d00000000'),
  74000: b('201a66b853f9e7814a820e2af5f5dc79c07144e31ce4c9a39339570000000000'),
  105000: b('97dc6b1d15fbeef373a744fee0b254b0d2c820a3ae7f0228ce91020000000000'),
  134444: b('feb0d2420d4a18914c81ac30f494a5d4ff34cd15d34cfd2fb105000000000000'),
  168000: b('63b703835cb735cb9a89d733cbe66f212f63795e0172ea619e09000000000000'),
  193000: b('17138bca83bdc3e6f60f01177c3877a98266de40735f2a459f05000000000000'),
  210000: b('2e3471a19b8e22b7f939c63663076603cf692f19837e34958b04000000000000'),
  216116: b('4edf231bf170234e6a811460f95c94af9464e41ee833b4f4b401000000000000'),
  225430: b('32595730b165f097e7b806a679cf7f3e439040f750433808c101000000000000'),
  250000: b('14d2f24d29bed75354f3f88a5fb50022fc064b02291fdf873800000000000000'),
  279000: b('407ebde958e44190fa9e810ea1fc3a7ef601c3b0a0728cae0100000000000000'),
  295000: b('83a93246c67003105af33ae0b29dd66f689d0f0ff54e9b4d0000000000000000'),
  300255: b('b2f3a0f0de4120c1089d5f5280a263059f9b6e7c520428160000000000000000'),
  319400: b('3bf115fd057391587ca39a531c5d4989e1adec9b2e05c6210000000000000000'),
  343185: b('548536d48e7678fcfa034202dd45d4a76b1ad061f38b2b070000000000000000'),
  352940: b('ffc9520143e41c94b6e03c2fa3e62bb76b55ba2df45d75100000000000000000'),
  382320: b('b28afdde92b0899715e40362f56afdb20e3d135bedc68d0a0000000000000000'),
  401465: b('eed16cb3e893ed9366f27c39a9ecd95465d02e3ef40e45010000000000000000'),
  420000: b('a1ff746b2d42b834cb7d6b8981b09c265c2cabc016e8cc020000000000000000'),
  440000: b('9bf296b8de5f834f7635d5e258a434ad51b4dbbcf7c08c030000000000000000'),
  450000: b('0ba2070c62cd9da1f8cef88a0648c661a411d33e728340010000000000000000'),
  460000: b('8c25fc7e414d3e868d6ce0ec473c30ad44e7e8bc1b75ef000000000000000000'),
  470000: b('89756d1ed75901437300af10d5ab69070a282e729c536c000000000000000000'),
  480000: b('b1a896fd31e639e0c74d1abeb1dbc93f176b767a5d4c02010000000000000000'),
  490000: b('90dec4d0153f20fbdcb245b1d5fb3d5a8d7bb1379106de000000000000000000'),
  500000: b('045d94a1c33354c3759cc0512dcc49fd81bf4c3637fb24000000000000000000'),
  510000: b('297301b8ca28584cb0c31c7e3fed51696bc33ef8782615000000000000000000'),
  525000: b('1dde8e3fb49bbd5ab66a1b847544d67fff10b108a1fa2f000000000000000000')
};

/**
 * Last checkpoint height.
 * @const {Number}
 * @default
 */

main.lastCheckpoint = 525000;

main.txnData = {
  rate: 2.925802860942233,
  time: 1661697692,
  count: 760120522
};

/**
 * @const {Number}
 * @default
 */

main.halvingInterval = 210000;

/**
 * Genesis block header.
 * @const {Object}
 */

main.genesis = {
  version: 1,
  hash: b('6fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000'),
  prevBlock:
    b('0000000000000000000000000000000000000000000000000000000000000000'),
  merkleRoot:
    b('3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a'),
  time: 1231006505,
  bits: 486604799,
  nonce: 2083236893,
  height: 0
};

/**
 * The network's genesis block in a hex string.
 * @const {String}
 */

main.genesisBlock =
  '0100000000000000000000000000000000000000000000000000000000000000000000'
  + '003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a29ab'
  + '5f49ffff001d1dac2b7c01010000000100000000000000000000000000000000000000'
  + '00000000000000000000000000ffffffff4d04ffff001d0104455468652054696d6573'
  + '2030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66'
  + '207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01'
  + '000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f'
  + '61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f'
  + 'ac00000000';

/**
 * POW-related constants.
 * @enum {Number}
 * @default
 */

main.pow = {
  /**
   * Default target.
   * @const {BN}
   */

  limit: new BN(
    '00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    'hex'
  ),

  /**
   * Compact pow limit.
   * @const {Number}
   * @default
   */

  bits: 486604799,

  /**
   * Minimum chainwork for best chain.
   * @const {BN}
   */

  chainwork: new BN(
    '00000000000000000000000000000000000000000259c9b7d8c7779d29a1188f',
    'hex'
  ),

  /**
   * Desired retarget period in seconds.
   * @const {Number}
   * @default
   */

  targetTimespan: 14 * 24 * 60 * 60,

  /**
   * Average block time.
   * @const {Number}
   * @default
   */

  targetSpacing: 10 * 60,

  /**
   * Retarget interval in blocks.
   * @const {Number}
   * @default
   */

  retargetInterval: 2016,

  /**
   * Whether to reset target if a block
   * has not been mined recently.
   * @const {Boolean}
   * @default
   */

  targetReset: false,

  /**
   * Do not allow retargetting.
   * @const {Boolean}
   * @default
   */

  noRetargeting: false
};

/**
 * Block constants.
 * @enum {Number}
 * @default
 */

main.block = {
  /**
   * Height at which bip34 was activated.
   * Used for avoiding bip30 checks.
   */

  bip34height: 227931,

  /**
   * Hash of the block that activated bip34.
   */

  bip34hash:
    b('b808089c756add1591b1d17bab44bba3fed9e02f942ab4894b02000000000000'),

  /**
   * Height at which bip65 was activated.
   */

  bip65height: 388381,

  /**
   * Hash of the block that activated bip65.
   */

  bip65hash:
    b('f035476cfaeb9f677c2cdad00fd908c556775ded24b6c2040000000000000000'),

  /**
   * Height at which bip66 was activated.
   */

  bip66height: 363725,

  /**
   * Hash of the block that activated bip66.
   */

  bip66hash:
    b('3109b588941188a9f1c2576aae462d729b8cce9da1ea79030000000000000000'),

  /**
   * Safe height to start pruning.
   */

  pruneAfterHeight: 1000,

  /**
   * Safe number of blocks to keep.
   */

  keepBlocks: 288,

  /**
   * Age used for the time delta to
   * determine whether the chain is synced.
   */

  maxTipAge: 24 * 60 * 60,

  /**
   * Height at which block processing is
   * slow enough that we can output
   * logs without spamming.
   */

  slowHeight: 325000
};

/**
 * Map of historical blocks which create duplicate transactions hashes.
 * @see https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki
 * @const {Object}
 * @default
 */

main.bip30 = {
  91842: b('eccae000e3c8e4e093936360431f3b7603c563c1ff6181390a4d0a0000000000'),
  91880: b('21d77ccb4c08386a04ac0196ae10f6a1d2c2a377558ca190f143070000000000')
};

/**
 * For versionbits.
 * @const {Number}
 * @default
 */

main.activationThreshold = 1916; // 95% of 2016

/**
 * Confirmation window for versionbits.
 * @const {Number}
 * @default
 */

main.minerWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing

/**
 * Deployments for versionbits.
 * @const {Object}
 * @default
 */

main.deployments = {
  csv: {
    name: 'csv',
    bit: 0,
    startTime: 1462060800, // May 1st, 2016
    timeout: 1493596800, // May 1st, 2017
    threshold: -1,
    window: -1,
    required: false,
    force: true
  },
  segwit: {
    name: 'segwit',
    bit: 1,
    startTime: 1479168000, // November 15th, 2016.
    timeout: 1510704000, // November 15th, 2017.
    threshold: -1,
    window: -1,
    required: true,
    force: false
  },
  segsignal: {
    name: 'segsignal',
    bit: 4,
    startTime: 1496275200, // June 1st, 2017.
    timeout: 1510704000, // November 15th, 2017.
    threshold: 269, // 80%
    window: 336, // ~2.33 days
    required: false,
    force: false
  },
  testdummy: {
    name: 'testdummy',
    bit: 28,
    startTime: 1199145601, // January 1, 2008
    timeout: 1230767999, // December 31, 2008
    threshold: -1,
    window: -1,
    required: false,
    force: true
  }
};

/**
 * Deployments for versionbits (array form, sorted).
 * @const {Array}
 * @default
 */

main.deploys = [
  main.deployments.csv,
  main.deployments.segwit,
  main.deployments.segsignal,
  main.deployments.testdummy
];

/**
 * Key prefixes.
 * @enum {Number}
 * @default
 */

main.keyPrefix = {
  privkey: 0x80,
  xpubkey: 0x0488b21e,
  xprivkey: 0x0488ade4,
  xpubkey58: 'xpub',
  xprivkey58: 'xprv',
  coinType: 0
};

/**
 * {@link Address} prefixes.
 * @enum {Number}
 */

main.addressPrefix = {
  pubkeyhash: 0x00,
  scripthash: 0x05,
  bech32: 'bc'
};

/**
 * Default value for whether the mempool
 * accepts non-standard transactions.
 * @const {Boolean}
 * @default
 */

main.requireStandard = true;

/**
 * Default http port.
 * @const {Number}
 * @default
 */

main.rpcPort = 8332;

/**
 * Default wallet port.
 * @const {Number}
 * @default
 */

main.walletPort = 8334;

/**
 * Default min relay rate.
 * @const {Rate}
 * @default
 */

main.minRelay = 1000;

/**
 * Default normal relay rate.
 * @const {Rate}
 * @default
 */

main.feeRate = 5000;

/**
 * Maximum normal relay rate.
 * @const {Rate}
 * @default
 */

main.maxFeeRate = 400000;

/**
 * Whether to allow self-connection.
 * @const {Boolean}
 */

main.selfConnect = false;

/**
 * Whether to request mempool on sync.
 * @const {Boolean}
 */

main.requestMempool = false;

/*
 * Testnet (v3)
 * https://en.bitcoin.it/wiki/Testnet
 */

const testnet = {};

testnet.type = 'testnet';

testnet.seeds = [
  'testnet-seed.bitcoin.jonasschnelli.ch', // Jonas Schnelli
  'seed.tbtc.petertodd.org', // Peter Todd
  'testnet-seed.bluematt.me', // Matt Corallo
  'testnet-seed.bitcoin.schildbach.de', // Andreas Schildbach
  'seed.testnet.bitcoin.sprovoost.nl' // Sjors Provoost
];

testnet.magic = 0x0709110b;

testnet.port = 18333;

testnet.checkpointMap = {
  546: b('70cb6af7ebbcb1315d3414029c556c55f3e2fc353c4c9063a76c932a00000000'),
  10000: b('02a1b43f52591e53b660069173ac83b675798e12599dbb0442b7580000000000'),
  50000: b('0c6ceabe803cec55ba2831e445956d0a43ba9521743a802cddac7e0700000000'),
  90000: b('cafc21e17faf90461a5905aa03302c394912651ed9475ae711723e0d00000000'),
  100000: b('1e0a16bbadccde1d80c66597b1939e45f91b570d29f95fc158299e0000000000'),
  140000: b('92c0877b54c556889b72175ccbe0c91a1208f6ef7efb2c006101062300000000'),
  170000: b('508125560d202b89757889bb0e49c712477be20440058f05db4f0e0000000000'),
  210000: b('32365454b5f29a826bff8ad9b0448cad0072fc73d50e482d91a3dece00000000'),
  230000: b('b11a447e62643e0b27406eb0fc270cb8126d7b5b70822fb642d9513400000000'),
  270000: b('1c42b811cf9c163932f6e95ec55bf9b5e2cb5324e7e93001572e000000000000'),
  300000: b('a141bf3972424853f04367b47995e220e0b5a2706e5618766f22000000000000'),
  340000: b('67edd4d92e405608109164b15f92b193377d49325b0ed036739c010000000000'),
  350000: b('592b44bc0f7a4286cf07ead8497114c6952c1c7dea7305193deacf8e00000000'),
  390000: b('f217e183484fb6d695609cc71fa2ae24c3020943407e0150b298030000000000'),
  420000: b('de9e73a3b91fbb014e036e8583a17d6b638a699aeb2de8573d12580800000000'),
  460000: b('2e8baaffc107f15c87aebe01664b63d07476afa53bcbada1281a030000000000'),
  500000: b('06f60922a2aab2757317820fc6ffaf6a470e2cbb0f63a2aac0a7010000000000'),
  540000: b('8dd0bebfbc4878f5af09d3e848dcc57827d2c1cebea8ec5d8cbe420500000000'),
  570000: b('87acbd4cd3c40ec9bd648f8698ed226b31187274c06cc7a9af79030000000000'),
  600000: b('169a05b3bb04b7d13ad628915630900a5ed2e89f3a9dc6064f62000000000000'),
  630000: b('bbbe117035432a6a4effcb297207a02b031735b43e0d19a9217c000000000000'),
  670000: b('080bfe75caed8624fcfdfbc65973c8f962d7bdc495a891f5d16b7d0000000000'),
  700000: b('c14d3f6a1e7c7d66fd940951e44f3c3be1273bea4d2ab1786140000000000000'),
  740000: b('b3b423f0462fd78a01e4f1a59a2737a0525b5dbb9bba0b4634f9000000000000'),
  780000: b('0381582e34c3755964dc2813e2b33e521e5596367144e1670851050000000000'),
  800000: b('03b5f8ab257e02903f509f5ff2935220eec2e77b1819651d099b200000000000'),
  840000: b('dac1648107bd4394e57e4083c86d42b548b1cfb119665f179ea80a0000000000'),
  880000: b('ff90b4bb07eded8e96715bf595c09c7d21dd8c61b8306ff48705d60000000000'),
  900000: b('9bd8ac418beeb1a2cf5d68c8b5c6ebaa947a5b766e5524898d6f350000000000'),
  940000: b('c98f1651a475b00d12f8c25eb166ee843affaa90610e36a19d68030000000000'),
  980000: b('cc8e9774542d044a9698ca2336ae02d5987157e676f1c76aa3877c0000000000'),
  1010000:
    b('9d9fb11abc2712d80368229e97b8d827b2a07d27eb5335e5c924000000000000'),
  1050000: b('d8190cf0af7f08e179cab51d67db0b44b87951a78f7fdc31b4a01a0000000000')
};

testnet.lastCheckpoint = 1050000;

testnet.txnData = {
  rate: 0.1079119341520164,
  time: 1661705221,
  count: 63531852
};

testnet.halvingInterval = 210000;

testnet.genesis = {
  version: 1,
  hash: b('43497fd7f826957108f4a30fd9cec3aeba79972084e90ead01ea330900000000'),
  prevBlock:
    b('0000000000000000000000000000000000000000000000000000000000000000'),
  merkleRoot:
    b('3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a'),
  time: 1296688602,
  bits: 486604799,
  nonce: 414098458,
  height: 0
};

testnet.genesisBlock =
  '0100000000000000000000000000000000000000000000000000000000000000000000'
  + '003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5'
  + '494dffff001d1aa4ae1801010000000100000000000000000000000000000000000000'
  + '00000000000000000000000000ffffffff4d04ffff001d0104455468652054696d6573'
  + '2030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66'
  + '207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01'
  + '000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f'
  + '61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f'
  + 'ac00000000';

testnet.pow = {
  limit: new BN(
    '00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    'hex'
  ),
  bits: 486604799,
  chainwork: new BN(
    '000000000000000000000000000000000000000000000062b7123cfd7d09f7b6',
    'hex'
  ),
  targetTimespan: 14 * 24 * 60 * 60,
  targetSpacing: 10 * 60,
  retargetInterval: 2016,
  targetReset: true,
  noRetargeting: false
};

testnet.block = {
  bip34height: 21111,
  bip34hash:
    b('f88ecd9912d00d3f5c2a8e0f50417d3e415c75b3abe584346da9b32300000000'),
  bip65height: 581885,
  bip65hash:
    b('b61e864fbec41dfaf09da05d1d76dc068b0dd82ee7982ff255667f0000000000'),
  bip66height: 330776,
  bip66hash:
    b('82a14b9e5ea81d4832b8e2cd3c2a6092b5a3853285a8995ec4c8042100000000'),
  pruneAfterHeight: 1000,
  keepBlocks: 10000,
  maxTipAge: 24 * 60 * 60,
  slowHeight: 950000
};

testnet.bip30 = {};

testnet.activationThreshold = 1512; // 75% for testchains

testnet.minerWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing

testnet.deployments = {
  csv: {
    name: 'csv',
    bit: 0,
    startTime: 1456790400, // March 1st, 2016
    timeout: 1493596800, // May 1st, 2017
    threshold: -1,
    window: -1,
    required: false,
    force: true
  },
  segwit: {
    name: 'segwit',
    bit: 1,
    startTime: 1462060800, // May 1st 2016
    timeout: 1493596800, // May 1st 2017
    threshold: -1,
    window: -1,
    required: true,
    force: false
  },
  segsignal: {
    name: 'segsignal',
    bit: 4,
    startTime: 0xffffffff,
    timeout: 0xffffffff,
    threshold: 269,
    window: 336,
    required: false,
    force: false
  },
  testdummy: {
    name: 'testdummy',
    bit: 28,
    startTime: 1199145601, // January 1, 2008
    timeout: 1230767999, // December 31, 2008
    threshold: -1,
    window: -1,
    required: false,
    force: true
  }
};

testnet.deploys = [
  testnet.deployments.csv,
  testnet.deployments.segwit,
  testnet.deployments.segsignal,
  testnet.deployments.testdummy
];

testnet.keyPrefix = {
  privkey: 0xef,
  xpubkey: 0x043587cf,
  xprivkey: 0x04358394,
  xpubkey58: 'tpub',
  xprivkey58: 'tprv',
  coinType: 1
};

testnet.addressPrefix = {
  pubkeyhash: 0x6f,
  scripthash: 0xc4,
  bech32: 'tb'
};

testnet.requireStandard = false;

testnet.rpcPort = 18332;

testnet.walletPort = 18334;

testnet.minRelay = 1000;

testnet.feeRate = 20000;

testnet.maxFeeRate = 60000;

testnet.selfConnect = false;

testnet.requestMempool = false;

/*
 * Regtest
 */

const regtest = {};

regtest.type = 'regtest';

regtest.seeds = [];

regtest.magic = 0xdab5bffa;

regtest.port = 48444;

regtest.checkpointMap = {};
regtest.lastCheckpoint = 0;

regtest.txnData = {
  rate: 0,
  time: 0,
  count: 0
};

regtest.halvingInterval = 150;

regtest.genesis = {
  version: 1,
  hash: b('06226e46111a0b59caaf126043eb5bbf28c34f3a5e332a1fc7b2b73cf188910f'),
  prevBlock:
    b('0000000000000000000000000000000000000000000000000000000000000000'),
  merkleRoot:
    b('3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a'),
  time: 1296688602,
  bits: 545259519,
  nonce: 2,
  height: 0
};

regtest.genesisBlock =
  '0100000000000000000000000000000000000000000000000000000000000000000000'
  + '003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5'
  + '494dffff7f200200000001010000000100000000000000000000000000000000000000'
  + '00000000000000000000000000ffffffff4d04ffff001d0104455468652054696d6573'
  + '2030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66'
  + '207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01'
  + '000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f'
  + '61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f'
  + 'ac00000000';

regtest.pow = {
  limit: new BN(
    '7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    'hex'
  ),
  bits: 545259519,
  chainwork: new BN(
    '0000000000000000000000000000000000000000000000000000000000000002',
    'hex'
  ),
  targetTimespan: 14 * 24 * 60 * 60,
  targetSpacing: 10 * 60,
  retargetInterval: 2016,
  targetReset: true,
  noRetargeting: true
};

regtest.block = {
  bip34height: 100000000,
  bip34hash: null,
  bip65height: 1351,
  bip65hash: null,
  bip66height: 1251,
  bip66hash: null,
  pruneAfterHeight: 1000,
  keepBlocks: 10000,
  maxTipAge: 0xffffffff,
  slowHeight: 0
};

regtest.bip30 = {};

regtest.activationThreshold = 108; // 75% for testchains

regtest.minerWindow = 144; // Faster than normal for regtest

regtest.deployments = {
  csv: {
    name: 'csv',
    bit: 0,
    startTime: 0,
    timeout: 0xffffffff,
    threshold: -1,
    window: -1,
    required: false,
    force: true
  },
  segwit: {
    name: 'segwit',
    bit: 1,
    startTime: -1,
    timeout: 0xffffffff,
    threshold: -1,
    window: -1,
    required: true,
    force: false
  },
  segsignal: {
    name: 'segsignal',
    bit: 4,
    startTime: 0xffffffff,
    timeout: 0xffffffff,
    threshold: 269,
    window: 336,
    required: false,
    force: false
  },
  testdummy: {
    name: 'testdummy',
    bit: 28,
    startTime: 0,
    timeout: 0xffffffff,
    threshold: -1,
    window: -1,
    required: false,
    force: true
  }
};

regtest.deploys = [
  regtest.deployments.csv,
  regtest.deployments.segwit,
  regtest.deployments.segsignal,
  regtest.deployments.testdummy
];

regtest.keyPrefix = {
  privkey: 0xef,
  xpubkey: 0x043587cf,
  xprivkey: 0x04358394,
  xpubkey58: 'tpub',
  xprivkey58: 'tprv',
  coinType: 1
};

regtest.addressPrefix = {
  pubkeyhash: 0x6f,
  scripthash: 0xc4,
  bech32: 'bcrt'
};

regtest.requireStandard = false;

regtest.rpcPort = 48332;

regtest.walletPort = 48334;

regtest.minRelay = 1000;

regtest.feeRate = 20000;

regtest.maxFeeRate = 60000;

regtest.selfConnect = true;

regtest.requestMempool = true;

/*
 * Simnet (btcd)
 */

const simnet = {};

simnet.type = 'simnet';

simnet.seeds = [
  '127.0.0.1'
];

simnet.magic = 0x12141c16;

simnet.port = 18555;

simnet.checkpointMap = {};

simnet.lastCheckpoint = 0;

simnet.txnData = {
  time: 0,
  count: 0,
  rate: 0
};

simnet.halvingInterval = 210000;

simnet.genesis = {
  version: 1,
  hash:
    b('f67ad7695d9b662a72ff3d8edbbb2de0bfa67b13974bb9910d116d5cbd863e68'),
  prevBlock:
    b('0000000000000000000000000000000000000000000000000000000000000000'),
  merkleRoot:
    b('3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a'),
  time: 1401292357,
  bits: 545259519,
  nonce: 2,
  height: 0
};

simnet.genesisBlock =
  '0100000000000000000000000000000000000000000000000000000000000000000000'
  + '003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a4506'
  + '8653ffff7f200200000001010000000100000000000000000000000000000000000000'
  + '00000000000000000000000000ffffffff4d04ffff001d0104455468652054696d6573'
  + '2030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66'
  + '207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01'
  + '000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f'
  + '61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f'
  + 'ac00000000';

simnet.pow = {
  limit: new BN(
    // High target of 0x207fffff (545259519)
    '7fffff0000000000000000000000000000000000000000000000000000000000',
    'hex'
  ),
  bits: 545259519,
  chainwork: new BN(
    '0000000000000000000000000000000000000000000000000000000000000002',
    'hex'
  ),
  targetTimespan: 14 * 24 * 60 * 60,
  targetSpacing: 10 * 60,
  retargetInterval: 2016,
  targetReset: true,
  noRetargeting: false
};

simnet.block = {
  bip34height: 0,
  bip34hash:
    b('f67ad7695d9b662a72ff3d8edbbb2de0bfa67b13974bb9910d116d5cbd863e68'),
  bip65height: 0,
  bip65hash:
    b('f67ad7695d9b662a72ff3d8edbbb2de0bfa67b13974bb9910d116d5cbd863e68'),
  bip66height: 0,
  bip66hash:
    b('f67ad7695d9b662a72ff3d8edbbb2de0bfa67b13974bb9910d116d5cbd863e68'),
  pruneAfterHeight: 1000,
  keepBlocks: 10000,
  maxTipAge: 0xffffffff,
  slowHeight: 0
};

simnet.bip30 = {};

simnet.activationThreshold = 75; // 75% for testchains

simnet.minerWindow = 100; // nPowTargetTimespan / nPowTargetSpacing

simnet.deployments = {
  csv: {
    name: 'csv',
    bit: 0,
    startTime: 0, // March 1st, 2016
    timeout: 0xffffffff, // May 1st, 2017
    threshold: -1,
    window: -1,
    required: false,
    force: true
  },
  segwit: {
    name: 'segwit',
    bit: 1,
    startTime: 0, // May 1st 2016
    timeout: 0xffffffff, // May 1st 2017
    threshold: -1,
    window: -1,
    required: true,
    force: false
  },
  segsignal: {
    name: 'segsignal',
    bit: 4,
    startTime: 0xffffffff,
    timeout: 0xffffffff,
    threshold: 269,
    window: 336,
    required: false,
    force: false
  },
  testdummy: {
    name: 'testdummy',
    bit: 28,
    startTime: 1199145601, // January 1, 2008
    timeout: 1230767999, // December 31, 2008
    threshold: -1,
    window: -1,
    required: false,
    force: true
  }
};

simnet.deploys = [
  simnet.deployments.csv,
  simnet.deployments.segwit,
  simnet.deployments.segsignal,
  simnet.deployments.testdummy
];

simnet.keyPrefix = {
  privkey: 0x64,
  xpubkey: 0x0420bd3a,
  xprivkey: 0x0420b900,
  xpubkey58: 'spub',
  xprivkey58: 'sprv',
  coinType: 115
};

simnet.addressPrefix = {
  pubkeyhash: 0x3f,
  scripthash: 0x7b,
  bech32: 'sb'
};

simnet.requireStandard = false;

simnet.rpcPort = 18556;

simnet.walletPort = 18558;

simnet.minRelay = 1000;

simnet.feeRate = 20000;

simnet.maxFeeRate = 60000;

simnet.selfConnect = false;

simnet.requestMempool = false;

/*
 * Expose
 */

network.main = main;
network.testnet = testnet;
network.regtest = regtest;
network.simnet = simnet;
}],
[/* 74 */ 'bcoin', '/lib/protocol/consensus.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * consensus.js - consensus constants and helpers for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

/**
 * @module protocol/consensus
 */

const assert = __browser_require__(2 /* 'bsert' */, module);
const BN = __browser_require__(50 /* 'bcrypto/lib/bn.js' */, module);

/**
 * One bitcoin in satoshis.
 * @const {Amount}
 * @default
 */

exports.COIN = 100000000;

/**
 * Maximum amount of money in satoshis:
 * `21million * 1btc` (consensus).
 * @const {Amount}
 * @default
 */

exports.MAX_MONEY = 21000000 * exports.COIN;

/**
 * Base block subsidy (consensus).
 * Note to shitcoin implementors: if you
 * increase this to anything greater than
 * 33 bits, getReward will have to be
 * modified to handle the shifts.
 * @const {Amount}
 * @default
 */

exports.BASE_REWARD = 50 * exports.COIN;

/**
 * Half base block subsidy. Required to
 * calculate the reward properly (with
 * only 32 bit shifts available).
 * @const {Amount}
 * @default
 */

exports.HALF_REWARD = Math.floor(exports.BASE_REWARD / 2);

/**
 * Maximum block base size (consensus).
 * @const {Number}
 * @default
 */

exports.MAX_BLOCK_SIZE = 1000000;

/**
 * Maximum block serialization size (protocol).
 * @const {Number}
 * @default
 */

exports.MAX_RAW_BLOCK_SIZE = 4000000;

/**
 * Maximum block weight (consensus).
 * @const {Number}
 * @default
 */

exports.MAX_BLOCK_WEIGHT = 4000000;

/**
 * Maximum block sigops (consensus).
 * @const {Number}
 * @default
 */

exports.MAX_BLOCK_SIGOPS = 1000000 / 50;

/**
 * Maximum block sigops cost (consensus).
 * @const {Number}
 * @default
 */

exports.MAX_BLOCK_SIGOPS_COST = 80000;

/**
 * Size of set to pick median time from.
 * @const {Number}
 * @default
 */

exports.MEDIAN_TIMESPAN = 11;

/**
 * What bits to set in version
 * for versionbits blocks.
 * @const {Number}
 * @default
 */

exports.VERSION_TOP_BITS = 0x20000000;

/**
 * What bitmask determines whether
 * versionbits is in use.
 * @const {Number}
 * @default
 */

exports.VERSION_TOP_MASK = 0xe0000000;

/**
 * Number of blocks before a coinbase
 * spend can occur (consensus).
 * @const {Number}
 * @default
 */

exports.COINBASE_MATURITY = 100;

/**
 * Amount to multiply base/non-witness sizes by.
 * @const {Number}
 * @default
 */

exports.WITNESS_SCALE_FACTOR = 4;

/**
 * nLockTime threshold for differentiating
 * between height and time (consensus).
 * Tue Nov 5 00:53:20 1985 UTC
 * @const {Number}
 * @default
 */

exports.LOCKTIME_THRESHOLD = 500000000;

/**
 * Highest nSequence bit -- disables
 * sequence locktimes (consensus).
 * @const {Number}
 */

exports.SEQUENCE_DISABLE_FLAG = (1 << 31) >>> 0;

/**
 * Sequence time: height or time (consensus).
 * @const {Number}
 * @default
 */

exports.SEQUENCE_TYPE_FLAG = 1 << 22;

/**
 * Sequence granularity for time (consensus).
 * @const {Number}
 * @default
 */

exports.SEQUENCE_GRANULARITY = 9;

/**
 * Sequence mask (consensus).
 * @const {Number}
 * @default
 */

exports.SEQUENCE_MASK = 0x0000ffff;

/**
 * Max serialized script size (consensus).
 * @const {Number}
 * @default
 */

exports.MAX_SCRIPT_SIZE = 10000;

/**
 * Max stack size during execution (consensus).
 * @const {Number}
 * @default
 */

exports.MAX_SCRIPT_STACK = 1000;

/**
 * Max script element size (consensus).
 * @const {Number}
 * @default
 */

exports.MAX_SCRIPT_PUSH = 520;

/**
 * Max opcodes executed (consensus).
 * @const {Number}
 * @default
 */

exports.MAX_SCRIPT_OPS = 201;

/**
 * Max `n` value for multisig (consensus).
 * @const {Number}
 * @default
 */

exports.MAX_MULTISIG_PUBKEYS = 20;

/**
 * The date bip16 (p2sh) was activated (consensus).
 * @const {Number}
 * @default
 */

exports.BIP16_TIME = 1333238400;

/**
 * A hash of all zeroes.
 * @const {Buffer}
 * @default
 */

exports.ZERO_HASH = Buffer.alloc(32, 0x00);

/**
 * Convert a compact number to a big number.
 * Used for `block.bits` -> `target` conversion.
 * @param {Number} compact
 * @returns {BN}
 */

exports.fromCompact = function fromCompact(compact) {
  if (compact === 0)
    return new BN(0);

  const exponent = compact >>> 24;
  const negative = (compact >>> 23) & 1;

  let mantissa = compact & 0x7fffff;
  let num;

  if (exponent <= 3) {
    mantissa >>>= 8 * (3 - exponent);
    num = new BN(mantissa);
  } else {
    num = new BN(mantissa);
    num.iushln(8 * (exponent - 3));
  }

  if (negative)
    num.ineg();

  return num;
};

/**
 * Convert a big number to a compact number.
 * Used for `target` -> `block.bits` conversion.
 * @param {BN} num
 * @returns {Number}
 */

exports.toCompact = function toCompact(num) {
  if (num.isZero())
    return 0;

  let exponent = num.byteLength();
  let mantissa;

  if (exponent <= 3) {
    mantissa = num.toNumber();
    mantissa <<= 8 * (3 - exponent);
  } else {
    mantissa = num.ushrn(8 * (exponent - 3)).toNumber();
  }

  if (mantissa & 0x800000) {
    mantissa >>= 8;
    exponent++;
  }

  let compact = (exponent << 24) | mantissa;

  if (num.isNeg())
    compact |= 0x800000;

  compact >>>= 0;

  return compact;
};

/**
 * Verify proof-of-work.
 * @param {Hash} hash
 * @param {Number} bits
 * @returns {Boolean}
 */

exports.verifyPOW = function verifyPOW(hash, bits) {
  const target = exports.fromCompact(bits);

  if (target.isNeg() || target.isZero())
    return false;

  if (target.bitLength() > 256)
    return false;

  const num = new BN(hash, 'le');

  if (num.gt(target))
    return false;

  return true;
};

/**
 * Calculate block subsidy.
 * @param {Number} height - Reward era by height.
 * @returns {Amount}
 */

exports.getReward = function getReward(height, interval) {
  assert(height >= 0, 'Bad height for reward.');

  const halvings = Math.floor(height / interval);

  // BIP 42 (well, our own version of it,
  // since we can only handle 32 bit shifts).
  // https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki
  if (halvings >= 33)
    return 0;

  // We need to shift right by `halvings`,
  // but 50 btc is a 33 bit number, so we
  // cheat. We only start halving once the
  // halvings are at least 1.
  if (halvings === 0)
    return exports.BASE_REWARD;

  return exports.HALF_REWARD >>> (halvings - 1);
};

/**
 * Test version bit.
 * @param {Number} version
 * @param {Number} bit
 * @returns {Boolean}
 */

exports.hasBit = function hasBit(version, bit) {
  const TOP_MASK = exports.VERSION_TOP_MASK;
  const TOP_BITS = exports.VERSION_TOP_BITS;
  const bits = (version & TOP_MASK) >>> 0;
  const mask = 1 << bit;
  return bits === TOP_BITS && (version & mask) !== 0;
};
}],
[/* 75 */ 'bcoin', '/lib/protocol/timedata.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * timedata.js - time management for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const EventEmitter = __browser_require__(76 /* 'events' */, module);
const util = __browser_require__(43 /* '../utils/util' */, module);
const binary = __browser_require__(41 /* '../utils/binary' */, module);

/**
 * Time Data
 * An object which handles "adjusted time". This may not
 * look it, but this is actually a semi-consensus-critical
 * piece of code. It handles version packets from peers
 * and calculates what to offset our system clock's time by.
 * @alias module:protocol.TimeData
 * @extends EventEmitter
 * @property {Array} samples
 * @property {Object} known
 * @property {Number} limit
 * @property {Number} offset
 */

class TimeData extends EventEmitter {
  /**
   * Create time data.
   * @constructor
   * @param {Number} [limit=200]
   */

  constructor(limit) {
    super();

    if (limit == null)
      limit = 200;

    this.samples = [];
    this.known = new Map();
    this.limit = limit;
    this.offset = 0;
    this.checked = false;
  }

  /**
   * Add time data.
   * @param {String} id
   * @param {Number} time
   */

  add(id, time) {
    if (this.samples.length >= this.limit)
      return;

    if (this.known.has(id))
      return;

    const sample = time - util.now();

    this.known.set(id, sample);

    binary.insert(this.samples, sample, compare);

    this.emit('sample', sample, this.samples.length);

    if (this.samples.length >= 5 && this.samples.length % 2 === 1) {
      let median = this.samples[this.samples.length >>> 1];

      if (Math.abs(median) >= 70 * 60) {
        if (!this.checked) {
          let match = false;

          for (const offset of this.samples) {
            if (offset !== 0 && Math.abs(offset) < 5 * 60) {
              match = true;
              break;
            }
          }

          if (!match) {
            this.checked = true;
            this.emit('mismatch');
          }
        }

        median = 0;
      }

      this.offset = median;
      this.emit('offset', this.offset);
    }
  }

  /**
   * Get the current adjusted time.
   * @returns {Number} Adjusted Time.
   */

  now() {
    return util.now() + this.offset;
  }

  /**
   * Adjust a timestamp.
   * @param {Number} time
   * @returns {Number} Adjusted Time.
   */

  adjust(time) {
    return time + this.offset;
  }

  /**
   * Unadjust a timestamp.
   * @param {Number} time
   * @returns {Number} Local Time.
   */

  local(time) {
    return time - this.offset;
  }

  /**
   * Get the current adjusted time in milliseconds.
   * @returns {Number} Adjusted Time.
   */

  ms() {
    return Date.now() + this.offset * 1000;
  }
}

/*
 * Helpers
 */

function compare(a, b) {
  return a - b;
}

/*
 * Expose
 */

module.exports = TimeData;
}],
[/* 76 */ 'bpkg', '/lib/builtins/events.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * events@3.0.0 - Node's event emitter for all engines.
 * Copyright (c) 2019, Irakli Gozalishvili (MIT)
 * https://github.com/Gozala/events#readme
 *
 * License for events@3.0.0:
 *
 * MIT
 *
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
}],
[/* 77 */ 'bcoin', '/lib/hd/public.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * public.js - hd public keys for bcoin
 * Copyright (c) 2015-2016, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */

'use strict';

const assert = __browser_require__(2 /* 'bsert' */, module);
const bio = __browser_require__(7 /* 'bufio' */, module);
const base58 = __browser_require__(67 /* 'bcrypto/lib/encoding/base58' */, module);
const sha512 = __browser_require__(26 /* 'bcrypto/lib/sha512' */, module);
const hash160 = __browser_require__(69 /* 'bcrypto/lib/hash160' */, module);
const hash256 = __browser_require__(45 /* 'bcrypto/lib/hash256' */, module);
const cleanse = __browser_require__(20 /* 'bcrypto/lib/cleanse' */, module);
const secp256k1 = __browser_require__(47 /* 'bcrypto/lib/secp256k1' */, module);
const Network = __browser_require__(72 /* '../protocol/network' */, module);
const consensus = __browser_require__(74 /* '../protocol/consensus' */, module);
const common = __browser_require__(3 /* './common' */, module);

/**
 * HDPublicKey
 * @alias module:hd.PublicKey
 * @property {Number} depth
 * @property {Number} parentFingerPrint
 * @property {Number} childIndex
 * @property {Buffer} chainCode
 * @property {Buffer} publicKey
 */

class HDPublicKey {
  /**
   * Create an HD public key.
   * @constructor
   * @param {Object|Base58String} options
   * @param {Base58String?} options.xkey - Serialized base58 key.
   * @param {Number?} options.depth
   * @param {Number?} options.parentFingerPrint
   * @param {Number?} options.childIndex
   * @param {Buffer?} options.chainCode
   * @param {Buffer?} options.publicKey
   */

  constructor(options) {
    this.depth = 0;
    this.parentFingerPrint = 0;
    this.childIndex = 0;
    this.chainCode = consensus.ZERO_HASH;
    this.publicKey = common.ZERO_KEY;

    this.fingerPrint = -1;

    if (options)
      this.fromOptions(options);
  }

  /**
   * Inject properties from options object.
   * @private
   * @param {Object} options
   */

  fromOptions(options) {
    assert(options, 'No options for HDPublicKey');
    assert((options.depth & 0xff) === options.depth);
    assert((options.parentFingerPrint >>> 0) === options.parentFingerPrint);
    assert((options.childIndex >>> 0) === options.childIndex);
    assert((options.chainCode != null && options.chainCode._isBuffer === true));
    assert((options.publicKey != null && options.publicKey._isBuffer === true));

    this.depth = options.depth;
    this.parentFingerPrint = options.parentFingerPrint;
    this.childIndex = options.childIndex;
    this.chainCode = options.chainCode;
    this.publicKey = options.publicKey;

    return this;
  }

  /**
   * Instantiate HD public key from options object.
   * @param {Object} options
   * @returns {HDPublicKey}
   */

  static fromOptions(options) {
    return new this().fromOptions(options);
  }

  /**
   * Get HD public key (self).
   * @returns {HDPublicKey}
   */

  toPublic() {
    return this;
  }

  /**
   * Get cached base58 xprivkey (always null here).
   * {(Network|NetworkType)?} network
   * @returns {null}
   */

  xprivkey(network) {
    return null;
  }

  /**
   * Get cached base58 xpubkey.
   * {(Network|NetworkType)?} network
   * @returns {Base58String}
   */

  xpubkey(network) {
    return this.toBase58(network);
  }

  /**
   * Destroy the key (zeroes chain code and pubkey).
   */

  destroy() {
    this.depth = 0;
    this.childIndex = 0;
    this.parentFingerPrint = 0;

    cleanse(this.chainCode);
    cleanse(this.publicKey);

    this.fingerPrint = -1;
  }

  /**
   * Derive a child key.
   * @param {Number} index - Derivation index.
   * @param {Boolean?} hardened - Whether the derivation
   * should be hardened (throws if true).
   * @returns {HDPrivateKey}
   * @throws on `hardened`
   */

  derive(index, hardened) {
    assert(typeof index === 'number');

    if ((index >>> 0) !== index)
      throw new Error('Index out of range.');

    if ((index & common.HARDENED) || hardened)
      throw new Error('Cannot derive hardened.');

    if (this.depth >= 0xff)
      throw new Error('Depth too high.');

    const id = this.getID(index);
    const cache = common.cache.get(id);

    if (cache)
      return cache;

    const bw = bio.pool(37);

    bw.writeBytes(this.publicKey);
    bw.writeU32BE(index);

    const data = bw.render();

    const hash = sha512.mac(data, this.chainCode);
    const left = hash.slice(0, 32);
    const right = hash.slice(32, 64);

    let key;
    try {
      key = secp256k1.publicKeyTweakAdd(this.publicKey, left, true);
    } catch (e) {
      return this.derive(index + 1);
    }

    if (this.fingerPrint === -1) {
      const fp = hash160.digest(this.publicKey);
      this.fingerPrint = fp.readUInt32BE(0, true);
    }

    const child = new this.constructor();
    child.depth = this.depth + 1;
    child.parentFingerPrint = this.fingerPrint;
    child.childIndex = index;
    child.chainCode = right;
    child.publicKey = key;

    common.cache.set(id, child);

    return child;
  }

  /**
   * Unique HD key ID.
   * @private
   * @param {Number} index
   * @returns {String}
   */

  getID(index) {
    return 'b' + this.publicKey.toString('hex') + index;
  }

  /**
   * Derive a BIP44 account key (does not derive, only ensures account key).
   * @method
   * @param {Number} purpose
   * @param {Number} type
   * @param {Number} account
   * @returns {HDPublicKey}
   * @throws Error if key is not already an account key.
   */

  deriveAccount(purpose, type, account) {
    assert((purpose >>> 0) === purpose);
    assert((type >>> 0) === type);
    assert((account >>> 0) === account);
    assert(this.isAccount(account), 'Cannot derive account index.');
    return this;
  }

  /**
   * Test whether the key is a master key.
   * @method
   * @returns {Boolean}
   */

  isMaster() {
    return common.isMaster(this);
  }

  /**
   * Test whether the key is (most likely) a BIP44 account key.
   * @method
   * @param {Number?} account
   * @returns {Boolean}
   */

  isAccount(account) {
    return common.isAccount(this, account);
  }

  /**
   * Test whether a string is a valid path.
   * @param {String} path
   * @returns {Boolean}
   */

  static isValidPath(path) {
    try {
      common.parsePath(path, false);
      return true;
    } catch (e) {
      return false;
    }
  }

  /**
   * Derive a key from a derivation path.
   * @param {String} path
   * @returns {HDPublicKey}
   * @throws Error if `path` is not a valid path.
   * @throws Error if hardened.
   */

  derivePath(path) {
    const indexes = common.parsePath(path, false);

    let key = this;

    for (const index of indexes)
      key = key.derive(index);

    return key;
  }

  /**
   * Compare a key against an object.
   * @param {Object} obj
   * @returns {Boolean}
   */

  equals(obj) {
    assert(HDPublicKey.isHDPublicKey(obj));

    return this.depth === obj.depth
      && this.parentFingerPrint === obj.parentFingerPrint
      && this.childIndex === obj.childIndex
      && this.chainCode.equals(obj.chainCode)
      && this.publicKey.equals(obj.publicKey);
  }

  /**
   * Compare a key against an object.
   * @returns {Boolean}
   */

  compare(key) {
    assert(HDPublicKey.isHDPublicKey(key));

    let cmp = this.depth - key.depth;

    if (cmp !== 0)
      return cmp;

    cmp = this.parentFingerPrint - key.parentFingerPrint;

    if (cmp !== 0)
      return cmp;

    cmp = this.childIndex - key.childIndex;

    if (cmp !== 0)
      return cmp;

    cmp = this.chainCode.compare(key.chainCode);

    if (cmp !== 0)
      return cmp;

    cmp = this.publicKey.compare(key.publicKey);

    if (cmp !== 0)
      return cmp;

    return 0;
  }

  /**
   * Convert key to a more json-friendly object.
   * {(Network|NetworkType)?} network
   * @returns {Object}
   */

  toJSON(network) {
    return {
      xpubkey: this.xpubkey(network)
    };
  }

  /**
   * Inject properties from json object.
   * @private
   * @param {Object} json
   * @param {Network?} network
   */

  fromJSON(json, network) {
    assert(json.xpubkey, 'Could not handle HD key JSON.');
    this.fromBase58(json.xpubkey, network);
    return this;
  }

  /**
   * Instantiate an HDPublicKey from a jsonified key object.
   * @param {Object} json - The jsonified transaction object.
   * @param {Network?} network
   * @returns {HDPrivateKey}
   */

  static fromJSON(json, network) {
    return new this().fromJSON(json, network);
  }

  /**
   * Test whether an object is in the form of a base58 xpubkey.
   * @param {String} data
   * @param {(Network|NetworkType)?} network
   * @returns {Boolean}
   */

  static isBase58(data, network) {
    if (typeof data !== 'string')
      return false;

    if (data.length < 4)
      return false;

    const prefix = data.substring(0, 4);

    try {
      Network.fromPublic58(prefix, network);
      return true;
    } catch (e) {
      return false;
    }
  }

  /**
   * Test whether a buffer has a valid network prefix.
   * @param {Buffer} data
   * @param {(Network|NetworkType)?} network
   * @returns {NetworkType}
   */

  static isRaw(data, network) {
    if (!(data != null && data._isBuffer === true))
      return false;

    if (data.length < 4)
      return false;

    const version = data.readUInt32BE(0, true);

    try {
      Network.fromPublic(version, network);
      return true;
    } catch (e) {
      return false;
    }
  }

  /**
   * Inject properties from a base58 key.
   * @private
   * @param {Base58String} xkey
   * @param {Network?} network
   */

  fromBase58(xkey, network) {
    assert(typeof xkey === 'string');
    return this.fromRaw(base58.decode(xkey), network);
  }

  /**
   * Inject properties from serialized data.
   * @private
   * @param {BufferReader} br
   * @param {(Network|NetworkType)?} network
   */

  fromReader(br, network) {
    const version = br.readU32BE();

    Network.fromPublic(version, network);

    this.depth = br.readU8();
    this.parentFingerPrint = br.readU32BE();
    this.childIndex = br.readU32BE();
    this.chainCode = br.readBytes(32);
    this.publicKey = br.readBytes(33);

    br.verifyChecksum(hash256.digest);

    return this;
  }

  /**
   * Inject properties from serialized data.
   * @private
   * @param {Buffer} data
   * @param {(Network|NetworkType)?} network
   */

  fromRaw(data, network) {
    return this.fromReader(bio.read(data), network);
  }

  /**
   * Serialize key data to base58 extended key.
   * @param {(Network|NetworkType)?} network
   * @returns {Base58String}
   */

  toBase58(network) {
    return base58.encode(this.toRaw(network));
  }

  /**
   * Write the key to a buffer writer.
   * @param {BufferWriter} bw
   * @param {(Network|NetworkType)?} network
   */

  toWriter(bw, network) {
    network = Network.get(network);

    bw.writeU32BE(network.keyPrefix.xpubkey);
    bw.writeU8(this.depth);
    bw.writeU32BE(this.parentFingerPrint);
    bw.writeU32BE(this.childIndex);
    bw.writeBytes(this.chainCode);
    bw.writeBytes(this.publicKey);
    bw.writeChecksum(hash256.digest);

    return bw;
  }

  /**
   * Calculate serialization size.
   * @returns {Number}
   */

  getSize() {
    return 82;
  }

  /**
   * Serialize the key.
   * @param {(Network|NetworkType)?} network
   * @returns {Buffer}
   */

  toRaw(network) {
    return this.toWriter(bio.write(82), network).render();
  }

  /**
   * Instantiate an HD public key from a base58 string.
   * @param {Base58String} xkey
   * @param {Network?} network
   * @returns {HDPublicKey}
   */

  static fromBase58(xkey, network) {
    return new this().fromBase58(xkey, network);
  }

  /**
   * Instantiate key from serialized data.
   * @param {BufferReader} br
   * @param {(Network|NetworkType)?} network
   * @returns {HDPublicKey}
   */

  static fromReader(br, network) {
    return new this().fromReader(br, network);
  }

  /**
   * Instantiate key from serialized data.
   * @param {Buffer} data
   * @param {(Network|NetworkType)?} network
   * @returns {HDPublicKey}
   */

  static fromRaw(data, network) {
    return new this().fromRaw(data, network);
  }

  /**
   * Test whether an object is a HDPublicKey.
   * @param {Object} obj
   * @returns {Boolean}
   */

  static isHDPublicKey(obj) {
    return obj instanceof HDPublicKey;
  }
}

/*
 * Expose
 */

module.exports = HDPublicKey;
}],
[/* 78 */ 'bpkg', '/lib/builtins/process.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * process.js - node process for javascript
 * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/bpkg
 *
 * Parts of this software are based on defunctzombie/node-process:
 *   Copyright (c) 2013, Roman Shtylman <shtylman@gmail.com>
 *   https://github.com/defunctzombie/node-process
 *
 * (The MIT License)
 *
 * Copyright (c) 2013 Roman Shtylman <shtylman@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/* global BigInt */
/* eslint no-var: "off" */

'use strict';

var process = exports;
var self = global;
var setTimeout = self.setTimeout;
var clearTimeout = self.clearTimeout;
var boot = Number(new Date());
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

/*
 * Helpers
 */

function _array() {
  return [];
}

function _boolean() {
  return false;
}

function _noop() {}

function _number() {
  return 0;
}

function _string() {
  return '';
}

function _this() {
  return this;
}

/*
 * Timers
 */

function cleanUpNextTick() {
  if (!draining || !currentQueue)
    return;

  draining = false;

  if (currentQueue.length > 0)
    queue = currentQueue.concat(queue);
  else
    queueIndex = -1;

  if (queue.length > 0)
    drainQueue();
}

function drainQueue() {
  if (draining)
    return;

  var timeout = setTimeout.call(self, cleanUpNextTick, 0);
  var len = queue.length;

  draining = true;

  while (len > 0) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue)
        currentQueue[queueIndex].run();
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;

  clearTimeout.call(self, timeout);
}

/*
 * Item
 */

function Item(func, array) {
  this.func = func;
  this.array = array;
}

Item.prototype.run = function() {
  this.func.apply(null, this.array);
};

/*
 * Process
 */

process.allowedNodeEnvironmentFlags =
  typeof Set === 'function' ? new Set() : undefined;
process.arch = 'javascript';
process.argv = ['/usr/bin/node'];
process.argv0 = 'node';
process.browser = true;
process.channel = undefined;
process.config = {};
process.connected = undefined;
process.debugPort = 9229;
process.env = { __proto__: null };
process.env.PATH = '/usr/bin';
process.env.HOME = '/';
process.execArgv = [];
process.execPath = '/usr/bin/node';
process.exitCode = undefined;
process.mainModule = null;
process.noDeprecation = false;
process.pid = 1;
process.platform = 'browser';
process.ppid = 1;
process.release = { name: 'browser' };
process.report = {};
process.stdin = null;
process.stdout = null;
process.stderr = null;
process.throwDeprecation = false;
process.title = 'browser';
process.traceDeprecation = false;
process.version = 'v0.0.0';
process.versions = { node: '0.0.0' };

/*
 * Events
 */

process._events = { __proto__: null };
process._eventsCount = 0;
process._maxListeners = 0;

process.addListener = _this;
process.emit = _boolean;
process.eventNames = _array;
process.getMaxListeners = _number;
process.listenerCount = _number;
process.listeners = _array;
process.off = _this;
process.on = _this;
process.once = _this;
process.prependListener = _this;
process.prependOnceListener = _this;
process.removeAllListeners = _this;
process.removeListener = _this;
process.setMaxListeners = _this;
process.rawListeners = _array;

/*
 * Methods
 */

process.abort = function() {
  throw new Error('Process aborted.');
};

process.binding = function(name) {
  throw new Error('process.binding is not supported.');
};

process.chdir = function(directory) {
  throw new Error('process.chdir is not supported.');
};

process.cpuUsage = function(previousValue) {
  return { user: 0, system: 0 };
};

process.cwd = function() {
  return '/';
};

process.dlopen = function(module, filename, flags) {
  throw new Error('process.dlopen is not supported.');
};

process.emitWarning = function(warning, options) {
  var text = 'Warning: ' + warning;

  if (console.warn)
    console.warn(text);
  else if (console.error)
    console.error(text);
  else
    console.log(text);
};

process.exit = function(code) {
  if (code == null)
    code = process.exitCode;

  code >>>= 0;

  throw new Error('Exit code: ' + code + '.');
};

process.getegid = _number;
process.geteuid = _number;
process.getgid = _number;
process.getgroups = _array;
process.getuid = _number;
process.hasUncaughtExceptionCaptureCallback = _boolean;

process.hrtime = function(time) {
  var now = Number(new Date()) - boot;
  var mod, sec, ms, ns;

  if (now < 0) {
    boot = Number(new Date());
    now = 0;
  }

  if (time) {
    sec = time[0];
    ns = time[1];
    ms = sec * 1000 + Math.floor(ns / 1000000);

    now -= ms;

    if (!isFinite(now))
      now = 0;

    if (now < 0)
      now = 0;
  }

  mod = now % 1000;
  sec = (now - mod) / 1000;
  ns = mod * 1000000;

  return [sec, ns];
};

process.hrtime.bigint = function() {
  if (typeof BigInt !== 'function')
    throw new Error('BigInt is unsupported.');

  var now = Number(new Date()) - boot;

  if (now < 0) {
    boot = Number(new Date());
    now = 0;
  }

  return BigInt(now) * BigInt(1000000);
};

process.initgroups = _noop;
process.kill = _noop;

process.memoryUsage = function() {
  return {
    rss: 0,
    heapTotal: 0,
    heapUsed: 0,
    external: 0
  };
};

process.nextTick = function(callback) {
  if (typeof callback !== 'function')
    throw new TypeError('Callback must be a function');

  var args = new Array(arguments.length - 1);
  var i;

  if (arguments.length > 1) {
    for (i = 1; i < arguments.length; i++)
      args[i - 1] = arguments[i];
  }

  queue.push(new Item(callback, args));

  if (queue.length === 1 && !draining)
    setTimeout.call(self, drainQueue, 0);
};

process.report.getReport = _string;
process.report.setOptions = _noop;
process.report.triggerReport = _string;

process.send = undefined;
process.setegid = _noop;
process.seteuid = _noop;
process.setgid = _noop;
process.setgroups = _noop;
process.setuid = _noop;
process.setUncaughtExceptionCaptureCallback = _noop;
process.umask = _number;

process.uptime = function() {
  var now = Number(new Date()) - boot;

  if (now < 0) {
    boot = Number(new Date());
    now = 0;
  }

  return now / 1000;
};
}],
[/* 79 */ 'bpkg', '/lib/builtins/buffer.js', function(exports, require, module, __filename, __dirname, __meta) {
/*!
 * buffer@5.2.1 - Node.js Buffer API, for the browser
 * Copyright (c) 2019, Feross Aboukhadijeh (MIT)
 * https://github.com/feross/buffer
 *
 * License for buffer@5.2.1:
 *
 * The MIT License (MIT)
 *
 * Copyright (c) Feross Aboukhadijeh, and other contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * License for base64-js@1.3.0:
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2014
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * License for ieee754@1.1.12:
 *
 * Copyright (c) 2008, Fair Oaks Labs, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

var __node_modules__ = [
[/* 0 */ 'buffer', '/index.js', function(exports, module, __filename, __dirname, __meta) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = __node_require__(1 /* 'base64-js' */)
var ieee754 = __node_require__(2 /* 'ieee754' */)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if ((obj != null && obj._isBuffer === true)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!(a != null && a._isBuffer === true) || !(b != null && b._isBuffer === true)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!(buf != null && buf._isBuffer === true)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if ((string != null && string._isBuffer === true)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!(b != null && b._isBuffer === true)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!(target != null && target._isBuffer === true)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if ((val != null && val._isBuffer === true)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)

  var first = this[offset]
  var last = this[offset + 7]

  var lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  var hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)

  var first = this[offset]
  var last = this[offset + 7]

  var hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  var lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)

  var first = this[offset]
  var last = this[offset + 7]

  var val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)

  var first = this[offset]
  var last = this[offset + 7]

  var val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!(buf != null && buf._isBuffer === true)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIntBI (buf, value, offset, ext, max, min) {
  if (!(buf != null && buf._isBuffer === true)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

function wrtBigUInt64LE (buf, value, offset, noAssert, min, max) {
  offset = offset >>> 0;
  if (!noAssert) checkIntBI(buf, value, offset, 8, max, min)
  var lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  var hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, noAssert, min, max) {
  offset = offset >>> 0;
  if (!noAssert) checkIntBI(buf, value, offset, 8, max, min)
  var lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  var hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset, noAssert) {
  return wrtBigUInt64LE(this, value, offset, noAssert, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset, noAssert) {
  return wrtBigUInt64BE(this, value, offset, noAssert, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset, noAssert) {
  return wrtBigUInt64LE(this, value, offset, noAssert, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset, noAssert) {
  return wrtBigUInt64BE(this, value, offset, noAssert, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!(target != null && target._isBuffer === true)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = (val != null && val._isBuffer === true)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}
}],
[/* 1 */ 'base64-js', '/index.js', function(exports, module, __filename, __dirname, __meta) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}
}],
[/* 2 */ 'ieee754', '/index.js', function(exports, module, __filename, __dirname, __meta) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}
}]
];

var __node_cache__ = [];

function __node_error__(location) {
  var err = new Error('Cannot find module \'' + location + '\'');
  err.code = 'MODULE_NOT_FOUND';
  throw err;
}

function __node_require__(id) {
  if ((id >>> 0) !== id || id > __node_modules__.length)
    return __node_error__(id);

  while (__node_cache__.length <= id)
    __node_cache__.push(null);

  var cache = __node_cache__[id];

  if (cache)
    return cache.exports;

  var mod = __node_modules__[id];
  var name = mod[0];
  var path = mod[1];
  var func = mod[2];
  var meta;

  var _exports = exports;
  var _module = module;

  if (id !== 0) {
    _exports = {};
    _module = {
      id: '/' + name + path,
      exports: _exports,
      parent: module.parent,
      filename: module.filename,
      loaded: false,
      children: module.children,
      paths: module.paths
    };
  }

  __node_cache__[id] = _module;

  try {
    func.call(_exports, _exports, _module,
              __filename, __dirname, meta);
  } catch (e) {
    __node_cache__[id] = null;
    throw e;
  }

  __node_modules__[id] = null;

  if (id !== 0)
    _module.loaded = true;

  return _module.exports;
}

__node_require__(0);
}]
];

var __browser_cache__ = [];

function __browser_error__(location) {
  var err = new Error('Cannot find module \'' + location + '\'');
  err.code = 'MODULE_NOT_FOUND';
  throw err;
}

function __fake_require__(location) {
  __browser_error__(location);
}

__fake_require__.cache = { __proto__: null };

__fake_require__.extensions = { __proto__: null };

__fake_require__.main = null;

__fake_require__.resolve = __browser_error__;

__fake_require__.resolve.paths = __browser_error__;

function __browser_require__(id, parent) {
  if ((id >>> 0) !== id || id > __browser_modules__.length)
    return __browser_error__(id);

  if (parent != null && !parent.children)
    return __browser_error__(id);

  while (__browser_cache__.length <= id)
    __browser_cache__.push(null);

  var cache = __browser_cache__[id];

  if (cache)
    return cache.exports;

  var mod = __browser_modules__[id];
  var name = mod[0];
  var path = mod[1];
  var func = mod[2];

  var filename = path;
  var dirname = filename.split('/').slice(0, -1).join('/') || '/';
  var meta;

  var _require = __fake_require__;
  var _exports = {};

  var _module = {
    id: '/' + name + path,
    exports: _exports,
    parent: parent,
    filename: filename,
    loaded: false,
    children: [],
    paths: ['/'],
    require: _require
  };

  if (parent)
    parent.children.push(_module);

  if (id === 0)
    _require.main = _module;

  if (id === 0)
    process.mainModule = _module;

  __browser_cache__[id] = _module;

  try {
    func.call(_exports, _exports, _require,
              _module, filename, dirname, meta);
  } catch (e) {
    __browser_cache__[id] = null;
    throw e;
  }

  __browser_modules__[id] = null;

  _module.loaded = true;

  return _module.exports;
}

process = __browser_require__(78, null);

Buffer = __browser_require__(79, null).Buffer;

var __browser_main__ = __browser_require__(0, null);
})(function() {
  if (typeof window !== 'undefined' && window.Math === Math)
    return window;

  if (typeof self !== 'undefined' && self.Math === Math)
    return self;

  return Function('return this')();
}());
